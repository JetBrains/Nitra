using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Text.RegularExpressions;
using System.Reflection;
using SCG = System.Collections.Generic;

namespace Nitra.Quote
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  macro ImportRules(params options : list[PExpr])
  {
    mutable assemblyName;
    mutable grammarName;
    mutable grammarAlias;
    foreach (opt in options)
    {
      | <[ Assembly = $(n : string) ]> => assemblyName = n
      | <[ Assembly = $x ]>            => Message.FatalError(x.Location, "Assembly name expected");
      | <[ Grammar  = $(n : string) ]> => grammarName = n
      | <[ Grammar  = $x ]>            => Message.FatalError(x.Location, "Grammar name expected");
      | <[ GrammarAlias = $(n : string) ]> => grammarAlias = n
      | <[ GrammarAlias = $x ]>            => Message.FatalError(x.Location, "Grammar alias expected");
      | x => Message.FatalError(x.Location, "Expected 'Assembly', 'Grammar' or 'GrammarAlias' options");
    }
    when (string.IsNullOrEmpty(grammarName))
      Message.FatalError("Grammar name not specified");

    QuotationImpl.Registry.AddRules(assemblyName, grammarName, grammarAlias);
  }

  macro Quotation(expr : PExpr) : PExpr
    syntax ("quote", expr)
  {
    match (expr)
    {
      | <[ $(_ : string) ]>                      => QuotationImpl.MakeQuote(Macros.ImplicitCTX(), expr)
      | <[ match ($astExpr) { ..$matchCases } ]> => QuotationImpl.MakeMatch(Macros.ImplicitCTX(), astExpr, matchCases)
      | _                                        => Message.FatalError("Expected recursive string or match expression")
    }
  }

  module QuotationImpl
  {
    public MakeQuote(typer : Typer, expr : PExpr) : PExpr
    {
      def (parseResult, offset) = ParseQuotation(expr);
      def builder = QuotationCodeAstBuilder(typer.Manager, typer.Env, offset, () => <[ $("context" : dyn) ]>);
      <[
        def $("context" : dyn) = Nitra.Runtime.ChemicalAstContext();
        $(parseResult.CreateSplicableAst.[PExpr](builder));
      ]>
    }

    public MakeMatch(typer : Typer, astExpr : PExpr, matchCases : list[MatchCase]) : PExpr
    {
      def convertPattern(pattern : PExpr) : PExpr
      {
        | <[ $p with $withExpr ]> => Util.locate(pattern.Location, <[ $(convertPattern(p)) with $withExpr ]>)
        | <[ $p when $whenExpr ]> => Util.locate(pattern.Location, <[ $(convertPattern(p)) when $whenExpr ]>)
        | <[ $p as   $asExpr ]>   => Util.locate(pattern.Location, <[ $(convertPattern(p)) as   $asExpr ]>)
        | <[ (..$ps) ]>           => Util.locate(pattern.Location, <[ (..$(ps.Map(convertPattern))) ]>)
        | <[ $x(..$ps) ]>         => Util.locate(pattern.Location, <[ $x(..$(ps.Map(convertPattern))) ]>)
        | <[ $x = $p ]>           => Util.locate(pattern.Location, <[ $x = $(convertPattern(p)) ]>)
        | <[ $(_ : string) ]>     =>
          def (parseResult, offset) = ParseQuotation(pattern);
          def builder = QuotationPatternAstBuilder(typer.Manager, typer.Env, offset);
          parseResult.CreateSplicableAst.[PExpr](builder)

        | _ => pattern
      }

      def convertMatchCase(matchCase : MatchCase) : MatchCase
      {
        def newPatterns = matchCase.patterns.Map(convertPattern);
        Util.locate(matchCase.Location, <[ case: | ..$newPatterns => $(matchCase.body) ]>)
      }

      def newMatchCases = matchCases.Map(convertMatchCase);
      <[ match ($astExpr) { ..$newMatchCases } ]>
    }

    private ParseQuotation(expr : PExpr) : ParseResult * TextPoint
    {
      | Literal(Literal.String(RawString = rawString)) when rawString.StartsWith("<#") =>
        def result = QuotationLiteralRegex.Match(rawString);
        if (result.Success)
        {
          def grammarAliasGroup = result.Groups["grammarAlias"];
          def grammarAlias = if (grammarAliasGroup.Success) grammarAliasGroup.Value else null;

          def ruleNameGroup = result.Groups["ruleName"];
          assert2(ruleNameGroup.Success);
          def ruleName = ruleNameGroup.Value;

          def codeGroup = result.Groups["code"];
          assert2(codeGroup.Success);

          def parseCallback = Registry.GetParser(grammarAlias, ruleName);

          def originalSource = SourceSnapshot(rawString, expr.Location.FileIndex, Location.GetFileName(expr.Location.FileIndex));
          def sourceToParse  = originalSource.WithTextSubstring(codeGroup.Index, codeGroup.Length); // cut string braces and spaces <#id: #>
          def offset         = expr.Location.Begin;
          def parseResult    = parseCallback(sourceToParse);
          unless (parseResult.IsSuccess)
          {
            foreach (e in parseResult.GetErrors())
            {
              def begin = QuotationUtils.TranslateLineColumn(offset, e.Location.StartLineColumn);
              def end   = QuotationUtils.TranslateLineColumn(offset, e.Location.EndLineColumn);
              Message.Error(Nemerle.Compiler.Location(e.Location.Source.FileIndex, begin, end), e.Message);
            }
          }
          (parseResult, offset)
        }
        else
          Message.FatalError(expr.Location, "String is not valid quotation");

      | _ => Message.FatalError(expr.Location, "Recursive string literal <#rule:...#> expected");
    }

    public Registry : RuleRegistry
    {
      mutable key : object = object();
      get
      {
        if (ManagerClass.Instance.UserData.Contains(key))
          ManagerClass.Instance.UserData[key] :> RuleRegistry
        else
        {
          def registry = RuleRegistry(ManagerClass.Instance.ReferencedAssemblies.Map(_.Assembly));
          ManagerClass.Instance.UserData.Add(key, registry);
          registry
        }
      }
    }

    private QuotationLiteralRegex : Regex = Regex(@"^<#\s*((?<grammarAlias>.*?)\s*::\s*)?(?<ruleName>.*?)\s*:\s*(?<code>.*?)\s*#>$", RegexOptions.Singleline);
  }
}
