using Nitra.Runtime;
using Nitra.Internal;


using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Util;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Quote
{
  using QuotationUtils;

  [Record]
  public sealed class QuotationCodeAstBuilder : ISplicableAstBuilder[PExpr]
  {
    private _manager    : ManagerClass;
    private _env        : GlobalEnv;
    private _offset     : TextPoint;
    private _contextRef : void -> PExpr;

    public List(parseResult : ParseResult, startPos : int, endPos : int, items : SCG.List[PExpr]) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        if (items != null)
          <[ [..$items] ]>
        else
          <[ [] ]>
    }

    public OptimizedList(parseResult : ParseResult, startPos : int, endPos : int, count : int) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ $(count : int) ]>
    }

    public OptimizedOption(parseResult : ParseResult, startPos : int, endPos : int, value : bool) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ $(value : bool) ]>
    }

    public OptionNone(parseResult : ParseResult, startPos : int, endPos : int) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ None() ]>
    }

    public OptionSome(parseResult : ParseResult, startPos : int, endPos : int, item : PExpr) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ Some($item) ]>
    }

    public Tuple(parseResult : ParseResult, startPos : int, endPos : int, item1 : PExpr, item2 : PExpr) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ ($item1, $item2) ]>
    }

    public Tuple(parseResult : ParseResult, startPos : int, endPos : int, item1 : PExpr, item2 : PExpr, item3 : PExpr) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ ($item1, $item2, $item3) ]>
    }

    public Tuple(parseResult : ParseResult, startPos : int, endPos : int, item1 : PExpr, item2 : PExpr, item3 : PExpr, item4 : PExpr) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ ($item1, $item2, $item3, $item4) ]>
    }

    public Tuple(parseResult : ParseResult, startPos : int, endPos : int, params items : array[PExpr]) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ (..$items) ]>
    }

    public Splice(parseResult : ParseResult, grammarDescriptor : GrammarDescriptor, startPos : int, endPos : int) : PExpr
    {
      def loc          = MakeLocation(_offset, parseResult, startPos, endPos);
      def text         = GetText(parseResult, startPos, endPos);
      def astNamespace = GetAstNamespace(grammarDescriptor);
      def env          = _env.AddOpenNamespace(NString.SplitToList(astNamespace, array['.']), loc);
      _manager.MacroColors.InGlobalColor(() => MainParser.ParseExpr(env, text, loc, true)) ?? <[ () ]>
    }

    public SkipAny(parseResult : ParseResult, startPos : int, endPos : int) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ $(GetText(parseResult, startPos, endPos) : string) ]>
    }

    public RegularRule(parseResult : ParseResult, ruleDescriptor : RegularRuleDescriptor, startPos : int, endPos : int) : PExpr
    {
      _ = ruleDescriptor;
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ $(GetText(parseResult, startPos, endPos) : string) ]>
    }

    public SyntaxRule(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, startPos : int, endPos : int, member1 : SplicableAstMember[PExpr]) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ $(GetAstTypeRef(_manager, ruleDescriptor)).Create($(_contextRef()), $(member1.Value)) ]>
    }

    public SyntaxRule(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, startPos : int, endPos : int, member1 : SplicableAstMember[PExpr], member2 : SplicableAstMember[PExpr]) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ $(GetAstTypeRef(_manager, ruleDescriptor)).Create($(_contextRef()), $(member1.Value), $(member2.Value)) ]>
    }

    public SyntaxRule(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, startPos : int, endPos : int, member1 : SplicableAstMember[PExpr], member2 : SplicableAstMember[PExpr], member3 : SplicableAstMember[PExpr]) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ $(GetAstTypeRef(_manager, ruleDescriptor)).Create($(_contextRef()), $(member1.Value), $(member2.Value), $(member3.Value)) ]>
    }

    public SyntaxRule(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, startPos : int, endPos : int, member1 : SplicableAstMember[PExpr], member2 : SplicableAstMember[PExpr], member3 : SplicableAstMember[PExpr], member4 : SplicableAstMember[PExpr]) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ $(GetAstTypeRef(_manager, ruleDescriptor)).Create($(_contextRef()), $(member1.Value), $(member2.Value), $(member3.Value), $(member4.Value)) ]>
    }

    public SyntaxRule(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, startPos : int, endPos : int, params members : array[SplicableAstMember[PExpr]]) : PExpr
    {
      locate (MakeLocation(_offset, parseResult, startPos, endPos))
        <[ $(GetAstTypeRef(_manager, ruleDescriptor)).Create($(_contextRef()), ..$(members.MapToList(_.Value))) ]>
    }

    public CreateAmbiguous(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, prefixStartPos : int, pos : int, ambiguitys : array[ExtensionRuleParser * PExpr]) : PExpr
    {
      ResolveAmbiguity(MakeLocation(_offset, parseResult, prefixStartPos, pos), ruleDescriptor, ambiguitys)
    }

    public CreateMissing(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, pos : int) : PExpr
    {
      Message.FatalError(MakeLocation(_offset, parseResult, pos, pos), $"Missing '$(ruleDescriptor.Name)' ast not supported");
    }

    public CreatePostfix(prefix : PExpr, prefixStartPos : int, pos : ref int, astPtr : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult) : PExpr
    {
      def walker = GetPostfixWalker(_manager, ruleParser.Descriptor);
      walker(prefix, prefixStartPos, ref pos, astPtr, ruleParser, parseResult, this)
    }

    public CreatePrefix(pos : ref int, astPtr : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult) : PExpr
    {
      def walker = GetPrefixWalker(_manager, ruleParser.Descriptor);
      walker(ref pos, astPtr, ruleParser, parseResult, this)
    }
  }
}
