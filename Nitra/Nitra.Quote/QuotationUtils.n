using Nitra.Runtime;
using Nitra.Internal;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Quote
{
  internal module QuotationUtils
  {
    public GetAstNamespace(grammarDescriptor : GrammarDescriptor) : string
    {
      grammarDescriptor.FullName + "Ast"
    }

    public GetAstTypeRef(manager : ManagerClass, ruleDescriptor : RuleDescriptor) : PExpr
    {
      def astNamespace = GetAstNamespace(ruleDescriptor.Grammar);
      def astFullName  = astNamespace + "." + ruleDescriptor.Name;
      PExpr.FromQualifiedIdentifier(manager, astFullName);
    }

    public ResolveAmbiguity(location : Nemerle.Compiler.Location, ruleDescriptor : RuleDescriptor, ambiguitys : array[ExtensionRuleParser * PExpr]) : PExpr
    {
      foreach ((parser, code) when parser.Descriptor.Name.EndsWith("$") in ambiguitys)
        return code;
      Message.FatalError(location, $"Ambiguous '$(ruleDescriptor.Name)' ast not supported");
    }

    public delegate PostfixWalker(prefix : PExpr, prefixStartPos : int, pos : ref int, astPtr : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult, builder : ISplicableAstBuilder[PExpr]) : PExpr;

    public GetPostfixWalker(manager : ManagerClass, ruleDescriptor : RuleDescriptor) : PostfixWalker { GetCachedWalker(manager, ruleDescriptor) }

    public delegate PrefixWalker(pos : ref int, astPtr : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult, builder : ISplicableAstBuilder[PExpr]) : PExpr;

    public GetPrefixWalker(manager : ManagerClass, ruleDescriptor : RuleDescriptor) : PrefixWalker { GetCachedWalker(manager, ruleDescriptor) }

    private GetCachedWalker[TDelegate](manager : ManagerClass, ruleDescriptor : RuleDescriptor) : TDelegate
    {
      def cacheKey = typeof(TDelegate);
      def cache = match (manager.UserData[cacheKey])
      {
        | currentCache is SCG.Dictionary.[RuleDescriptor, TDelegate] => currentCache
        | _ => 
          def newCache = SCG.Dictionary();
          manager.UserData[cacheKey] = newCache;
          newCache
      }

      mutable result;
      unless (cache.TryGetValue(ruleDescriptor, out result))
      {
        result = GetWalker.[TDelegate](ruleDescriptor);
        cache.Add(ruleDescriptor, result);
      }
      result
    }

    private GetWalker[TDelegate](ruleDescriptor : RuleDescriptor) : TDelegate
    {
      def grammarAssembly = ruleDescriptor.Grammar.GetType().Assembly;
      def walkerType      = grammarAssembly.GetType(ruleDescriptor.Grammar.FullName + "AstWalker", throwOnError = true);
      def walkMethod      = walkerType.GetMethod(ruleDescriptor.Name.Replace('.', '_')).MakeGenericMethod(typeof(PExpr));
      Delegate.CreateDelegate(typeof(TDelegate), walkMethod) :> TDelegate
    }

    public GetText(parseResult : ParseResult, startPos : int, endPos : int) : string
    {
      parseResult.OriginalSource.Text.Substring(startPos, endPos - startPos);
    }

    public MakeLocation(offset : TextPoint, parseResult : ParseResult, startPos : int, endPos : int) : Nemerle.Compiler.Location
    {
      def source                = parseResult.OriginalSource;
      def (startLine, startCol) = TranslateLineColumn(offset, source.PositionToLineColumn(startPos));
      def (endLine, endCol)     = TranslateLineColumn(offset, source.PositionToLineColumn(endPos));
      Nemerle.Compiler.Location(source.FileIndex, startLine, startCol, endLine, endCol)
    }

    public TranslateLineColumn(offset : TextPoint, point : LineColumn) : TextPoint
    {
      if (point.Line == 1)
        TextPoint(offset.Line, offset.Column + point.Column - 1)
      else
        TextPoint(offset.Line + point.Line - 1, point.Column)
    }
  }
}
