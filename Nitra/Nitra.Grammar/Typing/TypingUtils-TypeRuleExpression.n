using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxAst;

namespace Nitra.Grammar
{
  internal partial module TypingUtils
  {
    private static KeywordSpanClassSymbolName : Location = { def name = "Keyword"; Location(SingleLineSourceSnapshot(name), 0, name.Length); };

    public TypeRuleExpression(options : RuleDefinitionOptions, context : Context, rule : Rule) : Rule.Sequence
    {
      mutable keywordSpanClassSymbol;
      mutable isKeywordSpanClassSymbolBind;
      def getKeywordSpanClass(loc : Location) : SpanClassSymbol
      {
        when (keywordSpanClassSymbol == null)
        unless (isKeywordSpanClassSymbolBind)
        {
          def result = context.BindMany.[SpanClassSymbol](KeywordSpanClassSymbolName);
          match (result.Candidates)
          {
            | first :: _ => keywordSpanClassSymbol = first;
            | []         => ProjectSystem.NitraProject.CurrentProject.Error(loc, $<#Span class '$(KeywordSpanClassSymbolName.GetText())' not found in current context.#>, -1);
          }
        }
        keywordSpanClassSymbol
      }

      def insertWhitespaceRules() : List[Rule]
      {
        def keywordContext = context.TryGetContext.[KeywordRegexContext]();
        def moduleContext  = context.GetContext.[SyntaxModuleBodyContext]();
        def makeCall(loc, sSymbol) { Rule.Call(loc, sSymbol.Type, sSymbol.Name, RuleRef.Some(loc, true, sSymbol), 0); }
        def getSpaceRule(loc) { moduleContext.GetSpaceRule(context, "s", loc) }
        def tryAddSpaceRule(rule, loc)
        {
          match (getSpaceRule(loc))
          {
            | None          => (rule, None())
            | Some(sSymbol) => (rule, Some(makeCall(loc, sSymbol)))
          }
        }
        def transform(_ : Rule) : Rule * option[Rule]
        {
          | Repeat              as rule when rule.IsSkipAnyPattern => tryAddSpaceRule(rule, rule.Location.FromEnd())
          | Repeat              as rule => (Rule.Repeat(rule, rule.MinCount, rule.MaxCount, transformToSequence(rule.Rule)), None())
          | RepeatWithSeparator as rule => (Rule.RepeatWithSeparator(rule, rule.MinCount, rule.MaxCount, transformToSequence(rule.Rule), transformToSequence(rule.Separator), rule.HangingSeparator), None())
          | Not                 as rule => (Rule.Not(rule, transformToSequence(rule.Rule)), None())
          | And                 as rule => (Rule.And(rule, transformToSequence(rule.Rule)), None())
          | Sequence            as rule => 
            def buffer = List();
            foreach (r in rule.Rules)
              transformToBuffer(r, buffer);
            (Rule.Sequence(rule, buffer.ToNList()), None())

          | String              as rule =>
            def loc = rule.Location.FromEnd();
            if (keywordContext?.FindRule(rule.Str) is VSome(sym))
              (Rule.String(rule.Location, rule.FieldName, rule.Str, true, rule.SpanClass ?? getKeywordSpanClass(loc)), Some(makeCall(loc, sym)))
            else
              tryAddSpaceRule(rule, loc)

          | Call                as rule =>
            def calleeOptions =
              if (rule.RuleRef is RuleRef.Some(RuleDefSymbol as ruleSymbol))
                ruleSymbol.Options
              else
                RuleDefinitionOptions();

            // Whitespace rule is NOT inserted after 'syntax' rules marked with 'SuppressTrailingSpaces' attribute
            if (calleeOptions.IsSuppressTrailingSpaces)
              (rule, None())
            // Whitespace rule is inserted after 'syntax' rules marked with 'ExplicitSpaces' attribute
            else if (calleeOptions.IsExplicitSpaces)
              tryAddSpaceRule(rule, rule.Location.FromEnd())
            // Whitespace rule is inserted after all 'regex' rules
            else if (rule.RuleRef is RuleRef.Some(RegularRuleSymbol as ruleSymbol))
            {
              def loc = rule.Location.FromEnd();
              if (keywordContext?.FindRule(ruleSymbol) is VSome(sym))
                (Rule.Call(rule.Location, rule.Type, rule.FieldName, rule.RuleRef, rule.BindingPower, rule.SpanClass ?? getKeywordSpanClass(loc)), Some(makeCall(loc, sym)))
              else
                tryAddSpaceRule(rule, loc);
            }
            else
              (rule, None());
        }
        and transformToSequence(rule : Rule) : Rule
        {
          match (transform(rule))
          {
            | (rule, Some(s)) => Rule.Sequence(rule, [rule, s])
            | (rule, None)    => rule
          }
        }
        and transformToBuffer(rule : Rule, buffer : List[Rule]) : void
        {
          match (transform(rule))
          {
            | (rule, Some(s)) => buffer.Add(rule); buffer.Add(s);
            | (rule, None)    => buffer.Add(rule);
          }
        }

        def buffer = List();
        when (options.IsStart)
        {
          def loc = rule.Location.FromStart();
          when (getSpaceRule(loc) is Some(sSymbol))
            buffer.Add(makeCall(loc, sSymbol));
        }
        match (rule)
        {
          | Sequence(rules) => foreach (r in rules) transformToBuffer(r, buffer);
          | _               => transformToBuffer(rule, buffer);
        }
        buffer
      }

      def createUniqueFieldNames(rules : IEnumerable[Rule]) : list[Rule]
      {
        def fieldNameUniqueness = Dictionary();
        def plainAstFields = List();
        foreach (rule in rules)
        {
          def fieldName =
            if (!string.IsNullOrEmpty(rule.FieldName))
              Utils.ToPascalCase(rule.FieldName)
            else if (rule.Type is RuleType.Void)
              "_"
            else
              "Node";
          plainAstFields.Add(fieldName, rule);
          fieldNameUniqueness[fieldName] = !fieldNameUniqueness.ContainsKey(fieldName);
        }
        def fieldNameCounters = Dictionary();
        def finalRules = List();
        foreach ((fieldName, fieldRule) in plainAstFields)
        {
          def indexedFieldName =
            if (fieldNameUniqueness[fieldName])
              fieldName
            else
            {
              mutable counter;
              _ = fieldNameCounters.TryGetValue(fieldName, out counter);
              counter += 1;
              fieldNameCounters[fieldName] = counter;
              if (char.IsDigit(fieldName, fieldName.Length - 1))
                fieldName + "_" + counter.ToString()
              else
                fieldName + counter.ToString()
            }
          finalRules.Add(fieldRule.UpdateFieldName(indexedFieldName));
        }
        finalRules.ToNList();
      }

      def rules =
        if (options.IsExplicitSpaces)
          match (rule)
          {
            | Sequence(rules) => rules
            | _               => [rule]
          }
        else
          insertWhitespaceRules();

      Rule.Sequence(rule.Location, rule.Type, "", createUniqueFieldNames(rules))
    }
  }
}
