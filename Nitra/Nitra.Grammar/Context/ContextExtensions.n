using Nitra.ProjectSystem;
using Nitra.Runtime;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public module ContextExtensions
  {
    public GetProject(this context : Context) : NitraProject
    {
      | c is RootContext => c.Project
      | null => assert(false)
      | _ => context.Parent.GetProject()
    }

    public TryGetContext[T](this context : Context) : T
      where T: IContext, class
    {
      match (context)
      {
        | null   => null
        | c is T => c
        | c      => TryGetContext.[T](c.Parent)
      }
    }

    public TryGetParent[T](this context : Context) : T
      where T: IContext, class
    {
      TryGetContext.[T](context.Parent)
    }

    public GetContext[T](this context : Context) : T
      where T: IContext, class
    {
      match (context)
      {
        | null   => assert3(false)
        | c is T => c
        | c      => GetContext.[T](c.Parent)
      }
    }

    public GetParent[T](this context : Context) : T
      where T: IContext, class
    {
      GetContext(context.Parent)
    }
  }
}
