using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public abstract class EnteredScopeContext : Context
  {
    public ParentScope      : EnteredScopeContext                     { get; }
    public OpenedNamespaces : list[Symbol]                            { get; }
    public AliasMap         : Map[string, NamespaceOrTypeAliasSymbol] { get; }

    public this(parent : Context)
    {
      base(parent);
      ParentScope = TryGetParent();

      def lookupSymbols(context, openedNamespaces, aliasMap : Map[string, NamespaceOrTypeAliasSymbol])
      {
        match(context)
        {
          | null
          | EnteredScopeContext => (openedNamespaces, aliasMap)
          | OpenNamespaceOrTypeContext(OpenSymbol = Some(symbol)) =>
            lookupSymbols(context.Parent, symbol :: openedNamespaces, aliasMap)

          | NamespaceOrTypeAliasContext(Alias = NamespaceOrTypeAliasSymbol as aliasSymbol) =>
            when (aliasMap.Find(aliasSymbol.Name) is Some(previousDefinition))
              using (rootMsg = Project.RootError(aliasSymbol.FirstLocation, $"Redifinition of alias $(aliasSymbol.Name)."))
                rootMsg.Error(previousDefinition.FirstLocation, "previous definition");
            lookupSymbols(context.Parent, openedNamespaces, aliasMap.Replace(aliasSymbol.Name, aliasSymbol))

          | _ => lookupSymbols(context.Parent, openedNamespaces, aliasMap)
        }
      }
      (OpenedNamespaces, AliasMap) = lookupSymbols(Parent, [], Map());
    }

    public abstract CurrentSymbols : list[Symbol] { get; }

    public sealed override BindMany[T](path : list[Location]) : BindingResult[T]
    {
      | []               => assert(false, "Path is empty")
      | name :: nameTail => BindManyImpl(name, nameTail)
    }

    public sealed override BindMany[T](name : Location) : BindingResult[T]
    {
      BindManyImpl(name, [])
    }

    BindByEnteredSymbol(name : Location) : list[Symbol]
    {
      // пробуем сбиндиться по AliasMap
      // пробуем сбиндиться по ParentScope
      // если успешен только один, возвращем его
      // если оба успешны, сообщаем об ошибке и возвращаем алиас
      // если оба обломались и парнт == корень, то возвращем None()
      // если оба обломались делаем рекурсивный вызов у ParentScope
      def bindByAliasMap(name : Location) : option[NamespaceOrTypeAliasSymbol]
      {
        AliasMap.Find(name.GetText()) //TODO: сделать Find по подстроке
      }
      def bindByCurrentSymbols(name : Location, symbols : list[Symbol]) : list[Symbol] * list[Symbol]
      {
        match (symbols)
        {
          | first :: tail => (first.Node.BindMany(name), tail)
          | [] => ([], [])
        }
      }
      match (bindByAliasMap(name), bindByCurrentSymbols(name, CurrentSymbols))
      {
        | (Some(aliasSymbol), (                [],           _)) => [aliasSymbol]
        | (Some(aliasSymbol), ((_ :: _) as result,           _)) => aliasSymbol :: result
        | (             None, ((_ :: _) as result,           _)) => result
        | (             None, (                [], tailSymbols)) =>
          def loop(_)
          {
            | [] when ParentScope : object == null => []
            | [] => ParentScope.BindByEnteredSymbol(name)
            | symbol :: other =>
              match (symbol.Node.BindMany(name))
              {
                | [] => loop(other)
                | result => result
              }
          }
          loop(tailSymbols)
      }
    }

    BindByOpenedNamespace(name : Location) : list[Symbol]
    {
      mutable result =
        if (ParentScope != null)
          ParentScope.BindByOpenedNamespace(name)
        else
          GetContext.[RootContext]().Namespace.Node.BindMany(name);
      foreach (ns in OpenedNamespaces)
        match (ns.Node.BindMany(name))
        {
          | []    => ()
          | [one] => result = one :: result
          | many  => result = many + result
        }
      result
    }

    static BindPathTail[T](symbol : Symbol, tail : list[Location], buffer : ref LightList[T]) : void
      where T: Symbol
    {
      match (symbol)
      {
        | NamespaceOrTypeAliasSymbol(RealSymbol = realSymbol) =>
          when (realSymbol is Some(x))
            BindPathTail(x, tail, ref buffer);

        | AmbiguousSymbol(AmbiguousList = ambiguities) =>
          foreach(x in ambiguities)
            BindPathTail(x, tail, ref buffer);

        | _ =>
          match (tail)
          {
            | [] =>
              when (symbol is T)
                buffer.Add(symbol :> T);

            | name :: nameTail =>
              foreach (x in symbol.Node.BindMany(name))
                BindPathTail(x, nameTail, ref buffer);
          }
      }
    }

    BindManyImpl[T](name : Location, nameTail : list[Location]) : BindingResult[T]
      where T: Symbol
    {
      def bindManyTails(symbols : list[Symbol], tail : list[Location]) : list[T]
      {
        mutable buffer;
        foreach (x in symbols)
          BindPathTail(x, tail, ref buffer);
        buffer.ToNList()
      }

      def bindByOpenedNamespace(loc, name, nameTail) : BindingResult[T]
      {
        match (BindByOpenedNamespace(name))
        {
          | []      => BindingUtils.UnboundBindingResult(loc)
          | symbols => BindingUtils.MakeBindingResult(loc, bindManyTails(symbols, nameTail))
        }
      }

      def loc = if (nameTail.IsEmpty) name else nameTail.Last;
      match (BindByEnteredSymbol(name))
      {
        | []      => bindByOpenedNamespace(loc, name, nameTail)
        | symbols =>
          match (bindManyTails(symbols, nameTail))
          {
            | []     => 
              def path = name :: nameTail;
              when (this.Parent == null)
                return bindByOpenedNamespace(loc, name, nameTail);

              def result = this.Parent.BindMany.[T](path);
              if (result.Candidates.IsEmpty)
                bindByOpenedNamespace(loc, name, nameTail)
              else
                result
              
            | result => BindingUtils.MakeBindingResult(loc, result)
          }
      }
    }
  }
}
