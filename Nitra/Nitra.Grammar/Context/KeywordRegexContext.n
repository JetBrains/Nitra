using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  public class KeywordRegexContext : Context
  {
    public KeywordRegexes : list[G.RegexExpression * RuleDefSymbol] { get; }

    public this(parent : Context, matchTokens : G.RegexExpression, ruleName : G.QualifiedIdentifier)
    {
      base(parent);
      def rule = parent.Bind(ruleName);
      def parent     = TryGetParent.[KeywordRegexContext]();
      when (rule is Some(ruleSymbol))
        KeywordRegexes = (matchTokens, ruleSymbol) :: (parent?.KeywordRegexes ?? []);
    }

    public Matchers : list[RegularRuleMatcher * RuleDefSymbol] { [Memoize] get { KeywordRegexes.Map((re, rule) => (re.Typing().MakeMatcher(), rule)) } }

    public FindRule(keyword : string) : ValueOption[RuleDefSymbol]
    {
      foreach ((matcher, rule) in Matchers)
        when (matcher(keyword))
          return VSome(rule);

      VNone()
    }

    private _findRuleCache : Dictionary[RegularRuleSymbol, ValueOption[RuleDefSymbol]] = Dictionary();

    public FindRule(ruleSymbol : RegularRuleSymbol) : ValueOption[RuleDefSymbol]
    {
      def find(_ : RegularRule) : ValueOption[RuleDefSymbol]
      {
        | Call(SymbolRef.Some(callee)) => FindRule(callee)
        | Chars(StringOpt = Some(str)) => FindRule(str)
        | Choice(first :: rules) =>
          match (find(first))
          {
            | VNone         => VNone()
            | VSome(symbol) =>
              def loop(_)
              {
                | []         => VSome(symbol)
                | r :: rules =>
                  match (find(r))
                  {
                    | VSome(otherSymbol) when otherSymbol == symbol => loop(rules)
                    | _ => VNone()
                  }
              }
              loop(rules)
          }

        | _ => VNone()
      }

      mutable result;
      unless (_findRuleCache.TryGetValue(ruleSymbol, out result))
      {
        _findRuleCache[ruleSymbol] = VNone(); // prevent unbound recursion
        result = find(ruleSymbol.Rule);
        when (result.IsSome) // VNone value is already set
          _findRuleCache[ruleSymbol] = result;
      }
      result
    }
  }
}
