using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public class EnteredNamespaceContext : EnteredScopeContext, INemerleEnvironmentContext
  {
    public Entered   : list[NamespaceSymbol] { get; }

    public this(parent : Context, currentNode : NamespaceSymbol)
    {
      base(parent);

      Namespace = currentNode;

      def getEnteredNss(currentNode : NamespaceSymbol, acc : list[NamespaceSymbol]) : list[NamespaceSymbol]
      {
        def parentNode = currentNode.Node.Parent;

        if (parentNode == null)
          currentNode :: acc
        else match (currentNode.Node.Parent.GetSymbol.[NamespaceSymbol]())
        {
          | [ns] => getEnteredNss(ns, currentNode :: acc)
          | _ => assert3(false)
        }
      }

      Entered = getEnteredNss(currentNode, []);
    }

    public virtual Namespace : NamespaceSymbol { get; }

    public override CurrentSymbols : list[Symbol] { get { Entered.Map(x => x) } }

    [Memoize]
    GetNemerleEnvironment() : GlobalEnv implements INemerleEnvironmentContext.GetNemerleEnvironment
    {
      def parentEnv = Parent.GetNemerleEnvironment();
      parentEnv.Manager.CoreEnv.EnterIntoNamespace(Namespace.Node.FullNameParts)
    }

    public override ToString() : string
    {
      $<#namespace ..$(Entered; ".")#>
    }
  }
}
