using Nitra.Model;
using Nitra.Typing.RuleMethod;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class NitraFieldSymbol : SingleDefSymbol
  {
    public abstract Type         : NType          { get; }
    public abstract TypeLocation : Location       { get; }
    public abstract HasBody      : bool           { get; }
    public virtual  Body         : RuleMethodBody { get { throw NotSupportedException() } } // implementation for external symbol
    public override Description  : string         { get "field" }
  }

  public sealed class ParsedNitraFieldSymbol : NitraFieldSymbol
  {
    private _ast : G.NitraField.Ast;

    public this(ast : G.NitraField.Ast)
    {
      base(ast.Name, ast.Name.Value());
      _ast = ast;
    }

    public override Type         : NType          { get { _ast.Type } }
    public override TypeLocation : Location       { get { _ast.NitraType.Location } }
    public override HasBody      : bool           { get { !_ast.RuleMethodBody.IsEmpty() } }
    public override Body         : RuleMethodBody { get { _ast.Body } }
  }
}
