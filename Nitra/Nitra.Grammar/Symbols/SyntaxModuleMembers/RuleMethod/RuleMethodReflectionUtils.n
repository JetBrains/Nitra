using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Imperative;
using Nemerle.Utility;

using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing.RuleMethod
{
  internal module RuleMethodReflectionUtils
  {
    public ReflectProperties(project : NitraProject, symbol : RuleMethodSymbol) : RuleMethodSignature * bool
    {
      def makeFakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location
      {
        def source = SourceSnapshot("", "", location.FileIndex, location.File, array(0), 0);
        def tok = NSpan(0, 0);
        Nitra.Location(source, tok)
      }

      match (project.GetAstType(symbol.DeclaringRule))
      {
        | FixedType.Class(ti, []) =>
          mutable signature;
          mutable isCached;
          foreach (method is IMethod in ti.LookupMember(symbol.Name, false))
          {
            def loc        = makeFakeNitraLocation(method.NameLocation);
            def parameters = method.Header.ParametersDeclarations;
            def type       = <[ $(method.ReturnType : typed) ]>;
            signature      = RuleMethodSignature(loc, parameters, type);

            foreach(attr in method.GetModifiers().GetCustomAttributes())
            {
              | <[ Nitra.Runtime.RuleMethodAttribute($(isCachedValue : bool)) ]> =>
                isCached = isCachedValue;
                break;

              | _ => ()
            }

            break;
          }
          (signature, isCached)

        | _ => assert3(false)
      }
    }
  }
}
