using Nitra.Model;
using Nitra.Typing.RuleMethod;

using Nemerle;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtensibleRuleSymbol : SyntaxRuleSymbol, IRuleDeclarationSite
  {
    public sealed override Type          : RuleType                        { [Memoize] get { RuleType.Ref(this) } }
    public sealed override Rule          : Rule.Sequence                   { get { assert3(false) } }
    public        abstract SplicableType : SplicableRuleType               { get; }
    public        override Description   : string                          { get "extensible rule" }
    public        abstract SpliceSource  : SymbolRef[ExtensibleRuleSymbol] { get; }

    public variant SplicableRuleType
    {
      | None
      | Splice       { Type       : RuleType }
      | OptionSplice { OptionType : RuleType }
      | LoopSplice   { LoopType   : RuleType }
    }
  }

  [Record, ChemicalSymbol]
  public abstract class BaseExtensibleRuleSymbol : ExtensibleRuleSymbol
  {
    public override IdInGrammar         : int  { [Memoize] get { DeclaringModule.GetNewRuleId() } }
    public override CanParseEmptyString : bool { get { false } }
    public override FirstCharLowerBound : char { get char.MinValue }
    public override FirstCharUpperBound : char { get char.MaxValue }
  }

  public sealed class ParsedExtensibleRuleSymbol : BaseExtensibleRuleSymbol
  {
    public this(ast : G.ExtensibleRule.Ast, declarationSite : IRuleDeclarationSite)
    {
      base(ast.Name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    private _ast                    : G.ExtensibleRule.Ast;

    public override DeclarationSite : IRuleDeclarationSite            { get; }
    public override Options         : RuleDefinitionOptions           { get { _ast.Options() } }
    public override SplicableType   : SplicableRuleType               { get SplicableRuleType.None() }
    public override LastLocation    : option[Location]                { get { Some(_ast.ExtensibleRuleBody.GetLastLocation()) } }
    public override SpliceSource    : SymbolRef[ExtensibleRuleSymbol] { get; default SymbolRef.None(Location.Default, true) }
  }

  public sealed class ParsedExtensibleTokenRuleSymbol : BaseExtensibleRuleSymbol
  {
    public this(ast : G.ExtensibleTokenRule.Ast, declarationSite : IRuleDeclarationSite)
    {
      base(ast.Name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    private _ast                        : G.ExtensibleTokenRule.Ast;

    public override DeclarationSite     : IRuleDeclarationSite            { get; }
    public override Options             : RuleDefinitionOptions           { get { _ast.Options() } }
    public override SplicableType       : SplicableRuleType               { get SplicableRuleType.None() }
    public override LastLocation        : option[Location]                { get { Some(_ast.ExtensibleRuleBody.GetLastLocation()) } }
    public override SpliceSource        : SymbolRef[ExtensibleRuleSymbol] { get; default SymbolRef.None(Location.Default, true) }
  }
}
