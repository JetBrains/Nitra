using Nitra.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class SymbolSymbol : SingleDefSymbol, INamespaceMember, IMemberSite
  {
    public override Description     : string                  { get "symbol" }
    public          DeclarationSite : IRuleDeclarationSite    { get { null } }
    public          IsSplicable     : bool                    { get { SpliceSource.IsSome } }
    public abstract SpliceSource    : SymbolRef[SymbolSymbol] { get; }
  }

  public sealed class ParsedSymbolSymbol : SymbolSymbol
  {
    private _ast : G.NamespaceMember.Symbol;

    public this(ast : G.NamespaceMember.Symbol)
    {
      base(ast.Name, ast.Name.Value());
      _ast = ast;
    }

    public override SpliceSource : SymbolRef[SymbolSymbol] { get; default SymbolRef.None(Location.Default, true) }
  }
}
