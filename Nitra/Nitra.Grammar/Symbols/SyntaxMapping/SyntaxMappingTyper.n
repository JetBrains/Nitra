using Nitra.ProjectSystem;
using Nitra.Model;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  internal module SyntaxMappingTyper
  {
    public MakeExpression(type : SyntaxMappingType, astType : AstType, compilerMessages : ICompilerMessages) : SyntaxMappingExpr
    {
      match (type)
      {
        | Undefined           => SyntaxMappingExpr.Error(type)
        | Ast(exprType, expr) =>
          if (exprType.IsSubtypeOf(astType))
            expr
          else
          {
            compilerMessages.Error(type, $"Expected AST type '$astType' got '$exprType'.");
            SyntaxMappingExpr.Error(type)
          }

        | Option(valueType) =>
          if (astType is AstType.Option(astSymbol))
          {
            def valueExpr =
              if (valueType is Some(expr))
                Some(MakeExpression(expr, AstType.Ast(astType, astSymbol), compilerMessages))
              else
                None();

            SyntaxMappingExpr.OptionCtor(type, astSymbol, valueExpr)
          }
          else
          {
            compilerMessages.Error(type, $"Expected AST type '$astType' got option.");
            SyntaxMappingExpr.Error(type)
          }

        | List(itemTypes) =>
          match (astType)
          {
            | List(astSymbol) | OptionList(astSymbol) =>
              def itemAstType = AstType.Ast(astType, astSymbol);
              def itemExprs   = itemTypes.Map(MakeExpression(_, itemAstType, compilerMessages));
              SyntaxMappingExpr.ListCtor(type, astSymbol, itemExprs)

            | _ =>
              compilerMessages.Error(type, $"Expected AST type '$astType' got list.");
              SyntaxMappingExpr.Error(type)
          }

        | ParseTree(path)       with typeToCheck = ResolveCall(type, path, [],        VSome(astType), compilerMessages)
        | Call(path, arguments) with typeToCheck = ResolveCall(type, path, arguments, VSome(astType), compilerMessages)
        | Match(path, cases)    with typeToCheck = ResolveMatch(type, path, cases, astType, compilerMessages) =>
          MakeExpression(typeToCheck, astType, compilerMessages)

        | DefineVariable(symbol, body) => SyntaxMappingExpr.DefineVariable(type, symbol, MakeExpression(body, astType, compilerMessages))
      }
    }

    public TypeTypeHint(node : G.MapSyntaxExpression.TypeHint, ruleSymbol : SyntaxRuleSymbol, _typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      def astType = TypingUtils.NTypeToAstTypeWithMessage(node.NitraType, node.Context);
      if (astType.IsVoid)
        SyntaxMappingType.Undefined(node)
      else
      {
        def exprType = node.Expr.MakeType(ruleSymbol, VSome(astType));
        def expr     = MakeExpression(exprType, astType, node.Context);
        SyntaxMappingType.Ast(node, astType, expr);
      }
    }

    public TypeList(node : G.MapSyntaxExpression.List, ruleSymbol : SyntaxRuleSymbol, typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      def itemTypeHintOpt =
        if (typeHintOpt is VSome(AstType.List(itemType) as t))
          VSome(AstType.Ast(t.Location, itemType))
        else
          VNone();

      def items = node.ItemExprs.Item1.MapToList(_.MakeType(ruleSymbol, itemTypeHintOpt));
      SyntaxMappingType.List(node.Location, items)
    }

    public TypeOptionSome(node : G.MapSyntaxExpression.OptionSome, ruleSymbol : SyntaxRuleSymbol, typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      def valueTypeHintOpt =
        if (typeHintOpt is VSome(AstType.Option(valueType) as t))
          VSome(AstType.Ast(t.Location, valueType))
        else
          VNone();

      def valueOpt = Some(node.ValueExpr.MakeType(ruleSymbol, valueTypeHintOpt));
      SyntaxMappingType.Option(node.Location, valueOpt)
    }

    public TypeThis(node : G.MapSyntaxExpression.This, ruleSymbol : SyntaxRuleSymbol, _typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      SyntaxMappingType.ParseTree(node, ParseTreePath.This(node.Location, ruleSymbol))
    }

    public TypeIdentifier(node : G.MapSyntaxExpression.Identifier, ruleSymbol : SyntaxRuleSymbol, _typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      def name = node.Reference.Identifier();
      def result1 = node.Context.BindMany.[LocalVariableSymbol](name.Location);
      match (result1.Candidates)
      {
        | [variable is ParseTreePatternVariableSymbol] =>
          def path = ParseTreePath.Variable(node, name, variable.Type);
          SyntaxMappingType.ParseTree(node, path)

        | [parameter is SyntaxMappingParameterSymbol] =>
          def expr = SyntaxMappingExpr.ParameterRef(name, parameter);
          SyntaxMappingType.Ast(node, parameter.Type, expr)

        | [variable is AstVariableSymbol] =>
          def expr = SyntaxMappingExpr.VariableRef(name, variable);
          SyntaxMappingType.Ast(node, variable.Type, expr)

        | _ :: _ =>
          result1.Messages.TranslateTo(node.Context);
          SyntaxMappingType.Undefined(node)

        | [] =>
          if (LookupRuleField(RuleType.Ref(ruleSymbol), name) is VSome(ruleType))
          {
            def path = ParseTreePath.Member(name, ParseTreePath.This(name.Location.FromStart(), ruleSymbol), name, ruleType);
            SyntaxMappingType.ParseTree(node, path)
          }
          else
          {
            node.Context.Error(name, $"Unbound name '$(name.Value)'.");
            SyntaxMappingType.Undefined(node)
          }
      }
    }

    public TypeMemberAccess(node : G.MapSyntaxExpression.MemberAccess, ruleSymbol : SyntaxRuleSymbol, _typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      def error(errorLoc : Located, message : string)
      {
        node.Context.Error(errorLoc, message);
        SyntaxMappingType.Undefined(node)
      }
      def unboundName(name : Identifier)
      {
        error(name, $"Unbound name '$name'.")
      }

      def makeAccess(exprType : SyntaxMappingType)
      {
        def loc = node.Location;
        match (exprType)
        {
          | Ast(Void, _) | Undefined => SyntaxMappingType.Undefined(loc)
          | Ast(Option, _) | Option => error(exprType, "Member access expression is not supported on option.")
          | Ast(List, _) | Ast(OptionList, _) | List => error(exprType, "Member access expression is not supported on list.")
          | Match => error(exprType, "Member access expression is not supported on parse tree match.")
          | Ast(Ast(symbol), expr) =>
            def name = node.Reference.Identifier();
            match (symbol.LookupProperty(name.Value))
            {
              | VSome(StructuralPropertySymbol as property) =>
                if (property.AstType.IsVoid)
                  error(name, $"Property type '$(property.Type)' is not valid AST type.")
                else
                  SyntaxMappingType.Ast(loc, property.AstType, SyntaxMappingExpr.PropertyRef(loc, expr, property))

              | VSome(property) => error(name, $"Property '$(property.FullName)' is not simple AST property.")
              | VNone()         => unboundName(name)
            }

          | ParseTree(path) =>
            def name = node.Reference.Identifier();
            if (LookupRuleField(path.Type, name) is VSome(ruleType))
              SyntaxMappingType.ParseTree(loc, ParseTreePath.Member(loc, path, name, ruleType))
            else
              unboundName(name)

          | Call(path, arguments) => makeAccess(ResolveCall(exprType, path, arguments, VNone(), node.Context))
          | DefineVariable(_, body) => makeAccess(body)
        }
      }

      makeAccess(node.Expr.MakeType(ruleSymbol, VNone()))
    }

    public TypeCall(node : G.MapSyntaxExpression.Call, ruleSymbol : SyntaxRuleSymbol, _typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      def exprType      = node.Expr.MakeType(ruleSymbol, VNone());
      def argumentTypes = node.ArgumentExprs.Item1.MapToList(_.MakeType(ruleSymbol, VNone()));
      match (exprType)
      {
        | Undefined       => SyntaxMappingType.Undefined(node)
        | ParseTree(path) => SyntaxMappingType.Call(node, path, argumentTypes)
        | _               =>
          node.Context.Error(node, "Syntax mapping invokation is not allowed here.");
          SyntaxMappingType.Undefined(node)
      }
    }

    public TypeMatch(node : G.MapSyntaxExpression.Match, ruleSymbol : SyntaxRuleSymbol, typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      def exprType = node.Expr.MakeType(ruleSymbol, VNone());
      match (exprType)
      {
        | Undefined       => SyntaxMappingType.Undefined(node)
        | ParseTree(path) =>
          def cases = node.MatchCases.Item1.MapToList(_.MakeType(path.Type, ruleSymbol, typeHintOpt));
          SyntaxMappingType.Match(node, path, cases)

        | _ =>
          node.Context.Error(node, "Parse tree matching is not allowed here.");
          SyntaxMappingType.Undefined(node)
      }
    }

    public TypeFold(node : G.MapSyntaxExpression.Fold, ruleSymbol : SyntaxRuleSymbol, typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      if (typeHintOpt is VSome(astType))
      {
        _ = node.MakeReturnType(astType);

        def itemExpr = node.ItemExpr.MakeType(ruleSymbol, VNone());
        match (itemExpr)
        {
          | Undefined       => SyntaxMappingType.Undefined(node)
          | ParseTree(path) =>
            if (path.Type is RuleType.List(itemType))
            {
              def itemSymbol = ParseTreePatternVariableSymbol(node.ItemName.Identifier(), itemType);
              node.EachExpr.Context.GetContext.[ParseTreePatternVariableContext]().AddVariable(itemSymbol);

              def accumulatorReference = node.AccumulatorName2.Identifier();
              unless (node.AccumulatorSymbol.Name == accumulatorReference.Value)
                node.Context.Error(accumulatorReference, $"Unbound name '$(accumulatorReference.Value)'.");

              def initExpr = MakeExpression(node.InitExpr.MakeType(ruleSymbol, VSome(astType)), astType, node.Context);
              def eachExpr = MakeExpression(node.EachExpr.MakeType(ruleSymbol, VSome(astType)), astType, node.Context);
              def expr     = SyntaxMappingExpr.Fold(node, itemSymbol, path, node.AccumulatorSymbol, initExpr, eachExpr, astType);
              SyntaxMappingType.Ast(node, astType, expr)
            }
            else
            {
              node.Context.Error(path, $"Expected list rule type got '$(path.Type)'.");
              SyntaxMappingType.Undefined(node)
            }

          | _ =>
            node.Context.Error(node, "Parse tree list folding is not allowed here.");
            SyntaxMappingType.Undefined(node)
        }
      }
      else
      {
        _ = node.MakeReturnType(AstType.Void(node));
        node.Context.Error(node, "Type inference is not supported, please specify type with ':' operator.");
        SyntaxMappingType.Undefined(node)
      }
    }

    public TypeAst(node : G.MapSyntaxExpression.Ast, ruleSymbol : SyntaxRuleSymbol, _typeHintOpt : ValueOption[AstType]) : SyntaxMappingType
    {
      def result = TypingUtils.BindAstSymbolFromMappingExtension(node.QualifiedReference, node.Context);
      if (result is SymbolRef.Some(astSymbol))
      {
        def mappingFields = SCG.List();
        foreach (member in node.Members)
          when (member.GetSyntaxMappingField(astSymbol, ruleSymbol) is VSome(mappingField))
            mappingFields.Add(mappingField);

        def type = AstType.Ast(node.QualifiedReference, astSymbol);
        def expr = TypingUtils.CreateAstCtor(node, astSymbol, mappingFields, Location(node.Location.Source, node.CloseBrace), node.Context);
        SyntaxMappingType.Ast(node, type, expr)
      }
      else
        SyntaxMappingType.Undefined(node)
    }

    private LookupRuleField(type : RuleType, name : Identifier) : ValueOption[RuleType]
    {
      match (type)
      {
        | Ref(symbol) =>
          def loop(rules : list[Rule])
          {
            | [] => VNone()
            | rule :: _ when StringComparer.Ordinal.Equals(name.Value, rule.FieldName) => VSome(rule.Type)
            | _ :: otherRules => loop(otherRules)
          }
          loop(SyntaxMappingTyper.GetNonVoidSubRules(symbol))

        | Tuple(members) =>
          def loop(members, index)
          {
            match (members)
            {
              | [] => VNone()
              | member :: _ when StringComparer.Ordinal.Equals(name.Value, $"Item$index") => VSome(member)
              | _ :: otherMembers => loop(otherMembers, index + 1)
            }
          }
          loop(members, 1)

        | _ => VNone()
      }
    }

    private ResolveCall(loc : Located, originalPath : ParseTreePath, arguments : list[SyntaxMappingType], returnTypeOpt : ValueOption[AstType], compilerMessages : ICompilerMessages) : SyntaxMappingType
    {
      def formatAstType(t : ValueOption[AstType]) : string
      {
        | VSome(astType) => $"AST of type '$astType'"
        | VNone          => "AST"
      }
      def error(message : string) : SyntaxMappingType
      {
        compilerMessages.Error(loc, message);
        SyntaxMappingType.Undefined(loc)
      }
      def selectOverload(targetRuleSymbol : SyntaxRuleSymbol, returnTypePred : AstType -> bool, resultBuilder : AstType * list[SyntaxMappingExpr] -> SyntaxMappingType) : SyntaxMappingType
      {
        def applyArguments(parms : list[SyntaxMappingParameterSymbol], args : list[SyntaxMappingType], subMessages : ICompilerMessages) : ValueOption[list[SyntaxMappingExpr]]
        {
          match (parms, args)
          {
            | ([], []) => VSome([])
            | (p :: otherParms, a :: otherArgs) =>
              def expr = MakeExpression(a, p.Type, subMessages);
              if (expr is SyntaxMappingExpr.Error)
                VNone()
              else if (applyArguments(otherParms, otherArgs, subMessages) is VSome(otherExprs))
                VSome(expr :: otherExprs)
              else
                VNone()

            | _ => VNone()
          }
        }

        def buffer = LightList();
        foreach (syntaxMapping in targetRuleSymbol.SyntaxMappings)
        {
          when (returnTypePred(syntaxMapping.ReturnType))
          when (syntaxMapping.Parameters.Length == arguments.Length)
          {
            def subMessages = CompilerMessageList();
            when (applyArguments(syntaxMapping.Parameters, arguments, subMessages) is VSome(exprs))
              buffer.Add(syntaxMapping, exprs, subMessages)
          }
        }

        match (buffer.Count)
        {
          | 1 =>
            def (syntaxMapping, args, subMessages) = buffer.FirstItem;
            subMessages.GetMessages().TranslateTo(compilerMessages);
            resultBuilder(syntaxMapping.ReturnType, args)

          | 0 =>
            if (targetRuleSymbol.SyntaxMappings.IsEmpty)
              error($"Rule '$(targetRuleSymbol.FullName)' has no AST mapping.")
            else
            {
              if (returnTypeOpt is VSome(astType))
              {
                def toString(syntaxMapping : SyntaxMappingSymbol) : string
                {
                  def parameters = if (syntaxMapping.Parameters.IsEmpty) "" else $<#(..$(syntaxMapping.Parameters; " * "; p => p.Type.ToString()))#>;
                  parameters + syntaxMapping.ReturnType.ToString()
                }
                error($<#Rule '$(targetRuleSymbol.FullName)' has no mapping to '$astType'. Exists mapping: ..$(targetRuleSymbol.SyntaxMappings; ", "; toString)#>)
              }
              else
                error($"Rule '$(targetRuleSymbol.FullName)' has no compatible AST mapping.")
            }

          | _ =>
            using (root = compilerMessages.RootError(loc, $"Ambiguous '$(targetRuleSymbol.FullName)' AST mapping."))
              foreach ((syntaxMapping, _, _) in buffer.ToArray())
                root.Hint(syntaxMapping.FirstLocation, "AST mapping ambiguity.");
            SyntaxMappingType.Undefined(loc)
        }
      }
      def mapListBottomUpPred(_ : AstType) : bool
      {
        | Ast | List | OptionList | Option => true
        | Void => false
      }
      def mapListTopDownPred(astSymbol : AstSymbol) : AstType -> bool
      {
        fun (returnType : AstType)
        {
          | Ast(returnSymbol) | List(returnSymbol) | OptionList(returnSymbol) | Option(returnSymbol) => returnSymbol.IsSubtypeOf(astSymbol)
          | Void => false
        }
      }
      def mapOptionBottomUpPred(_ : AstType) : bool
      {
        | Ast => true
        | _   => false
      }
      def mapOptionTopDownPred(astSymbol : AstSymbol) : AstType -> bool
      {
        fun (returnType : AstType)
        {
          | Ast(returnSymbol) => returnSymbol.IsSubtypeOf(astSymbol)
          | _                 => false
        }
      }
      def createVariablePath(loc : Location, type : RuleType) : ParseTreePath
      {
        NavigateThroughTuples(ParseTreePath.Variable(loc, Nitra.Model.Identifier(loc, "node"), type))
      }

      def path = NavigateThroughTuples(originalPath);
      match (path.Type)
      {
        | Ref(targetRuleSymbol) =>
          selectOverload(targetRuleSymbol,
            if (returnTypeOpt is VSome(astType)) fun (t) { t.IsSubtypeOf(astType) } else fun (_) { true },
            (returnType, args) => SyntaxMappingType.Ast(loc, returnType, SyntaxMappingExpr.Call(loc, path, args, returnType)))

        | List(item) =>
          def itemPath = createVariablePath(path.Location.FromEnd(), item);
          match (itemPath.Type, returnTypeOpt)
          {
            | (Ref(targetRuleSymbol), VNone)                             with (pred = mapListBottomUpPred, expectedSymbol = null)
            | (Ref(targetRuleSymbol), VSome(List(expectedSymbol)))       with pred = mapListTopDownPred(expectedSymbol)
            | (Ref(targetRuleSymbol), VSome(OptionList(expectedSymbol))) with pred = mapListTopDownPred(expectedSymbol) =>
              selectOverload(targetRuleSymbol, pred, fun (returnType : AstType, args : list[SyntaxMappingExpr])
              {
                match (returnType)
                {
                  | Ast(returnSymbol)        with symbol = expectedSymbol ?? returnSymbol => SyntaxMappingType.Ast(loc, AstType.OptionList(Location.Default, symbol), SyntaxMappingExpr.ConvertList(loc, path, args, symbol, itemPath))
                  | List(returnSymbol)       with symbol = expectedSymbol ?? returnSymbol
                  | OptionList(returnSymbol) with symbol = expectedSymbol ?? returnSymbol => SyntaxMappingType.Ast(loc, AstType.OptionList(Location.Default, symbol), SyntaxMappingExpr.ConcatLists(loc, path, args, symbol, itemPath))
                  | Option(returnSymbol)     with symbol = expectedSymbol ?? returnSymbol => SyntaxMappingType.Ast(loc, AstType.OptionList(Location.Default, symbol), SyntaxMappingExpr.ConcatOptions(loc, path, args, symbol, itemPath))
                  | Void                                                                  => assert(false)
                }
              })

            | (Ref,                   VSome(astType))               => error($"Expected AST type '$astType' got list.")
            | (_,                     x)                            => error($"Cannot map list rule '$(originalPath.Type)' to $(formatAstType(x)): rule '$item' does not refer syntax rule symbol.")
          }

        | Option(value) =>
          def valuePath = createVariablePath(path.Location.FromEnd(), value);
          match (valuePath.Type, returnTypeOpt)
          {
            | (Ref(targetRuleSymbol), VNone)                         with (pred = mapOptionBottomUpPred, expectedSymbol = null)
            | (Ref(targetRuleSymbol), VSome(Option(expectedSymbol))) with pred = mapOptionTopDownPred(expectedSymbol) =>
              selectOverload(targetRuleSymbol, pred, fun (returnType : AstType, args : list[SyntaxMappingExpr])
              {
                if (returnType is Ast(returnSymbol))
                {
                  def symbol = expectedSymbol ?? returnSymbol;
                  SyntaxMappingType.Ast(loc, AstType.Option(Location.Default, symbol), SyntaxMappingExpr.ConvertOption(loc, path, args, symbol, valuePath))
                }
                else
                  assert(false)
              })

            | (Ref,                   VSome(astType))           => error($"Expected AST type '$astType' got option.")
            | (_,                     x)                        => error($"Cannot map option rule '$(originalPath.Type)' to $(formatAstType(x)): rule '$value' does not refer syntax rule symbol.")
          }

        | _ => error($"Cannot map rule '$(originalPath.Type)' to $(formatAstType(returnTypeOpt)).")
      }
    }

    private ResolveMatch(loc : Located, path : ParseTreePath, cases : list[Location * ParseTreePattern * SyntaxMappingType], returnType : AstType, compilerMessages : ICompilerMessages) : SyntaxMappingType
    {
      def caseExprs = SCG.List();
      foreach ((caseLoc, pattern, caseType) in cases)
      {
        def expr = MakeExpression(caseType, returnType, compilerMessages);
        caseExprs.Add(SyntaxMappingCase(caseLoc, pattern, expr));
      }
      SyntaxMappingType.Ast(loc, returnType, SyntaxMappingExpr.Match(loc, path, caseExprs.ToNList(), returnType))
    }

    private NavigateThroughTuples(path : ParseTreePath) : ParseTreePath
    {
      def filterNonKeywords(members : list[RuleType], index : int) : list[int * RuleType]
      {
        match (members)
        {
          | [] => []
          | RuleType.Chars(Keyword = Some) :: rest => filterNonKeywords(rest, index + 1)
          | x :: rest => (index, x) :: filterNonKeywords(rest, index + 1)
        }
      }

      if (path.Type is Tuple(members))
        if (filterNonKeywords(members, 1) is [(index, nonKeyword)])
          NavigateThroughTuples(ParseTreePath.Member(path, path, Identifier(path.Location.FromEnd(), "Item" + index), nonKeyword))
        else path
      else path
    }

    public GetNonVoidSubRules(symbol : SyntaxRuleSymbol) : list[Rule]
    {
      | ExtensibleRuleSymbol => []
      | _ => symbol.NonVoidSubRules
    }
  }
}
