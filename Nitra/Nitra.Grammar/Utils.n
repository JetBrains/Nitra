using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;
using Nitra.Typing;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Resources;
using System.Text;

using G = NitraSyntaxAst;
using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace Nitra
{
  type IntOrStringList = int * list[string];
  type RegularRuleMatcher = string -> bool;
  type CharBounds = char * char;

  //[DebuggerStepThroughAttribute]
  public module Utils
  {
    [DebuggerStepThroughAttribute]
    public PassThrough[TElem, TValue](elems : ListAst[TElem], value : TValue, func : TElem * TValue -> TValue) : TValue
      where TElem : IAst
    {
      mutable acc = value;

      foreach (elem in elems)
        acc = func(elem, acc);

      value
    }

    [DebuggerStepThroughAttribute]
    public FoldThrough[TElem, TValue](elems : ListAst[TElem], mutable value : TValue, func : TElem * TValue -> TValue) : TValue
      where TElem : IAst
    {
      foreach (elem in elems)
        value = func(elem, value);

      value
    }

    public Map[TElem, TValue](this opt : OptionAst[TElem], func : TElem -> TValue) : option[TValue]
      where TElem : IAst
    {
      match (opt)
      {
        | OptionAst.Some(v) => Some(func(v))
        | OptionAst.None    => None()
      }
    }

    //public FoldRightThrough[TElem, TValue](elems : list[TElem], mutable value : TValue, func : TElem * TValue -> TValue) : TValue
    //{
    //  def elems = List(elems);
    //  elems.Reverse();
    //  foreach (elem in elems)
    //    value = func(elem, value);
    //
    //  value
    //}

    [DebuggerStepThroughAttribute]
    public NLocation(this loc : Nitra.Location) : Compiler.Location
    {
      def (startLine, startCol) = loc.StartLineColumn;
      def (endLine, endCol) = loc.EndLineColumn;
      if (loc.Source.FileIndex > 0)
        Compiler.Location(loc.Source.FileIndex, startLine, startCol, endLine, endCol)
      else
        Compiler.Location.Default
    }

    [DebuggerStepThroughAttribute]
    public NLocation(this located : Nitra.Located) : Compiler.Location
    {
      assert2(located != null);
      NLocation(located.Location)
    }

    [DebuggerStepThroughAttribute]
    public NLocation(located : Nitra.Located, tok : NSpan) : Compiler.Location
    {
      def loc = located.Location;
      def source = loc.Source;
      def (startLine, startCol) = source.PositionToLineColumn(tok.StartPos);
      def (endLine,   endCol)   = source.PositionToLineColumn(tok.EndPos);
      if (source.FileIndex != 0)
        Compiler.Location(source.FileIndex, startLine, startCol, endLine, endCol)
      else
        Compiler.Location.Default
    }

    [DebuggerStepThroughAttribute]
    private HexDigit(c : char) : int
    {
      | c when '0' <= c && c <= '9' => c : int - '0' : int
      | c when 'a' <= c && c <= 'f' => c : int - 'a' : int + 10
      | c when 'A' <= c && c <= 'F' => c : int - 'A' : int + 10
      | _ => assert3(false)
    }

    [DebuggerStepThroughAttribute]
    private DecDigit(c : char) : int
    {
      | c when '0' <= c && c <= '9' => c : int - '0' : int
      | _ => assert3(false)
    }

    [DebuggerStepThroughAttribute]
    public HexToChar(ast : Nitra.Ast, startPos : int, endPos : int) : char
    {
      unchecked HexToInt(ast, startPos, endPos) :> char
    }

    [DebuggerStepThroughAttribute]
    public HexToInt(ast : Nitra.Ast, startPos : int, endPos : int) : int
    {
      assert2(startPos < endPos);

      def text = ast.Location.Source.OriginalText;
      mutable result = HexDigit(text[startPos]);

      for (mutable i = startPos + 1; i < endPos; i++)
        unchecked result = (result << 4) + HexDigit(text[i]);

      result
    }

    [DebuggerStepThroughAttribute]
    public DecToInt(ast : Nitra.Ast, startPos : int, endPos : int) : int
    {
      assert2(startPos < endPos);

      def text = ast.Location.Source.OriginalText;
      mutable result = DecDigit(text[startPos]);

      for (mutable i = startPos + 1; i < endPos; i++)
        unchecked result = result * 10 + DecDigit(text[i]);

      result
    }

    //public Appent(this source : StringBuilder, text : Nitra.Located) : StringBuilder
    //{
    //  def loc = text.Location;
    //  source.Append(loc.Source.Text, loc.StartPos, loc.Length)
    //}

    //public LastOrDefault[T](this source : list[T], defaultValue : T) : T
    //{
    //  if (source.IsEmpty)
    //    defaultValue
    //  else
    //    source.Last
    //}

    [DebuggerStepThroughAttribute]
    public LastOrDefault[TElem, TResult](this source : list[TElem], func : TElem -> TResult, defaultValue : TResult) : TResult
    {
      if (source.IsEmpty)
        defaultValue
      else
        func(source.Last)
    }

    [DebuggerStepThroughAttribute]
    public static UnescapeChar(c : char) : char
    {
      | '\'' => '\'' | '\"' => '\"' | '\\' => '\\' | '0'  => '\0'
      | 'a'  => '\a' | 'b'  => '\b' | 'f'  => '\f' | 'n'  => '\n'
      | 'r'  => '\r' | 't'  => '\t' | 'v'  => '\v' | c    => c
    }

    [DebuggerStepThroughAttribute]
    public EscapeChar(ch : char) : string
    {
      | '\0' => @"'\0'"
      | '\t' => @"'\t'"
      | '\n' => @"'\n'"
      | '\r' => @"'\r'"
      | '\\' => @"'\\'"
      | '\'' => @"'\''"
      | x when x == char.MaxValue  => @" char.MaxValue"
      | c when char.IsLetter(c)
      | c when char.IsDigit(c)
      | c when char.IsPunctuation(c)
      | c when char.IsSeparator(c)
      | c when char.IsSymbol(c)      => $"'$c'"
      | c =>
        def c = c : uint;
        string.Format(<#'\u{0,4:X}'#>, c).Replace(' ', '0');
    }

    [DebuggerStepThroughAttribute]
    public EscapeStringChar(ch : char) : string
    {
      | '\0' => @"\0"
      | '\t' => @"\t"
      | '\n' => @"\n"
      | '\r' => @"\r"
      | '\\' => @"\\"
      | '\'' => @"\'"
      | c when char.IsLetter(c)
      | c when char.IsDigit(c)
      | c when char.IsPunctuation(c)
      | c when char.IsSeparator(c)
      | c when char.IsSymbol(c)      => $"$c"
      | c =>
        def c = c : uint;
        string.Format(<#\u{0,4:X}#>, c).Replace(' ', '0');
    }

    public InvertRange(range : RangeSet) : list[RangeSet]
    {
      //assert2(false);
      [range.Invert()]
    }

    ///////////////////

    public MakeName(fieldName : option[string], rules : list[Rule], _context : Context) : string
    {
      match (fieldName)
      {
        | Some(name) => name
        | _ =>
          match (rules.Filter(r => !(r.Type is RuleType.Void || r.Type is RuleType.Chars)))
          {
            | [rule] => rule.FieldName
            | _ => ""
          }
      }
    }

    public MakePlural(name : string) : string
    {
      JetBrains.Util.NounUtil.GetPlural(name);
    }

    public MakePlural(fieldName : option[string], _context : Context) : string
    {
      match (fieldName)
      {
        | Some(name) => name
        | _ => "Token"
      }
    }

    public MakePlural(fieldName : option[string], rule : Rule, _context : Context) : string
    {
      match (fieldName)
      {
        | Some(name) => name
        | _ => MakePlural(rule.FieldName)
      }
    }

    public MakePlural(fieldName : option[string], rule : Rule, _separatorRule : Rule, _context : Context) : string
    {
      match (fieldName)
      {
        | Some(name) => name
        | _ => MakePlural(rule.FieldName)
      }
    }

    public MakeLiteralName(fieldName : option[string], value : string, context : Context) : string
    {
      match (fieldName)
      {
        | Some(name) => name
        | _ =>
          def nameMap = context.GetContext.[ITokenNamesMapContext]().TokenNamesMap;
          if (nameMap.Find(value) is Some(symbol))
            symbol.Name
          else if (IsIdentifier(value))
            ToPascalCase(value, "Kw")
          else
            ""
      }
    }

    public LastOrDefault[T](this source : list[T], defaultValue : T) : T
    {
      match (source)
      {
        | [] | null => defaultValue
        | _         => source.Last
      }
    }

    public ToPascalCase(str : string, suffix : string = null) : string
    {
      def suffixIsEmpty = string.IsNullOrEmpty(suffix);
      if (str.Length == 0 || (char.IsUpper(str[0]) && suffixIsEmpty))
        str
      else
      {
        def suffixLength = if (suffixIsEmpty) 0 else suffix.Length;
        def buffer = array(suffixLength + str.Length);
        when (suffixLength > 0)
          suffix.CopyTo(0, buffer, 0, suffixLength);
        str.CopyTo(0, buffer, suffixLength, str.Length);
        buffer[suffixLength] = char.ToUpperInvariant(buffer[suffixLength]);
        string(buffer)
      }
    }

    public IsIdentifier(str : string) : bool
    {
      if (str.Length == 0)
        false
      else
      {
        def ch = str[0];

        if (ch == '_' || char.IsLetter(ch))
        {
          foreach (ch in str)
            unless (ch == '_' || char.IsLetterOrDigit(ch))
              return false;
          true
        }
        else
          false
      }
    }

    internal BindImpl[T](result : BindingResult[T]) : option[T]
    {
      unless (result.Messages.IsEmpty)
        result.Messages.TranslateTo(NitraProject.CurrentProject);

      TryBindImpl(result)
    }

    TryBindImpl[T](result : BindingResult[T]) : option[T]
    {
      match (result.Candidates)
      {
        | [one] => Some(one)
        | _ => None()
      }
    }

    public Bind[T](this context : Context, name : G.QualifiedIdentifier) : option[T]
      where T: Symbol
    {
      BindImpl(context.BindMany.[T](name.CalcLocations()))
    }

    public Bind[T](this context : Context, name : G.Identifier) : option[T]
      where T: Symbol
    {
      BindImpl(context.BindMany.[T](name.Location))
    }

    public BindByHierarchy[T](this symbol : Symbol, name : G.Identifier) : T
      where T: Symbol
    {
      match (symbol.Node.BindMany(name.Location))
      {
        | [one is T] =>   one
        | _ =>
          assert3(false)
      }
    }

    public TryBind[T](this context : Context, name : G.QualifiedIdentifier) : option[T]
      where T: Symbol
    {
      TryBindImpl(context.BindMany.[T](name.CalcLocations()))
    }

    public TryBind[T](this context : Context, name : G.Identifier) : option[T]
      where T: Symbol
    {
      TryBindImpl(context.BindMany.[T](name.Location))
    }

    public TotalLocation(this locations : list[Location]) : Location
    {
      locations.Head + locations.Last
    }

    public ConvertRegularRuleToFsm(this regularRule : RegularRule) : FSM
    {
      def visitedRules = HashSet();
      def convert(_ : RegularRule) : FSM
      {
        | Choice(rules)                            => FSMBuilder.Choice(rules.Map(convert))
        | Sequence(rules)                          => FSMBuilder.Seq(rules.Map(convert))
        | Chars(chars)                             => FSMBuilder.Seq(chars)
        | Repeat(min, max, rule)                   => FSMBuilder.Repeat(min, max, convert(rule))
        | RepeatWithSeparator(min, max, rule, sep) => FSMBuilder.RepeatWithSeparator(min, max, convert(rule), convert(sep))
        | Invert(rule)                             => FSMTransform.Invert(FSMBuilder.Seq([FSMBuilder.AllStrings, convert(rule), FSMBuilder.AllStrings]))
        | Subtract(rule1, rule2)                   => FSMTransform.Sub(convert(rule1), convert(rule2))
        | Call(RuleRef.Some(symbol) as ruleRef) =>
          if (visitedRules.Add(symbol))
          {
            def result = convert(symbol.Rule);
            _ = visitedRules.Remove(symbol);
            result
          }
          else
          {
            NitraProject.CurrentProject.Error(ruleRef.Location, "Cyclic rule call found.", -1);
            FSM()
          }

        | Call(RuleRef.None) =>
          // binding error already reported
          FSM()
      }
      convert(regularRule)
    }

    public ValidateRegularRule(this regularRule : RegularRule) : void
    {
      _ = ConvertRegularRuleToFsm(regularRule);
    }

    public MakeMatcher(this regularRule : RegularRule) : RegularRuleMatcher
    {
      FSMMatch.MakeMatcher(ConvertRegularRuleToFsm(regularRule))
    }

    IsNewLine(ch : char) : bool
    {
      ch == '\n' || ch == '\r'
    }

    public MakeLastLocation(ast : Ast) : Location
    {
      def source = ast.Location.Source;
      def text   = source.Text;
      mutable start = -1;
      for (mutable i = ast.Location.EndPos - 1; i >= 0; i--)
      {
        def ch = text[i];
        if (char.IsWhiteSpace(ch))
          start = i;
        else when (!IsNewLine(ch))
          break;
      }

      if (start >= 0)
        Location(source, NSpan(start, start+1))
      else
        Location(source, ast.Location.EndPos, ast.Location.EndPos + 1)
    }

    public MakeLastLocation(ast : Ast, tok : NSpan) : Location
    {
      def source = ast.Location.Source;
      def text   = source.Text;
      mutable start = -1;
      for (mutable i = tok.StartPos - 1; i >= 0; i--)
      {
        def ch = text[i];
        if (char.IsWhiteSpace(ch))
          start = i;
        else when (!IsNewLine(ch))
          break;
      }

      if (start >= 0)
        Location(source, NSpan(start, start+1))
      else
        Location(source, tok)
    }

    public FromEnd(this loc : Location) : Location
    {
      Location(loc.Source, NSpan(loc.EndPos, loc.EndPos))
    }

    public FromStart(this loc : Location) : Location
    {
      Location(loc.Source, NSpan(loc.StartPos, loc.StartPos))
    }

    public RegisterGlobalSpanClassSymbols(syntaxModuleSymbol : ParsedSyntaxModuleSymbol, context : Context) : void
    {
      def overridenSpanClasses = HashSet();
      def loop(_ : SpanClassContext)
      {
        | null => ()
        | context =>
          when (overridenSpanClasses.Add(context.SpanClass.Name))
            _ = syntaxModuleSymbol.Node.AddAndReport.[SpanClassSymbol](context.SpanClass, context.SpanClass.FirstLocation);
          loop(context.TryGetParent())
      }
      loop(context.TryGetContext())
    }

    public StringRuleTyping(loc : Location, value : string, fieldName : option[string], context : Context) : Rule
    {
      def newFieldName   = MakeLiteralName(fieldName, value, context);
      def loc            = loc.FromEnd();
      Rule.String(loc, newFieldName, value, false, GetSpanClassForString(context, loc, value))
    }

    public MakeNamespaceSymbol(currentNs : NamespaceSymbol, path : list[Nitra.Location]) : NamespaceSymbol
    {
      def enter(currentNs : NamespaceSymbol, path : list[Location]) : NamespaceSymbol
      {
        match (path)
        {
          | name :: tail =>
            match (currentNs.Node.BindMany.[NamespaceSymbol](name.GetText()))
            {
              | ns :: _ =>
                ns.AddDefinition(name);
                if (tail.IsEmpty)
                  ns
                else
                  enter(ns, tail)

              | [] =>
                def newNs = NamespaceSymbol(name);
                currentNs.AddChild(newNs, name);
                newNs.AddDefinition(name);
                if (tail.IsEmpty)
                  newNs
                else
                  enter(newNs, tail)
            }

          | [] => assert2(false); currentNs
        }
      }

      enter(currentNs, path)
    }

    public GetSpanClassForString(context : Context, location : Location, str : string) : SpanClassSymbol
    {
      def getAllSpanClassSymbolFromImportedModule(context : Context, result : List[SpanClassSymbol]) : void
      {
        match (context)
        {
          | null => assert2(false);
          | RootContext => ()
          | OpenNamespaceOrTypeContext(OpenSymbol = Some(mod is SyntaxModuleSymbol)) =>
            result.AddRange(mod.Node.GetChildren.[SpanClassSymbol]());
            getAllSpanClassSymbolFromImportedModule(context.Parent, result);

          | _ => getAllSpanClassSymbolFromImportedModule(context.Parent, result)
        }
      }
      def tryFindInOpenModules() : SpanClassSymbol
      {
        def result = List();
        getAllSpanClassSymbolFromImportedModule(context, result);
        def suitable = result.Filter(_.Matcher(str));

        match (suitable)
        {
          | [one] => one
          | []    => null
          | _ :: _    =>
            ProjectSystem.NitraProject.CurrentProject.Error(location,
              $<#Ambiguity between imported span class matchers for the "$str" literal rule. Define the span class matcher for this rule in the current syntax module.#>, -1);
            null
        }
      }

      def loop(context : Context) : SpanClassSymbol
      {
        | null => null
        | SyntaxModuleContext => tryFindInOpenModules()
        | SpanClassContext(SpanClass = spanClass) when spanClass.Matcher(str) => spanClass
        | _ => loop(context.Parent)
      }

      loop(context)
    }

    [DebuggerStepThroughAttribute]
    public EvaluateSequenceRuleType(rules : IEnumerable[Rule]) : RuleType
    {
      EvaluateSequenceRuleType(rules.Select(_.Type))
    }

    [DebuggerStepThroughAttribute]
    public EvaluateSequenceRuleType(types : IEnumerable[RuleType]) : RuleType
    {
      def nonVoidTypes = List();
      foreach (ty in types)
        unless (ty is RuleType.Void)
          nonVoidTypes.Add(ty);
      match (nonVoidTypes.Count)
      {
        | 0 => RuleType.Void();
        | 1 => nonVoidTypes[0]
        | _ => RuleType.Tuple(nonVoidTypes.NToList())
      }
    }

    public EvaluateOptionRuleType(rule : Rule) : RuleType
    {
      if (rule.Type is RuleType.Void)
        RuleType.Void()
      else
        RuleType.Option(rule.Type)
    }

    public EvaluateListWithSeparatorRuleType(itemRule : Rule, sepRule : Rule) : RuleType
    {
      match (itemRule.Type : RuleType, sepRule.Type : RuleType)
      {
        | (Void,     Void)    => RuleType.Void()
        | (itemType, Void)    => RuleType.List(itemType)
        | (Void,     sepType) => RuleType.List(sepType)
        | (itemType, sepType) => RuleType.Tuple([RuleType.List(itemType), RuleType.List(sepType)])
      }
    }

    public EvaluateListRuleType(rule : Rule) : RuleType
    {
      // match list of predicates (flattening nested sequences)
      def isOnlyPredicatesPattern(_)
      {
        | [] => true
        | Rule.Not :: tail
        | Rule.And :: tail => isOnlyPredicatesPattern(tail)
        | Rule.Sequence(rules) :: tail => isOnlyPredicatesPattern(rules) && isOnlyPredicatesPattern(tail)
        | _ => false
      }
      // match list of predicates ended with regular rule 'Any' call (flattening nested sequences)
      def isSkipAnyPattern(_)
      {
        | Rule.Not :: tail
        | Rule.And :: tail => isSkipAnyPattern(tail)
        | Rule.Call(RuleRef.Some(anyRule is RegularRuleSymbol), 0) :: [] when RegularRuleExtensions.IsAnyDfa(anyRule.Fsm) =>
          true

        | Rule.Sequence(rules) :: []   => isSkipAnyPattern(rules)
        | Rule.Sequence(rules) :: tail => isOnlyPredicatesPattern(rules) && isSkipAnyPattern(tail)
        | _ => false
      }

      if (isSkipAnyPattern([rule]))
        RuleType.Chars(None())
      else if (rule.Type is RuleType.Void)
        RuleType.Void()
      else
        RuleType.List(rule.Type)
    }
  } // module
} // ns
