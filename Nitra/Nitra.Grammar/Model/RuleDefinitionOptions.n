//using Nitra.Macros;
using Nitra.ProjectSystem;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Surround;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

[assembly: DefineSurround("newOptions", false, def newOptions = RuleDefinitionOptions(this), newOptions)]

namespace Nitra.Model
{
  [Record]
  public sealed class RuleDefinitionOptions
  {
    public static Empty : RuleDefinitionOptions = RuleDefinitionOptions();

    public IsStart                  : bool            { get; private set; }
    public IsExplicitSpaces         : bool            { get; private set; }
    public IsSuppressTrailingSpaces : bool            { get; private set; }
    public SpanClassSymbol          : SpanClassSymbol { get; private set; }
    public IsTokenRule              : bool            { get; private set; }
    public IsNoAst                  : bool            { get; private set; }
    /// This token is important in a error recovery.
    public IsKeyToken               : bool            { get; private set; }
    /// This token can be parsed by the rule used to parse an identifier. All keywords IsKeyToken.
    public IsKeyword                : bool            { get; private set; }
    public IsIdentifier             : bool            { get; private set; }

    public SetStart                  (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsStart                  = value }
    public SetExplicitSpaces         (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsExplicitSpaces         = value }
    public SetSuppressTrailingSpaces (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsSuppressTrailingSpaces = value }
    public SetSpanClass              (_loc : Located, value : SpanClassSymbol) : RuleDefinitionOptions { surroundwith(newOptions) newOptions.SpanClassSymbol          = value }
    public SetNoAst                  (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsNoAst                  = value }
    public SetTokenRule                              (value : bool)            : RuleDefinitionOptions
    {
      surroundwith(newOptions)
      {
        newOptions.IsTokenRule      = value;
        newOptions.IsExplicitSpaces = value;
      }
    }
    public SetKeyToken               (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsKeyToken               = value }
    public SetKeyword                (_loc : Located, value : bool)            : RuleDefinitionOptions
    {
      surroundwith(newOptions)
      {
        when (value)
          newOptions.IsKeyToken = true;
        newOptions.IsKeyword  = value;
      }
    }
    public SetIdentifier             (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsIdentifier             = value }

    public this() { }

    public this(original : RuleDefinitionOptions)
    {
      this( isStart                  = original.IsStart
          , isExplicitSpaces         = original.IsExplicitSpaces
          , isSuppressTrailingSpaces = original.IsSuppressTrailingSpaces
          , spanClassSymbol          = original.SpanClassSymbol
          , isTokenRule              = original.IsTokenRule
          , isNoAst                  = original.IsNoAst
          , isKeyToken               = original.IsKeyToken
          , isKeyword                = original.IsKeyword
          , isIdentifier             = original.IsIdentifier
          )
    }

    public static CreateTokenRule()          : RuleDefinitionOptions
    {
      RuleDefinitionOptions
          ( isStart                  = false
          , isExplicitSpaces         = true
          , isSuppressTrailingSpaces = false
          , spanClassSymbol          = null
          , isTokenRule              = true
          , isNoAst                  = false
          , isKeyToken               = false
          , isKeyword                = false
          , isIdentifier             = false
          )
      }

    
    public InheritedCopy() : RuleDefinitionOptions
    {
      if (IsStart)
        surroundwith(newOptions) newOptions.IsStart = false
      else
        this
    }

    public override ToString() : string
    {
      def values = List();
      when (IsStart)                          values.Add("StartRule");
      when (IsExplicitSpaces && !IsTokenRule) values.Add("ExplicitSpaces");
      when (IsSuppressTrailingSpaces)         values.Add("SuppressTrailingSpaces");
      when (SpanClassSymbol != null)          values.Add($"SpanClass($(SpanClassSymbol.Node.FullName))");
      when (IsTokenRule)                      values.Add("TokenRule");
      $"[..$(values; \", \")]"
    }
  }
}
