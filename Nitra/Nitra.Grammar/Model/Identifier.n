using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Model
{
  public class Identifier : Nitra.Located, IComparable[Identifier]
  {
    public override Location : Location { get; }
    public Value : string { get; }

    public this(location : Nitra.Location, value : string)
    {
      this.Location = location;
      this.Value    = value;
    }

    public this(parent : Located, token : Nitra.NSpan) { this(Location(parent.Location.Source, token)) }
    public this(location : Location)                   { this(location, location.GetText()) }
    public this(located  : Located)                    { this(located,  located.GetText()) }

    public override ToString() : string { Value }

    public CompareTo(that : Identifier) : int { Value.CompareTo(that.Value) }

    [Nemerle.OverrideObjectEquals]
    public Equals(that : Identifier)   : bool { Value.Equals(that.Value, StringComparison.Ordinal) }
    public EqualsToName(name : string) : bool { Value.Equals(name, StringComparison.Ordinal) }

    public override GetHashCode() : int { Value.GetHashCode() }

    public static @==(name1 : Identifier, name2 : Identifier) : bool
    {
      if (name1 : object == name2)
        true
      else if (null == name1 || null == name2)
        false
      else
        name1.Equals(name2)
    }

    public static @!=(name1 : Identifier, name2 : Identifier) : bool
    {
      !(name1 == name2)
    }
  }
}
