using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Model
{
  public class FSMMatch
  {
    public static MakeMatcher(fsm : FSM) : string -> bool
    {
      def fsm = FSMTransform.MakeDeterministic(fsm);
      def transMap = fsm.Transitions.Cast.[Transition.Symbol]().Grouping(trans => (trans.From, trans));
      def transitions = array(fsm.StateCount);
      def start = fsm.StartState;
      def okStates = fsm.OkStates;
      foreach (kv in transMap)
        transitions[kv.Key] = kv.Value.ToArray();
      (str) =>
      {
        result:
          {
            mutable state = start;
            for (mutable i = 0; i < str.Length; ++i)
            {
              def c = str[i];
              def t = transitions[state];
              when (t == null)
                result(false);

              def checkTransition(j)
              {
                if (j < t.Length)
                  if (t[j].Chars.Contains(c))
                    state = t[j].To;
                  else
                    checkTransition(j + 1)
                else
                  result(false)
              }
              checkTransition(0)
            }
            okStates.Contains(state)
          }
      }
    }
  }
}
