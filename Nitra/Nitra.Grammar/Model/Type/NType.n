using Nemerle;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxAst;

namespace Nitra.Model
{
  [Record, StructuralEquality]
  public variant NType
  {
    | Predefined { Value : NPredefinedType }
    | Qualified  { Parts : list[TypeNamePart] }
    | Tuple      { Members : list[NType] }
    | Func       { From : NType; To : NType }
    | OptionList { ItemType : NType }
    | List       { ItemType : NType }
    | Option     { ItemType : NType }

    public override ToString() : string
    {
      match (this)
      {
        | Predefined(t)    => t.ToString().ToLowerInvariant()
        | Qualified(parts) => $<#..$(parts; ".")#>
        | Tuple(members)   => $<#..$(members; " * ")#>
        | Func(from, to)   => $"$from -> $to"
        | OptionList(item) => item + "+"
        | List(item)       => item + "*"
        | Option(item)     => item + "?"
      }
    }
  }
}
