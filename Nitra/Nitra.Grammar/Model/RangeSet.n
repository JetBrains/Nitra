using System;
using System.Collections.Generic;
using System.Globalization;

using Nitra.Utils;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Extensions;
using Nemerle.Utility;

namespace Nitra.Model
{
  [Record, StructuralEquality]
  public sealed class RangeSet
  {//TODO:Optimize
    [Record, StructuralEquality]
    public struct Range
    {
      public from : char;
      public to   : char;

      public override ToString() : string
      {
        if (from == to) EscapeChar(from)
        else            EscapeChar(from) + ".." + EscapeChar(to)
      }
    }

    public Ranges : list[Range] { get }

    public this() { this([]) }

    // this ctor is produced by Record macro and
    //   should be _public_ to be callable from deserialization routine
    //private this(ranges : list[Range]) { Ranges = ranges }

    public AddRange(from : char, to : char) : RangeSet
    {
      AddRange(Range(from, to));
    }

    public AddSingleCharRange(ch : char) : RangeSet
    {
      AddRange(Range(ch, ch));
    }

    public static MakeString(str : string) : list[RangeSet]
    {
      def set = List(str.Length);

      foreach (ch in str)
        set.Add(RangeSet().AddRange(ch, ch));

      set.NToList()
    }

    public AddRange(category : UnicodeCategory) : RangeSet
    {
      this.Sum(UnicodeCategoryTable.UnicodeCategoryToRangeSet(category));
    }

    public AddRange(range : Range) : RangeSet
    {
      assert(range.from <= range.to);

      def add(ranges, range)
      {
        match (ranges)
        {
        | [] => [range];
        | firstRange :: ranges =>
          if (firstRange.to + 1 < range.from)
            firstRange :: add(ranges, range);
          else if (range.to + 1 < firstRange.from)
            range :: firstRange :: ranges;
          else
            add(ranges, Range(Math.Min(range.from, firstRange.from) :> char, Math.Max(range.to, firstRange.to) :> char));
        }
      }
      RangeSet(add(Ranges, range))
    }

    public RemoveRange(from : char, to : char) : RangeSet
    {
      RemoveRange(Range(from, to));
    }

    public RemoveRange(category : UnicodeCategory) : RangeSet
    {
      this.Sub(UnicodeCategoryTable.UnicodeCategoryToRangeSet(category));
    }

    public RemoveRange(range : Range) : RangeSet
    {
      assert(range.from <= range.to);

      def remove(ranges)
      {
        match (ranges)
        {
        | [] => [];
        | firstRange :: ranges =>
          if (firstRange.to < range.from)
          {
            firstRange :: remove(ranges);
          }
          else if (firstRange.from > range.to)
          {
            firstRange :: ranges;
          }
          else
          {
            def cat(from : int, to : int, ranges)
            {
              if (from <= to)
                Range(from :> char, to :> char) :: ranges;
              else
                ranges;
            }
            def lo = firstRange.from <= range.from;
            def hi = firstRange.to >= range.to;
            if (lo)
            {
              if (hi)
              {
                cat(firstRange.from, range.from - 1, cat(range.to + 1, firstRange.to, ranges))
              }
              else
              {
                cat(firstRange.from, range.from - 1, remove(ranges))
              }
            }
            else
            {
              if (hi)
              {
                cat(range.to + 1, firstRange.to, ranges)
              }
              else
              {
                remove(ranges);
              }
            }
          }
        }
      }
      RangeSet(remove(Ranges))
    }

    public Sum(that : RangeSet) : RangeSet
    {
      Ranges.Fold(that, (range, that) => that.AddRange(range));
    }

    public Sub(that : RangeSet) : RangeSet
    {
      that.Ranges.Fold(this, (range, rangeSet) => rangeSet.RemoveRange(range));
    }

    public Intersect(that : RangeSet) : RangeSet
    {
      this.Sum(that).Sub(this.Sub(that)).Sub(that.Sub(this))
    }

    public Invert() : RangeSet
    {
      RangeSet([Range(char.MinValue, char.MaxValue)]).Sub(this)
    }

    public IsSingleChar : bool
    {
      get
      {
        match (Ranges)
        {
          | [x] when x.from == x.to => true
          | _                       => false
        }
      }
    }

    public Contains(c : char) : bool
    {
      res:
        {
          foreach (range in Ranges)
          {
            when (range.from <= c && c <= range.to)
              res(true)
          }
          false;
        }
    }

    public GetBounds() : option[char * char]
    {
      match (Ranges)
      {
        | []            => None()
        | [single]      => Some((single.from, single.to))
        | first :: tail => Some((first.from, tail.Last.to))
      }
    }

    public override ToString() : string { $"..$Ranges" }
  }
}
