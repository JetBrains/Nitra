using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.IO;
using Nemerle.Compiler;

using System;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Diagnostics;
using System.Reflection;
using SCG = System.Collections.Generic;

namespace Nemerle.CommandlineCompiler
{
  module Program
  {
    mutable stack_kilos : int = 0;
    mutable Manager : ManagerClass;
    mutable Options : CompilationOptions;

    public Main() : void
    {
      def path = Path.GetDirectoryName(Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath);
      def is64bitProcess = IntPtr.Size == 8;
      def is64BitOperatingSystem() : bool
      {
        // FIXME: Add support for Linux
        #if NET_4_0
        Environment.Is64BitOperatingSystem
        #else
          Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE") == "AMD64" ||
          Environment.GetEnvironmentVariable("PROCESSOR_ARCHITEW6432") == "AMD64"
        #endif
      }
      Options = CompilationOptions();
      Manager = ManagerClass(Options);
      Options.ColorMessages = false;
      Options.OutputFileName = "";
      Options.ProjectPath = "";
      Options.TargetIsLibrary = true;
      Manager.InitOutput(Console.Out);
      parse_command_line();

      def files = Options.Sources.Map(source => Location.GetFileName(source.FileIndex));
      def makeExt(options) { if (options.TargetIsLibrary) ".dll" else ".exe" }

      when (Options.OutputFileName == "")
        Options.OutputFileName =
          if (Options.ProjectPath == "")
            if (files.IsEmpty)
              "out.exe"
            else
              Path.GetFileNameWithoutExtension(files.Head) + makeExt(Options)
          else
              Path.GetFileNameWithoutExtension(Options.ProjectPath) + makeExt(Options);

      def nitraCompilerDll  = Path.Combine(path, "Nitra.Compiler.dll");
      def nitraRuntimeDll   = Path.Combine(path, "Nitra.Runtime.dll");
      def nitraCoreDll      = Path.Combine(path, "Nitra.Core.dll");
      def target         = if (Options.TargetIsSet) "" else "-target:library";
      def additionalArgs = $<# -m:"$nitraCompilerDll" -r:"$nitraRuntimeDll" -r:"$nitraCoreDll" -no-color -out:"$(Options.OutputFileName)" $target#>;

      def runInAppropriateProcess(processName : string) : void
      {
        mutable binPathRoot = Environment.GetEnvironmentVariable("NemerleBinPathRoot");
        when (string.IsNullOrEmpty(binPathRoot))
          binPathRoot = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), "Nemerle");

        def executablePath = Path.Combine(binPathRoot, "Net-4.0", processName);
        unless (File.Exists(executablePath))
        {
          Console.Error.Write($"Nemerle command line compiler '$executablePath' not found.");
          Environment.Exit(-1);
        }

        def args = JoinArguments(Environment.GetCommandLineArgs().Skip(1)) + additionalArgs;
        def process = Process();
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.CreateNoWindow  = false;
        process.StartInfo.FileName        = executablePath;
        process.StartInfo.Arguments       = args;
        if (process.Start())
        {
          process.WaitForExit();
          when (process.ExitCode != 0)
            Environment.Exit(process.ExitCode);
        }
        else
          Environment.Exit(-1);
      }
      def eq(a, b) { string.Equals(a, b, StringComparison.InvariantCultureIgnoreCase) }

      if (eq(Options.Platform, "x86"))
        runInAppropriateProcess("ncc32.exe")
      else if (eq(Options.Platform, "x64"))
        if (is64BitOperatingSystem())
          runInAppropriateProcess("ncc64.exe")
        else
        {
          Message.Error("Compiling for the x64 platorm is possible only under 64-bit OS (restriction of System.Reflection.Emit).");
          Environment.Exit(-1);
        }
      else if (is64bitProcess)
        runInAppropriateProcess("ncc64.exe");
      else
        runInAppropriateProcess("ncc32.exe")
    }

    parse_command_line() : void
    {
      def cOptions = Options;

      def sources = SCG.List();

      def print_version ()
      {
        def compilerAssembly = typeof(ManagerClass).Assembly;
        def version = compilerAssembly.GetName().Version;
        def copyright = (compilerAssembly.GetCustomAttributes(typeof(Reflection.AssemblyCopyrightAttribute), false)[0]
            :> Reflection.AssemblyCopyrightAttribute).Copyright;
        Console.Error.Write(
          $ "Nitra Compiler version $version\n"
            "$copyright \n"
            "All rights reserved.\n");
        Environment.Exit (0);
      }

      mutable help_opts = [];
      def print_help ()
      {
        Console.WriteLine (Getopt.Usage (help_opts));
        Environment.Exit (0);
      }

      def opts = cOptions.GetCommonOptions()
      + [
        Getopt.CliOption.Int (name = "-stack-size",
                     aliases = [],
                     help = "Set stack size of the compiler to INT megabytes",
                     handler = fun (k) { stack_kilos = k * 1024; }),
        Getopt.CliOption.Int (name = "-stack-size-k",
                     aliases = [],
                     help = "NOHELP",
                     handler = fun (k) { stack_kilos = k; }),
        Getopt.CliOption.Flag (name = "-version",
                     aliases = ["-V"],
                     help = "Output version information and exit",
                     handler = print_version),
        Getopt.CliOption.Flag (name = "-help",
                     aliases = ["-h", "-?"],
                     help = "Display this usage message and exit",
                     handler = print_help),
        Getopt.CliOption.NonOption (name = "",
                          help = "Specify file to compile",
                          handler = fun (s) { sources.Add(FileSource(s, cOptions.Warnings)) })
      ];
      help_opts = opts;

      Getopt.Parse(opts);

      if (sources.Count > 0)
        cOptions.Sources = sources.ToNList();
      else
        Getopt.Error("need at least one file to compile\n" + Getopt.Usage(opts))
    }

    JoinArguments(arguments : Seq[string]) : string
    {
      def result = StringBuilder();
      foreach (argument in arguments with index)
      {
        unless(index == 0) _ = result.Append(' ');
        if (string.IsNullOrEmpty(argument))
          _ = result.Append('"').Append('"');
        else if (_needQuotes.IsMatch(argument))
        {
          _ = result.Append('"');
          mutable pos = 0;
          foreach(m is Match when m.Success in _escapeQuotes.Matches(argument))
          {
            def backslashGroup = m.Groups[1];
            def tailGroup = m.Groups[2];
            _ = result.Append(argument, pos, m.Index - pos)
              .Append(argument, backslashGroup.Index, backslashGroup.Length)
              .Append(argument, backslashGroup.Index, backslashGroup.Length);
            when (tailGroup.Value == "\"")
              _ = result.Append("\\\"");
            pos = m.Index + m.Length;
          }
          _ = result.Append(argument, pos, argument.Length - pos)
            .Append('"');
        }
        else
          _ = result.Append(argument);
      }
      result.ToString()
    }

    private static _needQuotes   : Regex = Regex(<#\s|"#>, RegexOptions.Compiled);
    private static _escapeQuotes : Regex = Regex(<#(\\*)("|$)#>, RegexOptions.Compiled);
  }
}
