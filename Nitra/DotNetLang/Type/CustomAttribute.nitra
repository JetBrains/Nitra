using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;

using System;
using System.Collections.Immutable;
using System.Linq;

using SCG = System.Collections.Generic;

namespace DotNet
{
  declaration CustomAttribute
  {
    symbol
    {
      in Type           : TypeSymbol = null;
      in Constructor    : Member.ConstructorSymbol = null;
      in Arguments      : SCG.IList[CustomAttributeExpression]    = null;
      in NamedArguments : SCG.IList[CustomAttributeNamedArgument] = null;
    }
  }
  /*
  ast CustomAttributeNamedArgument
  {
    out NameId : int = -1;
    out Expression : CustomAttributeExpression = null;
  }

  abstract ast CustomAttributeExpression
  {
    | Bool   { out Literal : bool   = default(bool  ); }
    | Byte   { out Literal : byte   = default(byte  ); }
    | Char   { out Literal : char   = default(char  ); }
    | Double { out Literal : double = default(double); }
    | Float  { out Literal : float  = default(float ); }
    | Int    { out Literal : int    = default(int   ); }
    | Long   { out Literal : long   = default(long  ); }
    | Sbyte  { out Literal : sbyte  = default(sbyte ); }
    | Short  { out Literal : short  = default(short ); }
    | String { out Literal : string = default(string); }
    | Uint   { out Literal : uint   = default(uint  ); }
    | Ulong  { out Literal : ulong  = default(ulong ); }
    | Ushort { out Literal : ushort = default(ushort); }
    | Type   { out Literal : TypeSymbol = null; }
    | Array
      {
        out ElemType : TypeSymbol = null;
        out Elems    : ImmutableArray[CustomAttributeExpression] = ImmutableArray.Create();
      }
  }
  */

  ast CustomAttributeReference
  {
  stage 1:
    in NameScope : Scope;

    Name.NameScopeFactory = ScopeFactories.Attribute;
    Name.Scope            = NameScope;

    Target : CustomAttributeTarget?;
    Name   : QualifiedReference;
    // TODO: Map arguments
  }

  abstract ast CustomAttributeTarget
  {
    | Assembly
    | Module
    | Field
    | Event
    | Method
    | Param
    | Property
    | Return
    | Type
    | Typevar
  }

  ast GlobalAttributes : NamespaceMember
  {
    OpeningOut           = OpeningIn;
    Attributes.NameScope = CurrentScope;

    Attributes : CustomAttributeReference*;
  }
}
