using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace DotNet
{
  public variant CustomAttributeExpression
  {
    | Bool   { Literal : bool; }
    | Byte   { Literal : byte; }
    | Char   { Literal : char; }
    | Double { Literal : double; }
    | Float  { Literal : float; }
    | Int    { Literal : int; }
    | Long   { Literal : long; }
    | Sbyte  { Literal : sbyte; }
    | Short  { Literal : short; }
    | String { Literal : string; }
    | Uint   { Literal : uint; }
    | Ulong  { Literal : ulong; }
    | Ushort { Literal : ushort; }
    | Type   { Literal : TypeSymbol = null; }
    | Array
      {
        ElemType : TypeSymbol;
        Elems    : IList[CustomAttributeExpression];
      }
      
    public override ToString() : string
    {
      match (this)
      {
        | Bool  (v) => v.ToString()
        | Byte  (v) => v.ToString()
        | Char  (v) => v.ToString()
        | Double(v) => v.ToString()
        | Float (v) => v.ToString()
        | Int   (v) => v.ToString()
        | Long  (v) => v.ToString()
        | Sbyte (v) => v.ToString()
        | Short (v) => v.ToString()
        | String(v) => v.ToString()
        | Uint  (v) => v.ToString()
        | Ulong (v) => v.ToString()
        | Ushort(v) => v.ToString()
        | Type  (v) => v.ToString()
        | Array as x => $<#array[..$(x.Elems)]#>
      }
    }
  }
}
