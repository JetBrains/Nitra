using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace DotNet
{
  public class CustomAttributeLookupScope : Scope
  {
    public this(scope : Scope)
    {
      _scope = scope;
    }

    private _scope : Scope;
    
    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      _scope.FindMany(predicate, ref results)
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      _scope.BindMany(reference, ref results);

      // TODO: do not perform speculative binding on @-prefixed names
      def reference2 = Reference(reference.File, reference.Span, reference.Text + "Attribute");
      _scope.BindMany(reference2, ref results);
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      _scope.MakeCompletionList(prefix)
    }

    public override ToString() : string
    {
      "attribute lookup for " + _scope
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(_scope, writer);
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      def scope = metadataReader.ReadObject(reader);
      CustomAttributeLookupScope(scope)
    }
  }
}
