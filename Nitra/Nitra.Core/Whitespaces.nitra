syntax module Whitespaces
{
  using Identifiers;

  regex Any = ['\u0000'..'\uFFFF'];

  regex UnicodeLineSeparator = '\u2028';
  regex UnicodeParagraphSeparator = '\u2029';
  regex NewLineCharacter = '\n' | '\r' | UnicodeLineSeparator | UnicodeParagraphSeparator;
  regex NewLine = "\r\n" | NewLineCharacter;

  regex Whitespace = [Zs] | '\t' | '\v' | '\f' | '\uFEFF';
  regex Space = Whitespace | NewLineCharacter;
  regex Spaces = Space+;

  token IgnoreToken
  {
    | SpaceToken = Spaces;
  }

  void s = IgnoreToken*;                // optional spacer
  void S = !IdentifierPartCharacters s; // identifier break spacer

  span class Keyword = ['a'..'z', '_']['a'..'z', '_']+;
}
