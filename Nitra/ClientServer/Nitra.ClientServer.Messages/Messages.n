using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.ClientServer.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Messages
{
  [NitraMessage]
  public class Message
  {
    public static AssemblyVersionGuid : string = MakeGuidString();
  }

  [NitraMessage]
  public struct NSpan
  {
    public StartPos : int;
    public EndPos   : int;
    public Length   : int { get { EndPos - StartPos }}
  }
  
  [NitraMessage]
  public variant FileChange
  {
    | Insert { pos: int; text: string }
    | Delete { span: NSpan }
    | Replace { span: NSpan; text: string }
  }

  [NitraMessage]
  public struct DynamicExtensionInfo
  {
    public Name : string;
    public Path : string;
    
    public override ToString() : string { "DynamicExtension: " + Name }
  }
  
  [NitraMessage]
  public struct LanguageInfo
  {
    public Name              : string;
    public Path              : string;
    public DynamicExtensions : ImmutableArray[DynamicExtensionInfo];
    
    public override ToString() : string { "Language: " + Name }
  }
  
  [NitraMessage]
  public class RouterMessage : Message
  {
  }

  [NitraMessage]
  public variant ClientMessage : RouterMessage
  {
    | CheckVersion             { assemblyVersionGuid : string; }
    | SolutionStartLoading     { fullPath : string; }
    | SolutionLoaded           { fullPath : string; }
    | SolutionUnloaded         { }
    | ProjectStartLoading      { id : int; fullPath : string; Languages : ImmutableArray[LanguageInfo]; }
    | ProjectLoaded            { id : int; }
    | ProjectUnloaded          { id : int; }
    | ProjectRaname            { oldId : int; newId : int; newPath : string; }
    | ProjectReferenceLoaded   { projectId : int; referencedProjectId : int; }
    | ProjectReferenceUnloaded { projectId : int; referencedProjectId : int; }
    | ReferenceLoaded          { projectId : int; name : string; }
    | ReferenceUnloaded        { projectId : int; name : string; }
    | FileLoaded               { projectId : int; fullPath : string; id : int; }
    | FileUnloaded             { id : int; }
    | FileRanamed              { oldId : int; newId : int; newPath : string; }
    | FileInMemoryLoaded       { projectId : int; id : int; name : string; content : string }
    | FileActivated            { id : int; pipeName: string }
    | FileDeactivated          { id : int }
    | FileChanged              { id : int; change: FileChange }
    | FileChangedBatch         { id : int; changes : ImmutableArray[FileChange] }
    | Shutdown                 { }
    
    public override ToString() : string
    {
      match (this)
      {
        | CheckVersion             (assemblyVersionGuid)           => $<#CheckVersion            ($assemblyVersionGuid)#>
        | SolutionStartLoading     (fullPath)                      => $<#SolutionStartLoading    ($fullPath)#>
        | SolutionLoaded           (fullPath)                      => $<#SolutionLoaded          ($fullPath)#>
        | SolutionUnloaded                                         =>  <#SolutionUnloaded        ()#>
        | ProjectStartLoading      (id, fullPath, languages)       => $<#ProjectStartLoading     ($id, $fullPath, $languages)#>
        | ProjectLoaded            (id)                            => $<#ProjectLoaded           ($id)#>
        | ProjectUnloaded          (id)                            => $<#ProjectUnloaded         ($id)#>
        | ProjectRaname            (oldId, newId, newPath)         => $<#ProjectRaname           ($oldId, $newId, $newPath)#>
        | ProjectReferenceLoaded   (projectId, refProjectId)       => $<#ProjectReferenceLoaded  ($projectId, $refProjectId)#>
        | ProjectReferenceUnloaded (projectId, refProjectId)       => $<#ProjectReferenceUnloaded($projectId, $refProjectId)#>
        | ReferenceLoaded          (projectId, fullPath)           => $<#ReferenceLoaded         ($projectId, $fullPath)#>
        | ReferenceUnloaded        (projectId, fullPath)           => $<#ReferenceUnloaded       ($projectId, $fullPath)#>
        | FileLoaded               (projectId, fullPath, id)       => $<#FileLoaded              ($projectId, $fullPath, $id)#>
        | FileUnloaded             (id)                            => $<#FileUnloaded            ($id)#>
        | FileRanamed              (oldId, newId, newPath)         => $<#FileRanamed             ($oldId, $newId, $newPath)#>
        | FileInMemoryLoaded       (projectId, id, name, content)  => $<#FileInMemoryLoaded      ($projectId, $id, $name, $content)#>
        | FileActivated            (id, pipeName)                  => $<#FileActivated           ($id, $pipeName)#>
        | FileDeactivated          (id)                            => $<#FileDeactivated         ($id)#>
        | FileChanged              (id, change)                    => $<#FileChanged             ($id, $change)#>
        | FileChangedBatch         (id, changes)                   => $<#FileChangedBatch        ($id, $changes)#>
        | Shutdown                                                 =>  <#Shutdown                ()#>
      }
    }
  }
  
  [NitraMessage]
  public struct OutliningInfo
  {
    public Span               : NSpan;
    public IsDefaultCollapsed : bool;
    public IsImplementation   : bool
  }
  
  [NitraMessage]
  public variant ServerMessage
  {
    | OutliningCreated { fileId: int; outlining: ImmutableArray[OutliningInfo] }
    
    public override ToString() : string 
    {
      match (this)
      {
        | OutliningCreated(fileId, outlining) => $<#OutliningCreated($fileId, outlining)#>
      }
    }
  }
  
  public enum ReflectionKind
  {
    | Normal
    | Ambiguous
    | Deleted
  }

  [NitraMessage]
  public class ReflectionStruct
  {
    //public Info        : INitraReflection                     { get; }
    public Description : string { get; }
    public Kind : ReflectionKind { get; }
    public Span : NSpan { get; }
    public Children : ImmutableArray[ReflectionStruct] { get; }
  }
  
  [NitraMessage]
  public class Language
  {
    public FullName: string
  }
  
  [NitraMessage]
  public class Style
  {
    public Language        : Language;
    public Name            : string;
    public FullName        : string;
    public ForegroundColor : int
  }
  
  [NitraMessage]
  public class SpanClass
  {
    public Language : Language;
    public Name     : string;
    public FullName : string;
    public Style    : Style
  }
  
  [NitraMessage]
  public struct SpanInfo
  {
    public Span      : NSpan;
    public SpanClass : SpanClass
  }
  
  [NitraMessage]
  public class GrammarDescriptor
  {
    public FullName: string;
    public AssemblyLocation: string
  }
  
  [NitraMessage]
  public class LibReference
  {
    public Name: string
  }
}