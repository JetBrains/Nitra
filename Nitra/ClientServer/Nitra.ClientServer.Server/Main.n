using System.Threading;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server;

using System;
using System.Console;
using System.Globalization;
using System.IO;
using System.IO.Pipes;
using System.Collections.Generic;
using System.Linq;

module Program
{
  Main(args : array[string]) : void
  {
    when (args.Length != 2)
    {
      Log("Invalid parameters number, expected: <request pipe name> <response pipe name>");
      Environment.Exit(42);
    }
    
    assert2(false, "Srart debugger");
    def requestPipeName = args[0];
    def responsePipeName = args[1];
    
    using (pipeServer = NamedPipeServerStream(responsePipeName, PipeDirection.Out))
    {
      def writer = BinaryWriter(pipeServer);
      
      def sendResponse(msg : ServerMessage) : void
      {
        when (!pipeServer.IsConnected) assert2(true);
        msg.Serialize(writer);
      }
      
      using (pipeClient = NamedPipeClientStream(".", requestPipeName, PipeDirection.InOut))
      {
        def router = Router(sendResponse);
        
        // Connect to the pipe or wait until the pipe is available.
        Write("Attempting to connect to pipe...");
        pipeClient.Connect();
    
        Log("Connected to pipe.");
        Log("There are currently {0} pipe server instances open.", pipeClient.NumberOfServerInstances);
        //def writer = BinaryWriter(pipeClient);
        def ServerPipeReader()
        {
          def thread = Thread.CurrentThread;
          thread.Name = "ServerPipeReader";
          thread.CurrentCulture = CultureInfo.InvariantCulture;
          
          using (reader = BinaryReader(pipeClient))
          {
            def loop()
            {
              try
              {
                router.AddMessage(Deserializer.Deserialize(reader));
                loop()
              }
              catch
              {
                | _ is EndOfStreamException when !pipeClient.IsConnected =>
                  Log("Session has been terminated.")
                | e => 
                  Log(string.Format("Message read error: {0}", e));
                  loop()
              }
            }
              
            loop()
          }
        }
        def readerThread = Thread(ServerPipeReader);
        readerThread.IsBackground = true;
        readerThread.Start();
        Log("Server started.");
        router.Wait();
        Log("Server stopped.")
      }
    }
  }
  
  Log(msg : string, params args: array[object]) : void
  {
    WriteLine(msg, args);
  }
}