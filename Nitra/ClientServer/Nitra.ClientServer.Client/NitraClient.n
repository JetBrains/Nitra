using System.Globalization;
using System.Threading;
using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;

using System;
using System.Console;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Reflection;

namespace Nitra.ClientServer.Client
{
  using Nitra.ClientServer.Messages.ServerMessage;
  
  public sealed class NitraClient : IDisposable
  {
    public StringManager : StringManager;
    RequestPipeName      : string = Guid.NewGuid().ToString();
    ResponsePipeName     : string = Guid.NewGuid().ToString();
    
    _serverPipeClient    : IDisposable;
    mutable _isDisposed  : bool;
    
    _serverProc : Process;
    _pipeServer : NamedPipeServerStream;
    _writer     : BinaryWriter;
    
    public this(stringManager : StringManager, onServerMessage: ServerMessage -> void)
    {
      StringManager = stringManager;
      def executingAssemblyPath = Assembly.GetExecutingAssembly().Location;
      def assembliesPath        = Path.GetDirectoryName(executingAssemblyPath);
      def serverPath            = Path.Combine(assembliesPath, "Nitra.ClientServer.Server.exe");
      def _serverProc           = Process.Start(serverPath, RequestPipeName + ";" + ResponsePipeName);
      assert(_serverProc != null);
      _pipeServer = NamedPipeServerStream(RequestPipeName, PipeDirection.InOut);
      _pipeServer.WaitForConnection();
      _writer = BinaryWriter(_pipeServer);
      _serverPipeClient = StartServerMessageReader(onServerMessage);
      Send(ClientMessage.CheckVersion(Message.AssemblyVersionGuid));
    }
    
    StartServerMessageReader(onServerMessage: ServerMessage -> void) : IDisposable
    {
      def pipeClient = NamedPipeClientStream(".", ResponsePipeName, PipeDirection.InOut);
      
      def ServerPipeReader()
      {
        def thread = Thread.CurrentThread;
        thread.Name = "ServerPipeReader";
        thread.CurrentCulture = CultureInfo.InvariantCulture;
      
        using (reader = BinaryReader(pipeClient))
        {
          def loop()
          {
            try
            {
              onServerMessage(Deserializer.Deserialize(reader));
              loop()
            }
            catch
            {
              | _ is EndOfStreamException when !pipeClient.IsConnected =>
                Log("Session has been terminated.")
              | e => 
                Log($"Message read error: $e");
                loop()
            }
          }
          
          loop()
        }
      }
      def readerThread = Thread(ServerPipeReader);
      readerThread.IsBackground = true;
      readerThread.Start();
      Log("Server started.");
      pipeClient
    }
    
    public Send([NotNull] msg : ClientMessage) : void
    {
      when (!_pipeServer.IsConnected)
      {
        assert2(true);
      }
      msg.Serialize(_writer);
    }
    
    public Flush() : void
    {
      _writer.Flush();
    }
    
    public Dispose() : void
    {
      when (_isDisposed)
        return;
        
      Send(Messages.ClientMessage.Shutdown());
      
      _pipeServer.Dispose();
      _serverPipeClient.Dispose();
      _isDisposed = true;
      GC.SuppressFinalize(this);
    }
    
    protected override Finalize() : void
    {
      Dispose();
    }
    
    Log(msg : string, params args: array[object]) : void
    {
      WriteLine(msg, args);
    }
  }
}
