using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  public class OpenNamespaceOrTypeContext : Context, INemerleEnvironmentContext
  {
    public OpenPath      : G.QualifiedIdentifier { get; }
    public OpenSymbol    : option[Symbol]        { get; }
    public IsAlreadyOpen : bool                  { get; }

    public this(parent : Context, path : G.QualifiedIdentifier)
    {
      base(parent);
      OpenPath   = path;
      def scopeContext = GetParent.[EnteredScopeContext]();
      (OpenSymbol, IsAlreadyOpen) = match (scopeContext.TryBind(path))
      {
        | Some(symbol) as result =>
          def checkAlreadyOpen(_ : OpenNamespaceOrTypeContext)
          {
            | null => (result, false)
            | OpenNamespaceOrTypeContext(OpenSymbol = Some(other)) as context when symbol : object == other =>
              using(rootMsg = NitraProject.CurrentProject.RootWarning(path.Location, $"Symbol '$(symbol.FullName)' is already open (see related messages)", -1))
                rootMsg.Hint(context.OpenPath.Location, "Previous definition.");
              (None(), true)

            | context => checkAlreadyOpen(context.TryGetParent.[OpenNamespaceOrTypeContext]())
          }
          checkAlreadyOpen(parent.TryGetContext.[OpenNamespaceOrTypeContext]())

        | None() as result =>
          // FIXME: we can't determine if that namespace actualy does not exists
          (result, false)
      }
    }

    [Memoize]
    GetNemerleEnvironment() : GlobalEnv implements INemerleEnvironmentContext.GetNemerleEnvironment
    {
      def parentEnv = Parent.GetNemerleEnvironment();
      if (IsAlreadyOpen)
        parentEnv
      else
        parentEnv.AddOpenNamespace(OpenPath.Parts(), OpenPath.NLocation())
    }

    public override ToString() : string
    {
      OpenSymbol.Map(sym => "using " + sym.FullName) ?? "using <Error>"
    }
  }
}
