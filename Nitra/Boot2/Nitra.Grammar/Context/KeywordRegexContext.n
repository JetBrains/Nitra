using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  public class KeywordRegexContext : Context
  {
    public KeywordRegexes : list[G.RegexExpression * RuleDefSymbol] { get; }

    public this(parent : Context, matchTokens : G.RegexExpression, ruleName : G.QualifiedIdentifier)
    {
      base(parent);
      def rule = parent.Bind(ruleName);
      def parent     = TryGetParent.[KeywordRegexContext]();
      when (rule is Some(ruleSymbol))
        KeywordRegexes = (matchTokens, ruleSymbol) :: (parent?.KeywordRegexes ?? []);
    }

    public Matchers : list[RegularRuleMatcher * RuleDefSymbol] { [Memoize] get { KeywordRegexes.Map((re, rule) => (re.Typing().MakeMatcher(), rule)) } }

    public FindRule(keyword : string) : ValueOption[RuleDefSymbol]
    {
      foreach ((matcher, rule) in Matchers)
        when (matcher(keyword))
          return VSome(rule);

      VNone()
    }

    [Memoize]
    public FindRule(regularRule : RegularRule) : ValueOption[RuleDefSymbol]
    {
      def visitedSymbols = HashSet();

      def find(_ : RegularRule) : ValueOption[RuleDefSymbol]
      {
        | Chars(IsString = true) as rule =>
          def buffer = StringBuilder();
          foreach (rangeSet in rule.chars)
            _ = buffer.Append(rangeSet.Ranges.Head.from);
          FindRule(buffer.ToString())

        | Choice(first :: rules) =>
          match (find(first))
          {
            | VNone         => VNone()
            | VSome(symbol) =>
              def loop(_)
              {
                | []         => VSome(symbol)
                | r :: rules =>
                  match (find(r))
                  {
                    | VSome(otherSymbol) when otherSymbol == symbol => loop(rules)
                    | _ => VNone()
                  }
              }
              loop(rules)
          }

        | Call(SymbolRef.Some(RegularRuleSymbol as ruleSymbol)) when visitedSymbols.Add(ruleSymbol) => find(ruleSymbol.Rule)
        | _ => VNone()
      }

      find(regularRule)
    }
  }
}
