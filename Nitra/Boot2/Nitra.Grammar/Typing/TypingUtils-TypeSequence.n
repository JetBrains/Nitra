using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;
using Nitra.Typing;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxAst;

namespace Nitra.Grammar
{
  internal partial module TypingUtils
  {
    public TypeSequence(_baseRule : option[ExtensibleRuleSymbol], precedence : int, fieldName : option[string], context : Context, 
      options : RuleDefinitionOptions, leftRule : G.RuleExpression, rightRules : ListAst[G.RuleExpression], self : G.RuleExpression) : Nitra.Model.Rule
    {
      def bp1   = if (precedence < 0) -precedence + 1 else precedence;
      def bp2   = if (precedence < 0) -precedence     else precedence;
      def flat = List();
      def tryExtractSpaceSequence(rule : Rule) : void
      {
        // assume that 's' is generated whitespace rule
        match (rule)
        {
          | Sequence([String as call1, Call(s, 0) as call2])
          | Sequence([Call   as call1, Call(s, 0) as call2]) =>
            when (s.IsGenerated)
            {
              flat.Add(call1);
              flat.Add(call2);
              return
            }
          | _ => ()
        }
        flat.Add(rule);
      }
      tryExtractSpaceSequence(leftRule.Typing(_baseRule, bp1, None(), context, options));
      foreach (rule in rightRules)
        tryExtractSpaceSequence(rule.Typing(_baseRule, bp2, None(), context, options));
        
      def matchKeyMarker(rule : Rule) : bool
      {
        rule is Rule.Call(Some(MarkerSymbol(FullName="Identifiers.key")), 0)
      }

      // Устанавливаем литералам идущим за Identifiers.key свойство IsKeyToken в true
      {
        mutable mark = false;
        foreach (r in flat)
        {
          if (matchKeyMarker(r))
          {
            if (mark)
              ProjectSystem.NitraProject.CurrentProject.Error(r.Location, "The Identifiers.key marker must follow before literal.", -1);
            else
              mark = true;
          }
          else when (mark)
          {
            if (r is String as str)
              str.IsKeyToken = true;
            else
              ProjectSystem.NitraProject.CurrentProject.Error(r.Location, "The Identifiers.key marker must follow before literal.", -1);
              
            mark = false;
          }
        }
      }

      def rules = flat.NToList();
      def type  = Utils.EvaluateSequenceRuleType(rules);
      Rule.Sequence(self.Location, type, Utils.MakeName(fieldName, rules, context), rules);
    }
  }
}
