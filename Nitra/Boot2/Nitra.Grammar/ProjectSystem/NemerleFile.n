using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public abstract class NemerleFile : ConcreteFile
  {
    protected this(project : Project, index : int)
    {
      base(null);
      Project = project;
      Index   = index;
    }

    public override Project  : Project  { get; }
    public override FullName : string   { get { Location.GetFileName(Index) } }
    public override Language : Language { get { NitraLang.Instance } }
    public          Index    : int      { get; }
  }

  public class InMemoryNemerleFile : NemerleFile
  {
    public this(project : Project, source : ISource)
    {
      base(project, source.FileIndex);
      _source = source;
    }

    private mutable _source : ISource;

    public override GetSource() : SourceSnapshot  { SourceSnapshot(_source.GetText(), this) }
    public override Length      : int             { get { _source.GetText().Length } }

    public SourceChanged(newSource : ISource) : void
    {
      _source = newSource;

      ReParse();
      GetCompilerMessages().TranslateTo(Project.CompilerMessages);
    }
  }

  public class FakeNemerleFile : NemerleFile
  {
    public this (project : Project, index : int)
    {
      base(project, index);
      _source = SingleLineSourceSnapshot("", this);
    }

    private _source : SourceSnapshot;

    public override GetSource() : SourceSnapshot  { _source }
    public override Length      : int             { get { 0 } }
  }
}
