using Nitra.Runtime;
using Nitra.Typing;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public abstract class NitraProject : Nitra.Runtime.Project
  {
    public ErrorCount : int { get; private set; }

    public override Error(loc : Nitra.Location, msg : string, _num : int = -1) : void
    {
      ErrorCount++;
      Message.Error(loc.NLocation(), msg);
    }

    public override Warning(loc : Nitra.Location, msg : string, num : int = -1) : void
    {
      if (num > 0)
        Message.Warning(num, loc.NLocation(), msg);
      else
        Message.Warning(loc.NLocation(), msg);
    }

    public override Hint(loc : Nitra.Location, msg : string, _num : int = -1) : void
    {
      Message.Hint(loc.NLocation(), msg);
    }

    public override RootError   (loc : Location, msg : string, num : int = -1) : IRootCompilerMessages
    {
      Error(loc, msg, num);
      RootCompilerMessage()
    }

    public override RootWarning (loc : Location, msg : string, num : int = -1) : IRootCompilerMessages
    {
      Warning(loc, msg, num);
      RootCompilerMessage()
    }

    public override RootHint    (loc : Location, msg : string, num : int = -1) : IRootCompilerMessages
    {
      Hint(loc, msg, num);
      RootCompilerMessage()
    }

    public abstract GetAstType(symbol : RuleSymbol) : FixedType;
  }
}
