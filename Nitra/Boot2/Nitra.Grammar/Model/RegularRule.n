using Nitra.Utils;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Extensions;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;

using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace Nitra.Model
{
  [Record, StructuralEquality]
  public variant RegularRule : Located
  {
    | Choice                  { rules    : list[RegularRule]; }
    | Sequence                { rules    : list[RegularRule]; }
    | Call                    { ruleRef  : SymbolRef[RegularRuleSymbol]; }
    | Repeat                  { minCount : int; maxCount : option[int]; rule : RegularRule; }
    | RepeatWithSeparator     { minCount : int; maxCount : option[int]; rule : RegularRule; separator : RegularRule; }
    | Invert                  { rule : RegularRule; }
    | Subtract                { rule1 : RegularRule; rule2 : RegularRule; }
    | Chars                   {
                                  chars : list[RangeSet];
                                  public IsString : bool { get { chars.ForAll(_.IsSingleChar) } }
                              }
    public override Location : Location { get; }
    public Priority : int
    {
      get
      {
        match (this)
        {
          | Chars                       => 6
          | Call                        => 6
          | Repeat                      => 5
          | RepeatWithSeparator         => 5
          | Invert                      => 4
          | Subtract                    => 3
          | Sequence                    => 2
          | Choice                      => 1
        }
      }
    }

    public override ToString() : string
    {
      def callHandler(buffer, callRule)
      {
        buffer.Append(callRule.ruleRef.ToString())
      }
      def stringHandler(buffer, stringRule)
      {
        _ = buffer.Append("'");
        foreach (rangeSet in stringRule.chars)
          _ = buffer.Append(EscapeStringChar(rangeSet.Ranges.Head.from));
        buffer.Append("'")
      }
      StringBuilder().AppendRegularRule(this, callHandler, stringHandler, 0).ToString()
    }
  }

  public module RegularRuleExtensions
  {
    public IsAnyDfa(fsm : FSM) : bool
    {
      if (fsm.StateCount == 2 && fsm.OkStates.Contains(1) && !fsm.OkStates.Contains(0))
      { 
        match (fsm.Transitions)
        {
          | [Transition.Symbol(Chars=RangeSet(Ranges=[RangeSet.Range(char.MinValue, char.MaxValue)])) as t] when t.From == 0 && t.To == 1 => true
          | _ => false
        }
      }
      else
        false
    }
    
    public AppendRegularRule(this buffer : StringBuilder,
      rule            : RegularRule,
      callHandler     : StringBuilder * RegularRule.Call -> StringBuilder,
      stringHandler   : StringBuilder * RegularRule.Chars -> StringBuilder,
      currentPriority : int) : System.Text.StringBuilder
    {
      def priority = rule.Priority;
      when (priority <= currentPriority)
        _ = buffer.Append("(");
      _ = match (rule)
      {
        | Call as call                                   => callHandler(buffer, call)
        | Choice(rules)                                  => buffer.AppendRegularRules(rules, callHandler, stringHandler, priority, " | ")
        | Sequence(rules)                                => buffer.AppendRegularRules(rules, callHandler, stringHandler, priority, " ")
        | Invert(rule)                                   => buffer.Append('~').AppendRegularRule(rule, callHandler, stringHandler, priority)
        | Subtract(rule1, rule2)                         => buffer.AppendRegularRules([rule1, rule2], callHandler, stringHandler, priority, " - ")
        | Repeat(0, None, rule)                          => buffer.AppendRegularRule(rule, callHandler, stringHandler, priority).Append('*')
        | Repeat(1, None, rule)                          => buffer.AppendRegularRule(rule, callHandler, stringHandler, priority).Append('+')
        | Repeat(min, None, rule)                        => buffer.AppendRegularRule(rule, callHandler, stringHandler, priority).Append('{').Append(min).Append(",}")
        | Repeat(0, Some(1), rule)                       => buffer.AppendRegularRule(rule, callHandler, stringHandler, priority).Append('?')
        | Repeat(min, Some(max), rule) when min == max   => buffer.AppendRegularRule(rule, callHandler, stringHandler, priority).Append('{').Append(min).Append('}')
        | Repeat(min, Some(max), rule)                   => buffer.AppendRegularRule(rule, callHandler, stringHandler, priority).Append('{').Append(min).Append(',').Append(max).Append('}')
        | RepeatWithSeparator(0, None, rule, separator)  => buffer.Append('(').AppendRegularRule(rule, callHandler, stringHandler, 0).Append(", ").AppendRegularRule(separator, callHandler, stringHandler, 0).Append(")*")
        | RepeatWithSeparator(1, None, rule, separator)  => buffer.Append('(').AppendRegularRule(rule, callHandler, stringHandler, 0).Append(", ").AppendRegularRule(separator, callHandler, stringHandler, 0).Append(")+")
        | RepeatWithSeparator                            => assert(false)
        | Chars as chars when chars.IsString             => stringHandler(buffer, chars)
        | Chars([rangeSet])                              => buffer.AppendRangeSet(rangeSet)
        | Chars(rangeSets)                               =>
          _ = buffer.Append('(');
          foreach (rangeSet in rangeSets with index)
          {
            when (index > 0)
              _ = buffer.Append(" | ");
            _ = buffer.AppendRangeSet(rangeSet)
          }
          buffer.Append(')')
      }
      when (priority <= currentPriority)
        _ = buffer.Append(")");
      buffer
    }

    public AppendRegularRules(this buffer : System.Text.StringBuilder,
      rules           : list[RegularRule],
      callHandler     : StringBuilder * RegularRule.Call -> StringBuilder,
      stringHandler   : StringBuilder * RegularRule.Chars -> StringBuilder,
      currentPriority : int,
      separator       : string) : System.Text.StringBuilder
    {
      foreach (rule in rules with index)
      {
        when (index > 0)
          _ = buffer.Append(separator);
        _ = buffer.AppendRegularRule(rule, callHandler, stringHandler, currentPriority)
      }
      buffer
    }

    public AppendRangeSet(this buffer : StringBuilder, chars : RangeSet) : StringBuilder
    {
      buffer.Append('[').Append(chars.ToString()).Append(']')
    }
  }
}
