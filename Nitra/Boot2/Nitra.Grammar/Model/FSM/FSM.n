using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Assertions;
using Nitra.Model;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Model
{
  [Record]
  public variant Transition
  {
    public From : int;
    public To : int;
    | Symbol { Chars : RangeSet }
    | Epsilon

    public override ToString() : string
    {
      match (this)
      {
        | Symbol(chars) => $"Symbol($From $To [$chars])"
        | Epsilon       => $"Epsilon($From $To)"
      }
    }
  }

  public class FSM
  {
    public StateCount : int { get; }

    public Transitions : list[Transition] { get; }

    public StartState : int { get; }

    public OkStates : Set[int] { get; }

    public FailStates : Set[int]
    {
      get { Set().AddRange($[0..StateCount - 1]).RemoveRange(OkStates) }
    }

    public this()
    {
      StateCount  = 1;
      Transitions = [];
      StartState  = 0;
      OkStates    = Set();
    }

    public this(startState : int, stateCount : int)
    {
      StateCount  = stateCount;
      Transitions = [];
      StartState  = startState;
      OkStates    = Set();
    }

    private this(stateCount : int, transitions : list[Transition], startState : int, okStates : Set[int])
    {
      StateCount  = stateCount;
      Transitions = transitions;
      StartState  = startState;
      OkStates    = okStates;
    }

    public NewState() : FSM * int
    {
      def fsm = FSM(StateCount + 1, Transitions, StartState, OkStates);
      (fsm, StateCount);
    }

    public NewState(state : int) : FSM
    {
      if (state < StateCount)
        this;
      else
        FSM(state + 1, Transitions, StartState, OkStates);
    }

    public NewStartState() : FSM * int
    {
      def fsm = FSM(StateCount + 1, Transitions, StateCount, OkStates);
      (fsm, StateCount);
    }

    public NewOkState() : FSM * int
    {
      def fsm = FSM(StateCount + 1, Transitions, StartState, OkStates.Add(StateCount));
      (fsm, StateCount);
    }

    public SetStartState(state : int) : FSM
    {
      FSM(StateCount, Transitions, state, OkStates);
    }

    public SetOkStates(states : Set[int]) : FSM
    {
      FSM(StateCount, Transitions, StartState, states);
    }

    public AddOkState(state : int) : FSM
    {
      FSM(StateCount, Transitions, StartState, OkStates.Replace(state));
    }

    public AddOkStates(states : IEnumerable[int]) : FSM
    {
      FSM(StateCount, Transitions, StartState, OkStates.ReplaceRange(states));
    }

    public RemoveOkState(state : int) : FSM
    {
      FSM(StateCount, Transitions, StartState, OkStates.Remove(state));
    }

    public RemoveOkStates(states : IEnumerable[int]) : FSM
    {
      FSM(StateCount, Transitions, StartState, OkStates.RemoveRange(states));
    }

    public SetTransitions(transitions : list[Transition]) : FSM
    {
      FSM(StateCount, transitions, StartState, OkStates);
    }

    public AddTransition(t : Transition) : FSM
    {
      assert3(0 <= t.To && t.To < StateCount && 0 <= t.From && t.From < StateCount);
      FSM(StateCount, t :: Transitions, StartState, OkStates);
    }

    public IncludeFSM(fsm : FSM) : FSM * int * Set[int]
    {
      def transitions = fsm.Transitions.Fold(Transitions, (transition, transitions) =>
      {
        def from = transition.From + StateCount;
        def to = transition.To + StateCount;
        def transition = match (transition : Transition)
        {
        | Symbol(chars) => Transition.Symbol(from, to, chars);
        | Epsilon       => Transition.Epsilon(from, to);
        };
        transition :: transitions;
      });
      def newFsm = FSM(StateCount + fsm.StateCount, transitions, StartState, OkStates);
      (newFsm, fsm.StartState + StateCount, fsm.OkStates.Fold(Set(), (state, states) => states.Add(state + StateCount)))
    }
  }
}
