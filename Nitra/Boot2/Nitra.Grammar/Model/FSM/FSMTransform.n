using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nitra.Model;

using System;
using System.Console;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Model
{
  /// <summary>
  /// Description of DFSMTransform.
  /// </summary>
  public module FSMTransform
  {
    public Normalize(fsm : FSM) : FSM
    {
      def transitions = fsm.Transitions.Fold(Hashtable(), (transition : Transition, transitions) =>
        transitions.Update((transition.From, transition.To), (RangeSet(), false), (chars, epsilon) =>
          match (transition)
          {
          | Symbol(ch) => (ch.Sum(chars), epsilon);
          | Epsilon    => (chars, true);
          }
        )
      );

      def transitions = transitions.Fold([], ((from, to), (chars, epsilon), transitions) =>
      {
        def transitions = if (!chars.Ranges.IsEmpty())
          Transition.Symbol(from, to, chars) :: transitions;
        else
          transitions;

        def transitions = if (epsilon)
          Transition.Epsilon(from, to) :: transitions;
        else
          transitions;

        transitions;
      });
      fsm.SetTransitions(transitions);
    }

    public Xor(fsm1 : FSM, fsm2 : FSM) : FSM
    {
      Product([fsm1, fsm2], fun(([ok1, ok2])) { set => set.Contains(ok1) ^ set.Contains(ok2) })
    }

    public Sub(fsm1 : FSM, fsm2 : FSM) : FSM
    {
      Product([fsm1, fsm2], fun(([ok, fail])) { set => set.Contains(ok) && !set.Contains(fail) })
    }

    public Invert(fsm : FSM) : FSM
    {
      Sub(FSMBuilder.AllStrings, fsm)
    }

    public Product(fsms : list[FSM], makeIsOkState : list[int] -> (Set[int] -> bool)) : FSM
    {
      def (result, resultStart) = FSM().NewStartState();
      def (result, resultOkStates) = fsms.Fold((result, []), (fsm, (result, resultOkStates)) =>
      {
        def (result, fsmStart, fsmOkStates) = result.IncludeFSM(fsm);
        def (result, fsmOkState) = result.NewState();
        def result = result.AddTransition(Transition.Epsilon(resultStart, fsmStart));
        def result = fsmOkStates.Fold(result, (okState, result) => result.AddTransition(Transition.Epsilon(okState, fsmOkState)));
        (result, fsmOkState :: resultOkStates);
      });
      MakeDeterministic(result, makeIsOkState(resultOkStates.Reverse()))
    }

    public MakeDeterministic(fsm : FSM) : FSM
    {
      MakeDeterministic(fsm, set => set.Exists(s => fsm.OkStates.Contains(s)))
    }

    private EmptySymbolList : SCG.List[Transition.Symbol] = SCG.List();
    private EmptyEpsilonList : SCG.List[Transition.Epsilon] = SCG.List();
    private MakeDeterministic(fsm : FSM, isOkState : Set[int] -> bool) : FSM
    {
      def fsm = Normalize(fsm);
      def symbolTransitionsMap = fsm.Transitions.OfType.[Transition.Symbol]().Grouping(t => (t.From, t));
      def symbolTransitions(state)
      {
        mutable transitions;
        if (symbolTransitionsMap.TryGetValue(state, out transitions))
          transitions
        else
          EmptySymbolList
      }

      def epsilonTransitionsMap = fsm.Transitions.OfType.[Transition.Epsilon]().Grouping(t => (t.From, t));
      def epsilonTransitions(state)
      {
        mutable transitions;
        if (epsilonTransitionsMap.TryGetValue(state, out transitions))
          transitions
        else
          EmptyEpsilonList
      }

      def epsilonMove(set : Set[int])
      {
        def rec(state, set)
        {
          def states = epsilonTransitions(state).Map(_.To).Filter(state => !set.Contains(state));
          states.Fold(set.AddList(states), rec);
        }
        set.Fold(set, rec);
      }

      def stateMap = Hashtable();
      def states = Nemerle.Collections.Stack();
      mutable result = FSM();

      def addStateSet(stateSet)
      {
        def stateSet = epsilonMove(stateSet);
        match (stateMap.Get(stateSet))
        {
          | Some(resultState) => resultState;
          | None =>
            def resultState = stateMap.Count;
            stateMap.Add(stateSet, resultState);
            states.Push((stateSet, resultState));
            result = result.NewState(resultState);
            resultState;
          }
      }
      _ = addStateSet(Set().Add(fsm.StartState));
      mutable toStateCounters = array(fsm.StateCount);
      while (states.Count > 0)
      {
        def (stateSet, fromState) = states.Pop();
        def addSymbolTransition(fromCh, toCh, toState)
        {
          def transition = Transition.Symbol(fromState, toState, RangeSet().AddRange(fromCh :> char, (toCh - 1) :> char));
          result = result.AddTransition(transition);
        }

        def allChars = Hashtable();
        foreach (state in stateSet)
          foreach (transition in symbolTransitions(state))
            foreach (range in transition.Chars.Ranges)
            {
              _ = allChars.Update((range.from : int, true), [], states => transition.To :: states);
              _ = allChars.Update((range.to : int + 1, false), [], states => transition.To :: states);
            }

        def allChars = allChars.MapToArray(pair => (pair.Key[0], pair.Key[1], pair.Value));
        def allChars = allChars.SortInplace(((c1, b1, _), (c2, b2, _)) =>
          {
            def res = c1.CompareTo(c2);
            if (res == 0)
              -b1.CompareTo(b2)
            else
              res
          });

        mutable lastCh = 0;
        mutable toStateSet = Set();
        foreach ((ch, isStart, states) in allChars)
        {
          when (lastCh != ch && toStateSet.Count > 0)
            addSymbolTransition(lastCh, ch, addStateSet(toStateSet));
          lastCh = ch;
          foreach (state in states)
          {
            if (isStart)
            {
              ++toStateCounters[state];
              when (toStateCounters[state] == 1)
                toStateSet = toStateSet.Add(state);
            }
            else
            {
              --toStateCounters[state];
              when (toStateCounters[state] == 0)
                toStateSet = toStateSet.Remove(state);
            }
          }
        }
        assert3(toStateSet.Count == 0);
      }
      foreach (kv in stateMap)
        when (isOkState(kv.Key))
          result = result.AddOkState(kv.Value);
      Minimize(result);
    }

    public Minimize(fsm : FSM) : FSM
    {
      when (fsm.OkStates.Count == 0)
        return FSM();
      def fsm = Normalize(fsm);
      def (fsm, failState) = fsm.NewState();
      def transitions = array(fsm.StateCount);
      foreach ((state, stateTransitions) in fsm.Transitions.Cast.[Transition.Symbol]().Grouping(t => (t.From, t)).KeyValuePairs)
      {
        def ranges = SCG.List();
        foreach (transition in stateTransitions)
          foreach (range in transition.Chars.Ranges)
            ranges.Add((range.from : int, range.to : int + 1, transition.To));
        ranges.Sort((l, r) => l[0].CompareTo(r[0]));
        def result = SCG.List();
        mutable last = 0;
        foreach ((start, end, stateTo) in ranges)
        {
          when (start != last)
            result.Add((last, failState));
          result.Add((start, stateTo));
          last = end;
        }
        when (char.MaxValue : int + 1 != last)
          result.Add((last, failState));
        assert3(transitions[state] == null);
        transitions[state] = result.ToArray();
      }
      for (mutable i = 0; i < transitions.Length; ++i)
        when (transitions[i] == null)
          transitions[i] = array[(0, failState)];
      def stateGroups = SCG.List();
      def stateMap = array(fsm.StateCount);
      stateGroups.Add(SCG.List());
      foreach (state in fsm.OkStates)
      {
        stateMap[state] = 0;
        stateGroups[0].Add(state);
      }
      stateGroups.Add(SCG.List());
      foreach (state in fsm.FailStates)
      {
        stateMap[state] = 1;
        stateGroups[1].Add(state);
      }
      def mapTransitions(stateMap, transitions, state, map)
      {
        map.Clear();
        mutable last = -1;
        mutable lastState = stateMap[failState];
        foreach ((signal, to) in transitions[state])
        {
          def to = stateMap[to];
          when (lastState != to)
          {
            map.Add((last, lastState));
            last = signal;
            lastState = to;
          }
        }
        map.Add((last, lastState));
      }
      def listEqueals(l, r)
      {
        if (l.Count == r.Count)
        {
          res:
          {
            for (mutable i = 0; i < l.Count; ++i)
              when (!l[i].Equals(r[i]))
                res(false);
            true
          }
        }
        else
          false
      }
      mutable updated = true;
      def pattern = SCG.List();
      def cur = SCG.List();
      mutable newGroup = SCG.List();
      while (updated)
      {
        updated = false;
        for (mutable stateGroup = 0; stateGroup < stateGroups.Count;)
        {
          assert3(newGroup.Count == 0);
          def group = stateGroups[stateGroup];
          when (group.Count == 1)
          {
            ++stateGroup;
            continue;
          }
          mapTransitions(stateMap, transitions, group[0], pattern);
          mutable i = 1;
          mutable j = 1;
          for (; i < group.Count; ++i)
          {
            mapTransitions(stateMap, transitions, group[i], cur);
            if (listEqueals(pattern, cur))
            {
              group[j] = group[i];
              ++j;
            }
            else
            {
              newGroup.Add(group[i]);
            }
          }
          if (i != j)
          {
            updated = true;
            group.RemoveRange(j, i - j);
            foreach (state in newGroup)
              stateMap[state] = stateGroups.Count;
            stateGroups.Add(newGroup);
            newGroup = SCG.List();
          }
          else
            ++stateGroup;
        }
      }
      def failGroup = stateMap[failState];
      def startGroup = stateMap[fsm.StartState];
      mutable newFsm = FSM(0, stateGroups.Count - 1);
      mutable addedGroups = 1;
      def groupMap = array(stateGroups.Count);
      for (mutable i = 0; i < groupMap.Length; ++i)
        groupMap[i] = -1;
      def groupsToProcess = SCG.Queue();
      groupsToProcess.Enqueue(startGroup);
      groupMap[startGroup] = 0;
      mutable okStates = Set();
      while (groupsToProcess.Count > 0)
      {
        def groupIndex = groupsToProcess.Dequeue();
        def group = stateGroups[groupIndex];
        def from = groupMap[groupIndex];
        mapTransitions(stateMap, transitions, group[0], cur);
        when (fsm.OkStates.Contains(group[0]))
          okStates = okStates.Replace(from);
        mutable last = -1;
        mutable lastGroup = failGroup;
        def getNewState()
        {
          if (groupMap[lastGroup] == -1)
          {
            groupsToProcess.Enqueue(lastGroup);
            groupMap[lastGroup] = addedGroups;
            ++addedGroups;
            groupMap[lastGroup];
          }
          else
            groupMap[lastGroup];
        }
        foreach ((signal, to) in cur)
        {
          when (lastGroup != failGroup)
            newFsm = newFsm.AddTransition(Transition.Symbol(from, getNewState(), RangeSet().AddRange(last :> char, (signal - 1) :> char)));
          last = signal;
          lastGroup = to;
        }
        when (lastGroup != failGroup)
          newFsm = newFsm.AddTransition(Transition.Symbol(from, getNewState(), RangeSet().AddRange(last :> char, char.MaxValue)));
      }
      FSMTransform.Normalize(newFsm.SetOkStates(okStates));
    }
  }
}
