using Nitra.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  [Record, ExportableSymbol]
  public abstract class TokenLiteralSymbol : SingleDefSymbol
  {
    // TODO: Не ясно нормально ли здеь хранить строки. Ведь это не позволит ассоциировать сгенерированные поля с TokenLiteralSymbol
    public abstract StringLiterals : list[string] { get; }
    public override Description    : string { get "literal" }
  }

  [Record]
  public sealed class ParsedTokenLiteralSymbol : TokenLiteralSymbol
  {
    private _stringLiterals : ListAst[G.StringLiteral];

    public override StringLiterals : list[string] { [Memoize] get { _stringLiterals.MapToList(_.Value())  } }
  }
}
