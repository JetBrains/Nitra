using Nitra.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  [Record]
  public abstract class RuleSymbol : SingleDefSymbol
  {
    public abstract DeclarationSite : IRuleDeclarationSite { get }
    public          DeclaringModule : SyntaxModuleSymbol
    {
      get
      {
        def loop(_ : IRuleDeclarationSite) : SyntaxModuleSymbol
        {
          | null                                  => assert(false)
          | declaringModule is SyntaxModuleSymbol => declaringModule
          | site                                  => loop(site.DeclarationSite)
        }
        loop(DeclarationSite)
      }
    }

    public ModuleRelativeName : list[string]
    {
      [Memoize] get
      {
        def loop(site : IRuleDeclarationSite, acc)
        {
          match (site)
          {
            | null                     => assert(false)
            | _ is SyntaxModuleSymbol  => acc
            | site                     => loop(site.DeclarationSite, site.Name :: acc)
          }
        }
        loop(DeclarationSite, [Name])
      }
    }

    public AstModuleRelativeName : list[string]
    {
      [Memoize] get
      {
        def loop(site : IRuleDeclarationSite, acc)
        {
          match (site)
          {
            | null                     => assert(false)
            | _ is SyntaxModuleSymbol  => acc
            | _ is ExtensionRuleSymbol => loop(site.DeclarationSite, site.Name :: "Nested" :: acc)
            | site                     => loop(site.DeclarationSite, site.Name :: acc)
          }
        }
        loop(DeclarationSite, [Name])
      }
    }
  }
}
