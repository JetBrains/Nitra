using Nemerle;

using Nitra.Model;
using Nitra.Runtime;
using Nitra.Typing.RuleMethod;

using System;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  public enum SimpleRuleKind
  {
    | Normal
    | Token
    | Void
  }

  [Record, ExportableSymbol]
  public abstract class SimpleRuleSymbol : SyntaxRuleSymbol, IRuleDeclarationSite
  {
    public abstract Kind        : SimpleRuleKind { get; }
    public override Description : string
    {
      get
      {
        match (Kind)
        {
          | Normal => "simple rule"
          | Token  => "token rule"
          | Void   => "void rule"
        }
      }
    }
    public abstract SpliceSource : SymbolRef[SimpleRuleSymbol] { get; }
  }

  [Record, ChemicalSymbol]
  public abstract class BaseSimpleRuleSymbol : SimpleRuleSymbol
  {
    public override IdInGrammar         : int        { [Memoize] get { DeclaringModule.GetNewRuleId() } }
    public override FirstCharLowerBound : char       {           get { FirstCharBounds[0] } }
    public override FirstCharUpperBound : char       {           get { FirstCharBounds[1] } }
    private         FirstCharBounds     : CharBounds { [Memoize] get { EvalFirstCharBounds(Rule) } }
    public override CanParseEmptyString : bool { get { EvalCanParseEmptyString() } }

    enum CanParseEmptyStringValue : byte
    {
      | NotComputed = 0
      | Computing
      | True
      | False
    }

    [RecordIgnore] mutable _canParseEmptyString : CanParseEmptyStringValue;

    protected EvalCanParseEmptyString() : bool
    {
      def canBeEmpty(rule : Rule) : bool
      {
        | Repeat(0, _, _)                         => true
        | Repeat                                  => false
        | RepeatWithSeparator(0, _, _, _, _)      => true
        | RepeatWithSeparator                     => false
        | Sequence(rules)                         => rules.ForAll(canBeEmpty)
        | Call(Some(ruleRef is RuleDefSymbol), _) => ruleRef.CanParseEmptyString
        | Call(Some(MarkerSymbol), _)             => true
        | Call(None, _)                           => false // error reporting already done
        | Call                                    => assert3(false)
        | String("")                              => true
        | String                                  => false
        | Not                                     => true
        | And                                     => true
      }

      match (_canParseEmptyString)
      {
        | NotComputed =>
          _canParseEmptyString = CanParseEmptyStringValue.Computing;
          def result = this.Rule.Rules.ForAll(canBeEmpty);
          _canParseEmptyString = if (result) CanParseEmptyStringValue.True else CanParseEmptyStringValue.False;
          result

        | Computing =>
          Project.CurrentProject.Error(this.FirstLocation, "Left recursion detected.", -1);
          false

        | True  => true
        | False => false
      }
    }
  }

  public sealed class ParsedSimpleRuleSymbol : BaseSimpleRuleSymbol
  {
    public this(ast : G.SimpleRule.Ast, declarationSite : IRuleDeclarationSite)
    {
      base(ast.Name);

      _ast            = ast;
      DeclarationSite = declarationSite;
    }

    private _ast                        : G.SimpleRule.Ast;

    public override Kind                : SimpleRuleKind              { get SimpleRuleKind.Normal }
    public override DeclarationSite     : IRuleDeclarationSite        { get; }
    public override Type                : RuleType                    { [Memoize] get { RuleType.Ref(this) } }
    public override Options             : RuleDefinitionOptions       {           get { _ast.Options() } }
    public override Rule                : Rule.Sequence               {           get { _ast.TypedRule } }
    public override LastLocation        : option[Location]            { [Memoize] get { Some(_ast.SimpleRuleBody.GetLastLocation()) } }
    public override SpliceSource        : SymbolRef[SimpleRuleSymbol] { get; default SymbolRef.None(Location.Default, true) }
  }

  public sealed class ParsedTokenRuleSymbol : BaseSimpleRuleSymbol
  {
    public this(ast : G.TokenRule.Ast, declarationSite : IRuleDeclarationSite)
    {
      base(ast.Name);

      _ast            = ast;
      DeclarationSite = declarationSite;
    }

    private _ast                        : G.TokenRule.Ast;

    public override Kind                : SimpleRuleKind              { get SimpleRuleKind.Token }
    public override DeclarationSite     : IRuleDeclarationSite        { get; }
    public override Type                : RuleType                    { [Memoize] get { RuleType.Ref(this) } }
    public override Options             : RuleDefinitionOptions       {           get { _ast.Options() } }
    public override Rule                : Rule.Sequence               {           get { _ast.TypedRule } }
    public override LastLocation        : option[Location]            { [Memoize] get { Some(_ast.SimpleRuleBody.GetLastLocation()) } }
    public override SpliceSource        : SymbolRef[SimpleRuleSymbol] { get; default SymbolRef.None(Location.Default, true) }
  }

  public sealed class ParsedVoidRuleSymbol : BaseSimpleRuleSymbol
  {
    public this(ast : G.VoidRule.Ast, declarationSite : IRuleDeclarationSite)
    {
      base(ast.Name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    private _ast                        : G.VoidRule.Ast;

    public override Kind                : SimpleRuleKind              { get SimpleRuleKind.Void }
    public override DeclarationSite     : IRuleDeclarationSite        { get; }
    public override Type                : RuleType                    { get { RuleType.Void() } }
    public override Options             : RuleDefinitionOptions       { get { _ast.Options() } }
    public override Rule                : Rule.Sequence               { get { _ast.TypedRule } }
    public override SpliceSource        : SymbolRef[SimpleRuleSymbol] { get; default SymbolRef.None(Location.Default, true) }
  }
}
