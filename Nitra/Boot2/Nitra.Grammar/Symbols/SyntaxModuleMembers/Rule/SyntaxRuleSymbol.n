using Nitra.Model;
using Nitra.Typing.RuleMethod;

using Nemerle;
using System;

namespace Nitra.Typing
{
  [Record]
  public abstract class SyntaxRuleSymbol : RuleDefSymbol
  {
    public abstract Rule    : Rule.Sequence     {           get; }
    public NonVoidSubRules  : list[Rule]        { [Memoize] get { Rule.Rules.Filter(rule => !(rule.Type is RuleType.Void)) } }
    public SubRules         : list[Rule]        {           get { Rule.Rules } }
    public Sequence        : SequenceCompileInfo.Ast { [Memoize] get { SequenceCompileInfo.MakeSequenceCompileInfo(this) } }
    public override IsToken : bool              {           get { Options.IsTokenRule } }

    [RecordIgnore] mutable _isEvalFirstCharBounds : bool;
    protected EvalFirstCharBounds(rule : Rule) : CharBounds
    {
      when (_isEvalFirstCharBounds) throw InvalidOperationException("Attempt to evaluate FirstCharBounds recursively.");
      _isEvalFirstCharBounds = true;
      try rule.FirstCharBounds()
      finally _isEvalFirstCharBounds = false;
    }
  }
}
