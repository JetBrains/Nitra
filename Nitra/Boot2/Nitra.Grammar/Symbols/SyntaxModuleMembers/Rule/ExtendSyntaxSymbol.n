using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtendSyntaxSymbol : SingleDefSymbol, IRuleDeclarationSite
  {
    public abstract DeclarationSite : IRuleDeclarationSite { get; }
    public abstract Extend          : ExtensibleRuleRef    { get; }
    public override Description     : string               { get { "extend syntax" } }
  }

  public sealed class ParsedExtendSyntaxSymbol : ExtendSyntaxSymbol
  {
    _ast : G.SyntaxModuleMember.ExtendSyntax;

    public this(ast : G.SyntaxModuleMember.ExtendSyntax, declarationSite : IRuleDeclarationSite)
    {
      def name = match (ast.NameOpt)
      {
        | Some((name, _)) => name.Location
        | None            => ast.BaseName.CalcLocations().Last
      };
      base(name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    public override Extend : ExtensibleRuleRef { [Memoize] get { ExtensibleRuleRef.Create(_ast.BaseName, _ast.Context.Bind(_ast.BaseName)) } }
    public override DeclarationSite : IRuleDeclarationSite { get; }
  }

  public sealed class ParsedExtendTokenSymbol : ExtendSyntaxSymbol
  {
    _ast : G.SyntaxModuleMember.ExtendToken;

    public this(ast : G.SyntaxModuleMember.ExtendToken, declarationSite : IRuleDeclarationSite)
    {
      def name = match (ast.NameOpt)
      {
        | Some((name, _)) => name.Location
        | None            => ast.BaseName.CalcLocations().Last
      };
      base(name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    public override Extend : ExtensibleRuleRef { [Memoize] get { ExtensibleRuleRef.Create(_ast.BaseName, _ast.Context.Bind(_ast.BaseName)) } }
    public override DeclarationSite : IRuleDeclarationSite { get; }
  }
}
