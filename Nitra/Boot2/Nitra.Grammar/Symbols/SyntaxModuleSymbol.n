using Nitra.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class SyntaxModuleSymbol : SingleDefSymbol, IRuleDeclarationSite, INamespaceMember
  {
    public abstract TokenLiterals   : list[TokenLiteralSymbol]      { get; }
    public abstract ExternalImports : list[SyntaxModuleSymbol]      { get; }
    public override Description     : string                        { get "syntax module" }
    public          DeclarationSite : IRuleDeclarationSite          { get null }
    public          IsSplicable     : bool                          { get SpliceSource.IsSome }
    public abstract SpliceSource    : SymbolRef[SyntaxModuleSymbol] { get; }

    [RecordIgnore] private mutable _ruleIdCounter : int;

    internal GetNewRuleId() : int
    {
      def newId = _ruleIdCounter;
      ++_ruleIdCounter;
      newId
    }
  }

  public sealed class ParsedSyntaxModuleSymbol : SyntaxModuleSymbol
  {
    private _ast : G.NamespaceMember.SyntaxModule;

    public this(ast : G.NamespaceMember.SyntaxModule)
    {
      base(ast.Name, ast.Name.Value());
      _ast = ast;
    }

    public override SpliceSource : SymbolRef[SyntaxModuleSymbol] { get; default SymbolRef.None(Location.Default, true) }

    public override TokenLiterals : list[TokenLiteralSymbol]
    {
      [Memoize] get
      {
        def loop(context : TokenLiteralContext, acc)
        {
          if (null == context)
            acc
          else
            loop(context.TryGetParent(), context.TokenLiteral :: acc)
        }
        loop(_ast.FinalContext.TryGetContext(), [])
      }
    }

    public override ExternalImports : list[SyntaxModuleSymbol]
    {
      [Memoize] get
      {
        def loop(context : OpenNamespaceOrTypeContext, acc)
        {
          if (null == context)
            acc
          else
            loop(context.TryGetParent(), if (context.OpenSymbol is Some(SyntaxModuleSymbol as symbol)) symbol :: acc else acc)
        }
        loop(_ast.FinalContext.TryGetContext(), [])
      }
    }
  }
}
