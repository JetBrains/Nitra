using Nitra.Compiler;
using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Typing;
using Nitra.Runtime;
using Nitra.Util;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;

using Nemerle.Utility;
using System;
using System.IO;
using System.Diagnostics;
using System.Linq;

using System.Reflection;
using SCG = System.Collections.Generic;
using G = NitraSyntaxAst;
using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace Nitra
{
  internal class NitraSourceImpl
  {
    private Path          : string                 { get; }
    private Manager       : ManagerClass           { get; }
    private ParserHost    : ParserHost;
    private IsUnderNitraForVisualStudio : bool;

    private static RestrictedNames : SCG.HashSet[string] = SCG.HashSet(array[
      // AST classes
      "Located",
      "Ast",
      "MissingAst",
      "AmbiguousAst",
      "Nested",

      // AST Methods
      "Equals",
      "GetHashCode",
      "GetType",
      "ReferenceEquals",
      "MemberwiseClone",
      "Finalize",
      "Read",
      "Write",
      "ToString",
      "PrettyPrint",
      "GetText",
      "FirstChar",
      "IntersectsWith",
      "Intersection",
      "Create",

      // AST Properties
      "Location",
      "PrettyPrintSource"
    ]);
    public this(path : string, manager : ManagerClass)
    {
      Path    = path;
      Manager = manager;
      IsUnderNitraForVisualStudio =
        match (AppDomain.CurrentDomain.GetData("NitraForVisualStudio"))
        {
          | x is bool => x
          | _         => false
        };
      ParserHost = ParserHost(() => [typeof(NitraSyntax).Assembly, typeof(Whitespaces).Assembly]);
      _ = UpdateCurrentProjectContext();
    }

    IsListUserDataPresent[T]() : bool
    {
      def map = Manager.UserData[typeof(SCG.List[T])];
      map != null
    }

    GetUserData[T](init : T -> void = null) : T
      where T: new(), class
    {
      def key = typeof(T);
      mutable result = Manager.UserData[key] :> T;
      when (result == null)
      {
        result = T();
        when (init != null)
          init(result);
        Manager.UserData[key] = result;
      }
      result
    }

    ResetListUserData[T]() : void
    {
      Manager.UserData[typeof(SCG.List[T])] = null
    }

    UpdateCurrentProjectContext() : CompilingNitraProject
    {
      def project = GetUserData.[CompilingNitraProject](p =>
        p.Init(Manager.ReferencedAssemblies.Select(a => a.Assembly.GetName())));
      Project.CurrentProject = project;
      project
    }

    public static Instance(path : string, manager : ManagerClass) : NitraSourceImpl
    {
      def projPath = manager.Options.ProjectPath;
      def projDir =
        if (File.Exists(projPath))
          Path.GetFullPath(Path.GetDirectoryName(projPath))
        else if (Directory.Exists(projPath))
          Path.GetFullPath(projPath)
        else
          Environment.CurrentDirectory;
      def path =
        if (IO.Path.IsPathRooted(path))
          path;
        else
          IO.Path.Combine(projDir, path);

      if (manager.UserData.Contains(path))
        manager.UserData[path] :> NitraSourceImpl;
      else
      {
        def impl = NitraSourceImpl(path, manager);
        manager.UserData[path] = impl;
        impl;
      }
    }

    [Record]
    private class ExportableSymbolData
    {
      public TypeBuilder          : TypeBuilder         { get; }
      public ExportableSymbolType : option[TypeBuilder] { get; }
    }

    [Record]
    private class ChemicalSymbolData
    {
      public TypeBuilder          : TypeBuilder         { get; }
      public ChemicalSymbolType   : option[TypeBuilder] { get; }
    }

    [Record]
    private class SplicableSyntaxModuleData
    {
      public Name : list[string] { get; }
    }

    public static AddExportableSymbol(tb : TypeBuilder, exportableSymbolType : option[TypeBuilder]) : void
    {
      def data = ExportableSymbolData(tb, exportableSymbolType);
      tb.Manager.GetListUserData.[ExportableSymbolData]().Add(data);
    }

    public static AddChemicalSymbol(tb : TypeBuilder, chemicalSymbolType : option[TypeBuilder]) : void
    {
      def data = ChemicalSymbolData(tb, chemicalSymbolType);
      tb.Manager.GetListUserData.[ChemicalSymbolData]().Add(data);
    }

    public static AddSplicableSyntaxModule(manager : ManagerClass, name : list[string]) : void
    {
      def data = SplicableSyntaxModuleData(name);
      manager.GetListUserData.[SplicableSyntaxModuleData]().Add(data);
    }

    public BeforeInheritance() : void
    {
      when (!IO.File.Exists(Path))
      {
        Message.Error($<#The "$Path" not exists.#>);
        return;
      }

      def makeWrapperClass(source : ISource, processingCount : int) : void
      {
        // request rebuilding type tree when code changed
        if (processingCount > 1 && Manager.IsIntelliSenseMode)
          Manager.RequestOnBuildTypesTree();
        else
          try Parse(source) catch { | e => Message.Error("Exception: " + e.Message); }
      }
      SubscribeSourceChangedWithCounter(Manager, Location.GetFileIndex(Path), makeWrapperClass);
    }

    public Parse(source : ISource) : void
    {
      def source = SourceSnapshot(source.GetText(), source.FileIndex, Path);
      try
      {
        def parseResult = NitraSyntax.Start(source, ParserHost);
        unless (IsUnderNitraForVisualStudio)
          foreach(error in parseResult.GetErrors())
            Message.Error(error.Location.ToNemerleLocation(), error.Message);

        // TODO: create AST when syntactic errors exist
        when (parseResult.IsSuccess)
        {
          def fileAst = NitraSyntaxAst.Start.Create(parseResult);
          def fileAsts = Manager.GetListUserData.[G.Start]();
          fileAsts.Add(fileAst);
        }
      }
      catch
      {
        | e =>
          def loc = Nitra.Location(source, 0, 1);
          Message.Error(loc.ToNemerleLocation(), e.Message);
      }
    }

    private LoadParsedSymbols(project : NitraProject, fileAsts : SCG.List[G.Start]) : bool
    {
      def errorCount = project.ErrorCount;

      foreach (start in fileAsts)
        start.CollectGlobalSymbols(project.RootNamespace);

      project.ErrorCount == errorCount
    }

    private TypeSyntaxModules(project : CompilingNitraProject, fileAsts : SCG.List[G.Start]) : bool
    {
      def errorCount   = project.ErrorCount;

      def context = RootContext(project, project.RootNamespace, Manager.CoreEnv);

      foreach (start in fileAsts)
        _ = start.MakeContext(context);

      foreach (start in fileAsts)
        start.Typing();

      // HACK: force FSM build for each regular rule symbol (shall we make new pass in regular rule typing process?)
      foreach (symbol in project.Environment.Root.GetDescendants.[ParsedRegularRuleSymbol]())
        _ = symbol.Fsm;

      project.ErrorCount == errorCount
    }

    private CheckRestrictedNames(project : CompilingNitraProject) : bool
    {
      def errorCount   = project.ErrorCount;

      def check(loc : Location, name : string) : void
      {
        when (RestrictedNames.Contains(name))
          project.Error(loc, $"Name '$name' is restricted due to internal use", 0);
      }

      foreach (syntaxModule in project.Environment.Root.GetDescendants.[ParsedSyntaxModuleSymbol]())
      {
        foreach (ruleSymbol in syntaxModule.Node.GetDescendants.[RuleSymbol]())
        {
          check(ruleSymbol.FirstLocation, ruleSymbol.Name);

          when (ruleSymbol is SyntaxRuleSymbol as s)
            foreach (ruleMethodSymbol in s.RuleMethods)
              check(ruleMethodSymbol.FirstLocation, ruleMethodSymbol.Name);

          match (ruleSymbol)
          {
            | SimpleRuleSymbol    as s with seq = s.NonVoidSubRules
            | ExtensionRuleSymbol as s with seq = s.NonVoidSubRules =>
              foreach (r in seq)
                check(r.Location, r.FieldName);

            | _ => ()
          }
        }
      }

      project.ErrorCount == errorCount
    }

    private CreateSplicableSyntaxModules(project : CompilingNitraProject) : bool
    {
      def errorCount = project.ErrorCount;

      def syntaxModules      = SCG.List();
      def addedSyntaxModules = SCG.HashSet();

      def addSyntaxModule(syntaxModule)
      {
        when (addedSyntaxModules.Add(syntaxModule))
        {
          def splicableSyntaxModuleName = syntaxModule.Node.Parent.FullNameParts + ["Splicable" + syntaxModule.Name];
          when (project.Environment.Root.BindMany.[SyntaxModuleSymbol](splicableSyntaxModuleName) is [])
          {
            foreach (sm in syntaxModule.ExternalImports)
              addSyntaxModule(sm);
            syntaxModules.Add(syntaxModule);
          }
        }
      }

      try
        foreach (data in Manager.GetListUserData.[SplicableSyntaxModuleData]())
          match (project.Environment.Root.BindMany.[SyntaxModuleSymbol](data.Name))
          {
            | [syntaxModule] => addSyntaxModule(syntaxModule)
            | _ => Message.Error($<#cant find syntax module symbol '..$(data.Name; ".")'#>)
          }
      finally ResetListUserData.[SplicableSyntaxModuleData]();

      def converter = SplicableSyntaxModuleConverter(project);
      foreach (syntaxModule in syntaxModules)
        converter.CreateSymbols(syntaxModule);
      converter.ResolveBaseRules();
      converter.RewriteRules();

      project.ErrorCount == errorCount
    }

    private MakeEmitters(project : CompilingNitraProject) : void
    {
      def environment = project.Environment;

      def syntaxModuleEmitters = Manager.GetListUserData.[SyntaxModuleEmitter]();

      foreach (syntaxModule in environment.Root.GetDescendants.[SyntaxModuleSymbol]())
      {
        | ExternalSyntaxModuleSymbol => ()
        | _ => syntaxModuleEmitters.Add(SyntaxModuleEmitter(environment, syntaxModule));
      }

      def externalSymbolEmitters = Manager.GetListUserData.[ExternalSymbolEmitter]();
      def serializationEmitter   = Manager.CreateBinarySerializationEmitter(NitraBinarySerializationMessageEmitter(), NitraSymbolRefBinarySerializationEmitterExtension(environment));
      foreach (data in Manager.GetListUserData.[ExportableSymbolData]())
        externalSymbolEmitters.Add(ExternalSymbolEmitter(environment, data.TypeBuilder, data.ExportableSymbolType, serializationEmitter));
      ResetListUserData.[ExportableSymbolData]();

      def chemicalSymbolEmitters = Manager.GetListUserData.[ChemicalSymbolEmitter]();
      foreach (data in Manager.GetListUserData.[ChemicalSymbolData]())
        chemicalSymbolEmitters.Add(ChemicalSymbolEmitter(environment, data.TypeBuilder, data.ChemicalSymbolType));
      ResetListUserData.[ChemicalSymbolData]();
    }

    private DefineAst() : void
    {
      def syntaxModuleEmitters = Manager.GetListUserData.[SyntaxModuleEmitter]();
      foreach (emitter in syntaxModuleEmitters)
        emitter.DefineSimpleAstTypes();
      foreach (emitter in syntaxModuleEmitters)
        emitter.DefineExtensionAstTypes();
      foreach (emitter in syntaxModuleEmitters)
        emitter.DefineAstMembers();
    }

    private DefineParsers() : void
    {
      def syntaxModuleEmitters = Manager.GetListUserData.[SyntaxModuleEmitter]();
      foreach (emitter in syntaxModuleEmitters)
        emitter.DefineParserTypes();
      foreach (emitter in syntaxModuleEmitters)
        emitter.DefineParserMethods();
    }

    private DefineSymbols() : void
    {
      def externalSymbolEmitters = Manager.GetListUserData.[ExternalSymbolEmitter]();
      foreach (emitter in externalSymbolEmitters)
        emitter.DefineMembers();

      def chemicalSymbolEmitters = Manager.GetListUserData.[ChemicalSymbolEmitter]();
      foreach (emitter in chemicalSymbolEmitters)
        emitter.DefineMembers();
    }

    private EmitSymbols() : void
    {
      def externalSymbolEmitters = Manager.GetListUserData.[ExternalSymbolEmitter]();
      try
      {
        foreach (emitter in externalSymbolEmitters)
          emitter.Emit();
        when (!Manager.IsIntelliSenseMode && externalSymbolEmitters.Count > 0)
        {
          def buffer = SCG.List();
          foreach (emitter in externalSymbolEmitters)
            buffer.Add(<[ typeof($(emitter.TargetSymbolType.GetMemType() : typed)) ]>);
          Manager.Hierarchy.AddAssemblyAttribute(Manager.CoreEnv, <[ Nitra.Serialization.ExportableSymbolsAttribute(array[..$buffer]) ]>);
        }
        Manager.FinalizeBinarySerializationEmitter();
      }
      finally ResetListUserData.[ExternalSymbolEmitter]();

      def chemicalSymbolEmitters = Manager.GetListUserData.[ChemicalSymbolEmitter]();
      try
        foreach (emitter in chemicalSymbolEmitters)
          emitter.Emit();
      finally ResetListUserData.[ChemicalSymbolEmitter]();
    }

    private EmitSyntaxModules() : void
    {
      def syntaxModuleEmitters = Manager.GetListUserData.[SyntaxModuleEmitter]();
      try
      {
        foreach (emitter in syntaxModuleEmitters)
          emitter.Emit();
        when (!Manager.IsIntelliSenseMode && syntaxModuleEmitters.Count > 0)
        {
          def buffer = SCG.List();
          foreach (emitter in syntaxModuleEmitters)
            buffer.Add(<[ typeof($(emitter.GrammarTB.GetMemType() : typed)) ]>);
          Manager.Hierarchy.AddAssemblyAttribute(Manager.CoreEnv, <[ Nitra.GrammarsAttribute(array[..$(buffer.ToNList())]) ]>);
        }
      }
      finally ResetListUserData.[SyntaxModuleEmitter]();
    }

    private ReadMetadata(project : NitraProject) : bool
    {
      def errorCount = project.ErrorCount;

      def makeFakeSourceSnapshot(fileName)
      {
        def fileIndex = Nemerle.Compiler.Location.GetFileIndex(fileName);
        SourceSnapshot("", fileIndex, fileName);
      }

      using (loader = ExternalSymbolLoader())
      {
        loader.Registry.Register(typeof(SyntaxModuleSymbol).Assembly);

        foreach (reference in Manager.ReferencedAssemblies)
        {
          def assembly       = reference.Assembly;
          def metadataStream = assembly.GetManifestResourceStream("Nitra.Metadata");
          when (metadataStream != null)
          {
            def assemblyId = project.GetAssemblyId(assembly.GetName());
            def location   = Nitra.Location(makeFakeSourceSnapshot(assembly.Location), 0, 0);
            def reader     = MetadataReader(metadataStream, loader.Registry, project, assemblyId, location);
            loader.AddSource(reader, location);
          }
        }

        loader.Load();
      }

      project.ErrorCount == errorCount
    }

    private WriteMetadata(project : Project) : void
    {
      unless (Manager.IsIntelliSenseMode)
      {
        def metadataFileName = Manager.Options.OutputFileName + ".nitrametadata";
        using(symbolWriter = MetadataWriter(FileStream(metadataFileName, FileMode.Create, FileAccess.Write), project))
          symbolWriter.WriteSymbols();

        Manager.Options.EmbeddedResources ::= metadataFileName + ",Nitra.Metadata";
      }
    }

    public BeforeTypedMembers() : void
    {
      when (IsListUserDataPresent.[G.Start]())
        try
        {
          def project  = UpdateCurrentProjectContext();
          def fileAsts = Manager.GetListUserData.[G.Start]();

          unless (ReadMetadata(project))
            throw Recovery();
          unless (LoadParsedSymbols(project, fileAsts))
            throw Recovery();
          unless (TypeSyntaxModules(project, fileAsts))
            throw Recovery();
          unless (CheckRestrictedNames(project))
            throw Recovery();
          unless (CreateSplicableSyntaxModules(project))
            throw Recovery();

          MakeEmitters(project);

          DefineAst();
          DefineParsers();

          WriteMetadata(project);
        }
        finally ResetListUserData.[G.Start]();
    }

    public WithTypedMembers() : void
    {
      DefineSymbols();

      EmitSymbols();
      EmitSyntaxModules();
    }

    public SubscribeSourceChangedWithCounter(manager : ManagerClass, fileIndex : int, handler : ISource * int -> void) : void
    {
      mutable counter = 0;
      manager.SubscribeSourceChanged(fileIndex, source =>
      {
        counter += 1;
        handler(source, counter);
      });
    }
  }
}
