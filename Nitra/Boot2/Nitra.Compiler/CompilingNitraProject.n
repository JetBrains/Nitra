using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Runtime;
using Nitra.Typing;
using Nitra.ProjectSystem;

using System;
using System.Reflection;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  public sealed partial class CompilingNitraProject : NitraProject
  {
    private this(manager : ManagerClass)
    {
      base(NemerleCompilerMessages());
      Manager = manager;
    }

    public ErrorCount : int { get { (CompilerMessages :> NemerleCompilerMessages).ErrorCount } }

    public Manager : ManagerClass { get; }

    private mutable _environment : EmitterEnvironment;

    public Environment : EmitterEnvironment
    {
      get
      {
        when (_environment : object == null)
          _environment = EmitterEnvironment(Manager, this);
        _environment
      }
    }

    public override Files : Seq[File] { get { _sourceFiles } }

    public override Init(referencedAssemblies : Seq[AssemblyName]) : void
    {
      base.Init(referencedAssemblies);
      _beforeInheritance = false;
      _beforeTypedMembers = false;
      _withTypedMembers = false;
      _environment = null;
      _allFiles.Clear();
      _sourceFiles.Clear();
      exportableSymbolData.Clear();
      chemicalSymbolData.Clear();
      languageEmitters.Clear();
      syntaxModuleEmitters.Clear();
      astEmitters.Clear();
      symbolEmitters.Clear();
      externalSymbolEmitters.Clear();
      chemicalSymbolEmitters.Clear();
    }

    public override GetNemerleType(symbol : Symbol) : FixedType
    {
      | ruleSymbol   is RuleSymbol   => Environment.GetParseTreeType(ruleSymbol)
      | astSymbol    is AstSymbol    => Environment.GetAstType(astSymbol)
      | symbolSymbol is SymbolSymbol => Environment.GetSymbolClass(symbolSymbol)
      | _ => assert(false, $"Cannot get Nemerle type for symbol '$symbol'")
    }

    private _allFiles    : SCG.Dictionary[int, NemerleFile] = SCG.Dictionary();
    private _sourceFiles : SCG.List[NemerleFile]            = SCG.List();

    public override MakeFakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location
    {
      mutable file;
      unless (_allFiles.TryGetValue(location.FileIndex, out file))
      {
        file = FakeNemerleFile(this, location.FileIndex);
        _allFiles.Add(location.FileIndex, file);
      }
      Nitra.Location(file, 0)
    }

    public override MakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location
    {
      mutable file;
      if (_allFiles.TryGetValue(location.FileIndex, out file))
      {
        def source   = file.GetSource();
        def startPos = source.LineColumnToPosition(LineColumn(location.Line,    location.Column));
        def endPos   = source.LineColumnToPosition(LineColumn(location.EndLine, location.EndColumn));
        Nitra.Location(source, startPos, endPos)
      }
      else
        MakeFakeNitraLocation(location)
    }

    public override CreateNemerleFile(source : ISource) : NemerleFile
    {
      def file = InMemoryNemerleFile(this, source);
      _allFiles[file.Index] = file;
      _sourceFiles.Add(file);

      mutable processingCount = 0;
      Manager.SubscribeSourceChanged(source.FileIndex, source =>
      {
        processingCount += 1;

        try
          file.SourceChanged(source);
        catch
        {
          | e => Message.Error(Nemerle.Compiler.Location(file.Index, 1, 1), e.ToString());
        }

        when (processingCount > 1 && Manager.IsIntelliSenseMode)
          Manager.RequestOnBuildTypesTree();
      }, true);

      file
    }
  }
}
