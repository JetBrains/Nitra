using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

[assembly: Nemerle.Internal.RegisterParser("Nitra.Compiler.Integration.NitraParser", ".nitra")]

namespace Nitra.Compiler.Integration
{
  [Record]
  public sealed class NitraParser : IParser
  {
    manager : ManagerClass;

    private static _compilerInvokeTag : object = object();

    public Parse(source : ISource) : Nemerle.Compiler.ParseResult
    {
      unless (manager.UserData.Contains(_compilerInvokeTag))
      {
        manager.UserData.Add(_compilerInvokeTag, _compilerInvokeTag);

        def fakeLoc = Location(source.FileIndex, 1, 1);
        def attr    = Util.locate(fakeLoc, <[ Nitra.InvokeNitraCompiler ]>);
        manager.Hierarchy.AddAssemblyAttribute(manager.CoreEnv, attr);
      }

      def project = CompilingNitraProject.Instance(manager);
      _ = project.CreateNemerleFile(source);
      Nemerle.Compiler.ParseResult([])
    }
  }
}
