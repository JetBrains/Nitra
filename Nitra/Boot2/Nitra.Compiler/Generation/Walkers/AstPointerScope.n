using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  public sealed class AstPointerScope : IVariableEmitter
  {
    private         _sequence        : SequenceCompileInfo;
    private         _baseName        : string;
    private         _constantEmitter : IConstantEmitter;
    private mutable _astPointer      : AstPointer;
    private mutable _compiled        : bool;

    // stuff for AstPointer.New
    CreateVariable(name : string) : string implements IVariableEmitter.CreateVariable { name }

    internal this(sequence : SequenceCompileInfo, baseName : string, constantEmitter : IConstantEmitter)
    {
      _sequence        = sequence;
      _baseName        = baseName;
      _constantEmitter = constantEmitter;
    }

    internal this(astPointer : AstPointer)
    {
      _astPointer = astPointer;
      _sequence   = astPointer.Sequence;
    }

    public Access() : AstPointer
    {
      assert(!_compiled);

      when (_astPointer == null)
        _astPointer = AstPointer.New(_sequence, _constantEmitter, this, _baseName);
      _astPointer
    }

    public IsAccessed() : bool { _astPointer != null }

    internal Compile(bodyCode : PExpr) : PExpr
    {
      assert(!_compiled);
      assert(_sequence != null);

      _compiled = true;
      if (_astPointer == null)
        bodyCode
      else
        <[
          def $(_astPointer.Name : global) = parseResult.GetAst(pos, ruleParser.$(_sequence.AstId : global));
          $bodyCode;
        ]>
    }
  }
}
