using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  public sealed class BinarySerializationEmitter
  {
    static _extractNameRx : Regex        = Regex(@"_N_((\w|\d|_)+)_\d+", RegexOptions.Compiled);

    _manager                   : ManagerClass;
    _helperName                : PExpr;
    _messageEmitter            : IBinarySerializationMessageEmitter;
    _extensions                : array[IBinarySerializationEmitterExtension];

    _typesMap                  : Hashtable[FixedType, PExpr * PExpr] = Hashtable();
    _typesToProcess            : SCG.Queue[FixedType] = SCG.Queue();

    _serializationParameters   : List[PParameter] = List();
    _serializationParams       : list[PParameter];
    _serializationArgs         : list[PExpr];

    _deserializationParameters : List[PParameter] = List();
    _deserializationParams     : list[PParameter];
    _deserializationArgs       : list[PExpr];

    public this(manager : ManagerClass, messageEmitter : IBinarySerializationMessageEmitter, extensions : array[IBinarySerializationEmitterExtension])
    {
      _manager        = manager;
      _messageEmitter = messageEmitter;
      _extensions     = extensions ?? array(0);

      foreach (e in _extensions)
        e.CreateParameters(this);

      _serializationParams   = _serializationParameters.ToNList();
      _serializationArgs     = _serializationParams.Map(p => <[ $(p.Name : usesite) ]>);

      _deserializationParams = _deserializationParameters.ToNList();
      _deserializationArgs   = _deserializationParams.Map(p => <[ $(p.Name : usesite) ]>);

      _helperName = PExpr.FromQualifiedIdentifier(manager, "Nitra.Internal.SerializationHelper");
    }

    public CreateSerializationParameter(desiredName : string, type : PExpr) : string
    {
      def name = Util.tmpname(desiredName);
      _serializationParameters.Add(<[ parameter: $(name : usesite) : $type ]>);
      name
    }

    public CreateDeserializationParameter(desiredName : string, type : PExpr) : string
    {
      def name = Util.tmpname(desiredName);
      _deserializationParameters.Add(<[ parameter: $(name : usesite) : $type ]>);
      name
    }

    public MakeMembersSerializationCode(owner : FixedType, members : list[IMember], objAccess : PExpr, args : list[PExpr]) : PExpr
    {
      assert2(args.Length == _serializationParams.Length);

      def body = List();
      foreach ((p, e) in _serializationParams.Zip(args))
        body.Add(<[ def $(p.Name : usesite) = $e ]>);
      foreach (m in members)
        body.Add(MakeMemberWriteCode(owner, m, objAccess));
      <[ { ..$body } ]>
    }

    public MakeMembersDeserializationCode(owner : FixedType, members : list[IMember], objAccess : PExpr, args : list[PExpr]) : PExpr
    {
      assert2(args.Length == _deserializationParams.Length);

      def body = List();
      foreach ((p, e) in _deserializationParams.Zip(args))
        body.Add(<[ def $(p.Name : usesite) = $e ]>);

      def fieldNameCases = List();
      foreach (m in members)
        fieldNameCases.Add(<[ case: | $(GetMemberName(m) : string) => $objAccess.$(m.Name : usesite) = $(MakeMemberReadCode(owner, m)) ]>);
      fieldNameCases.Add(<[ case: | name => $(_messageEmitter.EmitWarning(<[ "Data for the '" + name + "' member is ignored." ]>)) ]>);

      body.Add(<[
        def loop()
        {
          def typeCode = reader.ReadByte() :> Nitra.Serialization.TypeTag;
          when (typeCode != Nitra.Serialization.TypeTag.Empty)
          {
            def fieldName = reader.ReadString();
            match (fieldName)
            {
              ..$fieldNameCases
            }
            loop()
          }
        }
      ]>);
      body.Add(<[ loop(); ]>);
      <[ { ..$body } ]>
    }

    GetSerializableMembers(ti : TypeInfo) : list[IMember]
    {
      def mappedMemberTi = _manager.LookupTypeInfo("Nemerle.Internal.MappedMemberAttribute", 0);
      def members        = ti.GetMembers(BindingFlags.Public | BindingFlags.Instance).Filter(m => m is IField || m is IProperty);
      def memberMap      = members.ToDictionary(m => m.Name);
      def ctors          = ti.GetConstructors(BindingFlags.Public | BindingFlags.Instance);

      mutable result;

      foreach (ctor in ctors)
        when (ctor.IsCustomAttributeDefined("Nemerle.Internal.RecordCtorAttribute"))
          when (result == null || ctor.Header.Parameters.Length > result.Header.Parameters.Length)
            result = ctor;

      def makeMember(p : TParameter) : IMember
      {
        match (p.AttributesAndModifiers.FindAttribute(mappedMemberTi, _manager.CoreEnv))
        {
          | Some(<[ $_($(name : string)) ]>) => memberMap[name]
          | _ => assert3(false)
        }
      }

      if (result == null)
        []
      else
        result.Header.Parameters.Map(makeMember)
    }

    MakeMemberWriteCode(type : FixedType, member : IMember, objExpr : PExpr) : PExpr
    {
      def memberType = type.TypeOfMember(member).Fix();
      def typeCode = GetTypeTag(memberType) :> TypeTag;
      if (typeCode == TypeTag.Object || typeCode == TypeTag.Variant || typeCode :> int >= TypeTag.FirstCustom :> int)
        MakeUserDefinedTypeWriteCode(type, member, objExpr)
      else if (IsEnum(memberType.TypeInfo))
        <[
          writer.Write($(GetTypeTag(memberType)));
          writer.Write($(GetMemberName(member)));
          writer.Write($objExpr.$(member.Name : usesite) :> $(GetEnumUnderlyingType(memberType.TypeInfo).GetMemType() : typed));
        ]>
      else
        <[
          writer.Write($(GetTypeTag(memberType)));
          writer.Write($(GetMemberName(member)));
          writer.Write($objExpr.$(member.Name : usesite));
        ]>
    }

    MakeMembersWriteCode(type : FixedType, objExpr : PExpr) : option[PExpr]
    {
      match (GetSerializableMembers(type.TypeInfo))
      {
        | [] => None()
        | members =>
          def code = members.Map(m => MakeMemberWriteCode(type, m, objExpr));
          Some(<[ { ..$code } ]>)
      }
    }

    MakeRecordReadCode(type : FixedType) : PExpr
    {
      def varPrefix = "_____";
      def members = GetSerializableMembers(type.TypeInfo);
      def body = List();
      body.Add(<[ _ = typeCode; ]>);
      foreach (m in members)
        body.Add(<[ mutable $(varPrefix + m.Name : usesite); ]>);

      def fieldNameCases = List();
      foreach (m in members)
        fieldNameCases.Add(<[ case: | $(GetMemberName(m) : string) => $(varPrefix + m.Name : usesite) = $(MakeMemberReadCode(type, m)) ]>);
      fieldNameCases.Add(<[ case: | name => $(_messageEmitter.EmitWarning(<[ "Data for the '" + name + "' member is ignored." ]>)) ]>);

      def ctorArgs = members.Map(m => <[ $(varPrefix + m.Name : usesite) ]>);
      body.Add(<[
        def loop()
        {
          def typeCode = reader.ReadByte() :> Nitra.Serialization.TypeTag;
          when (typeCode != Nitra.Serialization.TypeTag.Empty)
          {
            def fieldName = reader.ReadString();
            match (fieldName)
            {
              ..$fieldNameCases
            }
            loop()
          }
        }
      ]>);
      body.Add(<[ loop() ]>);
      body.Add(<[ $(type : typed)(..$ctorArgs) ]>);
      <[ { ..$body } ]>
    }

    IsVariant(ti : TypeInfo) : bool
    {
      match (ti?.GetTydecl())
      {
        | TypeDeclaration.Alias(type) => IsVariant(type.TypeInfo)
        | TypeDeclaration.Variant     => true
        | _                           => false
      }
    }

    IsEnum(ti : TypeInfo) : bool
    {
      match (ti?.GetTydecl())
      {
        | TypeDeclaration.Alias(type) => IsEnum(type.TypeInfo)
        | TypeDeclaration.Enum        => true
        | _                           => false
      }
    }

    MakeUserDefinedTypeWriteCode(type : FixedType, member : IMember, objExpr : PExpr) : PExpr
    {
      def ti = type.TypeOfMember(member).Fix();
      def name = GetMemberName(member);
      def (writer, _) = GetWriteReadMethods(ti);
      def args = <[ $(name : string) ]> :: <[ $objExpr.$(name : usesite) ]> :: <[ writer ]> :: _serializationArgs;
      <[ $writer(..$args); ]>
    }

    MakeMemberReadCode(type : FixedType, member : IMember) : PExpr
    {
      def memberType = type.TypeOfMember(member).Fix();
      //def name = GetMemberName(member);
      def (_, reader) = GetWriteReadMethods(memberType);
      def args = <[ reader ]> :: <[ typeCode ]> :: <[ fieldName ]> :: _deserializationArgs;
      <[ $reader(..$args) ]>
    }

    GetVariantOptions(variantType : FixedType) : list[FixedType.Class]
    {
      def makeOptionType(o)
      {
        def e = _manager.CoreEnv.BindFixedType(<[ $(variantType : typed).$(o.Name : usesite) ]>); // HACK: нужно разбираться, как правильно связать типы вхождений вариантов
        e :> FixedType.Class
      }
      match (variantType.TypeInfo?.GetTydecl())
      {
        | TypeDeclaration.Alias(type)      => GetVariantOptions(type)
        | TypeDeclaration.Variant(options) => options.Map(makeOptionType)
        | _                                => Message.FatalError("Type must be 'variant'.");
      }
    }

    GetEnumUnderlyingType(ti : TypeInfo) : TypeInfo
    {
      match (ti?.GetTydecl())
      {
        | TypeDeclaration.Alias(type) => GetEnumUnderlyingType(type.TypeInfo)
        | TypeDeclaration.Enum        => ti.UnderlyingType
        | _                           => Message.FatalError("Type must be 'enum'.")
      }
    }

    MakeVariantReaderMethodBody(ty : FixedType) : PExpr
    {
      def optionCases = List();
      foreach (optionType in GetVariantOptions(ty))
      {
        def code = MakeRecordReadCode(optionType);
        optionCases.Add(<[ case: | $(optionType.TypeInfo.Name : string) => $code ]>);
      }
      optionCases.Add(<[ case: | m => $(_messageEmitter.EmitFatalError(<[ "The serialization data for '" + m + "' member is ignored."]>)); ]>);
      <[
        assert(typeCode == Nitra.Serialization.TypeTag.Variant);
        match (reader.ReadString())
        {
          ..$optionCases
        }
      ]>
    }

    MakeVariantWriterMethodBody(ty : FixedType) : PExpr
    {
      def optionCases = List();
      foreach (optionType in GetVariantOptions(ty))
      {
        def case =
          match (MakeMembersWriteCode(optionType, <[ o ]>))
          {
            | None =>
              <[ case:
                | $(optionType.TypeInfo.Name : usesite) =>
                  writer.Write($(optionType.TypeInfo.Name : string));
              ]>

            | Some(code) =>
              <[ case:
                | $(optionType.TypeInfo.Name : usesite) as o =>
                  writer.Write($(optionType.TypeInfo.Name : string));
                  $code
              ]>
          }
        optionCases.Add(case);
      }
      <[
        writer.Write($(TypeTag.Variant :> byte)); // Variant кодирует variant. Его формат отличается от объекта наличием строки поределяющей подтип.
        writer.Write(memberName);
        match (obj)
        {
          ..$optionCases
        };
        writer.Write($(TypeTag.Empty :> byte));
      ]>
    }

    MakeTypeWriteReadMethods(helperType : TypeBuilder, ty : FixedType, writer : Name, reader : Name) : void
    {
      def typeCode = GetTypeTag(ty) :> TypeTag;
      mutable readerCode : PExpr;
      mutable writerCode : PExpr;

      match (typeCode)
      {
        | TypeTag.Object =>
          writerCode =
            match (MakeMembersWriteCode(ty, <[ obj ]>))
            {
              | None =>
                <[
                  writer.Write($(TypeTag.Object :> byte));
                  writer.Write(memberName);
                  writer.Write($(TypeTag.Empty :> byte));
                ]>;

              | Some(code) =>
                <[
                  writer.Write($(TypeTag.Object :> byte));
                  writer.Write(memberName);
                  $code;
                  writer.Write($(TypeTag.Empty :> byte));
                ]>;
            }

          readerCode = MakeRecordReadCode(ty);

        | TypeTag.Variant =>
          readerCode = MakeVariantReaderMethodBody(ty);
          writerCode = MakeVariantWriterMethodBody(ty);

        | TypeTag.Empty    => assert3(false)
        | TypeTag.DateTime => assert3(false)
        | TypeTag.Boolean | TypeTag.Char   | TypeTag.SByte  | TypeTag.Byte
        | TypeTag.Int16   | TypeTag.UInt16 | TypeTag.Int32  | TypeTag.UInt32  | TypeTag.Int64
        | TypeTag.UInt64  | TypeTag.Single | TypeTag.Double | TypeTag.Decimal | TypeTag.String =>
          writerCode = null; // запись примитивных типов производится инлайн

          def cnvFuncName = <[ $("To" + typeCode.ToString() : usesite) ]>;
          readerCode = <[
              match (typeCode) //reader.ReadByte() :> TypeTag
              {
                | Nitra.Serialization.TypeTag.Empty        => assert3(false)
                | Nitra.Serialization.TypeTag.DateTime     => assert3(false)
                | Nitra.Serialization.TypeTag.Boolean      => System.Convert.$cnvFuncName(reader.ReadBoolean())
                | Nitra.Serialization.TypeTag.Char         => System.Convert.$cnvFuncName(reader.ReadChar   ())
                | Nitra.Serialization.TypeTag.SByte        => System.Convert.$cnvFuncName(reader.ReadSByte  ())
                | Nitra.Serialization.TypeTag.Byte         => System.Convert.$cnvFuncName(reader.ReadByte   ())
                | Nitra.Serialization.TypeTag.Int16        => System.Convert.$cnvFuncName(reader.ReadInt16  ())
                | Nitra.Serialization.TypeTag.UInt16       => System.Convert.$cnvFuncName(reader.ReadUInt16 ())
                | Nitra.Serialization.TypeTag.Int32        => System.Convert.$cnvFuncName(reader.ReadInt32  ())
                | Nitra.Serialization.TypeTag.UInt32       => System.Convert.$cnvFuncName(reader.ReadUInt32 ())
                | Nitra.Serialization.TypeTag.Int64        => System.Convert.$cnvFuncName(reader.ReadInt64  ())
                | Nitra.Serialization.TypeTag.UInt64       => System.Convert.$cnvFuncName(reader.ReadUInt64 ())
                | Nitra.Serialization.TypeTag.Single       => System.Convert.$cnvFuncName(reader.ReadSingle ())
                | Nitra.Serialization.TypeTag.Double       => System.Convert.$cnvFuncName(reader.ReadDouble ())
                | Nitra.Serialization.TypeTag.Decimal      => System.Convert.$cnvFuncName(reader.ReadDecimal())
                | Nitra.Serialization.TypeTag.String       => System.Convert.$cnvFuncName(reader.ReadString ())
                | Nitra.Serialization.TypeTag.Variant      => assert3(false) // ??? видимо нужно скипать variant!
                | Nitra.Serialization.TypeTag.Object       => assert3(false) // ??? видимо нужно скипать объект!
                | _                    => assert3(false)
              }
            ]>;
          when (ty is FixedType.Class(TypeInfo(IsEnum = true), []))
            readerCode = <[ $readerCode :> $(ty : typed) ]>;

        | tag when (tag :> byte) < 0 => assert3(false)
        | tag =>
          def serializerId = tag :> int - TypeTag.FirstCustom :> int;
          def extension = _extensions[serializerId];
          writerCode = <[
            writer.Write($(tag :> byte));
            writer.Write(memberName);
            $(extension.MakeWriteCode(ty, this));
          ]>;
          readerCode = extension.MakeReadCode(ty, this);
      }

      when (writerCode != null)
      {
        def parms = <[ parameter: memberName : string ]>
          :: <[ parameter: obj : $(ty : typed) ]>
          :: <[ parameter: writer : System.IO.BinaryWriter ]>
          :: _serializationParams;

        _ = helperType.DefineConditional(<[ decl:
          public $(writer : name)(..$parms) : void
          {
            $writerCode;
          } ]>);
      }

      assert2(readerCode != null);

      def parms = <[ parameter: reader : System.IO.BinaryReader ]>
        :: <[ parameter: typeCode : Nitra.Serialization.TypeTag ]>
        :: <[ parameter: memberName : string ]>
        :: _deserializationParams;

      _ = helperType.DefineConditional(<[ decl:
        public $(reader : name)(..$parms) : $(ty : typed)
        {
          try { $readerCode }
          catch
          { | e =>
            $(_messageEmitter.EmitWarning(<[ "An exception occurred while deserializing data for the '" + memberName + "' subrule. Exception: " + e.Message + "." ]>));
            $(TExpr.DefaultValue(ty) : typed);
          }
        } ]>);
    }

    GetWriteReadMethods(type : FixedType) : PExpr * PExpr
    {
      mutable value;

      if (_typesMap.TryGetValue(type, out value))
        value
      else
      {
        assert2(type.TypeInfo != null);
        def name = Util.tmpname(type.TypeInfo.Name);
        def writerName = "Serialize_" + name;
        def readerName = "Deserialize_" + name;
        def result     = (<[ $_helperName . $(writerName : usesite) ]>, <[ $_helperName . $(readerName : usesite) ]>);
        _typesMap.Add(type, result);
        _typesToProcess.Enqueue(type);
        result
      }
    }

    GetTypeTag(type : FixedType) : byte
    {
      foreach (extension in _extensions with i)
        when (extension.IsSupportedType(type))
          return (i + TypeTag.FirstCustom :> int) :> byte;

      match (type)
      {
        | FixedType.Class(ti, _) =>
          if (IsEnum(ti))
            Type.GetTypeCode(GetEnumUnderlyingType(ti).SystemType) :> byte
          else if (ti.IsPrimitive || ti.Equals(_manager.InternalType.String_tc))
            Type.GetTypeCode(ti.SystemType) :> byte
          else if (IsVariant(ti))
            TypeTag.Variant :> byte // пока используем Variant для указания, что значение это variant
          else
            TypeTag.Object :> byte

        | _ => 0
      }
    }

    GetMemberName(member : IMember) : string
    {
      def res = _extractNameRx.Match(member.Name);

      if (res.Success)
        res.Groups[1].Value
      else
        member.Name
    }

    public Emit() : void
    {
      when (_typesToProcess.Count > 0)
      {
        def env        = _manager.CoreEnv.EnterIntoNamespace(["Nitra", "Internal"]);
        def helperType =
          match (env.LookupType(["SerializationHelper"], null, 0))
          {
            | Some(type is TypeBuilder) => type
            | Some => assert(false);
            | _ =>
              def result = env.Define(<[ decl: internal module SerializationHelper { } ]>);
              def onTypeTreeBuildFinish(manager : ManagerClass) : void
              {
                manager.TypeTreeBuildFinish -= onTypeTreeBuildFinish;
                result.Compile();
              }
              _manager.TypeTreeBuildFinish += onTypeTreeBuildFinish;
              result
          };

        while (_typesToProcess.Count > 0)
        {
          def ti = _typesToProcess.Dequeue();
          match (_typesMap[ti])
          {
            | (<[ $_.$(Splicable.Name(writer)) ]>, <[ $_.$(Splicable.Name(reader)) ]>) => MakeTypeWriteReadMethods(helperType, ti, writer, reader)
            | _ => assert3(false)
          }
        }
      }
    }
  }

  internal module BinarySerializationEmitterExtensions
  {
    public CreateBinarySerializationEmitter(this manager : ManagerClass, messageEmitter : IBinarySerializationMessageEmitter, params extensions : array[IBinarySerializationEmitterExtension]) : BinarySerializationEmitter
    {
      assert2(!manager.UserData.Contains(typeof(BinarySerializationEmitter)));

      def instance = BinarySerializationEmitter(manager, messageEmitter, extensions);
      manager.UserData[typeof(BinarySerializationEmitter)] = instance;
      instance
    }

    public FinalizeBinarySerializationEmitter(this manager : ManagerClass) : void
    {
      //assert2(manager.UserData.Contains(typeof(BinarySerializationEmitter)));

      def instance = manager.UserData[typeof(BinarySerializationEmitter)] :> BinarySerializationEmitter;
      when (instance != null)
      {
        instance.Emit();
        manager.UserData.Remove(typeof(BinarySerializationEmitter));
      }
    }
  }
}
