using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal sealed class SymbolProperty
  {
    public this(property : IProperty)
    {
      Property = property;
    }

    public Property           : IProperty { get; }
    public OverriddenProperty : IProperty { get; set; }
  }

  internal module SymbolEmitterUtils
  {
    private _systemProperties : HashSet[string] = HashSet(["Description", "Locations", "FirstLocation"]);

    public GetSymbolProperties(targetSymbolType : TypeBuilder) : list[SymbolProperty]
    {
      def isSymbolProperty(p)
      {
        // TODO: add attribute check
        !_systemProperties.Contains(p.Name) && p.GetGetter()?.IsAbstract
      }
      targetSymbolType
        .GetProperties(BindingFlags.Instance | BindingFlags.Public)
        .MapFiltered(isSymbolProperty, SymbolProperty(_));
    }

    public MakeDescriptionText(text : string) : string
    {
      def length =
      {
        def symbolText = "Symbol";
        if (text.EndsWith(symbolText))
          text.Length - symbolText.Length
        else
          text.Length;
      }
      def buffer = System.Text.StringBuilder();
      mutable needWordbreak = false;
      for (mutable i = 0; i < length; ++i)
      {
        def c = text[i];
        if (char.IsUpper(c))
        {
          when (needWordbreak)
          {
            _ = buffer.Append(' ');
            needWordbreak = false;
          }
        }
        else
          needWordbreak = true;
        _ = buffer.Append(char.ToLowerInvariant(c));
      }
      buffer.ToString()
    }
  }
}
