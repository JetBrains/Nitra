using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal sealed class PostfixRuleDescriptorEmitter : RuleDescriptorEmitter[ExtensionRuleSymbol]
  {
    protected override BaseType  : PExpr  { get <[ Nitra.PostfixRuleDescriptor ]> }
    protected override ClassName : string { get "PostfixRuleDescriptor" }

    public override DefineDescriptor() : void
    {
      base.DefineDescriptor();
      DefineNewParserMethod(<[ Nitra.Internal.ExtensionRuleParser ]>);

      def baseRuleExpr = MakeRuleSelector(ruleSymbol => ruleSymbol.BaseRule.Value, _.GetRuleDescriptorRef());
      DescriptorTb.DefineConditional(<[decl: public override BaseRule : Nitra.ExtensibleRuleDescriptor { get { $baseRuleExpr } } ]>);

      def bindingPowerExpr = MakeRuleSelector(ruleSymbol => <[ $((ruleSymbol.ExtensionType :> ExtensionRuleSymbol.ExtensionRuleType.Postfix).BindingPower : int) ]>);
      DescriptorTb.DefineConditional(<[decl: public override BindingPower : int { get { $bindingPowerExpr } } ]>);
    }
  }
}
