using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Model;
using Nitra.Typing;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal interface IRuleDescriptorEmitter
  {
    RuleSymbols : Seq[RuleDefSymbol] { get; }
    DefineDescriptor() : void;
    Emit(): void;
  }

  [Record]
  internal abstract class RuleDescriptorEmitter[TRuleSymbol] : IRuleDescriptorEmitter
    where TRuleSymbol : RuleDefSymbol
  {
    public Owner       : SyntaxModuleEmitter { get; }
    public RuleSymbols : list[TRuleSymbol]   { get; }

    protected abstract BaseType  : PExpr  { get; }
    protected abstract ClassName : string { get; }

    protected virtual  BaseArgsNamesAndTypes : Seq[string * PExpr] { get { array[] } }
    protected virtual  BaseArgs(symbol : TRuleSymbol)  : Seq[PExpr] { IgnoreParams(); array[] }

    protected virtual  BaseArgsNames  : Seq[PExpr]      { get { BaseArgsNamesAndTypes.Map(x => <[ $(x[0] : global) ]>) } }
    protected virtual  BaseParameters : Seq[PParameter] { get { BaseArgsNamesAndTypes.Map(x => <[ parameter: $(x[0] : global) : $(x[1]) ]>) } }

    [RecordIgnore] protected DescriptorTb : TypeBuilder { get; private set; }

    public virtual DefineDescriptor() : void
    {
      assert(DescriptorTb == null);
      def baseParameters = [<[ parameter: idInGrammar : int ]>, <[ parameter: isTokenRule : bool ]>, <[ parameter: isKeyToken : bool ]>, <[ parameter: isVoid : bool ]>].Concat(BaseParameters);
      DescriptorTb = Owner.GrammarDescriptorImplTB.DefineNestedType(<[decl:
        private sealed class $(ClassName : usesite) : $BaseType
        {
          internal this(..$baseParameters)
          {
            base(..$BaseArgsNames);
            this.IdInGrammar = idInGrammar;
            this.IsTokenRule = isTokenRule;
            this.IsKeyToken  = isKeyToken;
            this.IsVoid      = isVoid;
          }

          public override IdInGrammar : int { get; }
          public override IsTokenRule : bool { get; }
          public override IsKeyToken  : bool { get; }
          public override IsVoid      : bool { get; }
          public override Grammar     : Nitra.GrammarDescriptor { get { $(Owner.GrammarDescriptorImplTB.GetMemType() : typed).StaticDescriptor } }
        }
      ]>);

      def nameExpr = MakeRuleSelector(ruleSymbol => <[ $( $<#..$(ruleSymbol.ModuleRelativeName; ".")#> : string) ]>);
      DescriptorTb.DefineConditional(<[decl: public override Name : string { get { $nameExpr } } ]>);

      foreach (ruleSymbol in RuleSymbols)
      {
        def ctor      = <[ $(DescriptorTb.GetMemType() : typed) ]>;
        def fieldName = ruleSymbol.DecorateRuleClassName() + "_Descriptor";
        
        Owner.GrammarDescriptorImplTB.DefineConditional(<[ decl:
          public static $(fieldName : usesite) : $BaseType = 
            $ctor
              (
                $(ruleSymbol.IdInGrammar           : int), 
                $(ruleSymbol.IsToken               : bool),
                $(ruleSymbol.Options.IsKeyToken    : bool),
                $(ruleSymbol.Type is RuleType.Void : bool),
                ..$(BaseArgs(ruleSymbol))
              );
        ]>);
      }

      if (RuleSymbols.Any(ruleSymbol => ruleSymbol.Options.SpanClassSymbol != null))
      {
        def spanClassExpr = MakeRuleSelector(
          ruleSymbol => if (ruleSymbol.Options.SpanClassSymbol != null) Some(ruleSymbol.Options.SpanClassSymbol) else None(),
          spanClass  => if (spanClass is Some(s)) Owner.Environment.MakeSpanClassRef(s) else <[ null ]>);

        DescriptorTb.DefineConditional(<[ decl: public override SpanClass : Nitra.SpanClass { get { $spanClassExpr } } ]>);
      }
      else
        DescriptorTb.DefineConditional(<[ decl: public override SpanClass : Nitra.SpanClass { get { null } } ]>);
    }

    public Emit() : void
    {
      assert(DescriptorTb != null);
      DescriptorTb.Compile();
    }

    protected MakeRuleSelector(maker : TRuleSymbol -> PExpr) : PExpr
    {
      def cases = SCG.List();
      foreach (ruleSymbol in RuleSymbols)
      {
        def expr = maker(ruleSymbol);
        cases.Add(<[ case: | $(ruleSymbol.IdInGrammar : int) => $expr ]>);
      }
      cases.Add(<[ case: | id => assert(false, $"Invalid rule id $id.") ]>);
      <[ match (this.IdInGrammar) { ..$cases } ]>
    }

    protected MakeRuleSelector[TKey](group : TRuleSymbol -> TKey, maker : TKey -> PExpr) : PExpr
    {
      def cases = SCG.List();
      foreach (pair in RuleSymbols.Grouping(r => (group(r), r)))
      {
        def patterns = pair.Value.Map(ruleSymbol => <[ $(ruleSymbol.IdInGrammar : int) ]>);
        def body     = maker(pair.Key);
        def case     = MatchCase(patterns, body);
        cases.Add(case);
      }
      cases.Add(<[ case: | id => assert(false, $"Invalid rule id $id.") ]>);
      <[ match (this.IdInGrammar) { ..$cases } ]>
    }

    protected DefineNewParserMethod(returnType : PExpr) : void
    {
      def parserExpr = MakeRuleSelector(ruleSymbol => <[ $(Owner.GrammarImplTB.GetMemType() : typed).$(ruleSymbol.DecorateRuleClassName() : global)(grammar) ]>);
      DescriptorTb.DefineConditional(<[decl:
        public override NewParser(grammar : Nitra.CompositeGrammar) : $returnType
        {
          $parserExpr
        }
      ]>);
    }

    protected DefineIsStartRuleProperty() : void
    {
      def isStartRuleExpr = MakeRuleSelector(ruleSymbol => ruleSymbol.Options.IsStart, isStart => <[ $(isStart : bool) ]>);
      DescriptorTb.DefineConditional(<[decl: public override IsStartRule : bool { get { $isStartRuleExpr } } ]>);
    }

    protected DefineEntranceMethod() : void
    {
      unless (Owner.SyntaxModule.IsSplicable)
        foreach (ruleSymbol in RuleSymbols)
        {
          def methodName = $<#..$(ruleSymbol.ModuleRelativeName; "_")#>;
          Owner.GrammarTB.DefineConditional(<[ decl:
            public static $(methodName : usesite)(source : Nitra.SourceSnapshot, parserHost : Nitra.ParserHost) : Nitra.ParseResult
            {
              parserHost.DoParsing(source, $(ruleSymbol.GetRuleDescriptorRef()))
            }
          ]>);
        }
    }
  }
}
