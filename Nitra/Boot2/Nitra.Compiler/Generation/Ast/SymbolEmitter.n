using Nitra.Typing;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class SymbolEmitter : BaseAstEmitter
  {
    public override Environment  : EmitterEnvironment { get; }
    public override TypeCompiler : NTypeCompiler      { get { Environment.DefaultTypeCompiler } }
    private         _symbol      : SymbolSymbol;
    private mutable _tb          : TypeBuilder;
    private         _serializationEmitter : BinarySerializationEmitter;
    private         _ownerEmitter         : AstEmitter;

    public this(environment : EmitterEnvironment, symbol : SymbolSymbol, serializationEmitter : BinarySerializationEmitter, ownerEmitter : AstEmitter)
    {
      Environment           = environment;
      _symbol               = symbol;
      _serializationEmitter = serializationEmitter;
      _ownerEmitter         = ownerEmitter;
    }

    public DefineTypes() : void
    {
      assert(_tb : object == null);

      def nemerleEnv = Environment.NamespaceOfSymbol(_symbol);
      Util.locate(_symbol.FirstLocation.NLocation(),
      {
        def astType = Environment.GetAstType(_symbol.Declaration);
        match(_symbol)
        {
          | ParsedAbstractSymbolSymbol =>
            _tb = CreateTypeBuilder(nemerleEnv, _ownerEmitter, <[ decl:
              public partial interface $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes())
              {
                new Declarations : System.Collections.Generic.IEnumerable[$(astType : typed)] { get; }
              }
            ]>);

          | ParsedSimpleSymbolSymbol =>
            _tb = CreateTypeBuilder(nemerleEnv, _ownerEmitter, <[ decl:
              public partial class $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(<[ $(Environment.SymbolBaseTypeVar : typed) ]>))
              {
                public this() { }

                public Declarations : System.Collections.Generic.IEnumerable[$(astType : typed)]
                {
                  get { GetDeclarationsOfType() }
                }
              }
            ]>);

          | _ => assert(false)
        }
      });
    }

    private _dependentPropBits : SCG.Dictionary[DependentPropertySymbol, BitField] = SCG.Dictionary();

    public DefineMembers() : void
    {
      assert(_tb : object != null);

      match(_symbol)
      {
        | ParsedAbstractSymbolSymbol =>
          foreach (s in _symbol.AllProperties)
          {
            | DependentPropertySymbol as propertySymbol =>
              when (propertySymbol.PropertyContainer == _symbol)
                DefineInterfaceDependentProperty(propertySymbol, _tb, propertySymbol.OverrideProperty.HasValue);

            | _ => assert(false)
          }

        | ParsedSimpleSymbolSymbol =>
          foreach (s in _symbol.AllProperties)
          {
            | DependentPropertySymbol as propertySymbol =>
              def bit    = _tb.GetBitFieldManager().Allocate();
              def mask   = if (bit.IsFromFirstField) bit.Mask else 0;
              def bitKey = if (propertySymbol.OverrideProperty is SymbolRef.Some(DependentPropertySymbol as originalPropertySymbol)) originalPropertySymbol else propertySymbol;
              _dependentPropBits.Add(bitKey, bit);

              DefineDependentProperty(_tb, propertySymbol, bit, mask, NemerleModifiers.Public | NemerleModifiers.Virtual, acceptVisitorBody = null);

            | _ => assert(false)
          }

        | _ => assert(false)
      }
    }

    public Emit() : void
    {
      assert(_tb : object != null);

      match (_symbol)
      {
        | ParsedAbstractSymbolSymbol =>
          DefineDependentPropertiesInheritableEvaluation(_tb, _symbol);

        | ParsedSimpleSymbolSymbol(BuiltInMethods = methodOverrides) =>
          foreach ((identifier, expr) in methodOverrides)
          {
            Util.locate(identifier.NLocation(),
            {
              def [IMethod as method] = Environment.SymbolBaseTypeInfo.LookupMember(identifier.Value);
              def parms = method.GetParameters().Map(p => <[ parameter: $(p.Name : global) : $(p.Type : typed) ]>);
              _tb.Define(<[ decl: public override $(identifier.Value : usesite)(..$parms) : $(method.ReturnType : typed) { IgnoreParams(); $expr } ]>);
            });
          }

          DefineDependentPropertiesSealedEvaluation(_tb, _symbol, _dependentPropBits, SCG.Dictionary());
          DefinePropertiesEvalState(_tb, null);
          DefineResetPropertiesMethod(_tb, null);
          DefineIsAllPropertiesEvaluatedProperty(_tb, null);

          def serializationMembers = SCG.List();
          def memberTable          = SCG.Dictionary();
          foreach (p is IProperty in _tb.GetMembers())
          {
            when (Environment.LookupPropertySymbol(p) is DeclaredProperty(DependentPropertySymbol as dependentProperty, _))
            when (_dependentPropBits.ContainsKey(dependentProperty))
            {
              memberTable.Add(p, dependentProperty);

              // make Scope properties first when serializing/deserializing
              if (p.GetMemType().TryRequire(Environment.ScopeTypeVar))
                serializationMembers.Insert(0, p)
              else
                serializationMembers.Add(p)
            }
          }

          def symbolType = _tb.GetMemType();

          def serializeBody = _serializationEmitter.MakeMembersSerializationCode(symbolType, serializationMembers, <[ this ]>, [ <[ metadataWriter ]> ],
            fun (objAccess : PExpr, member : IMember, expr : PExpr) : PExpr
            {
              def isEvaluated = GetIsEvaluatedPropertyName(memberTable[member]);
              <[ when ($objAccess.$(isEvaluated : usesite)) $expr ]>
            });

          _tb.Define(<[ decl:
            public Serialize(writer : System.IO.BinaryWriter, metadataWriter : Nitra.Serialization2.MetadataWriter) : void
            {
              unchecked when (metadataWriter.BeginWriteSymbol(this, writer))
              {
                $serializeBody;
                writer.Write($(Nitra.Serialization.TypeTag.Empty :> byte));
              }
            }
          ]>);

          def deserializeBody = _serializationEmitter.MakeMembersDeserializationCode(symbolType, serializationMembers, <[ symbol ]>, [ <[ metadataReader ]> ],
            fun(objAccess : PExpr, member : IMember, expr : PExpr) : PExpr
            {
              def isEvaluated = GetIsEvaluatedPropertyName(memberTable[member]);
              <[ unless ($objAccess.$(isEvaluated : usesite)) $expr ]>
            });

          _tb.Define(<[ decl:
            public static Deserialize(reader : System.IO.BinaryReader, metadataReader : Nitra.Serialization2.MetadataReader) : $(symbolType : typed)
            {
              mutable symbol;
              unchecked when (metadataReader.BeginReadSymbol.[$(symbolType : typed)](reader, out symbol))
                $deserializeBody;
              symbol
            }
          ]>);

        | _ => assert(false)
      }

      _tb.Compile();
    }

    protected override GetDependentEvaluationModifiers() : AttributesAndModifiers
    {
      AttributesAndModifiers(NemerleAttributes.Public, [])
    }

    private MakeSymbolClassBaseTypes(baseType : PExpr = null) : SCG.List[PExpr]
    {
      def baseTypes = SCG.List();
      when (baseType != null)
        baseTypes.Add(baseType);

      foreach (baseSymbol in _symbol.Parents)
        baseTypes.Add(<[ $(Environment.GetSymbolClass(baseSymbol) : typed) ]>);
      baseTypes
    }
  }
}
