using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal partial class RuleAstEmitter
  {
    private variant FieldExpr
    {
      | Chars  { Expr  : PExpr; NeedRuleParser : bool }
      | Tuple  { Items : list[FieldExpr] }
      | Prefix { Expr  : PExpr }
      | Other  { Expr  : PExpr; NeedRuleParser : bool }
    }

    [Record]
    private class FieldInfo
    {
      public Name : string;
      public Rule : Rule;
      public Type : FixedType;
      public Expr : FieldExpr;
    }

    private GetFields() : SCG.List[FieldInfo]
    {
      def astPtr = AstPointer.Existing(this.RuleSymbol.Sequence, this, "astPtr");

      def ruleExprs = SCG.Dictionary.[Rule, FieldExpr]();

      when (this.RuleSymbol is ExtensionRuleSymbol(ExtensionType = Postfix(call, _)))
        ruleExprs.Add(call, FieldExpr.Prefix(<[ this.prefix ]>));

      def getStartPos() : PExpr
      {
        match (this.RuleSymbol)
        {
          | SimpleRuleSymbol
          | ExtensionRuleSymbol(ExtensionType = Prefix)  => <[ this.startPos ]>
          | ExtensionRuleSymbol(ExtensionType = Postfix) => <[ this.astStartPos ]>
          | _ => assert(false)
        }
      }

      def prevSubrules = SCG.List();
      foreach (subrule in this.RuleSymbol.Sequence.NonMarkerSubrules)
      {
        when (IsSubruleAcceptedForAst(subrule))
        {
          def parentAstPtr = AstPointerScope(astPtr);
          mutable needRuleParser;
          def valueExpr = GetSubruleValue(subrule, parentAstPtr, ref needRuleParser);

          def statements = SCG.List();
          statements.Add(<[ mutable pos = $(getStartPos()); ]>);
          foreach (subrule in prevSubrules)
            statements.Add(WalkerGenerator.Skip(subrule, parentAstPtr));
          statements.Add(valueExpr);

          def expr =
            if (subrule.SrcRule.Type is RuleType.Chars)
              FieldExpr.Chars(<[ { ..$statements } ]>, needRuleParser)
            else
              FieldExpr.Other(<[ { ..$statements } ]>, needRuleParser);

          ruleExprs.Add(subrule.SrcRule, expr);
        }
        prevSubrules.Add(subrule);
      }

      def makeFieldExpr(rule : Rule) : FieldExpr
      {
        if (rule is Rule.Sequence(Rules = rules))
        {
          def members = SCG.List();
          foreach (rule when !(rule.Type is RuleType.Void) in rules)
            members.Add(makeFieldExpr(rule));

          if(members.Count == 1)
            members[0]
          else
            FieldExpr.Tuple(members.ToNList())
        }
        else
        {
          mutable expr;
          unless (ruleExprs.TryGetValue(rule, out expr))
            assert3(false);
          expr
        }
      }

      def fields = SCG.List();
      foreach (rule in this.RuleSymbol.NonVoidSubRules)
        fields.Add(FieldInfo(rule.FieldName, rule, Environment.GetAstType(rule.Type), makeFieldExpr(rule)));
      fields
    }

    private GetSequenceValue(sequence : SequenceCompileInfo, name : string, needRuleParser : ref bool) : PExpr
    {
      def astPointer    = AstPointerScope(sequence, name, this);
      def statements    = SCG.List();
      def subruleValues = SCG.List();

      foreach (subrule in sequence.NonMarkerSubrules)
      {
        if (IsSubruleAcceptedForAst(subrule))
        {
          def varName = subrule.MakeVariableName("ast");
          statements.Add(<[ def $(varName : usesite) = $(GetSubruleValue(subrule, astPointer, ref needRuleParser)) ]>);
          subruleValues.Add(<[ $(varName : usesite) ]>);
        }
        else
          statements.Add(WalkerGenerator.Skip(subrule, astPointer));
      }

      match (subruleValues.Count)
      {
        | 0 => ()
        | 1 => statements.Add(subruleValues[0]);
        | _ => statements.Add(<[
          def sequenceStartPos = pos;
          Nitra.SequenceAst(Nitra.Location(parseResult.OriginalSource, sequenceStartPos, pos), ..$subruleValues)
        ]>);
      }

      when (astPointer.IsAccessed())
        needRuleParser = true;

      astPointer.Compile(<[ { ..$statements } ]>)
    }

    private GetSubruleValue(subrule : SubruleCompileInfo, parentAstPointer : AstPointerScope, needRuleParser : ref bool) : PExpr
    {
      match (subrule)
      {
        | Empty      as subrule => WalkerGenerator.Skip(subrule, parentAstPointer)
        | SimpleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            WalkerGenerator.Skip(subrule, parentAstPointer)
          else if (subrule.CanParseEmptyString)
            <[
              pos += $(parentAstPointer.Access().GetSkip(subrule));
              $(Environment.GetAstType(subrule.Symbol) : typed).Create(ref pos, parseResult);
            ]>
          else
            <[
              pos += $(parentAstPointer.Access().GetSkip(subrule));
              if ($(parentAstPointer.Access().GetSize(subrule)) > 0)
                $(Environment.GetAstType(subrule.Symbol) : typed).Create(ref pos, parseResult);
              else
                $(Environment.GetAstType(subrule.Symbol) : typed).MissingAst(parseResult, pos);
            ]>

        | ExtensibleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            WalkerGenerator.Skip(subrule, parentAstPointer)
          else
            <[
              pos += $(parentAstPointer.Access().GetSkip(subrule));
              if ($(parentAstPointer.Access().GetSize(subrule)) > 0)
                Nitra.Internal.ExtensibleRuleAstConstructor.Create.[$(Environment.GetAstType(subrule.Symbol) : typed)](ref pos, parseResult, $(subrule.BindingPower : int), $(subrule.Symbol.GetRuleDescriptorRef()), Nitra.Internal.DefaultExtensibleRuleAstFactory.Instance);
              else
                $(Environment.GetAstType(subrule.Symbol) : typed).MissingAst(parseResult, pos); // No prefix
            ]>

        | RegularCall
        | List as lst when lst.IsSkipAnyPattern
        | TokenString => WalkerGenerator.GetTokenValue(subrule, parentAstPointer, <[ Nitra.NSpan(tokenPos, pos) ]>)
        | Option as subrule =>
          if (subrule.SrcRule.Type is RuleType.Void)
            WalkerGenerator.Skip(subrule, parentAstPointer)
          else
            WalkerGenerator.GetOptionValue(
              subrule          = subrule,
              parentAstPointer = parentAstPointer,
              hasValue         = <[
                def optionStartPos = pos;
                Nitra.OptionAst.Some(Nitra.Location(parseResult.OriginalSource, optionStartPos, pos), $(GetSequenceValue(subrule.Rule, "valuePointer", ref needRuleParser)))
              ]>,
              noValue          = <[ Nitra.OptionAst.None(Nitra.Location(parseResult.OriginalSource, pos, pos)) ]>)

        | List as lst =>
          if (subrule.SrcRule.Type is RuleType.Void)
            WalkerGenerator.Skip(subrule, parentAstPointer)
          else
            WalkerGenerator.GetListValue(
              subrule          = lst,
              parentAstPointer = parentAstPointer,
              init             = <[ def itemBuffer = System.Collections.Generic.List(16); def listStartPos = pos; ]>,
              item             = <[ itemBuffer.Add($(GetSequenceValue(lst.Rule, "itemPointer", ref needRuleParser))) ]>,
              returnCode       = <[ Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, listStartPos, pos), itemBuffer) ]>,
              emptyCode        = <[ Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, pos, pos)) ]>);

        | ListWithSeparator as lst=>
          match (lst.Rule.SrcRule.Type, lst.Separator.SrcRule.Type)
          {
            | (Void, Void) => WalkerGenerator.Skip(subrule, parentAstPointer)
            | (_, Void) =>
                WalkerGenerator.GetListWithSeparatorValue(
                  subrule          = lst,
                  parentAstPointer = parentAstPointer,
                  init             = <[ def itemBuffer = System.Collections.Generic.List(16); def listStartPos = pos; ]>,
                  item             = <[ itemBuffer.Add($(GetSequenceValue(lst.Rule, "itemPointer", ref needRuleParser))) ]>,
                  separator        = <[ _ = $(GetSequenceValue(lst.Separator, "separatorPointer", ref needRuleParser)) ]>,
                  returnCode       = <[ Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, listStartPos, pos), itemBuffer) ]>,
                  emptyCode        = <[ Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, pos, pos)) ]>);

            | (Void, _) =>
                WalkerGenerator.GetListWithSeparatorValue(
                  subrule          = lst,
                  parentAstPointer = parentAstPointer,
                  init             = <[ def separatorBuffer = System.Collections.Generic.List(16); def listStartPos = pos; ]>,
                  item             = <[ _ = $(GetSequenceValue(lst.Rule, "itemPointer", ref needRuleParser)) ]>,
                  separator        = <[ separatorBuffer.Add($(GetSequenceValue(lst.Separator, "separatorPointer", ref needRuleParser))) ]>,
                  returnCode       = <[ Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, listStartPos, pos), separatorBuffer) ]>,
                  emptyCode        = <[Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, pos, pos)) ]>);

            | _ =>
              WalkerGenerator.GetListWithSeparatorValue(
                subrule          = lst,
                parentAstPointer = parentAstPointer,
                init             = <[ def itemBuffer = System.Collections.Generic.List(16); def separatorBuffer = System.Collections.Generic.List(16); def listStartPos = pos; ]>,
                item             = <[ itemBuffer.Add($(GetSequenceValue(lst.Rule, "itemPointer", ref needRuleParser))) ]>,
                separator        = <[ separatorBuffer.Add($(GetSequenceValue(lst.Separator, "separatorPointer", ref needRuleParser))) ]>,
                returnCode       = <[ Nitra.SequenceAst(Nitra.Location(parseResult.OriginalSource, listStartPos, pos), Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, listStartPos, pos), itemBuffer), Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, listStartPos, pos), separatorBuffer)) ]>,
                emptyCode        = <[ Nitra.SequenceAst(Nitra.Location(parseResult.OriginalSource, pos, pos),          Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, pos, pos)),                      Nitra.ListAst(Nitra.Location(parseResult.OriginalSource, pos, pos))) ]>);
          }

        | Marker => <[ () ]>
      }
    }


    public static IsSubruleAcceptedForAst(subrule : SubruleCompileInfo) : bool
    {
      | SubruleCompileInfo.SimpleCall(symbol)        when symbol.Type is RuleType.Void
      | SubruleCompileInfo.ExtensibleCall(symbol, _) when symbol.Type is RuleType.Void
      | SubruleCompileInfo.Empty
      | SubruleCompileInfo.Marker => false
      | _ => !(subrule.SrcRule.Type is RuleType.Void)
    }
  }
}
