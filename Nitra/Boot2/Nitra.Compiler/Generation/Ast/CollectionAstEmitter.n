using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal abstract class CollectionAstEmitter : BaseAstEmitter
  {
    public override Environment : EmitterEnvironment { get }
    public          Symbol      : AstSymbol          { get }

    public this(environment : EmitterEnvironment, symbol : AstSymbol)
    {
      Environment = environment;
      Symbol      = symbol;
    }

    protected FileType : FixedType { get { Environment.FileTypeVar;  } }
    protected SpanType : FixedType { get { Environment.NSpanTypeVar; } }

    mutable _baseTb        : TypeBuilder;
    mutable _concreteTb    : TypeBuilder;
    mutable _ambiguousTb   : TypeBuilder;

    protected abstract CreateBaseTb(ownerTb : TypeBuilder, itemType : FixedType) : TypeBuilder;
    protected abstract CreateConcreteTb(ownerTb : TypeBuilder, itemType : FixedType,  baseType : FixedType) : TypeBuilder;
    protected abstract CreateAmbiguousTb(ownerTb : TypeBuilder, itemType : FixedType, baseType : FixedType) : TypeBuilder;
    protected abstract MakeEvalPropertiesBody(dependentProperties : SCG.Dictionary[DependentPropertySymbol, BitField]) : PExpr;

    public DefineTypes(ownerTb : TypeBuilder) : void
    {
      Util.locate(Symbol.FirstLocation.NLocation(),
      {
        def itemType = Environment.GetAstType(Symbol);

        assert(_baseTb == null);
        _baseTb = CreateBaseTb(ownerTb, itemType);
        def baseType = _baseTb.GetMemType();

        assert(_concreteTb == null);
        _concreteTb = CreateConcreteTb(ownerTb, itemType, baseType);

        assert(_ambiguousTb == null);
        _ambiguousTb = CreateAmbiguousTb(ownerTb, itemType, baseType);
      })
    }

    public DefineMembers(dependentProperties : SCG.List[DependentPropertySymbol]) : void
    {
      assert(_baseTb != null);

      when (dependentProperties.Count == 0)
        return;

      def define()
      {
        def bits                 = _concreteTb.GetBitFieldManager();
        def collectionProperties = SCG.Dictionary();
        foreach (propertySymbol in dependentProperties)
        {
          DefineInterfaceDependentProperty(propertySymbol, _baseTb, false);
          def bit    = bits.Allocate(); // TODO: add mask optimization
          def bitKey = if (propertySymbol.OverrideProperty is SymbolRef.Some(DependentPropertySymbol as originalPropertySymbol)) originalPropertySymbol else propertySymbol;
          DefineDependentProperty(_concreteTb, propertySymbol, bit, 0, NemerleModifiers.Public, acceptVisitorBody = null, overrideSetter = false);
          DefineAmbiguousDependentProperty(_ambiguousTb, propertySymbol, 0, NemerleModifiers.Public);

          collectionProperties.Add(bitKey, bit);
        }

        DefineResetPropertiesMethod(_concreteTb, null);
        DefineIsAllPropertiesEvaluatedProperty(_concreteTb, null);

        _concreteTb.DefineConditional("DEBUG_EVAL_DEPENDENT_PROPERTIES", <[ decl:
          public override EvalProperties($("context" : global) : Nitra.Declarations.DependentPropertyEvalContext) : void
          {
            $(MakeEvalPropertiesBody(collectionProperties))
          }
        ]>);
      }

      Util.locate(Symbol.FirstLocation.NLocation(), Environment.Manager.MacroColors.InGlobalColor(define))
    }

    protected static LinkProperties(source : DependencyPath, target : DependencyPath, dependentProperties : SCG.Dictionary[DependentPropertySymbol, BitField], resultBuilder : PExpr -> PExpr = null) : PExpr
    {
      def expr1 = CompilePath(source);
      def expr2 = if (resultBuilder != null) resultBuilder(expr1) else expr1;
      def expr3 = <[ $(CompilePath(target)) = $expr2 ]>;
      def expr4 = TryAddStageCheck(target, expr3);
      <[
        unless ($(GenerateHasValueCheck(target, dependentProperties)))
        when ($(GenerateHasValueCheck(source, dependentProperties)))
          $expr4;
      ]>
    }

    protected static SetPropertyValue(target : DependencyPath, value : PExpr, dependentProperties : SCG.Dictionary[DependentPropertySymbol, BitField]) : PExpr
    {
      def expr1 = <[ $(CompilePath(target)) = $value ]>;
      def expr2 = TryAddStageCheck(target, expr1);
      <[
        unless ($(GenerateHasValueCheck(target, dependentProperties)))
          $expr2;
      ]>
    }

    private DefineAmbiguousDependentProperty(tb : TypeBuilder, symbol : DependentPropertySymbol, mask : int, modifiers : NemerleModifiers) : void
    {
      def propertyType = TypeCompiler.CompileDependentPropertyType(symbol);
      def name         = symbol.Name;
      def mods         = AttributesAndModifiers(modifiers, [MakePropertyAttribute(symbol, mask)]);
      tb.Define(<[ decl:
        ..$mods $(name : usesite) : $(propertyType : typed)
        {
          get { this.Ambiguities[0].$(name : usesite) }
          set { foreach (ambiguity in this.Ambiguities) ambiguity.$(name : usesite) = value; }
        }
      ]>);

      def isEvaluatedName = GetIsEvaluatedPropertyName(symbol);
      def isEvaluatedMods = AttributesAndModifiers(modifiers, []);
      tb.Define(<[ decl:
        ..$isEvaluatedMods $(isEvaluatedName : usesite) : bool
        {
          get { this.Ambiguities[0].$(isEvaluatedName : usesite) }
        }
      ]>);
    }

    public Emit() : void
    {
      assert(_baseTb != null);

      _baseTb.Compile();
      _concreteTb.Compile();
      _ambiguousTb.Compile();
    }
  }
}
