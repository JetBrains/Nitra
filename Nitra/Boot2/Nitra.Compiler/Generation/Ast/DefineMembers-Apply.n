using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal partial class RuleAstEmitter
  {
    private DefineAstApplyMethod(fields : SCG.List[FieldInfo]) : void
    {
      def ctorArguments = SCG.List();
      ctorArguments.Add(<[ this.GetSourceSnapshotProvider() ]>);
      ctorArguments.Add(<[ this.GetLocationSpan() ]>);

      def statements = SCG.List();

      foreach (field in fields)
      {
        if (field.Rule.Type is RuleType.Chars)
          ctorArguments.Add(<[ this.$(field.Name : usesite) ]>);
        else
        {
          def tempVarName = Util.tmpname(field.Name);
          statements.Add(<[ def $(tempVarName : usesite) = visitor.Visit(this.$(field.Name : usesite)) :> $(field.Type : typed) ]>);
          statements.Add(<[ isUntouched &= ReferenceEquals($(tempVarName : usesite), this.$(field.Name : usesite)) ]>);
          ctorArguments.Add(<[ $(tempVarName : usesite) ]>);
        }
      }

      when (statements.Count > 0)
      {
        _astTb.DefineConditional(<[ decl:
          [Nemerle.Diagnostics.CompileStatistic("Ast")]
          public sealed override Apply(visitor : Nitra.AstVisitor) : Nitra.Ast
          {
            unchecked
            {
              visitor.Enter(this);
              mutable isUntouched = true;
              ..$statements;
              def result = if (isUntouched) this else $(_chemicalAstTb.GetMemType() : typed)(..$ctorArguments);
              visitor.Leave(this, result);
              result
            }
          }
        ]>);

        _astTb.DefineConditional(<[ decl: protected abstract GetSourceSnapshotProvider() : Nitra.Runtime.ISourceSnapshotProvider ]>);
        _astTb.DefineConditional(<[ decl: protected abstract GetLocationSpan() : Nitra.NSpan ]>);

        _chemicalAstTb.DefineConditional(<[ decl:
          protected override GetSourceSnapshotProvider() : Nitra.Runtime.ISourceSnapshotProvider
          {
            this.sourceProvider
          }
        ]>);

        _chemicalAstTb.DefineConditional(<[ decl:
          protected override GetLocationSpan() : Nitra.NSpan
          {
            this.span
          }
        ]>);

        _parsedAstTb.DefineConditional(<[ decl:
          protected override GetSourceSnapshotProvider() : Nitra.Runtime.ISourceSnapshotProvider
          {
            this.parseResult
          }
        ]>);

        _parsedAstTb.DefineConditional(<[ decl:
          protected override GetLocationSpan() : Nitra.NSpan
          {
            Nitra.NSpan(this.startPos, this.endPos)
          }
        ]>);
      }
    }
  }
}
