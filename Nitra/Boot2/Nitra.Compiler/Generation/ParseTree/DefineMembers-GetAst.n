using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.ProjectSystem;
using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;
using Nitra.Compiler.PatternMatching;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal abstract partial class RuleParseTreeEmitter
  {
    protected DefineExtensibleRuleGetAstMethod(_baseTb : TypeBuilder) : void
    {
      assert(_baseTb != null);

      foreach (syntaxMapping in this.RuleSymbol.SyntaxMappings)
      {
        def returnType = Environment.GetAstType(syntaxMapping.ReturnType);
        def parms      = syntaxMapping.Parameters.Map(p => Util.locate(p.FirstLocation.NLocation(), <[ parameter: $(p.Name : usesite) : $(Environment.GetAstType(p.Type)) ]>));
        _baseTb.Define(<[ decl: public abstract $(syntaxMapping.Name : usesite)(..$parms) : $returnType ]>);
        when (parms.IsEmpty())
          DefineGetAstUntypedMethod(_baseTb, syntaxMapping);
      }
    }

    private CompileParseTreeMemberAccess(path : ParseTreePath, astType : AstType, needsParseTreeCheck : bool, compile : PExpr -> PExpr) : PExpr
    {
      def missingLocName = Util.tmpname("missingLoc");
      mutable needsBuffer : bool;

      def checkParseTree(ruleType : RuleType, expr : PExpr, compile : PExpr -> PExpr) : PExpr
      {
        needsBuffer = true;
        def parseTreeType = Environment.GetParseTreeType(ruleType);
        <[
          def parseTree = $expr;
          if (parseTree.IsMissing)
            $(missingLocName : usesite) = parseTree;
          else
          {
            def loop(item : $(parseTreeType : typed) * int) : void
            {
              $(compile(<[ item[0] ]>));
              when (item[1] > 0)
                loop(Nitra.Internal.AstUtils.GetNextAmbiguity.[$(parseTreeType : typed)](parseTree, item[1]));
            }
            loop(Nitra.Internal.AstUtils.GetFirstAmbiguity.[$(parseTreeType : typed)](parseTree))
          }
        ]>
      }

      def compileAccess(path : ParseTreePath, needsParseTreeCheck : bool, compile : PExpr -> PExpr) : PExpr
      {
        def loc = path.Location.NLocation();
        match (path)
        {
          | This                       => compile(Util.locate(loc, <[ this ]>))
          | Variable(name, _)          =>
            def varAccess = Util.locate(loc, <[ $(name.Value : usesite) ]>);
            if (needsParseTreeCheck)
              checkParseTree(path.Type, varAccess, compile)
            else
              compile(varAccess)

          | Member(qualifier, name, _) =>
            if (needsParseTreeCheck)
              compileAccess(qualifier, true, expr => checkParseTree(path.Type, Util.locate(loc, <[ $expr.$(name.Value : usesite) ]>), compile))
            else
              compileAccess(qualifier, true, expr => compile(Util.locate(loc, <[ $expr.$(name.Value : usesite) ]>)))
        }
      }

      def code =
        compileAccess(path, needsParseTreeCheck, fun (expr)
        {
          if (needsBuffer)
            <[ buffer.Add($(compile(expr))) ]>
          else
            compile(expr)
        });

      if (needsBuffer)
      <[
        mutable $(missingLocName : usesite) : Nitra.Located; // avoid warning about multiple mutable variable declaration
        def buffer = Nemerle.Collections.LightList.[$(Environment.GetAstType(astType))]();
        $code;
        match (buffer.Count)
        {
          | 0 => $(AstEmitter.GetMissingAstCtor(Environment, astType))($(missingLocName : usesite).File, $(missingLocName : usesite).Span)
          | 1 => buffer.FirstItem
          | _ => $(AstEmitter.GetAmbiguousAstCtor(Environment, astType))(buffer.ToArray())
        }
      ]>
      else
        code
    }

    private variant AstLocationContext
    {
      | Root     { tryEvalSpan : bool; public this() { this(false) } }
      | Variable { name : string }

      private GetLocationSource() : PExpr
      {
        match (this)
        {
          | Root        => <[ this ]>
          | Variable(n) => <[ $(n : usesite) ]>
        }
      }

      public EnableTryEvalSpan() : AstLocationContext
      {
        match (this)
        {
          | Root(false) => AstLocationContext.Root(true)
          | Root(true) | Variable => this
        }
      }

      public File        : PExpr { get { <[ $(GetLocationSource()).File ]> } }
      public Span        : PExpr { get { <[ $(GetLocationSource()).Span ]> } }
      public Located     : PExpr { get {      GetLocationSource()          } }
      public TryEvalSpan : PExpr
      {
        get
        {
          match (this)
          {
            | Root(value) => <[ $(value : bool) ]>
            | Variable    => <[ true ]>
          }
        }
      }
    }

    private CompileAstCtor(astSymbol : AstSymbol, fields : list[SyntaxMappingField], loc : AstLocationContext) : PExpr
    {
      def args = SCG.List();
      args.Add(loc.File);
      args.Add(loc.Span);
      args.Add(<[ TryEvalSpan = $(loc.TryEvalSpan) ]>);
      def fieldsLoc = loc.EnableTryEvalSpan();
      foreach (field in fields)
      {
        def name  = field.Property.Name;
        def value = CompileSyntaxMapping(field.Expr, fieldsLoc);
        args.Add(<[ $(name : usesite) = $value ]>);
      }
      <[ $(Environment.GetAstType(astSymbol) : typed)(..$args) ]>
    }

    private CompileAstListCtor(astSymbol : AstSymbol, items : list[SyntaxMappingExpr], loc : AstLocationContext) : PExpr
    {
      def args = SCG.List();
      args.Add(loc.Located);
      def itemsLoc = loc.EnableTryEvalSpan();
      foreach (item in items)
        args.Add(CompileSyntaxMapping(item, itemsLoc));
      <[ $(Environment.GetAstType(astSymbol) : typed).AstList(..$args) ]>
    }

    private CompileAstOptionCtor(astSymbol : AstSymbol, valueOpt : option[SyntaxMappingExpr], loc : AstLocationContext) : PExpr
    {
      def args = SCG.List();
      args.Add(loc.Located);
      when (valueOpt is Some(value))
        args.Add(CompileSyntaxMapping(value, loc.EnableTryEvalSpan()));
      <[ $(Environment.GetAstType(astSymbol) : typed).AstOption(..$args) ]>
    }

    private CompileMatch(errorLoc : Located, path : ParseTreePath, cases : list[SyntaxMappingCase], returnType : AstType) : PExpr
    {
      def rootObj = Util.tmpname("obj");
      def loc     = if (path is ParseTreePath.This) AstLocationContext.Root() else AstLocationContext.Variable(rootObj);

      def compileAccessNonCached(a : Access, body : SCG.List[PExpr], cache : SCG.Dictionary[Access, string]) : PExpr
      {
        match (a)
        {
          | Obj                            => <[ $(rootObj : usesite) ]>
          | Sel(ListCons,   0,     access) => <[ $(compileAccess(access, body, cache)).Head ]>
          | Sel(ListCons,   1,     access) => <[ $(compileAccess(access, body, cache)).Tail ]>
          | Sel(OptionSome, 0,     access) => <[ $(compileAccess(access, body, cache)).Value ]>
          | Sel(Tuple,      index, access) => <[ $(compileAccess(access, body, cache)).$("Item" + (index + 1) : usesite) ]>
          | Sel(ParseTree,  index, access) => <[ $(compileAccess(access, body, cache)).$(RuleSymbol.NonVoidSubRules.Nth(index).FieldName : usesite) ]>
          | _ => assert(false, "Invalid access path")
        }
      }

      and compileAccess(a : Access, body : SCG.List[PExpr], cache : SCG.Dictionary[Access, string]) : PExpr
      {
        mutable variableName;
        unless (cache.TryGetValue(a, out variableName))
        {
          variableName = Util.tmpname("parseTree");
          cache.Add(a, variableName);
          def code = compileAccessNonCached(a, body, cache);
          body.Add(<[ def $(variableName : usesite) = $code ]>);
        }
        <[ $(variableName : usesite) ]>
      }

      def compileTest(expr : PExpr, ctor : ParseTreeCtor) : PExpr
      {
        match (ctor)
        {
          | ListCons   => <[ $expr.Count > 0 ]>
          | ListNil    => <[ $expr.Count == 0 ]>
          | OptionSome => <[ $expr.HasValue ]>
          | OptionNone => <[ ! $expr.HasValue ]>
          | Tuple
          | ParseTree  => assert(false, "Check is redundant")
        }
      }

      def     redundantCases : SCG.HashSet[_] = SCG.HashSet(cases);
      mutable canFail        : bool;
      def compileDecision(d : Decision[SyntaxMappingCase], body : SCG.List[PExpr], cache : SCG.Dictionary[Access, string]) : void
      {
        match (d)
        {
          | Failure =>
            canFail = true;
            body.Add(<[ assert(false, "Match failed") ]>)

          | Success(case) =>
            _ = redundantCases.Remove(case);
            body.Add(CompileSyntaxMapping(case.Expr, loc))

          | Variable(name, access, continuation) =>
            def obj = compileAccessNonCached(access, body, cache);
            body.Add(<[ def $(name.Value : global) = $obj; ]>);
            compileDecision(continuation, body, cache);

          | IfEq(access, ctor, t, f) =>
            def obj    = compileAccess(access, body, cache);
            def tBody  = SCG.List();
            compileDecision(t, tBody, SCG.Dictionary(cache)); // TODO: clone cache on demand
            def fBody  = SCG.List();
            compileDecision(f, fBody, cache);
            body.Add(<[ if ($(compileTest(obj, ctor))) { ..$tBody } else { ..$fBody} ]>)
        }
      }

      CompileParseTreeMemberAccess(path, returnType, true, fun (obj)
      {
        def rules      = cases.Map(c => (c.Pattern, c));
        def decision   = MatchCompiler.Compile(rules);

        def accessCache = SCG.Dictionary();
        accessCache.Add(Access.Obj(), rootObj);

        def body       = SCG.List();
        body.Add(<[ def $(rootObj : usesite) = $obj ]>);
        compileDecision(decision, body, accessCache);

        when (canFail)
          Environment.Project.Warning(errorLoc, "Matching is not exhaustive.");

        foreach (case in redundantCases)
          Environment.Project.Warning(case, "Match case is redundant.");

        <[ {..$body } ]>
      })
    }

    private CompileSyntaxMappingInvokation(path : ParseTreePath, returnType : AstType, arguments : list[PExpr]) : PExpr
    {
      CompileParseTreeMemberAccess(path, returnType, false, obj => <[ $obj.GetAst(..$arguments) ]>)
    }

    private CompileListConversion(path : ParseTreePath, arguments : list[SyntaxMappingExpr], astSymbol : AstSymbol, itemPath : ParseTreePath, itemType : AstType, getBody : PExpr -> PExpr) : PExpr
    {
      CompileParseTreeMemberAccess(path, AstType.List(path.Location, astSymbol), true, fun(obj)
      {
        def loc      = AstLocationContext.Variable("parseTree");
        def body     = SCG.List();
        def argRefs  = SCG.List();
        foreach (arg in arguments)
        {
          | ParameterRef | VariableRef => argRefs.Add(CompileSyntaxMapping(arg, loc));
          | _ =>
            def varName = Util.tmpname("arg");
            body.Add(<[ def $(varName : usesite) = $(CompileSyntaxMapping(arg, loc)) ]>);
            argRefs.Add(<[ $(varName : usesite) ]>)
        }
        def itemExpr = CompileSyntaxMappingInvokation(itemPath, itemType, argRefs.ToNList());
        body.Add(getBody(itemExpr));

        <[
          def parseTree = $obj;
          def e         = parseTree.GetEnumerator();
          $(Environment.GetAstType(astSymbol) : typed).AstList(parseTree : Nitra.Located, (if (e.MoveNext()) { ..$body } else null) : array[_])
        ]>
      })
    }

    private CompileSyntaxMapping(expr : SyntaxMappingExpr, loc : AstLocationContext) : PExpr
    {
      assert(expr != null);

      Util.locate(expr.Location.NLocation(),
      {
        match (expr)
        {
          | Error                              => assert(false)
          | Code(code)                         => code
          | ParameterRef(par)                  => <[ $(par.Name : usesite) ]>
          | VariableRef(var)                   => <[ $(var.Name : usesite) ]>
          | PropertyRef(targetExpr, symbol)    => <[ $(CompileSyntaxMapping(targetExpr, loc)).$(symbol.Name : usesite) ]> // TODO: may hide AST ambiguitys
          | AstCtor(astSymbol, args)           => CompileAstCtor(astSymbol, args, loc)
          | ListCtor(astSymbol, items)         => CompileAstListCtor(astSymbol, items, loc)
          | OptionCtor(astSymbol, valueOpt)    => CompileAstOptionCtor(astSymbol, valueOpt, loc)
          | Match(path, cases, returnType)     => CompileMatch(expr, path, cases, returnType)
          | Call(path, args, returnType)       => CompileSyntaxMappingInvokation(path, returnType, args.Map(CompileSyntaxMapping(_, loc)))
          | ConvertList(path, args, astSymbol, itemPath) =>
            CompileListConversion(path, args, astSymbol, itemPath, AstType.Ast(itemPath, astSymbol), fun (itemExpr)
            {
              <[
                def buffer : array[$(Environment.GetAstType(astSymbol) : typed)] = array(parseTree.Count);
                def loop(index : int) : void
                {
                  def node = e.Current;
                  buffer[index] = $itemExpr;
                  when (e.MoveNext())
                    loop(index + 1);
                }
                loop(0);
                buffer
              ]>
            })

          | ConvertOption(path, args, astSymbol, valuePath) =>
            def astType     = Environment.GetAstType(astSymbol);
            def argumentLoc = AstLocationContext.Variable("parseTree");
            def valueExpr   = CompileSyntaxMappingInvokation(valuePath, AstType.Ast(valuePath, astSymbol), args.Map(CompileSyntaxMapping(_, argumentLoc)));
            CompileParseTreeMemberAccess(path, AstType.Option(expr.Location, astSymbol), true, fun (obj)
            {
              <[
                def parseTree  = $obj;
                if (parseTree.HasValue)
                {
                  def node = parseTree.Value;
                  $(astType : typed).AstOption(parseTree, $(valueExpr))
                }
                else
                  $(astType : typed).AstOption(parseTree)
              ]>
            })

          | ConcatLists(path, args, astSymbol, itemPath) =>
            CompileListConversion(path, args, astSymbol, itemPath, AstType.List(itemPath, astSymbol), fun (itemExpr)
            {
              <[
                def buffer = System.Collections.Generic.List.[$(Environment.GetAstType(astSymbol) : typed)](parseTree.Count * 2);
                do
                {
                  def node = e.Current;
                  // TODO: what if AstList is ambiguous?
                  buffer.AddRange($itemExpr);
                }
                while (e.MoveNext());
                buffer.ToArray()
              ]>
            })

          | ConcatOptions(path, args, astSymbol, itemPath) =>
            CompileListConversion(path, args, astSymbol, itemPath, AstType.Option(itemPath, astSymbol), fun (itemExpr)
            {
              <[
                def buffer = System.Collections.Generic.List.[$(Environment.GetAstType(astSymbol) : typed)](parseTree.Count);
                do
                {
                  def node = e.Current;
                  // TODO: what if AstOption is ambiguous?
                  def ast = $itemExpr;
                  when (ast.HasValue)
                    buffer.Add(ast.Value);
                }
                while (e.MoveNext());
                buffer.ToArray()
              ]>
            })

          | Fold(item, listPath, acc, initExpr, eachExpr, astType) =>
            CompileParseTreeMemberAccess(listPath, astType, true, fun (obj)
            {
              <[
                def parseTree = $obj;
                def e         = parseTree.GetEnumerator();
                def loop($(acc.Name : usesite) : $(Environment.GetAstType(astType)))
                {
                  if (e.MoveNext())
                  {
                    def $(item.Name : usesite) = e.Current;
                    loop($(CompileSyntaxMapping(eachExpr, loc)))
                  }
                  else
                    $(acc.Name : usesite)
                }
                loop($(CompileSyntaxMapping(initExpr, loc)))
              ]>
            })

          | DefineVariable(symbol, body) =>
            <[
              def $(symbol.Name : usesite) : $(Environment.GetAstType(symbol.Type)) = $(CompileSyntaxMapping(symbol.Expr, loc.EnableTryEvalSpan()));
              $(CompileSyntaxMapping(body, loc))
            ]>
        }
      });
    }

    private DefineGetAstUntypedMethod(tb : TypeBuilder, syntaxMapping : SyntaxMappingSymbol) : void
    {
      assert(syntaxMapping.Parameters.IsEmpty());

      tb.Define(<[ decl: public override GetAstUntyped() : $(Environment.AstTypeVar : typed) { this.$(syntaxMapping.Name : usesite)() } ]>);
    }

    private DefineGetAstMethod(tb : TypeBuilder, syntaxMapping : SyntaxMappingSymbol, modifiers : NemerleModifiers, code : PExpr) : void
    {
      def returnType = Environment.GetAstType(syntaxMapping.ReturnType);
      def mods       = AttributesAndModifiers(modifiers, []);
      def parms      = syntaxMapping.Parameters.Map(p => Util.locate(p.FirstLocation.NLocation(), <[ parameter: $(p.Name : usesite) : $(Environment.GetAstType(p.Type)) ]>));
      def isOverride = modifiers %&& NemerleModifiers.Override;
      when (parms.IsEmpty && !isOverride)
        DefineGetAstUntypedMethod(tb, syntaxMapping);

      tb.Define(<[ decl: ..$mods $(syntaxMapping.Name : usesite)(..$parms) : $returnType { unchecked { $code } } ]>);
    }

    protected DefineSimpleRuleGetAstMethod(_nodeTb : TypeBuilder) : void
    {
      assert(_nodeTb != null);

      def loc = AstLocationContext.Root();
      foreach (syntaxMapping in this.RuleSymbol.SyntaxMappings)
      {
        def code = CompileSyntaxMapping(syntaxMapping.Expression, loc);
        DefineGetAstMethod(_nodeTb, syntaxMapping, NemerleModifiers.Public %| NemerleModifiers.Virtual, code)
      }
    }

    protected DefineExtensionRuleGetAstMethod(_nodeTb : TypeBuilder) : void
    {
      assert(_nodeTb != null);

      def loc = AstLocationContext.Root();
      foreach (syntaxMapping in this.RuleSymbol.SyntaxMappings)
      {
        def code = CompileSyntaxMapping(syntaxMapping.Expression, loc);
        DefineGetAstMethod(_nodeTb, syntaxMapping, NemerleModifiers.Public %| NemerleModifiers.Override, code)
      }
    }

    protected DefineAmbiguousOrMissingGetAstMethod(_ambiguousOrMissingTb : TypeBuilder) : void
    {
      assert(_ambiguousOrMissingTb != null);

      foreach (syntaxMapping in this.RuleSymbol.SyntaxMappings)
      {
        def makeAmbiguous = 
          if (syntaxMapping.Parameters.IsEmpty)
            <[ $(AstEmitter.GetAmbiguousAstCtor(Environment, syntaxMapping.ReturnType))(Nitra.Internal.AstUtils.GetAstAmbiguities(this.ambiguities)) ]>
          else
            <[
              def astAmbiguities = array(this.ambiguities.Length);
              foreach (node in this.ambiguities with index)
                astAmbiguities[index] = node.GetAst(..$(syntaxMapping.Parameters.Map(p => <[ $(p.Name : usesite) ]>)));
              $(AstEmitter.GetAmbiguousAstCtor(Environment, syntaxMapping.ReturnType))(astAmbiguities)
            ]>;

        def makeMissing =
          if (syntaxMapping.Parameters.IsEmpty || this.RuleSymbol is ExtensibleRuleSymbol)
            <[ $(AstEmitter.GetMissingAstCtor(Environment, syntaxMapping.ReturnType))(this.File, $(Environment.NSpanTypeVar : typed)(this.pos)) ]>
          else
            <[ base.GetAst(..$(syntaxMapping.Parameters.Map(p => <[ $(p.Name : usesite) ]>))) ]>;

        DefineGetAstMethod(_ambiguousOrMissingTb, syntaxMapping, NemerleModifiers.Public %| NemerleModifiers.Override,
          <[ if (this.IsAmbiguous) $makeAmbiguous else $makeMissing ]>)
      }
    }
  }
}
