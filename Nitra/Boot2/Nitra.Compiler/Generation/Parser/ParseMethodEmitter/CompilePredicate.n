using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

namespace Nitra.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public CompilePredicate(predicates : array[SequenceCompileInfo.Predicate], failLabelGotoExpr : PExpr) : PExpr
    {
      when (predicates.Length == 0)
        return <[ {} ]>;

      def code = SCG.List();

      def tailPredicatesMaxPos   = CreateVariable(Util.tmpname("tailPredicatesMaxPos"));
      def tailPredicatesStartPos = CreateVariable(Util.tmpname("tailPredicatesStartPos"));

      def predicateOkLabel   = Environment.MakeLabel(Util.tmpname("predicateOk"));
      def predicateFailLabel = Environment.MakeLabel(Util.tmpname("predicateFail"));

      def continueLabels = array(predicates.Length);
      def startCode      = array(predicates.Length);
      for (mutable i = 0; i < predicates.Length - 1; ++i)
      {
        def predicateStart = Environment.MakeLabel(Util.tmpname("predicateStart"));
        continueLabels[i] = predicateStart;
        startCode[i + 1] = <[ $(predicateStart.Label()); $CurTextPos = $(tailPredicatesStartPos : global); ]>;
      }
      startCode[0] = <[ {} ]>;
      continueLabels[continueLabels.Length - 1] = predicateOkLabel;

      code.Add(<[
        _ = "Predicate block";
        def $(tailPredicatesStartPos : global) = $CurTextPos;
        def $(tailPredicatesMaxPos : global) = parseResult.MaxFailPos;
      ]>);
      foreach (predicate in predicates with i)
      {
        code.Add(startCode[i]);
        code.Add(<[ mutable $(AstPtr(predicate).Var) ]>);
        code.Add(GotoParseLabel(predicate.NonMarkerSubrules[0]));

        def expr =
          if (predicate.IsAnd)
          <[
            $(OkLabel(predicate));   $(continueLabels[i].Goto());
            $(FailLabel(predicate)); $(predicateFailLabel.Goto());
          ]>
          else
          <[
            $(OkLabel(predicate));   $(predicateFailLabel.Goto());
            $(FailLabel(predicate)); $(continueLabels[i].Goto());
          ]>;
        code.Add(expr);

        CompileSequence(code, predicate);
      }

      code.Add(predicateFailLabel.Label());
      code.Add(<[ $CurTextPos = $(tailPredicatesStartPos : global); when (parseResult.MaxFailPos < $(tailPredicatesStartPos : global)) parseResult.MaxFailPos = $(tailPredicatesStartPos : global); ]>);
      code.Add(failLabelGotoExpr);

      code.Add(predicateOkLabel.Label());
      code.Add(<[ $CurTextPos = $(tailPredicatesStartPos : global); parseResult.MaxFailPos = $(tailPredicatesMaxPos : global); ]>);

      code.FlattenPExpr()
    }

    public CompilePredicate(predicates : array[SequenceCompileInfo.Predicate]) : PExpr * PExpr
    {
      when (predicates.Length == 0)
        return (<[ {} ]>, <[ {} ]>);

      def failLabel = Environment.MakeLabel(Util.tmpname("failLabel"));
      (CompilePredicate(predicates, failLabel.Goto()), failLabel.Label())
    }
  }
}
