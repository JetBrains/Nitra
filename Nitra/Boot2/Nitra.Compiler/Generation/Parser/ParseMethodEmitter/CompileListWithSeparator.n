using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

namespace Nitra.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public override CompileListWithSeparator(code : SCG.List[PExpr], subrule : SubruleCompileInfo.ListWithSeparator) : void
    {
      CompileFunction(subrule.Rule);
      CompileFunction(subrule.Separator);
      def localVariableEmitter = LocalVariableEmitter();
      def stateData = ListStateData(localVariableEmitter, subrule);
      def ifCounterEqualsToMaxThenContinue()
      {
        if (subrule.MaxCount is Some(max))
          <[
            when ($(stateData.Counter) == $max)
              $(GotoContinueParseLabel(subrule));
          ]>
        else
          <[ {} ]>
      }
      def ifCounterLessThanMinThenFail()
      {
        if (subrule.MinCount > 0)
          <[
            when ($(stateData.Counter) < $(subrule.MinCount))
            {
              parseState = $(subrule.State);
              $(GotoFailParseLabel(subrule));
            }
          ]>
        else
          <[ {} ]>
      }
      def hangingSeparatorCode = if (subrule.HangingSeparator)
        <[
          $(stateData.ListEndPos) = $CurTextPos;
          $(AstPtr(subrule.Owner).Set(subrule, <[ $(stateData.ListEndPos) - $(stateData.ListStartPos) ]>));
        ]>
      else
        <[ {} ]>;

      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));

      def body = <[
        $(ParseLabel(subrule));
          _ = $(subrule.ToString());
          $headPredicateCode;
          $(AllocateParentAst(subrule));
        $(RecoveryLabel(subrule));
          $(stateData.Init());
          $(stateData.ListStartPos) = $CurTextPos;
          $(stateData.ListEndPos) = $CurTextPos;
          $(stateData.BodyEndPos) = -1;
          $(stateData.SeparatorEndPos) = -1;
          while (true)
          {
            $CurTextPos = $(FunctionName(subrule.Rule) : global)($CurTextPos, text, parseResult);
            if ($CurTextPos >= 0 && $CurTextPos > $(stateData.BodyEndPos))
            {
              $(stateData.Inc());
              $(stateData.ListEndPos) = $CurTextPos;
              $(stateData.BodyEndPos) = $CurTextPos;
              $(AstPtr(subrule.Owner).Set(subrule, <[ $(stateData.ListEndPos) - $(stateData.ListStartPos) ]>));
              $(ifCounterEqualsToMaxThenContinue());
            }
            else
            {
              $(ifCounterLessThanMinThenFail());
              $CurTextPos = $(stateData.ListEndPos);
              $(AstPtr(subrule.Owner).Set(subrule, <[ $(stateData.ListEndPos) - $(stateData.ListStartPos) ]>));
              $(GotoContinueParseLabel(subrule));
            }
            $CurTextPos = $(FunctionName(subrule.Separator) : global)($CurTextPos, text, parseResult);
            if ($CurTextPos >= 0 && $CurTextPos > $(stateData.SeparatorEndPos))
            {
              $hangingSeparatorCode;
              $(stateData.SeparatorEndPos) = $CurTextPos;
            }
            else
            {
              $(ifCounterLessThanMinThenFail());
              $CurTextPos = $(stateData.ListEndPos);
              $(AstPtr(subrule.Owner).Set(subrule, <[ $(stateData.ListEndPos) - $(stateData.ListStartPos) ]>));
              $(GotoContinueParseLabel(subrule));
            }
          }
      ]>;
      code.Add(<[ when (true) { ..$(localVariableEmitter.Define()); $body } ]>);
    }
  }
}
