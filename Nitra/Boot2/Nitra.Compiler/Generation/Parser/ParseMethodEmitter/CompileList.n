using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;


namespace Nitra.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public CompileSkipAny(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      assert3(subrule.Rule.Subrules.Length == 1);
      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));
      def firstChild        = subrule.Rule.NonMarkerSubrules[0];
      def fail              = PExprLabel(this.Environment.Manager, "childFail");
      def childPredicateCode = CompilePredicate(firstChild.HeadPredicates, fail.Goto());
      code.Add(<[
        $(ParseLabel(subrule));
          _ = $(subrule.ToString());
          $headPredicateCode;
          $(AllocateParentAst(subrule));
        $(RecoveryLabel(subrule));
          when (true)
          {
            def startPos = $CurTextPos;
            while ($(CurTextPos) < text.Length)
            {
              $childPredicateCode;
              ++ $(CurTextPos);
            }
            $(fail.Label());
            $(AstPtr(subrule.Owner).Set(subrule, <[ $CurTextPos - startPos ]>));
          }
          $(GotoContinueParseLabel(subrule));
      ]>);
    }

    public override CompileList(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      when (subrule.IsSkipAnyPattern)
      {
        CompileSkipAny(code, subrule);
        return;
      }

      CompileFunction(subrule.Rule);
      def localVariableEmitter = LocalVariableEmitter();
      def stateData = ListStateData(localVariableEmitter, subrule);
      def ifCounterEqualsToMaxThenContinue()
      {
        if (subrule.MaxCount is Some(max))
          <[
            when ($(stateData.Counter) == $max)
              $(GotoContinueParseLabel(subrule));
          ]>
        else
          <[ {} ]>
      }
      def ifCounterLessThanMinThenFail()
      {
        if (subrule.MinCount > 0)
          <[
            when ($(stateData.Counter) < $(subrule.MinCount))
            {
              parseState = $(subrule.State);
              $(GotoFailParseLabel(subrule));
            }
          ]>
        else
          <[ {} ]>
      }

      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));

      def body = <[
        $(ParseLabel(subrule));
          _ = $(subrule.ToString());
          $headPredicateCode;
          $(AllocateParentAst(subrule));
        $(RecoveryLabel(subrule));
          $(stateData.Init());
          $(stateData.ListStartPos) = $CurTextPos;
          $(stateData.ListEndPos) = $CurTextPos;
          while (true)
          {
            $CurTextPos = $(FunctionName(subrule.Rule) : global)($CurTextPos, text, parseResult);
            if ($(stateData.ListEndPos) < $CurTextPos)
            {
              $(stateData.ListEndPos) = $CurTextPos;
              $(stateData.Inc());
              $(AstPtr(subrule.Owner).Set(subrule, <[ $CurTextPos - $(stateData.ListStartPos) ]>));
              $(ifCounterEqualsToMaxThenContinue());
            }
            else
            {
              $(ifCounterLessThanMinThenFail());
              $CurTextPos = $(stateData.ListEndPos);
              $(AstPtr(subrule.Owner).Set(subrule, <[ $CurTextPos - $(stateData.ListStartPos) ]>));
              $(GotoContinueParseLabel(subrule));
            }
          }
      ]>;
      code.Add(<[ when (true) { ..$(localVariableEmitter.Define()); $body } ]>);
    }
  }
}
