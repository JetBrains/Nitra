using Nitra.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal abstract class SequenceDataBase[Emitter]
  {
    public Emitter  : Emitter;
    public Sequence : SequenceCompileInfo;
    public abstract Init() : void;
  }

  [Record]
  internal abstract class SubruleDataBase[Emitter]
  {
    public Emitter : Emitter;
    public Subrule : SubruleCompileInfo;
    public abstract Init() : void;

    public LabelSuffix : string
    {
      [Memoize]
      get
      {
        def fieldName = Subrule.SrcRule.FieldName;
        def suffix = Subrule.GetType().Name + "_" + if (string.IsNullOrEmpty(fieldName)) "" else (fieldName + "_") + Subrule.State;
        suffix
      }
    }
  }

  internal sealed class SequenceDataContainer[Emitter, SequenceData, SubruleData]
    where SequenceData : SequenceDataBase[Emitter]
    where SubruleData : SubruleDataBase[Emitter]
  {
    public this
      ( ast             : SequenceCompileInfo.Ast
      , emitter         : Emitter
      , newSequenceData : Emitter * SequenceCompileInfo -> SequenceData
      , newSubruleData  : Emitter * SubruleCompileInfo -> SubruleData
      )
    {
      def initSequence(sequence : SequenceCompileInfo)
      {
        def data = newSequenceData(emitter, sequence);
        data.Init();
        SequenceData.Add(sequence, data);
        foreach (subrule in sequence.Subrules)
          initSubrule(subrule);
      }
      and initSubrule(subrule : SubruleCompileInfo)
      {
        foreach (predicate in subrule.HeadPredicates)
          initSequence(predicate);
        def data = newSubruleData(emitter, subrule);
        data.Init();
        SubruleData.Add(subrule, data);
        match (subrule)
        {
          | Option           (rule)                     => initSequence(rule);
          | List             (rule, _, _)               => initSequence(rule);
          | ListWithSeparator(rule, separator, _, _, _) => initSequence(rule); initSequence(separator);
          | _ => ()
        }
      }
      initSequence(ast);
    }

    public SequenceData : Hashtable[SequenceCompileInfo, SequenceData] = Hashtable();
    public SubruleData  : Hashtable[SubruleCompileInfo, SubruleData] = Hashtable();
  }
}
