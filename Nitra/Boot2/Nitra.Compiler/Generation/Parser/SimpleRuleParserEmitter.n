using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Model;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal sealed class SimpleRuleParserEmitter : RuleParserEmitter
  {
    public Rule : Rule.Sequence { get; }
    private _sequence : SequenceCompileInfo.Ast;

    public this(owner : SyntaxModuleEmitter, ruleSymbol : SimpleRuleSymbol)
    {
      base(owner, ruleSymbol);
      this.Rule = ruleSymbol.Rule;
      _sequence = ruleSymbol.Sequence;
    }

    [RecordIgnore] private mutable _parserTb : TypeBuilder;

    public override DefineParser() : void
    {
      assert(_parserTb == null);
      _parserTb = Owner.GrammarImplTB.DefineNestedType(<[decl:
        public class $(RuleSymbol.DecorateRuleClassName() : global) : Nitra.Internal.SimpleRuleParser
        {
          public this(grammar : Nitra.CompositeGrammar)
          {
            base(grammar, $(RuleSymbol.GetRuleDescriptorRef()));
          }

          public override StartRuleId : int { get { $(_sequence.AstId : global) } }
        }
      ]>);
    }

    public override DefineParserMethods() : void
    {
      assert(_parserTb != null);
      DefineParse(_parserTb, _sequence);
      DefineInit(_parserTb, _sequence);
      DefineReflection(_parserTb, _sequence);
      DefineIsVoid(_parserTb, _sequence);
    }

    [Memoize]
    public override CreateConstant(name : string, value : int) : string
    {
      Util.CreateConstant(_parserTb, name, value)
    }

    public override Emit() : void
    {
      assert(_parserTb != null);
      _parserTb.Compile();
    }
  }
}
