using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nitra.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed partial class FsmEmitter
  {
    private TestCharConditionCode(rset : RangeSet) : PExpr
    {
      def linearSearch(rset : RangeSet) : PExpr
      {
        def makeCond(rset)
        {
          def cmp(range : RangeSet.Range)
          {
            if (range.from == range.to)
              (1, [<[ c == $(range.from : char) ]>])
            else if (range.from == char.MinValue)
              (1, [<[ c <= $(range.to : char) ]>])
            else if (range.to == char.MaxValue)
              (1, [<[ $(range.from : char) <= c ]>])
            else if (range.from + 1 == range.to)
              (2, [<[ c == $(range.from : char) ]>, <[ c == $(range.to : char) ]>])
            else
              (2, [<[ ($(range.from : char) <= c && c <= $(range.to : char)) ]>])
          }
          def rset = rset.Ranges.Map(cmp);

          def (rsetSize, rset) = rset.Fold((0, []), ((sz, r), (rsetSize, rset)) => (rsetSize + sz, r :: rset));

          def gen(ranges)
          {
            | [range]         => range
            | range :: ranges => <[ $range || $(gen(ranges))]>
            | []              => <[ false ]>
          }
          (rsetSize, gen(rset.Reverse().Flatten()))
        }

        if (Environment.EnableOptimization)
        {
          def nset = rset.Invert();
          def (rsetSize, rset) = makeCond(rset);
          def (nsetSize, nset) = makeCond(nset);
          if (rsetSize <= nsetSize)
            rset
          else
            <[ ! $nset ]>
        }
        else
        {
          def (_, rset) = makeCond(rset);
          rset
        }
      }

      def binarySearch(rset : RangeSet) : PExpr
      {
        def ranges = rset.Ranges.NToArray();
        def rec(first, last)
        {
          match (last - first)
          {
            | 0 =>
              <[ c <= $(ranges[last].to : char) ]>
            | _ =>
              def mid = (first + last) / 2 + 1;
              <[
                if (c >= $(ranges[mid].from : char))
                  { $(rec(mid, last)) }
                else
                  { $(rec(first, mid - 1)) }
              ]>
          }
        }
        def last = ranges.Length - 1;
        <[
          if (c >= $(ranges[0].from : char))
            { $(rec(0, last)) }
          else
            { false }
        ]>
      }

      if (rset.Ranges.Length > 2 && Environment.EnableOptimization)
        binarySearch(rset)
      else
        linearSearch(rset)
    }
  }
}
