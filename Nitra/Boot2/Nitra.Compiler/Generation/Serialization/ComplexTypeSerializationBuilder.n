using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Serialization
{
  public abstract class ComplexTypeSerializationBuilder : TypeSerializationBuilder
  {
    public this(compiler : SerializationCompiler, type : FixedType)
    {
      base(compiler, type);

      def id = compiler.Manager.GetNewId().ToString();
      _writeMethodName = "_N_" + type + "_Write_" + id;
      _readMethodName  = "_N_" + type + "_Read__" + id;
    }

    private _writeMethodName : string;
    private _readMethodName  : string;

    private HelperTb : TypeBuilder
    {
      mutable _helperTb : TypeBuilder;
      get
      {
        when (_helperTb : object == null)
          _helperTb = Compiler.InitHelperTb();
        _helperTb;
      }
    }

    private HelperTypeVar : FixedType
    {
      mutable _helperTypeVar : FixedType;
      get
      {
        when (_helperTypeVar : object == null)
          _helperTypeVar = HelperTb.GetMemType();
        _helperTypeVar
      }
    }

    public sealed override Write(obj : PExpr) : PExpr
    {
      def args = obj :: Compiler.MakeWriteArguments();
      <[ $(HelperTypeVar : typed).$(_writeMethodName : global)(..$args) ]>
    }

    public sealed override Read(memberName : PExpr, typeTag : PExpr) : PExpr
    {
      def args = memberName :: typeTag :: Compiler.MakeReadArguments();
      <[ $(HelperTypeVar : typed).$(_readMethodName : global)(..$args) ]>
    }

    protected sealed override EmitImpl() : void
    {
      Util.locate(Type.Location,
      {
        try
          CollectTypeData();
        catch
        {
          | Recovery => throw;
          | ex       => Message.FatalError($"Failed to build serialization code for type '$Type' with exception $ex")
        }

        def writeParms = <[ parameter: obj : $(Type : typed) ]> :: Compiler.MakeWriteParameters();
        def writeBody = SCG.List();
        GenerateWriteBody(writeBody);

        HelperTb.Define(<[ decl:
          public $(_writeMethodName : usesite)(..$writeParms) : void
          {
            IgnoreParams();
            unchecked { ..$writeBody }
          }
        ]>);

        def readParms =
             <[ parameter: memberName : System.String               ]>
          :: <[ parameter: typeTag    : Nitra.Serialization.TypeTag ]>
          :: Compiler.MakeReadParameters();

        def readBody = SCG.List();
        readBody.Add(Formatter.TestTypeTag(<[ memberName ]>, <[ typeTag ]>, Tag));
        GenerateReadBody(readBody);

        HelperTb.Define(<[ decl:
          public $(_readMethodName : usesite)(..$readParms) : $(Type : typed)
          {
            IgnoreParams();
            unchecked { ..$readBody }
          }
        ]>);
      });
    }

    protected abstract CollectTypeData() : void;
    protected abstract GenerateWriteBody(body : SCG.List[PExpr]) : void;
    protected abstract GenerateReadBody(body : SCG.List[PExpr]) : void;
  }
}
