using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Serialization
{
  public class NitraTypeSerializationFactory : DefaultTypeSerializationFactory
  {
    private mutable _iExportableSymbolType  : FixedType;
    private mutable _symbolType             : FixedType;
    private mutable _locationType           : FixedType;
    private mutable _serializableType       : FixedType;

    public override CreateBuilder(compiler : SerializationCompiler, type : FixedType) : TypeSerializationBuilder
    {
      InitKnownTypes(compiler);
      match (type)
      {
        | Class when type.TryRequire(_iExportableSymbolType) => IExportableSymbolTypeSerializationBuilder(compiler, type)
        | Class when type.TryRequire(_symbolType)            => SymbolTypeSerializationBuilder(compiler, type)
        | Class when type.Equals(_locationType)              => LocationTypeSerializationBuilder(compiler, type)
        | Class when type.TryRequire(_serializableType)      => ISerializableTypeSerializationBuilder(compiler, type)
        | _ => base.CreateBuilder(compiler, type)
      }
    }

    protected override CreateCollectionBuilder(compiler : SerializationCompiler, collectionType : CollectionType, type : FixedType, itemType : TypeVar) : TypeSerializationBuilder
    {
      if (itemType.TryRequire(_serializableType))
        ISerializableCollectionTypeSerializationBuilder(compiler, type, collectionType, itemType)
      else
        base.CreateCollectionBuilder(compiler, collectionType, type, itemType)
    }

    private InitKnownTypes(compiler : SerializationCompiler) : void
    {
      when (_iExportableSymbolType : object == null)
      {
        def env = compiler.Manager.CoreEnv;
        _iExportableSymbolType = env.BindFixedType(<[ Nitra.Serialization.IExportableSymbol ]>);
        _symbolType            = env.BindFixedType(<[ Nitra.Typing.Symbol ]>);
        _locationType          = env.BindFixedType(<[ Nitra.Location ]>);
        _serializableType      = env.BindFixedType(<[ Nitra.Serialization2.ISerializable ]>);
      }
    }
  }

  [Record]
  public class IExportableSymbolTypeSerializationBuilder : TypeSerializationBuilder
  {
    public override Tag : TypeTag { get { TypeTag.Object } }

    public override Write(obj : PExpr) : PExpr
    {
      <[ metadataWriter.WriteSymbolRef($obj, writer); ]>
    }

    public override Read(memberName : PExpr, typeTag : PExpr) : PExpr
    {
      <[
        $(Formatter.TestTypeTag(memberName, typeTag, Tag));
        metadataReader.ReadSymbolRef(reader) :> $(Type : typed);
      ]>
    }
  }

  [Record]
  public class SymbolTypeSerializationBuilder : IExportableSymbolTypeSerializationBuilder
  {
    public override Write(obj : PExpr) : PExpr
    {
      base.Write(<[ $obj :> Nitra.Serialization.IExportableSymbol ]>)
    }
  }

  [Record]
  public class LocationTypeSerializationBuilder : TypeSerializationBuilder
  {
    public override Tag : TypeTag { get { TypeTag.Object } }

    public override Write(obj : PExpr) : PExpr
    {
      <[ metadataWriter.WriteLocation($obj, writer); ]>
    }

    public override Read(memberName : PExpr, typeTag : PExpr) : PExpr
    {
      <[
        $(Formatter.TestTypeTag(memberName, typeTag, Tag));
        metadataReader.ReadLocation(reader)
      ]>
    }
  }

  [Record]
  public class ISerializableTypeSerializationBuilder : TypeSerializationBuilder
  {
    public override Tag : TypeTag { get { TypeTag.Object } }

    public override Write(obj : PExpr) : PExpr
    {
      <[ metadataWriter.WriteObject($obj, writer) ]>
    }

    public override Read(memberName : PExpr, typeTag : PExpr) : PExpr
    {
      <[
        $(Formatter.TestTypeTag(memberName, typeTag, Tag));
        metadataReader.ReadObject.[$(Type : typed)](reader)
      ]>
    }
  }

  [Record]
  public class ISerializableCollectionTypeSerializationBuilder : TypeSerializationBuilder
  {
    public override Tag : TypeTag { get { TypeTag.Collection } }

    private _collectionType : DefaultTypeSerializationFactory.CollectionType;
    private _itemType       : TypeVar;

    public override Write(obj : PExpr) : PExpr
    {
      <[ metadataWriter.WriteObjects($obj, writer) ]>
    }

    public override Read(memberName : PExpr, typeTag : PExpr) : PExpr
    {
      def expr =
      <[
        $(Formatter.TestTypeTag(memberName, typeTag, Tag));
        metadataReader.ReadObjects.[$(_itemType : typed)](reader) // TODO: ReadObjects should return ImmutableArray
      ]>;

      match (_collectionType)
      {
        | NemerleList    => <[ Nemerle.Collections.NCollectionsExtensions.NToList($expr) ]>
        | ImmutableArray => <[ System.Collections.Immutable.ImmutableArray.Create($expr) ]>
        | _              => expr
      }
    }
  }
}
