using Nitra.ProjectSystem;
using Nitra.Serialization2;
using Nitra.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public class TableScope : Scope
  {
    public this(title : string, owner : DeclarationSymbol)
    {
      _title     = title;
      _owner     = owner;
      _nameTable = Hashtable();
    }

    private _title     : string;
    private _owner     : DeclarationSymbol;
    private _nameTable : Hashtable[int, list[DeclarationSymbol]]; //TODO: replace with LightList[DeclarationSymbol]?

    public Owner   : DeclarationSymbol { get { _owner } }
    public virtual Symbols : Hashtable[int, list[DeclarationSymbol]].ValueCollection { get { _nameTable.Values } }

    public Define[TSymbol](declaration : Declaration, context : DependentPropertyEvalContext, name : Name = null) : TSymbol
      where TSymbol : DeclarationSymbol
    {
      when (name != null)
        (declaration :> DeclarationBase).UpdateName(name);
        
      def     name2            = declaration.Name;
      def     candidateSymbols = LightList();
      mutable ambiguousSymbols : HashSet[DeclarationSymbol];

      mutable lookupResult;
      when (_nameTable.TryGetValue(name2.Id, out lookupResult))
      {
        ambiguousSymbols = HashSet(lookupResult);
        foreach (symbol is TSymbol when symbol.CanMerge(declaration) in lookupResult)
          candidateSymbols.Add(symbol);
      }

      def concreteSymbol =
        match (candidateSymbols.Count)
        {
          | 0 =>
            def newSymbol = declaration.CreateSymbol();
            (newSymbol :> SymbolBase).Owner = this;
            newSymbol :> TSymbol;

          | 1 => candidateSymbols[0] // merge
          | _ => assert(false)
        };

      if (ambiguousSymbols : object == null)
        _nameTable.Add(name2.Id, [concreteSymbol]);
      else when (ambiguousSymbols.Add(concreteSymbol))
      {
        // фильтруем без учета конкретного типа
        def realAmbiguousSymbols = ambiguousSymbols.FilterToArray(s => !concreteSymbol.Equals(s) && s.IsSameIdentity(declaration));
        when (realAmbiguousSymbols.Length > 0)
        {
          def cm = declaration.File.TypingMessages;
          using (nested = cm.RootError(name2, $"Redefinition of '$name2'"))
            foreach (ambiguous in realAmbiguousSymbols)
              foreach (d in ambiguous.Declarations)
                nested.Hint(d.Name, "previous definition.");
        }
        _nameTable[name2.Id] = ambiguousSymbols.NToList();
      }

      concreteSymbol.AddDeclaration(declaration);
      when (context : object != null)
      when (candidateSymbols.Count == 0)
        concreteSymbol.EvalProperties(context); // initialize symbol default values

      assert(!name2.IsSymbolEvaluated);
      name2.Symbol = concreteSymbol;

      concreteSymbol
    }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      foreach (symbols in _nameTable.Values)
        foreach (symbol is TSymbol when predicate(symbol) in symbols)
          results.Add(symbol);
    }
    
    public Undefine(shouldRemove : Predicate[Declaration]) : void
    {
      def undefine(lst : list[DeclarationSymbol]) : list[DeclarationSymbol]
      {
        | []      => []
        | x :: xs =>
          assert(x.Owner : object == this, $"Symbol '$x' is not defined in table scope.");

          def survivedDeclarations = x.RemoveDeclarations(shouldRemove);
          if (survivedDeclarations > 0)
          {
            def newXs = undefine(xs);
            if (newXs : object != xs)
              x :: newXs
            else
              lst
          }
          else
          {
            (x :> SymbolBase).Owner = null;
            undefine(xs)
          }
      }

      foreach (pair in _nameTable.ToArray())
      {
        def newList = undefine(pair.Value);

        when (newList : object != pair.Value)
          if (newList.IsEmpty)
            _nameTable.Remove(pair.Key);
          else
            _nameTable[pair.Key] = newList;
      }
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      mutable lookupResult;
      when (_nameTable.TryGetValue(reference.Id, out lookupResult))
      {
        foreach (result is TSymbol in lookupResult)
          results.Add(result);
      }
    }
    
    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      if (string.IsNullOrEmpty(prefix))
        _nameTable.Values.SelectMany(s => s)
      else
        _nameTable.Where(pair => StringIndex.GetText(pair.Key).StartsWith(prefix, StringComparison.InvariantCultureIgnoreCase)).SelectMany(pair => pair.Value)
    }

    public override ToString() : string
    {
      $<#$_title[..$(_nameTable.Keys; ", "; StringIndex.GetText)]#>
    }

    internal EnqueueSymbols(metadataWriter : MetadataWriter) : void
    {
      foreach (pair in _nameTable)
        foreach (s when s.HasParsedDeclarations in pair.Value)
          metadataWriter.EnqueueSymbol(s)
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      when (metadataWriter.BeginWriteObject(this, writer))
      {
        writer.Write(_title : string);
        metadataWriter.WriteObject(_owner, writer);
        EnqueueSymbols(metadataWriter);
      }
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      mutable scope;
      _ = metadataReader.BeginReadObject(reader, out scope, _tableScopeFactory);
      scope
    }

    private static _tableScopeFactory : Func[BinaryReader, MetadataReader, TableScope] = fun (reader, metadataReader)
    {
      def title = reader.ReadString();
      def owner = metadataReader.ReadObject(reader);
      TableScope(title, owner)
    };
  }
}
