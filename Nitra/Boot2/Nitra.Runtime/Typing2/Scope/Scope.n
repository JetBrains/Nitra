using Nitra.Serialization2;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public abstract class Scope : ISerializable
  {
    public abstract BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void where TSymbol : DeclarationSymbol;
    public abstract MakeCompletionList(prefix : string) : Seq[DeclarationSymbol];
    public abstract FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void where TSymbol : DeclarationSymbol;

    public Bind[TSymbol](reference : Reference) : Ref[TSymbol]
      where TSymbol : DeclarationSymbol
    {
      mutable result = LightList();
      BindMany(reference, ref result);
      match (result.Count)
      {
        | 0 => Ref.Unresolved(reference.File, reference.Span, reference.Text, ResolutionSource.Bind(this))
        | 1 => Ref.Some(reference.File, reference.Span, result[0])
        | _ => Ref.Ambiguous(reference.File, reference.Span, result.ToNList(), ResolutionSource.Bind(this))
      }
    }

    public virtual HideWith(scope : Scope) : Scope
    {
      if (IsNullOrEmpty(scope))
        this
      else
        HidingScope(this, scope)
    }

    public virtual UnionWith(scope : Scope) : Scope
    {
      mutable builder = UnionScopeBuilder();
      UnionScopeBuilder.Add(this, ref builder);
      UnionScopeBuilder.Add(scope, ref builder);
      builder.ToScope();
    }

    public virtual FilterWith([NotNull] predicate : Func[DeclarationSymbol, bool]) : Scope
    {
      FilteringScope(this, predicate)
    }

    public abstract Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void;

    public static IsNullOrEmpty(scope : Scope) : bool
    {
      scope : object == null || scope : object == EmptyScope.Instance
    }
  }
}
