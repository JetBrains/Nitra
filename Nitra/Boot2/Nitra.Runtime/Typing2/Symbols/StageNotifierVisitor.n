using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Imperative;
using Nemerle.Utility;

using Nitra.Declarations;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra
{
  public class StageNotifierVisitor : IAstVisitor
  {
    mutable        _stage          : int;
    [RecordIgnore] _visitedSymbols : HashSet[DeclarationSymbol] = HashSet();
    
    public Notify(ast : IAst, stage : int) : void
    {
      _stage = stage;
      _visitedSymbols.Clear();
      ast.Accept(this);
    }

    public Visit(ast : IAst) : void { ast.Accept(this); }
    Visit(reference : Reference) : void implements IAstVisitor.Visit { _ = reference; }

    Visit(name : Name) : void implements IAstVisitor.Visit
    {
      unless (name.IsSymbolEvaluated)
        return;

      def sym = name.Symbol;
      when (_visitedSymbols.Add(sym))
        sym.AfterStage(_stage);
    }

    public Visit(r : IRef) : void
    {
      _ = r;
    }
  }
}
