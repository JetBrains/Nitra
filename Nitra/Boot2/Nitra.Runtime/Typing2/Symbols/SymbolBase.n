using Nitra.Internal;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Threading;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public abstract class SymbolBase
  {
    protected this()
    {
      _id = Interlocked.Increment(ref _symbolIdCounter);
    }

    private static mutable _symbolIdCounter : int = 0;

    private         _id           : int;
    private mutable _nameId       : int;
    private mutable _declarations : object;
    private mutable _owner        : TableScope;

    public Id          : int    { get { _id } }
    public IsNameValid : bool   { get { _nameId > 0 } }
    public Name        : string { get { if (_nameId > 0) StringIndex.GetText(_nameId) else "<invalid name>" } }
    public InitialName : string { get { if (_nameId < 0) StringIndex.GetText(~_nameId) else Name } }

    public Owner : TableScope
    {
      get { _owner }
      internal set
      {
        when (value : object != null)
          assert(_owner : object == null, "Property 'Owner' is already set.");

        _owner = value;
      }
    }

    public override GetHashCode() : int { _id }
    public override Equals(other : object) : bool { other == this }

    public FirstDeclarationOrDefault : Declaration
    {
      get
      {
        match (_declarations)
        {
          | null                     => null
          | d   is Declaration       => d
          | lst is list[Declaration] => lst.Head
          | _ => assert(false)
        }
      }
    }

    public DeclarationsCount : int
    {
      get
      {
        match (_declarations)
        {
          | null                     => 0
          | _   is Declaration       => 1
          | lst is list[Declaration] => lst.Length
          | _ => assert(false)
        }
      }
    }

    public HasDeclarations : bool
    {
      get
      {
        match (_declarations)
        {
          | null => false
          | _    => true
        }
      }
    }

    public HasParsedDeclarations : bool
    {
      get
      {
        match (_declarations)
        {
          | null                     => false
          | d   is Declaration       => d.IsParsed
          | lst is list[Declaration] =>
            foreach (d when d.IsParsed in lst)
              return true;
            false

          | _ => assert(false)
        }
      }
    }

    public GetDeclarationsUntyped() : Seq[Declaration]
    {
      match (_declarations)
      {
        | null                     => []
        | d   is Declaration       => [d]
        | lst is list[Declaration] => lst
        | _ => assert(false)
      }
    }

    public GetDeclarationsOfType[TDeclaration]() : Seq[TDeclaration]
      where TDeclaration : Declaration
    {
      match (_declarations)
      {
        | d is TDeclaration => yield d;
        | lst is list[Declaration] =>
          foreach (d is TDeclaration in lst)
            yield d;

        | _ => ()
      }
    }

    public AddDeclaration([NotNull] newDeclaration : Declaration) : void
    {
      _declarations =
        match (_declarations)
        {
          | null                     => newDeclaration
          | d is Declaration         => [newDeclaration, d] : object
          | lst is list[Declaration] => newDeclaration :: lst
          | _ => assert(false, $"Unable to add declaration '$newDeclaration' to symbol declaration store")
        };

      UpdateName(newDeclaration.Name.Id);
    }

    public RemoveDeclarations(shouldRemove : Predicate[Declaration]) : int
    {
      match (_declarations)
      {
        | null => 0
        | d is Declaration =>
          if (shouldRemove(d))
          {
            _declarations = null;
            0
          }
          else
            1

        | lst is list[Declaration] =>
          mutable removed  = 0;
          mutable survived = LightList();
          foreach (d in lst)
            if (shouldRemove(d))
              ++removed;
            else
              survived.Add(d);

          when (removed > 0)
            match (survived.Count)
            {
              | 0 => _declarations = null
              | 1 => _declarations = survived.FirstItem
              | _ => _declarations = survived.ToNList()
            }

          survived.Count

        | _ => assert(false)
      }
    }

    internal UpdateName(newId : int) : void
    {
      when (_nameId != newId)
      {
        if (_nameId == 0)
          _nameId = newId
        else when (_nameId > 0)
          _nameId = ~_nameId
      }
    }

    public virtual CanMerge(candidate : Declaration) : bool
    {
      _ = candidate;
      false
    }

    public virtual IsSameIdentity(candidate : Declaration) : bool
    {
      _ = candidate;
      true
    }

    public virtual AfterStage(stage : int) : void
    {
      _ = stage;
    }

    public virtual DecomposeType() : ValueOption[TypeStructure]
    {
      VNone()
    }

    public virtual ToXaml() : string
    {
      def symbol  = this :> DeclarationSymbol;
      def builder = StringBuilder(symbol.Name);
      when (symbol.IsKindEvaluated)
        _ = builder.Append(" <Span Foreground = 'blue'>").Append(symbol.Kind).Append("</Span>");
      builder.ToString();
    }

    public override ToString() : string
    {
      def symbol  = this :> DeclarationSymbol;
      def builder = StringBuilder(symbol.Name);
      when (symbol.IsKindEvaluated)
        _ = builder.Append(" (").Append(symbol.Kind).Append(")");
      builder.ToString();
    }
  }
}
