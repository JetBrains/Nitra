using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Imperative.GoTo;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using System.Text;
using SCG = System.Collections.Generic;

namespace Nitra.Runtime
{
  [Record]
  public struct TokenCount
  {
    public AllTokens : int;
    public KeyTokens : int;

    private class TokenCounter : AstWalkerBase[FakeVoid]
    {
      public mutable AllTokens : int = 0;
      public mutable KeyTokens : int = 0;
      private AddToken(endPos : int, isKeyToken : bool) : void
      {
        when (endPos >= 0)
        {
          ++AllTokens;
          when (isKeyToken)
            ++KeyTokens;
        }
      }

      public override OnRegularCall      (ruleInfo : SubruleInfo.RegularCall,       startPos : int, endPos : int, parseResult : ParseResult, context : FakeVoid) : void
      {
        IgnoreParams();
        AddToken(endPos, ruleInfo.Descriptor.IsKeyToken);
      }

      public override OnTokenString      (ruleInfo : SubruleInfo.TokenString,       startPos : int, endPos : int, parseResult : ParseResult, context : FakeVoid) : void
      {
        IgnoreParams();
        AddToken(endPos, ruleInfo.IsKeyToken);
      }

      public override OnSimpleCall       (ruleInfo : SubruleInfo.SimpleCall,        startPos : int, endPos : int, parseResult : ParseResult, context : FakeVoid) : void
      {
        IgnoreParams();
        when (ruleInfo.IsVoid)
          return;
        if (ruleInfo.RuleParser.IsTokenRule)
          AddToken(endPos, ruleInfo.RuleParser.Descriptor.IsKeyToken);
        else
          base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, context)
      }

      public override OnExtensibleCall   (ruleInfo : SubruleInfo.ExtensibleCall,    startPos : int, endPos : int, parseResult : ParseResult, context : FakeVoid) : void
      {
        IgnoreParams();
        when (ruleInfo.IsVoid)
          return;
        if (ruleInfo.RuleParser.IsTokenRule)
          AddToken(endPos, ruleInfo.RuleParser.Descriptor.IsKeyToken);
        else
          base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, context)
      }

      public Walk(astPtr : int, mutable curTextPos : int, parseResult : ParseResult, context : FakeVoid) : int
      {
        when (astPtr <= 0)
          return -1;

        match (parseResult.GetRuleParser(astPtr))
        {
          | ExtensibleRuleParserData as ruleParserData => WalkExtension(astPtr, curTextPos, ruleParserData.GetParser(0), parseResult, context)
          | _                                          => WalkSequence(astPtr, curTextPos, parseResult, context)
        }
      }
    }

    public static CreateFromSubruleInfo(subrule : SubruleInfo, begin : int, end : int, parseResult : ParseResult) : TokenCount
    {
      def counter = TokenCounter();
      def newEnd = match (subrule)
      {
        | Empty                        => begin
        | Marker                       => begin
        | TokenString       as subrule => counter.AllTokens = 1; counter.KeyTokens = subrule.MandatoryTokenCount; end
        | RegularCall       as subrule => counter.AllTokens = 1; counter.KeyTokens = subrule.MandatoryTokenCount; end
        | ExtensibleCall    as subrule => counter.WalkExtensible(begin, subrule.RuleParser, parseResult, FakeVoid())
        | SimpleCall        as subrule => counter.WalkSimple(begin, subrule.RuleParser, parseResult, FakeVoid())
        | Option            as subrule => if (begin == end) end else counter.Walk(parseResult.GetAst(begin, subrule.Rule.Id), begin, parseResult, FakeVoid())
        | List              as subrule =>
          mutable curPos = begin;
          while (true)
          {
            when (curPos >= end) break;
            def newPos = counter.Walk(parseResult.GetAst(curPos, subrule.Rule.Id), curPos, parseResult, FakeVoid());
            assert3(newPos >= 0);
            curPos = newPos;
          }
          assert3(curPos == end);
          end

        | ListWithSeparator as subrule =>
          mutable curPos = begin;
          while (true)
          {
            when (curPos >= end) break;
            def newPos = counter.Walk(parseResult.GetAst(curPos, subrule.Rule.Id), curPos, parseResult, FakeVoid());
            assert3(newPos >= 0);
            curPos = newPos;
            when (curPos >= end) break;
            def newPos = counter.Walk(parseResult.GetAst(curPos, subrule.Separator.Id), curPos, parseResult, FakeVoid());
            assert3(newPos >= 0);
            curPos = newPos;
          }
          assert3(curPos == end);
          end
      }
      assert3(end == newEnd);
      TokenCount(counter.AllTokens, counter.KeyTokens);
    }
  }
}
