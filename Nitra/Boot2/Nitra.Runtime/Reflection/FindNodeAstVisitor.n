using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Runtime.Reflection
{
  public class FindNodeAstVisitor : IAstVisitor
  {
    private _span : NSpan;
    private mutable _isMissingReferenceFound : bool;
    public Stack : SCG.Stack[IAst]= SCG.Stack();
    
    public isMissingReferenceFound : bool { get { _isMissingReferenceFound } }

    public this(span : NSpan) { _span = span; }

    public Visit(parseTree : IAst) : void
    {
      when (_isMissingReferenceFound)
        return;
          
      when (parseTree.Span.IntersectsWith(_span))
      {
        Stack.Push(parseTree);
        parseTree.Accept(this);
      }
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      when (_isMissingReferenceFound)
        return;

      when (reference.Span.IntersectsWith(_span))
      {
        when (reference.IsMissing)
          _isMissingReferenceFound = true;
          
        Stack.Push(reference);
      }
    }

    public Visit(name : Name) : void implements IAstVisitor.Visit
    {
      _ = name;
    }

    public Visit(r : IRef) : void
    {
      _ = r;
    }
  }
}
