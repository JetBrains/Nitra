using Nitra.Internal;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public class BoundedTypeVarSymbol : SymbolBase, TypeVarSymbol
  {
    [Flags]
    private enum EvalState : int
    {
      | None = 0
      | BaseTypeConstraint = 1
      | DerivedTypeConstraint = 2
      | Type = 4
      | TypeSubst = 8
    }

    public this()
    {
    }

    private mutable _state : EvalState;

    public IsBaseTypeConstraintEvaluated : bool
    {
      get { _state %&& EvalState.BaseTypeConstraint }
    }

    private mutable _baseTypeConstraint : TypeSymbol;

    [DependentProperty("IsBaseTypeConstraintEvaluated")]
    public BaseTypeConstraint : TypeSymbol
    {
      get { assert(IsBaseTypeConstraintEvaluated);  _baseTypeConstraint }
      set { assert(!IsBaseTypeConstraintEvaluated); _baseTypeConstraint = value; _state |= EvalState.BaseTypeConstraint }
    }

    public IsDerivedTypeConstraintEvaluated : bool
    {
      get { _state %&& EvalState.DerivedTypeConstraint }
    }

    private mutable _derivedTypeConstraint : TypeSymbol;

    [DependentProperty("IsDerivedTypeConstraintEvaluated")]
    public DerivedTypeConstraint : TypeSymbol
    {
      get { assert(IsDerivedTypeConstraintEvaluated);  _derivedTypeConstraint}
      set { assert(!IsDerivedTypeConstraintEvaluated); _derivedTypeConstraint = value; _state |= EvalState.DerivedTypeConstraint }
    }

    public IsTypeEvaluated : bool
    {
      get { _state %&& EvalState.Type }
    }

    private mutable _type : TypeSymbol;

    [DependentProperty("IsTypeEvaluated")]
    public Type : TypeSymbol
    {
      get { assert(IsTypeEvaluated);  _type }
      set { assert(!IsTypeEvaluated); _type = value; _state |= EvalState.Type }
    }

    public IsTypeSubstEvaluated : bool
    {
      get { _state %&& EvalState.TypeSubst }
    }

    private mutable _typeSubst : TypeSymbol;

    [DependentProperty("IsTypeSubstEvaluated")]
    public TypeSubst : TypeSymbol
    {
      get { assert(IsTypeSubstEvaluated); _typeSubst }
      set { assert(!IsTypeSubstEvaluated); _typeSubst = value; _state |= EvalState.TypeSubst }
    }

    public IsFullNameEvaluated : bool
    {
      get { IsTypeEvaluated && Type.IsFullNameEvaluated }
    }

    [DependentProperty("IsFullNameEvaluated")]
    public FullName : string
    {
      get { Type.FullName }
      set { _ = value }
    }

    public IsKindEvaluated : bool
    {
      get { true }
    }

    [DependentProperty("IsKindEvaluated")]
    public Kind : string
    {
      get { if (IsTypeEvaluated && Type.IsKindEvaluated) Type.Kind else "type var" }
      set { _ = value; }
    }

    public IsScopeEvaluated : bool
    {
      get { IsTypeEvaluated && Type.IsScopeEvaluated }
    }

    [DependentProperty("IsScopeEvaluated")]
    public Scope : Scope
    {
      get { Type.Scope }
      set { _ = value; }
    }

    public IsSpanClassEvaluated : bool
    {
      get { IsTypeEvaluated && Type.IsSpanClassEvaluated }
    }

    [DependentProperty("IsSpanClassEvaluated")]
    public SpanClass : SpanClass
    {
      get { Type.SpanClass }
      set { _ = value; }
    }

    public IsAllPropertiesEvaluated : bool
    {
      get { false }
    }

    public PropertiesEvalState : int
    {
      get { _state :> int }
    }

    public EvalProperties(context : DependentPropertyEvalContext) : void
    {
      _ = context;
    }

    public ResetProperties() : void
    {
      _state = EvalState.None;
    }

    public override ToString() : string
    {
      if (IsTypeEvaluated)
        Type.ToString()
      else
      {
        match (IsBaseTypeConstraintEvaluated, IsDerivedTypeConstraintEvaluated)
        {
          | (false, false) => Kind
          | (true,  false) => BaseTypeConstraint + "+"
          | (false,  true) => DerivedTypeConstraint + "-"
          | (true,   true) => BaseTypeConstraint + " TILL " + DerivedTypeConstraint
        }
      }
    }

    public override ToXaml() : string
    {
      AstUtils.XmlEscape(ToString())
    }

    get_Declarations1() : Seq[TypeVar] implements TypeVarSymbol.get_Declarations
    {
      GetDeclarationsOfType()
    }

    get_Declarations2() : Seq[Type] implements TypeSymbol.get_Declarations
    {
      GetDeclarationsOfType()
    }

    get_Declarations3() : Seq[Declaration] implements DeclarationSymbol.get_Declarations
    {
      GetDeclarationsUntyped()
    }

    public Serialize(writer : IO.BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      _ = writer; _ = metadataWriter;
      throw System.NotImplementedException()
    }
  }
}
