using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.ProjectSystem;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra
{
  public class CollectSymbolErrorsVisitor : IAstVisitor
  {
    public CompilerMessages : CompilerMessageList = CompilerMessageList();

    public Visit(parseTree : IAst) : void
    {
      parseTree.Accept(this);
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      when (reference.IsRefEvaluated)
      {
        
        def processRef(r : IRef)
        {
          if (r.IsResolvedToEvaluated)
            processRef(r.ResolvedTo);
          else if (r.IsUnresolved)
            CompilerMessages.Error(reference, $"Unresolved reference '$reference'");
          else when (r.IsAmbiguous)
          {
            using (err = CompilerMessages.RootError(reference, $<#Symbol '$reference' is ambiguous.#>))
              foreach (ambiguous in r.Ambiguities with i)
              {
                def head = ambiguous.FirstDeclarationOrDefault;
                when (head : object != null)
                  err.Hint(head.Name, $<#Declaration $i#>);
              }
          }
        }
        
        processRef(reference.Ref)
      }
    }

    public Visit(_ : Name) : void implements IAstVisitor.Visit
    {
    }

    public Visit(r : IRef) : void
    {
      _ = r;
    }
  }
}
