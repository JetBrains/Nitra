using Nitra.Internal;
using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Errors
{
  public class ExpectedSubrulesError : ParseError
  {
    public Expected : ReadOnlyCollection[ParsedSequenceAndSubrule];
    
    public this(loc : Location, expected : Seq[ParsedSequenceAndSubrule])
    {
      base(loc);
      Expected = ReadOnlyCollection(expected.ToArray());
    }
    
    public override Message : string { [Memoize] get { MekeMessage() } }

    public override DebugText : string
    {
      [Memoize] get
      {
        def toStr(e : ParsedSequenceAndSubrule) : string { e.Subrule + " " + e.Sequence }
        $<#..$(this.Expected; "\n"; toStr)#>
      }
    }
    
    MekeMessage() : string
    {
      $"Expected: ..$(SubruleToString(Expected))"
    }
    
    static SubruleToString(expected : Seq[ParsedSequenceAndSubrule]) : Seq[string]
    {
      expected.Select(e => e.Sequence.ParsingSequence.States[e.Subrule.State].Description);
    }
    
    public override ToString() : string{ this.Location + ": " + Message }
  }
}
