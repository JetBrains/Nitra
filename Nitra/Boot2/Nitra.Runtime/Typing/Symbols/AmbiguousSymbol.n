using Nitra.Runtime;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public sealed class AmbiguousSymbol : Symbol
  {
    public this(ambiguousList : list[Symbol])
    {
      assert2(ambiguousList.Length > 1);
      def first = ambiguousList.Head;
      def name  = first.Name;
      def node  = first.Node;

      base(name);

      foreach (s in ambiguousList)
      {
        assert2(s.Name == name);
        assert2(s.Node : object == node);
      }

      AmbiguousList = ambiguousList;
    }

    public AmbiguousList : list[Symbol] { get; }

    public GetAmbiguous[T](exclude : T = default(_)) : Seq[T]
      where T: Symbol
    {
      def result = AmbiguousList.OfType.[T]();

      if (exclude == null)
        result
      else
        result.Where(x => x : object != exclude)
    }

    public ReportAlreadyDefined[T](newSymbol : T, messags : ICompilerMessages) : void
      where T: Symbol
    {
      def ambiguousSyntaxModules = GetAmbiguous.[T](exclude = newSymbol);
      using (seq = ambiguousSyntaxModules.GetEnumerator())
        when (seq.MoveNext())
          using (rootMsg = messags.RootError(newSymbol.FirstLocation, $"The $(seq.Current.Description) '$(newSymbol.Name)' already defined."))
            do
            {
              def otherSymbol = seq.Current;
              foreach (loc in otherSymbol.Locations)
                rootMsg.Hint(loc, "previous definition.");
            }
            while(seq.MoveNext())
    }

    public override Description : string
    {
      get { "some symbols" }
    }

    public override Locations : list[Location] { get { AmbiguousList.SelectMany(x => x.Locations).NToList() } }
    public override FirstLocation : Location { get { AmbiguousList.Head.FirstLocation } }
  }
}
