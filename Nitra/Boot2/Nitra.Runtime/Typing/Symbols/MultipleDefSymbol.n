using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Nitra.Typing
{
  public abstract class MultipleDefSymbol : Symbol
  {
    volatile mutable _definitions : list[Location];
    public Definitions : list[Location] { get { _definitions } }

    protected this(name : string)
    {
      base(name);
      _definitions = [];
      AssemblyId   = AssemblyIds.NoAssembly;
    }

    protected this(name : Location)
    {
      base(name.GetText());
      _definitions = [name];
      AssemblyId   = AssemblyIds.NoAssembly;
    }

    protected this(name : Located)
    {
      this(name.Location)
    }

    public AddDefinition(location : Location) : void
    {
      _definitions = location :: _definitions;
      // TODO: Компиляция этого метода в исходном виде дает следующее сообщение от ngen:
      //   Common Language Runtime detected an invalid program. while compiling method MultipleDefSymbol.AddDefinition
      //def definitions         = _definitions;
      //def newDefinitions      = location :: definitions;
      //def originalDefinitions = Interlocked.Exchange(ref _definitions, newDefinitions);
      //
      //when (originalDefinitions : object != definitions)
      //  AddDefinition(location)
    }

    public override Locations : list[Location] { get { Definitions } }
    public override FirstLocation : Location { get { Definitions.Head } }
  }
}
