using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public abstract class LibReference
  {
    public abstract Kind : string { get; }
    public virtual Serialize() : string { Kind + ":" + this }
    public static Deserialize(data : string) : LibReference
    {
      def index = data.IndexOf(':');

      when  (index <= 0)
        return null;
      
      def value = data.Substring(index + 1, data.Length - index - 1);
      def kind  = data.Substring(0, index);;

      match (kind)
      {
        | "Project"  => ProjectReference(value)
        | "File"     => FileLibReference(value)
        | "FullName" => FullNameLibReference(value)
        | _ => null
      }
    }
  }

  [Record]
  [StructuralEquality]
  public class ProjectReference : LibReference
  {
    public RelativePath  : string { get; }
    public override Kind : string { get { "Project" } }
  }

  [Record]
  [StructuralEquality]
  public class FileLibReference : LibReference
  {
    public Path : string { get; }
    public override Kind : string { get { "File" } }

    public override ToString() : string { Path }
  }

  [Record]
  [StructuralEquality]
  public class FullNameLibReference : LibReference
  {
    public override Kind : string { get { "FullName" } }
    
    [EqualsIgnore]
    [RecordIgnore]
    private mutable _path : string;
    
    public FullName : string { get; }

    [EqualsIgnore]
    [RecordIgnore]
    public Exception : Exception { get; protected set; }
    
    public Path : string
    {
      get
      {
        when (_path == null)
        {
          _path = "";
          try
          {
            def asm = Assembly.ReflectionOnlyLoad(FullName);
            _path = asm.Location;
          }
          catch { | e => this.Exception = e; }
        }
          
        _path
      }
    }
    
    public override ToString() : string { FullName }
  } // class
} // namespace
