using Nitra.Declarations;
using Nitra.Typing;
using Nitra.Internal;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public abstract class Project : ICompilerMessages
  {
    private mutable _assemblies : List[AssemblyName];
    public CompilerMessages : ICompilerMessages { get; }
    public RootNamespace : NamespaceSymbol { get; private set; }
    public Data : object { get; set; }
    public abstract Files : Seq[File] { get; }
    public virtual Solution : Solution { get; protected set; }
    public virtual Libs : Seq[LibReference] { get; protected set; }
    public ProjectDir : string { get; protected set; }
    

    protected this()
    {
      CompilerMessages = CompilerMessageList();
    }

    protected this([NotNull] compilerMessages : ICompilerMessages)
    {
      CompilerMessages = compilerMessages;
    }

    public virtual Init(referencedAssemblies : Seq[AssemblyName]) : void
    {
      def assemblies = List();

      repeat(AssemblyIds.ReservedIdsCount)
        assemblies.Add(null);

      assemblies.AddRange(referencedAssemblies);
      _assemblies = assemblies;

      def root = HierarchyNode(this);
      def rootNamespace = NamespaceSymbol(null : string);
      root.SetRootNamespaceSymbol(rootNamespace);
      RootNamespace = rootNamespace;
    }

    public GetAssemblyName(assemblyId : byte) : AssemblyName
    {
      _assemblies[assemblyId]
    }

    [Memoize]
    public GetAssemblyId(assemblyName : AssemblyName) : byte
    {
      def arrayEquals(a : array[byte], b : array[byte]) : bool
      {
        when (ReferenceEquals(a, b))
          return true;
        when (a == null || b == null)
          return false;
        when (a.Length != b.Length)
          return false;
        for(mutable i = 0; i < a.Length; ++i)
          when (a[i] != b[i])
            return false;
        true
      }

      mutable nearestVersion = Version();
      mutable result = AssemblyIds.NoAssembly;
      for (mutable index = AssemblyIds.ReservedIdsCount; index < _assemblies.Count; ++index)
      {
        def n = _assemblies[index];
        when (n.Name == assemblyName.Name && arrayEquals(n.GetPublicKeyToken(), assemblyName.GetPublicKeyToken()))
        {
          when (n.Version == assemblyName.Version)
            return index :> byte;

          when (n.Version > assemblyName.Version && n.Version >= nearestVersion)
            result = index :> byte;
        }
      }
      result
    }

    public GetProjectSupport() : IProjectSupport
    {
      def files = Files.ToArray();

      when (files.Length == 0)
        return null;
        
      match (files[0].Ast)
      {
        | x is IProjectSupport => x
        | x => 
          Trace.WriteLine($"The $(x.GetType().FullName) not support IProjectSupport.");
          null
      }
    }

    public UpdateProperties() : void
    {
      def files = Files.ToArray();

      when (files.Length == 0)
        return;
        
      foreach (file in files)
        file.DeepResetProperties();

      def projectSupport = GetProjectSupport();
      when (projectSupport != null)
        projectSupport.RefreshProject(this);
    }

    public virtual EvalProperties(context : DependentPropertyEvalContext, passName : string, stage : int) : void
    {
      def evalHost = ProjectEvalPropertiesHost(this);
      evalHost.EvalProperties(context, passName, stage);
    }

    public virtual AddSymbolRef(_symbol : Symbol, _loc : Location) : void
    {
    }

    public virtual AddSymbolDef(_symbol : Symbol, _loc : Location) : void
    {
    }

    public ReportMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : void
    {
      CompilerMessages.ReportMessage(messageType, loc, msg, num)
    }

    public ReportRootMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : IRootCompilerMessages
    {
      CompilerMessages.ReportRootMessage(messageType, loc, msg, num)
    }

    public SetFutureMessagesKind(kind : Guid) : void { CompilerMessages.SetFutureMessagesKind(kind); }
    public Remove(predicate : Func[Guid, Location, bool]) : void { CompilerMessages.Remove(predicate); }
  }
}
