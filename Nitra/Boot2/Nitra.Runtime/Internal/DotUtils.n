using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

using System.Security.Cryptography;
using System.Text;
using SCG = System.Collections.Generic;

namespace Nitra.Internal
{
  public module DotUtils
  {
    public Contains(this ary : array[int], value : int) : bool
    {
      foreach (x in ary)
        when (x == value)
          return true;

      false
    }

    public Sha1(str : string) : string
    {
      def arr = UTF8Encoding.UTF8.GetBytes(str);
      def sha = SHA1.Create();
      _ = sha.TransformFinalBlock(arr, 0, arr.Length);
      ToBase16String(sha.Hash)
    }

    public ToBase16String(arr : array[byte]) : string
    {
            def hex(b)
    {
      (if (b < 10) '0' + b else 'a' + b) :> char
    }
      def str = array(arr.Length * 2);
      for (mutable i = 0; i < arr.Length; ++i)
      {
        str[i * 2    ] = hex((arr[i] >> 4) & 0xf);
        str[i * 2 + 1] = hex((arr[i])      & 0xf);
      }
      String(str);
    }

    public Contains[T](this ary : array[T], value : T) : bool
    {
      Array.IndexOf(ary, value) >= 0
    }

    public DotEscape(x : string) : string
    {
      x.Replace("\\", <#\\#>).Replace(<#"#>, <#\"#>)
    }

    static ToolsDir = "ExternalTools";

    public ConvertToDot(sourcePath : string, show : bool = true) : void
    {
      def svgFileName = Path.ChangeExtension(sourcePath, "svg");
      def process = Process.Start(FindDotExe(), $<#$sourcePath -o $svgFileName -Tsvg#>);
      process.WaitForExit();
      when (show)
        _ = Process.Start(svgFileName);
    }

    public ConvertToDot(sourcePaths : Seq[string]) : void
    {
      def sourceFileNames = SCG.Queue(sourcePaths);

      while (sourceFileNames.Count > 0)
      {
        def batchSize = 200;
        def sourceFileNamesBatch = List(batchSize);
        for (mutable i; i < batchSize && sourceFileNames.Count > 0; ++i)
          sourceFileNamesBatch.Add(sourceFileNames.Dequeue());

        def si = ProcessStartInfo();
        si.FileName = FindDotExe();
        si.Arguments = $<#-Tsvg -O ..$(sourceFileNamesBatch; " ")#>;
        si.RedirectStandardError  = true;
        //si.RedirectStandardOutput = true;
        si.UseShellExecute = false;

        using (process = Process.Start(si))
        {
          def errors = process.StandardError.ReadToEnd();
          //def output = process.StandardOutput.ReadToEnd();
          process.WaitForExit();
          unless (string.IsNullOrWhiteSpace(errors))
          {
            assert2(string.IsNullOrWhiteSpace(errors));
          }
        }
      }
    }

    public ExecuteDot(source : string) : void
    {
      def dotFileName = Path.ChangeExtension(Path.GetTempFileName(), "dot");
      File.WriteAllText(dotFileName, source);
      def svgFileName = Path.ChangeExtension(dotFileName, "svg");
      def process = Process.Start(FindDotExe(), $<#$dotFileName -o $svgFileName -Tsvg#>);
      process.WaitForExit();
      _ = Process.Start(svgFileName);
    }

    private FindDotExe() : string
    {
      def dir = Path.GetDirectoryName(Path.GetFullPath(Assembly.GetExecutingAssembly().Location));
                              def findDot(dir : string) : string
    {
      if (Directory.Exists(Path.Combine(dir, ToolsDir)))
        Path.Combine(dir, ToolsDir, @"DOT\dot.exe")
      else
      {
        def parent = Directory.GetParent(dir);
        if (parent == null)
          null
        else
          findDot(parent.FullName)
      }
    }

      findDot(dir)
    }

    public static SafeLeftSubstring(this str : string, pos : int, len : int) : string
    {
      assert3(pos >= 0);
      when (pos == 0)
        return "";

      // "1234■12345
      if (pos <= len)
        str.Substring(0, pos)
      else
        str.Substring(pos - len, if (pos > str.Length) str.Length - (pos - len) else len)
    }

    public static SafeRightSubstring(this str : string, pos : int, len : int) : string
    {
      str.Substring(pos, if (pos + len > str.Length) str.Length - pos else len)
    }

    [DebuggerStepThroughAttribute]
    public static EscapeSequence(c : char) : char
    {
      | '\'' => '\'' | '\"' => '\"' | '\\' => '\\' | '0'  => '\0'
      | 'a'  => '\a' | 'b'  => '\b' | 'f'  => '\f' | 'n'  => '\n'
      | 'r'  => '\r' | 't'  => '\t' | 'v'  => '\v' | c    => c
    }

    [DebuggerStepThroughAttribute]
    public EscapeChar(ch : char) : string
    {
      | '\0' => @"'\0'"
      | '\t' => @"'\t'"
      | '\n' => @"'\n'"
      | '\r' => @"'\r'"
      | '\\' => @"'\\'"
      | '\'' => @"'\''"
      | x when x == char.MaxValue  => @" char.MaxValue"
      | c when char.IsLetter(c)
      | c when char.IsDigit(c)
      | c when char.IsPunctuation(c)
      | c when char.IsSeparator(c)
      | c when char.IsSymbol(c)      => $"'$c'"
      | c =>
        def c = c : uint;
        string.Format(<#'\u{0,4:X}'#>, c).Replace(' ', '0');
    }

    [DebuggerStepThroughAttribute]
    public EscapeStringChar(ch : char) : string
    {
      | '\0' => @"\0"
      | '\t' => @"\t"
      | '\n' => @"\n"
      | '\r' => @"\r"
      | '\\' => @"\\"
      | '\'' => @"\'"
      | c when char.IsLetter(c)
      | c when char.IsDigit(c)
      | c when char.IsPunctuation(c)
      | c when char.IsSeparator(c)
      | c when char.IsSymbol(c)      => $"$c"
      | c =>
        def c = c : uint;
        string.Format(<#\u{0,4:X}#>, c).Replace(' ', '0');
    }

    [DebuggerStepThroughAttribute]
    public EscapeString(str : string) : string
    {
      def sb = Text.StringBuilder(str.Length);
      _ = sb.AppendEscapedString(str);
      sb.ToString()
    }

    [DebuggerStepThroughAttribute]
    public AppendEscapedString(this sb : Text.StringBuilder, str : string) : Text.StringBuilder
    {
      sb.AppendEscapedString(str, 0, str.Length);
    }

    [DebuggerStepThroughAttribute]
    public AppendEscapedString(this sb : Text.StringBuilder, str : string, startIndex : int, count : int) : Text.StringBuilder
    {
      def endIndex = startIndex + count;
      for (mutable i = startIndex; i < endIndex; ++i)
        _ = sb.Append(EscapeStringChar(str[i]));
      sb
    }
  }
}
