using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using SCG =  System.Collections.Generic;

namespace Nitra.Internal
{
  public class TokenEnumerator
  {
    _parseResult : ParseResult;

    public this(parseResult : ParseResult) { _parseResult = parseResult; }

    _stack  : SCG.Stack[ParseFrame] = SCG.Stack();
    
    mutable _sequence : SequenceInfo;
    mutable _subruleIndex    : int;
    mutable _astPtr        : int;
    mutable _curTextPos    : int;
    mutable _listEndPos    : int;
    mutable _listSep       : bool;
    
    public Start(astPtr : int, curTextPos : int) : TokenEnumerator
    {
      assert3(_parseResult != null);
      _stack.Clear();
      
      _sequence       = _parseResult.GetSequenceInfo(astPtr);
      _astPtr         = astPtr;
      _subruleIndex   = -1;
      _curTextPos     = curTextPos;
      _listEndPos     = -1;
      this
    }
    
    public NextTokenSize() : int
    {
      _subruleIndex++;
      def rules = _sequence.Subrules;
      if (_subruleIndex >= rules.Length)
      {
        if (_stack.Count > 0)
        {
          (_sequence, _astPtr, _subruleIndex, _curTextPos, _listEndPos, _listSep) = _stack.Pop();
          NextTokenSize()
        }
        else
          -1
      }
      else
      {
        def state = _parseResult.ast[_astPtr + ExtensibleRuleParser.AstOfs.State];
        def invalidState = state >= 0 && _sequence.Subrules[_subruleIndex].State >= state;
        def ruleInfo = rules[_subruleIndex];
        mutable fullSize;
        mutable skip;
        when (!invalidState)
        {
          def sizePtr = _astPtr + ruleInfo.Offset;
          def size = _parseResult.GetSkipAndSize2(sizePtr);
          if (size >= 0)
          {
            fullSize = size;
            skip = 0;
          }
          else
          {
            fullSize = ~size;
            skip = _parseResult.GetSkip(sizePtr);
          }
          when (fullSize - skip == 0)
          {
            _curTextPos += fullSize;
            return NextTokenSize();
          }
        }

        match (ruleInfo)
        {
          | Empty =>
            if (invalidState)
              -1
            else
            {
              _curTextPos += fullSize;
              NextTokenSize()
            }

          | RegularCall
          | TokenString
          | ExtensibleCall as extensibleCall when extensibleCall.RuleParser.IsTokenRule
          | SimpleCall     as simpleCall     when simpleCall.RuleParser.IsTokenRule
            =>
            if (invalidState)
              -1
            else
            {
              _curTextPos += fullSize;
              fullSize - skip
            }

          | SimpleCall        (ruleParser) =>
            if (invalidState)
            {
              _stack.Push(ParseFrame(_sequence, _astPtr, int.MaxValue - 1, _curTextPos + fullSize, _listEndPos, _listSep));
              _astPtr = _parseResult.TryGetAst(_curTextPos, ruleParser.RuleId);
              if (_astPtr > 0)
              {
                _sequence     = _parseResult.GetSequenceInfo(_astPtr);
                _subruleIndex = -1;
                _listEndPos   = -1;
                NextTokenSize()
              }
              else
                -1
            }
            else
            {
              _stack.Push(ParseFrame(_sequence, _astPtr, _subruleIndex, _curTextPos + fullSize, _listEndPos, _listSep));
              _curTextPos    += skip;
              _astPtr         = _parseResult.GetAst(_curTextPos, ruleParser.RuleId);
              _sequence       = _parseResult.GetSequenceInfo(_astPtr);
              _subruleIndex   = -1;
              _listEndPos     = -1;
              NextTokenSize()
            }

          | ExtensibleCall(ruleParser)    =>
            if (invalidState)
            {
              _listEndPos     = -1;
              mutable prefixAst = _parseResult.TryGetAst(_curTextPos, ruleParser.PrefixId);
              if (prefixAst > 0)
              {
                def astPtr      = _parseResult.TryGetPrefix(ref _curTextPos, ref prefixAst);
                if (astPtr > 0)
                {
                  _stack.Push(ParseFrame(_sequence, _astPtr, int.MaxValue - 1, _curTextPos, _listEndPos, _listSep));
                  _astPtr         = astPtr;
                  _sequence       = _parseResult.GetSequenceInfo(astPtr);
                  _subruleIndex   = -1;
                  _listEndPos     = -1;
                  NextTokenSize()
                }
                else
                  -1;
              }
              else
                -1;
            }
            else if (fullSize - skip == 0)
            {
              _curTextPos += skip;
              NextTokenSize()
            }
            else if (_listEndPos == -1)
            {
              _listEndPos     = _curTextPos + fullSize;
              _curTextPos    += skip;
              mutable prefixAst = _parseResult.GetAst(_curTextPos, ruleParser.PrefixId);
              def astPtr      = ruleParser.BestPrefix(_parseResult.TryGetPrefix(ref _curTextPos, ref prefixAst), _parseResult);
              assert3(astPtr > 0);
              def rule        = _parseResult.GetSequenceInfo(astPtr);
              def astSize     = rule.GetSize(astPtr, _parseResult);
              _stack.Push(ParseFrame(_sequence, _astPtr, _subruleIndex - 1, _curTextPos + astSize, _listEndPos, _listSep));
              _astPtr         = astPtr;
              _sequence       = rule;
              _subruleIndex   = -1;
              _listEndPos     = -1;
              NextTokenSize()
            }
            else if (_curTextPos < _listEndPos)
            {
              mutable postfixAst = _parseResult.GetAst(_curTextPos, ruleParser.PostfixId);
              def bestResult = ruleParser.BestPostfix(_parseResult.TryGetPostfix(ref _curTextPos, ref postfixAst), _parseResult);
              assert3(bestResult > 0);
              def rule        = _parseResult.GetSequenceInfo(bestResult);
              def astSize     = rule.GetSize(bestResult, _parseResult);
              _stack.Push(ParseFrame(_sequence, _astPtr, _subruleIndex - 1, _curTextPos + astSize, _listEndPos, _listSep));
              _astPtr         = bestResult;
              _sequence       = rule;
              _subruleIndex   = -1;
              _listEndPos     = -1;
              NextTokenSize()
            }
            else
            {
              assert3(_curTextPos == _listEndPos);
              NextTokenSize()
            }

          | Option            (rule) =>
            if (invalidState)
            {
              _stack.Push(ParseFrame(_sequence, _astPtr, int.MaxValue - 1, _curTextPos, _listEndPos, _listSep));
              _astPtr = _parseResult.TryGetAst(_curTextPos, rule.Id);
              if (_astPtr > 0)
              {
                _sequence     = _parseResult.GetSequenceInfo(_astPtr);
                _subruleIndex = -1;
                _listEndPos   = -1;
                NextTokenSize()
              }
              else
                -1
            }
            else if (fullSize - skip == 0)
            {
              _curTextPos += skip;
              NextTokenSize()
            }
            else
            {
              _stack.Push(ParseFrame(_sequence, _astPtr, _subruleIndex, _curTextPos + fullSize, _listEndPos, _listSep));
              _curTextPos    += skip;
              _astPtr         = _parseResult.GetAst(_curTextPos, rule.Id);
              _sequence       = _parseResult.GetSequenceInfo(_astPtr);
              _subruleIndex   = -1;
              _listEndPos     = -1;
              NextTokenSize()
            }

          | List              (rule, _, _, _) =>
            if (invalidState)
            {
              _stack.Push(ParseFrame(_sequence, _astPtr, int.MaxValue - 1, _curTextPos, _listEndPos, _listSep));
              _astPtr = _parseResult.TryGetAst(_curTextPos, rule.Id);
              if (_astPtr > 0)
              {
                _sequence     = _parseResult.GetSequenceInfo(_astPtr);
                _subruleIndex = -1;
                _listEndPos   = -1;
                NextTokenSize()
              }
              else
                -1
            }
            else if (fullSize - skip == 0)
            {
              _curTextPos += skip;
              NextTokenSize()
            }
            else if (_listEndPos == -1)
            {
              _listEndPos     = _curTextPos + fullSize;
              _curTextPos    += skip;
              def astPtr      = _parseResult.GetAst(_curTextPos, rule.Id);
              def astSize     = rule.GetSize(astPtr, _parseResult);
              _stack.Push(ParseFrame(_sequence, _astPtr, _subruleIndex - 1, _curTextPos + astSize, _listEndPos, _listSep));
              _astPtr         = astPtr;
              _sequence       = _parseResult.GetSequenceInfo(_astPtr);
              _listEndPos     = -1;
              _subruleIndex   = -1;
              NextTokenSize()
            }
            else if (_curTextPos < _listEndPos)
            {
              def astPtr      = _parseResult.GetAst(_curTextPos, rule.Id);
              def astSize     = rule.GetSize(astPtr, _parseResult);
              _stack.Push(ParseFrame(_sequence, _astPtr, _subruleIndex - 1, _curTextPos + astSize, _listEndPos, _listSep));
              _astPtr         = astPtr;
              _sequence       = _parseResult.GetSequenceInfo(_astPtr);
              _listEndPos     = -1;
              _subruleIndex   = -1;
              NextTokenSize()
            }
            else
            {
              assert3(_curTextPos == _listEndPos);
              NextTokenSize()
            }

          | ListWithSeparator (rule, separator, _, _, _) =>
            if (invalidState)
            {
              _stack.Push(ParseFrame(_sequence, _astPtr, int.MaxValue - 1, _curTextPos, _listEndPos, _listSep));
              _astPtr = _parseResult.TryGetAst(_curTextPos, rule.Id);
              if (_astPtr > 0)
              {
                _sequence     = _parseResult.GetSequenceInfo(_astPtr);
                _subruleIndex = -1;
                _listEndPos   = -1;
                NextTokenSize()
              }
              else
                -1
            }
            else if (fullSize - skip == 0)
            {
              _curTextPos += skip;
              NextTokenSize()
            }
            else if (_listEndPos == -1)
            {
              _listEndPos     = _curTextPos + fullSize;
              _curTextPos    += skip;
              def astPtr      = _parseResult.GetAst(_curTextPos, rule.Id);
              def astSize     = rule.GetSize(astPtr, _parseResult);
              _stack.Push(ParseFrame(_sequence, _astPtr, _subruleIndex - 1, _curTextPos + astSize, _listEndPos, true));
              _astPtr         = astPtr;
              _sequence       = _parseResult.GetSequenceInfo(_astPtr);
              _listEndPos     = -1;
              _subruleIndex   = -1;
              NextTokenSize()
            }
            else if (_curTextPos < _listEndPos)
            {
              def curRule = if (_listSep) separator else rule;
              def astPtr      = _parseResult.GetAst(_curTextPos, curRule.Id);
              def astSize     = curRule.GetSize(astPtr, _parseResult);
              _stack.Push(ParseFrame(_sequence, _astPtr, _subruleIndex - 1, _curTextPos + astSize, _listEndPos, !_listSep));
              _astPtr         = astPtr;
              _sequence       = _parseResult.GetSequenceInfo(_astPtr);
              _listEndPos     = -1;
              _subruleIndex   = -1;
              NextTokenSize()
            }
            else
            {
              assert3(_curTextPos == _listEndPos);
              NextTokenSize()
            }

          | Marker                   => assert3(false); //NextTokenSize()
        }
      }
    }
  }
}
