using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;

namespace Nitra.Internal
{
  public sealed class DefaultExtensibleRuleAstFactory[T] : IExtensibleRuleAstFactory[T]
  {
    public static Instance : this = DefaultExtensibleRuleAstFactory();

    private this() { }

    public CreateAmbiguous(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, prefixStartPos : int, pos : int, ambiguitys : array[ExtensionRuleParser * T]) : T
    {
      _ = ruleDescriptor;
      def ambiguityAsts = array(ambiguitys.Length);
      for (mutable i = 0; i < ambiguitys.Length; ++i)
        ambiguityAsts[i] = ambiguitys[i][1];
      AmbiguousConstructor(parseResult, prefixStartPos, pos, ambiguityAsts)
    }

    public CreateMissing(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, pos : int) : T
    {
      _ = ruleDescriptor;
      MissingConstructor(parseResult, pos)
    }

    public CreatePrefix(pos : ref int, astPtr : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult) : T
    {
      def astCtor = GetPrefixConstructor(ruleParser.Descriptor);
      astCtor(ref pos, astPtr, parseResult)
    }

    public CreatePostfix(prefix : T, prefixStartPos : int, pos : ref int, astPtr : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult) : T
    {
      def astCtor = GetPostfixConstructor(ruleParser.Descriptor);
      astCtor(prefix, prefixStartPos, ref pos, astPtr, parseResult)
    }

    private static AmbiguousConstructor : Func[ISourceSnapshotProvider, int, int, array[T], T] =
    {
      def ambiguousAstType = typeof(T).GetNestedType("AmbiguousAst");
      assert2(ambiguousAstType != null);

      def signature = array[typeof(ISourceSnapshotProvider), typeof(int), typeof(int), typeof(array[T])];
      MakeConstructorDelegate(ambiguousAstType, signature)
    };

    private static MissingConstructor : Func[ISourceSnapshotProvider, int, T] =
    {
      def missingAstType = typeof(T).GetNestedType("MissingAst");
      assert2(missingAstType != null);

      def signature = array[typeof(ISourceSnapshotProvider), typeof(int)];
      MakeConstructorDelegate(missingAstType, signature)
    };

    private delegate PrefixAstCtor(pos : ref int, astPtr : int, parseResult : ParseResult) : T;

    [Memoize]
    private static GetPrefixConstructor(ruleDescriptor : RuleDescriptor) : PrefixAstCtor
    {
      def signature = array[typeof(int).MakeByRefType(), typeof(int), typeof(ParseResult)];
      MakeConstructorDelegate(ReflectionHelper.GetParsedAstType(ruleDescriptor), signature);
    }
    private delegate PostfixAstCtor(prefix : T, prefixStartPos : int, pos : ref int, astPtr : int, parseResult : ParseResult) : T;

    [Memoize]
    private static GetPostfixConstructor(ruleDescriptor : RuleDescriptor) : PostfixAstCtor
    {
      def signature = array[typeof(T), typeof(int), typeof(int).MakeByRefType(), typeof(int), typeof(ParseResult)];
      MakeConstructorDelegate(ReflectionHelper.GetParsedAstType(ruleDescriptor), signature)
    }

    private static MakeConstructorDelegate[TDelegate](type : Type, signature : array[Type]) : TDelegate
    {
      def ctor = type.GetConstructor(signature);
      assert2(ctor != null);

      def dm = DynamicMethod("", typeof(T), signature, true);
      def il = dm.GetILGenerator();
      for (mutable index = 0; index < signature.Length; ++index)
        il.Emit(OpCodes.Ldarg, index);
      il.Emit(OpCodes.Newobj, ctor);
      il.Emit(OpCodes.Ret);
      dm.CreateDelegate(typeof(TDelegate)) :> TDelegate
    }
  }
}
