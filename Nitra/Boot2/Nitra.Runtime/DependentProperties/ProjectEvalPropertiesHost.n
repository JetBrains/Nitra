using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public class ProjectEvalPropertiesHost : EvalPropertiesHost
  {
    protected _files   : array[File];
    protected _symbols : array[DeclarationSymbol];

    public this(project : Project, symbols : Seq[DeclarationSymbol] = null)
    {
      this(project.Files, symbols)
    }

    public this(files : Seq[File], symbols : Seq[DeclarationSymbol] = null)
    {
      _files   = if (files   == null) array(0) else files.ToArray();
      _symbols = if (symbols == null) array(0) else symbols.ToArray();
    }

    protected override ExecutePass(context : DependentPropertyEvalContext, passName : string) : void
    {
      foreach (symbol in _symbols)
        EvalProperties(context, symbol);

      foreach (file in _files)
      {
        def stat = GetStatistics(file, passName);
        def ast  = file.Ast;
        when (ast : object != null)
          EvalProperties(context, ast, stat);
      }
    }

    protected override AfterStage(context : DependentPropertyEvalContext, _passName : string) : void
    {
      // Notify symbols about current stage is finished.
      def stage = context.Stage;
      def stageNotifier = StageNotifierVisitor();
      foreach (file in _files)
      {
        def ast = file.Ast;
        when (ast != null)
          stageNotifier.Notify(ast, stage);
      }
    }

    private GetStatistics(file : File, passName : string) : StatisticsTask.Single
    {
      def statistics = file.Statistics?.Typing;
      def passStatistics = 
        if      (passName == null)   statistics
        else                         statistics?.GetOrAddContainerSubtask(passName);

      passStatistics?.ReplaceSingleSubtask(file.FullName, file.Name);
    }
  }
}
