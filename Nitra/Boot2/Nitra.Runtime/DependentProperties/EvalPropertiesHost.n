using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public abstract class EvalPropertiesHost
  {
    public EvalProperties(
      [NotNull] context    : DependentPropertyEvalContext,
                passName   : string = null,
                stage      : int    = 0) : void
    {
      context.Stage = stage;
      BeforeStage(context, passName);
      do
      {
        context.NextPass();
        mutable calculatedCount;
        mutable passCount = 0;
        do
        {
          context.DeferredCount = 0;
          calculatedCount = context.CalculatedCount;
          ExecutePass(context, passName);
          passCount++;
        }
        while (context.DeferredCount > 0 && calculatedCount != context.CalculatedCount);
      }
      while (context.CollectorsCreatedCount > 0);

      AfterStage(context, passName);
    }

    protected abstract ExecutePass(context : DependentPropertyEvalContext, passName : string) : void;

    protected virtual BeforeStage(context : DependentPropertyEvalContext, passName : string) : void
    {
      IgnoreParams();
    }

    protected virtual AfterStage(context : DependentPropertyEvalContext, passName : string) : void
    {
      IgnoreParams();
    }

    protected EvalProperties(context : DependentPropertyEvalContext, obj : IDependentPropertyContainer, statistics : StatisticsTask.Single = null) : void
    {
      statistics?.Restart();
      obj.EvalProperties(context);
      statistics?.Stop();
    }
  }
}
