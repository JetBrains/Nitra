using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Runtime.Reflection;
using System;
using System.Collections.Generic;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra
{
  public module NitraUtils
  {
    public CompleteWord(pos : int, parseResult : IParseResult, astRoot : IAst, replacementSpan : out NSpan) : Seq[object]
    {
      def source         = parseResult.SourceSnapshot;

      // Получаем информацию о пробельных ветках дерева разбора в области курсора
      def curretSpan     = NSpan(pos, pos);
      def spans          = HashSet();
      def spasesWalker   = VoidRuleWalker(curretSpan);
      
      spasesWalker.Walk(parseResult, spans);

      foreach (spanInfo when spanInfo.Span.Contains(curretSpan) && spanInfo.SpanClass != Language.DefaultSpanClass in spans)
        return []; // выходим, если комплит идет в комментарии или грязи

      // вычисляем начало и конец пробельных правил

      mutable spacesStart = pos;
      mutable spacesEnd   = pos;

      when (spans.Count != 0)
      {
        spacesStart = spans.Min(s => s.Span.StartPos);
        spacesEnd   = spans.Max(s => s.Span.EndPos);
      }

      // находим цепочку ветвей AST ведущую к позиции комплита

      def visitor = FindNodeAstVisitor(NSpan(spacesStart, spacesEnd));
      astRoot.Accept(visitor);
      
      def isEndOfIdentifier(ast : IAst) : bool
      {
        | Reference as r => r.Span.EndPos == pos
        | _ => false
      }
      
      def reference = visitor.Stack.FirstOrDefault(isEndOfIdentifier);

      // Вычисляем префикс комплита (если есть). Он будет использоваться для фильтрации списка и будет заменен выбранным словом
      def span         = if (reference == null) if (visitor.Stack.Count > 0) visitor.Stack.Peek().Span else NSpan(pos, pos)
                         else reference.Span;
      def start        = span.StartPos;
      def prefix       = if (span.EndPos == pos) source.Text.Substring(span.StartPos, span.Length) else "";
      
      replacementSpan = if (span.EndPos == pos) span else NSpan(pos, pos);
      
      // Находим первую ветку AST в которой есть зависимое свойство Scope и вычисляем по этому Scope список автодополнения

      def completionList = List.[object]();

      foreach (ast in visitor.Stack)
      {
        | BindableAst(IsScopeEvaluated = true, Scope = scope)
        | Reference(IsScopeEvaluated = true, Scope = scope) when ast.Span.IntersectsWith(span) =>
          completionList.AddRange(scope.MakeCompletionList(prefix));
          break;

        | _ => ()
      }

      // Комплишен по литералам (в соответствии с грамматикой).

      def text         = source.Text.Substring(0, start) + '\xFFFF';
      def parseSession = parseResult.ParseSession;

      try
      {
        // при задании этих свойств, парсер вернет список литералов в исключении LiteralCompletionException
        parseSession.CompletionStartPos = start;
        parseSession.CompletionPrefix = prefix;
        parseSession.OnRecovery = ParseSession.SmartRecovery;
        _ = parseSession.Parse(text);
      }
      catch
      { 
        | ex is LiteralCompletionException =>
          def symbolNames = HashSet();
          foreach (symbol is DeclarationSymbol when symbol.IsNameValid in completionList)
            _ = symbolNames.Add(symbol.Name);

          foreach (literal when !symbolNames.Contains(literal) in ex.Literals)
            completionList.Add(literal);

        | _ => ()
      }
      finally
      {
        parseSession.CompletionStartPos = -1;
        parseSession.CompletionPrefix = null;
      }

      completionList
    }
  } // module
} // namespace
