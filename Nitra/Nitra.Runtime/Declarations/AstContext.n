using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Declarations
{
  public module AstContext
  {
    [ThreadStatic]
    private static mutable _state : ICompilerMessages;

    public static CompilerMessages : ICompilerMessages
    {
      get
      {
        assert2(_state != null, "You must use the AstContext only in the dependent properties or in the Parse Tree to AST mapping.");
        _state
      }
    }
    
    public GetAstUntyped(parseTree : ParseTree, astMessages : CompilerMessageList) : IAst
    {
      mutable oldState;
      try
      {
        oldState = AstContext.Set(astMessages);
        parseTree.GetAstUntyped();
      }
      finally AstContext.Restore(oldState);
    }
    

    internal Set(compilerMessage : ICompilerMessages) : ValueOption[ICompilerMessages]
    {
      def oldState = _state;
      _state = compilerMessage;
      VSome(oldState)
    }

    internal Restore(stateOpt : ValueOption[ICompilerMessages]) : void
    {
      when (stateOpt is VSome(state))
        _state = state;
    }
  }
}
