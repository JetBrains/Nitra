using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public sealed partial class ExtensibleRuleParser
  {
    public FindFirstPrefix(pos : ref int, parseResult : ParseResult) : int
    {
      mutable ast = parseResult.TryGetAst(pos, PrefixId);
      when (ast > 0)
        return SkipBadResults(parseResult.TryGetPrefix(ref pos, ref ast), parseResult);
      0
    }

    public FindNextPrefix(result : int, parseResult : ParseResult) : int
    {
      //если у нас лучшее значение то заканчиваем перебор
      when ((parseResult.ast[result] & ExtensibleRuleParser.AstMask.Flags) == ExtensibleRuleParser.AstFlags.Best)
        return 0;
      SkipBadResults(parseResult.ast[result + ExtensibleRuleParser.AstOfs.Next], parseResult)
    }

    public FindFirstPostfix(pos : ref int, parseResult : ParseResult) : int
    {
      mutable ast = parseResult.TryGetAst(pos, PostfixId);
      when (ast > 0)
      {
        mutable result = parseResult.TryGetPostfix(ref pos, ref ast);
        // пропускаем правила с низкой силой связывания.
        while (result > 0 && (parseResult.ast[result] & ExtensibleRuleParser.AstMask.Id) < FirstPostfixRuleId)
          result = parseResult.ast[result + ExtensibleRuleParser.AstOfs.Next];
        return SkipBadResults(result, parseResult);
      }
      0
    }

    public FindNextPostfix(result : int, parseResult : ParseResult) : int
    {
      //если у нас лучшее значение то заканчиваем перебор
      when ((parseResult.ast[result] & ExtensibleRuleParser.AstMask.Flags) == ExtensibleRuleParser.AstFlags.Best)
        return 0;
      SkipBadResults(parseResult.ast[result + ExtensibleRuleParser.AstOfs.Next], parseResult)
    }

    private SkipBadResults(mutable result : int, parseResult : ParseResult) : int
    {
      while (result > 0 && ((parseResult.ast[result] & ExtensibleRuleParser.AstMask.Flags) == ExtensibleRuleParser.AstFlags.Bad || parseResult.ast[result + ExtensibleRuleParser.AstOfs.State] != ParseResult.AstParsedState))
        result = parseResult.ast[result + ExtensibleRuleParser.AstOfs.Next];
      result
    }
  }
}
