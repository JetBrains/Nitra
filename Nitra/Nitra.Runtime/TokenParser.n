using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime
{
  [StructuralEquality]
  public variant TokenParser
  {
    [EqualsIgnore]
    public Callers : SCG.HashSet[int * ParsingSequence] = SCG.HashSet();

    | RegularCall    { Descriptor : RegularRuleDescriptor; }
    | ExtensibleCall { RuleParser : ExtensibleRuleParser; }
    | SimpleCall     { RuleParser : SimpleRuleParser; }
    | TokenString    { Str : string; }

    public Parse(pos : int, text : string, parseResult : ParseResult) : int
    {
      match (this)
      {
        | RegularCall    as p => p.Descriptor.Parse(pos, text)
        | ExtensibleCall as p => p.RuleParser.Parse(pos, text, parseResult)
        | SimpleCall     as p => p.RuleParser.Parse(pos, text, parseResult)
        | TokenString    as p =>
          def str = p.Str;
          if (pos + str.Length <= text.Length)
          {
            for (mutable i = 0; i < str.Length; ++i)
              when (str[i] != text[pos + i])
                return -1;
            pos + str.Length
          }
          else
            -1
      }
    }
    
    public IsVoid : bool
    {
      get
      {
        match (this)
        {
          | RegularCall    as p => p.Descriptor.IsVoid
          | ExtensibleCall as p => p.RuleParser.IsVoid
          | SimpleCall     as p => p.RuleParser.IsVoid
          | TokenString    as p => p.Str == " "
        }
      }
    }

    public override ToString() : string
    {
      match (this)
      {
        | RegularCall    as p => $"regex:      $(p.Descriptor)"
        | ExtensibleCall as p => $"extensible: $(p.RuleParser.Descriptor) BP=$(p.RuleParser.BindingPower)"
        | SimpleCall     as p => $"simple:     $(p.RuleParser.Descriptor)"
        | TokenString    as p => $"string:     \"$(p.Str)\""
      }
    }
  }
}
