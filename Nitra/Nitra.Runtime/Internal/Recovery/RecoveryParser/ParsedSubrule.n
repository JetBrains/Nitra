using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public struct ParsedSubrule
  {
    public Begin : int;
    public End   : int;
    public State : int;

    public IsEmpty : bool { get { Begin == End } }
    public Length  : int  { get { End - Begin } }

    public override ToString() : string
    {
      State + ":(" + Begin + "," + End + ")";
    }

    public class ComparerEndBeginIndex : SCG.IComparer[ParsedSubrule]
    {
      public Compare(l : ParsedSubrule, r : ParsedSubrule) : int
      {
        mutable c;
        c = l.End.CompareTo(r.End);     when (c != 0) return c;
        c = l.Begin.CompareTo(r.Begin); when (c != 0) return c;
        c = l.State.CompareTo(r.State); when (c != 0) return c;
        0
      }
    }
  }
}
