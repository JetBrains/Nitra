using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal.Recovery
{
  public struct TokenChanges :  IComparable[TokenChanges]
  {
    public static Fail : TokenChanges = TokenChanges(int.MaxValue, int.MaxValue);
    
    public Inserted : int;
    public Deleted  : int;
    
    public this(inserted : int, deleted : int)
    {
      when (inserted < 0)
        assert3(false);
        
      when (deleted < 0)
        assert3(false);
        
      Deleted  = deleted;
      Inserted = inserted;
    }
    
    public IsFail     : bool { get { Inserted == int.MaxValue } };
    public HasChanges : bool { get { Inserted > 0 || Deleted > 0 } }
    
    public static Min(x : TokenChanges, y : TokenChanges) : TokenChanges { if (x.IsFail) y else if (x >= y) y else x }
    public static Max(x : TokenChanges, y : TokenChanges) : TokenChanges { if (x.IsFail) y else if (x >= y) x else y }
    
    public static @< (x : TokenChanges, y : TokenChanges) : bool { x.CompareTo(y) >  0 }
    public static @> (x : TokenChanges, y : TokenChanges) : bool { x.CompareTo(y) <  0 }
    public static @<=(x : TokenChanges, y : TokenChanges) : bool { x.CompareTo(y) <= 0 }
    public static @>=(x : TokenChanges, y : TokenChanges) : bool { x.CompareTo(y) >= 0 }
    public static @!=(x : TokenChanges, y : TokenChanges) : bool { x.CompareTo(y) != 0 }
    public static @==(x : TokenChanges, y : TokenChanges) : bool { x.CompareTo(y) == 0 }

    public CompareTo(other : TokenChanges) : int
    {
      when (IsFail && other.IsFail)
        return 0;
        
      when (IsFail)
        return 1;

      when (other.IsFail)
        return -1;
      
        
      def a = Inserted + Deleted;
      def b = other.Inserted + other.Deleted;
      
      if (a > b)
        1
      else if (a == b)
        other.Inserted.CompareTo(Inserted)
      else
        -1
    }
    
    public override Equals(obj : object) : bool
    {
      if (obj is TokenChanges as other)
        other == this
      else
        false
    }
    
    public override GetHashCode() : int { if (IsFail) 0 else Inserted ^ (Deleted << 3) }

    public override ToString() : string
    {
      if (IsFail)
        "Fail"
      else if (Inserted > 0 && Deleted > 0)
        $"(+$Inserted/-$Deleted)"
      else if (Inserted > 0)
        "+" + Inserted
      else if (Deleted > 0)
        "-" + Deleted
      else
        "0"
    }
  }
}
