using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public abstract class ExtensionRuleParser : RuleParser, IRuleParserReflection
  {
    public RuleId     : int;

    public LowerBound : char;
    public UpperBound : char;

    public SequenceInfo    : SequenceInfo    { get { Reflection(RuleId) } }
    public ParsingSequence : ParsingSequence { get; internal set; }

    public this(grammar : CompositeGrammar, descriptor : RuleDescriptor, lowerBound : char, upperBound : char)
    {
      base(grammar, descriptor);
      LowerBound = lowerBound;
      UpperBound = upperBound;
      RuleId = grammar.NewRuleId(this)
    }

    public SubrulesCount : int { get { ParsingSequence.SequenceInfo.Subrules.Length } } //TODO: remove

    public abstract Init() : void;
    public abstract Reflection(ruleId : int) : SequenceInfo;

    public abstract Parse(pos : int, text : string, resultRef : ref int, parseResult : ParseResult) : int;
  }
}
