using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using Nitra.Internal;

namespace Nitra.Internal
{
  public class ExtensibleRuleParserData
  {
    public Grammar            : CompositeGrammar;
    public Descriptor         : ExtensibleRuleDescriptor;
    public PrefixDescriptors  : array[PrefixRuleDescriptor];
    public PostfixDescriptors : array[PostfixRuleDescriptor];
    public PrefixParsers      : array[ExtensionRuleParser];
    public PostfixParsers     : array[ExtensionRuleParser];
    public PrefixId           : int;
    public PostfixId          : int;
    public Parsers            : List[ExtensibleRuleParser] = List();

    public this(grammar : CompositeGrammar, rd : ExtensibleRuleDescriptor, prefixDescriptors : array[PrefixRuleDescriptor], postfixDescriptors : array[PostfixRuleDescriptor])
    {
      Grammar            = grammar;
      Descriptor         = rd;
      PrefixDescriptors  = prefixDescriptors;
      PostfixDescriptors = postfixDescriptors;
      PrefixId           = Grammar.NewRuleId(this);
      PostfixId          = Grammar.NewRuleId(this);
      PrefixParsers      = PrefixDescriptors.Map(rd => rd.NewParser(Grammar));
      PostfixParsers     = PostfixDescriptors.Map(rd => rd.NewParser(Grammar));
    }

    public GetParser(bindingPower : int) : Internal.ExtensibleRuleParser
    {//Сейчас массив получается весьма дырявым. После того как задание силы связывания будет переведено с чисел на имена дырок в массиве будет очень мало.
      while (Parsers.Count <= bindingPower)
        Parsers.Add(null);

      mutable ruleParser = Parsers[bindingPower];
      when (ruleParser == null)
      {
        ruleParser = Internal.ExtensibleRuleParser(this, bindingPower);
        Parsers[bindingPower] = ruleParser;
      }
      ruleParser
    }

    public Init() : void
    {
      foreach (ruleParser in PrefixParsers)
        ruleParser.Init();
      foreach (ruleParser in PostfixParsers)
        ruleParser.Init();
    }

    public override ToString() : string
    {
      $"$(Descriptor.Name) ($(Descriptor.Grammar.FullName))"
    }
  }
}
