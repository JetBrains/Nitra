using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Runtime;
using Nitra.Typing;

using System;
using System.IO;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;

namespace Nitra.Serialization
{
  public sealed class MetadataReader : IMetadataReader, IDisposable
  {
    public this(stream : Stream, symbolConstructorRegistry : ExternalSymbolConstructorRegistry, assemblyId : byte, symbolLocation : Location)
    {
      this(stream, symbolConstructorRegistry, Project.CurrentProject, assemblyId, symbolLocation)
    }

    public this(stream : Stream, symbolConstructorRegistry : ExternalSymbolConstructorRegistry, project : Project, assemblyId : byte, symbolLocation : Location)
    {
      this(stream, symbolConstructorRegistry, project, project.RootNamespace, assemblyId, symbolLocation)
    }

    public this(stream : Stream, symbolConstructorRegistry : ExternalSymbolConstructorRegistry, project : Project, root : NamespaceSymbol, assemblyId : byte, symbolLocation : Location)
    {
      _reader                    = BinaryReader(stream, Text.Encoding.UTF8);
      _symbolConstructorRegistry = symbolConstructorRegistry;
      _root                      = root;
      AssemblyId                 = assemblyId;
      SymbolLocation             = symbolLocation;
      Project                    = project;
    }

    private _reader                    : BinaryReader;
    private _symbolConstructorRegistry : ExternalSymbolConstructorRegistry;
    private _root                      : NamespaceSymbol;

    public Dispose() : void
    {
      _reader.Dispose();
    }

    public CreateSymbols() : void
    {
      ReadNameTree();
      ReadSymbolHeaders();
      ReadReferencedAssemblies();
      ReadNameTree();
      ReadExternalSymbolInfo();
    }

    public ReadSymbols() : void
    {
      def loop()
      {
        def symbolId = _reader.ReadInt32();
        when (symbolId > 0)
        {
          def symbol = _localSymbols[symbolId];
          symbol.Deserialize(_reader, this);
          loop();
        }
      }
      loop();
    }

    public AssemblyId     : byte     { get; }

    public SymbolLocation : Location { get; }

    public Project        : Project  { get; }

    public ReferencedAssemblies : Seq[AssemblyName]
    {
      get { _referencedAssemblies.Values }
    }

    private ReadNameTree() : void
    {
      def loop()
      {
        def id = _reader.ReadInt32();
        when (id > 0)
        {
          def parentId           = _reader.ReadInt32();
          def partName           = _reader.ReadString();
          def hasNamespaceSymbol = _reader.ReadBoolean();

          def parent = if (parentId == -1) _root.Node else _nodes[parentId];
          def node   =
            if (hasNamespaceSymbol)
            {
              def ([parentNs]) = parent.GetSymbol.[NamespaceSymbol](); // parent must be NamespaceSymbol

              match (parent.BindMany.[NamespaceSymbol](partName))
              {
                | [ns] => ns.AddDefinition(SymbolLocation); ns.Node // namespace already exists
                | []   =>
                  def nsSymbol = NamespaceSymbol(partName);
                  parentNs.AddChild(nsSymbol, SymbolLocation);
                  nsSymbol.AddDefinition(SymbolLocation);
                  nsSymbol.Node

                | _    => assert3(false)
              }
            }
            else
              parent.AddNode(partName);
          _nodes.Add(id, node);
          loop();
        }
      }
      loop();
    }

    private ReadSymbolHeaders() : void
    {
      def loop()
      {
        def symbolTypeId = _reader.ReadString();
        unless (string.IsNullOrEmpty(symbolTypeId))
        {
          def symbolConstructor = _symbolConstructorRegistry.Resolve(symbolTypeId);
          symbolConstructor.Invoke(this, _reader);
          loop();
        }
      }
      loop();
    }

    private ReadReferencedAssemblies() : void
    {
      def loop()
      {
        def assemblyId = _reader.ReadByte();
        when (assemblyId > 0)
        {
          def assemblyName = _reader.ReadString();
          _referencedAssemblies.Add(assemblyId, AssemblyName(assemblyName));
          loop();
        }
      }
      loop();
    }

    private ReadExternalSymbolInfo() : void
    {
      def loopTypes()
      {
        def symbolTypeId = _reader.ReadString();
        unless (string.IsNullOrEmpty(symbolTypeId))
        {
          def loopSymbols()
          {
            def symbolId = _reader.ReadInt32();
            when (symbolId > 0)
            {
              def nodeId     = _reader.ReadInt32();
              def assemblyId = _reader.ReadByte();
              def symbolRef  = ExternalSymbolReference(symbolTypeId, nodeId, assemblyId);
              _externalSymbols.Add(symbolId, symbolRef);
              loopSymbols();
            }
          }
          loopSymbols();
          loopTypes();
        }
      }
      loopTypes();
    }

    private ReadSymbolRef(reader : BinaryReader) : ISymbol implements IMetadataReader.ReadSymbolRef
    {
      match (reader.ReadInt32())
      {
        | 0        => null
        | symbolId => ResolveSymbol(symbolId)
      }
    }

    private ReadLocation(reader : BinaryReader) : Location implements IMetadataReader.ReadLocation
    {
      ignore(reader);
      SymbolLocation //TODO: implement location reading
    }

    private RegisterSymbol(symbolId : int, symbol : IImportableSymbol) : void implements IMetadataReader.Register
    {
      _localSymbols.Add(symbolId, symbol)
    }

    private GetNode(nodeId : int) : HierarchyNode implements IMetadataReader.GetNode
    {
      _nodes[nodeId]
    }

    [Memoize]
    private ResolveSymbol(symbolId : int) : ISymbol
    {
      mutable localSymbol;
      when (_localSymbols.TryGetValue(symbolId, out localSymbol))
        return localSymbol;

      mutable externalSymbolRef;
      when (_externalSymbols.TryGetValue(symbolId, out externalSymbolRef))
      {
        def assemblyName = _referencedAssemblies[externalSymbolRef.ReferenceId];
        def node         = _nodes[externalSymbolRef.NodeId];
        def assemblyId   = Project.CurrentProject.GetAssemblyId(assemblyName);
        foreach (s is IExportableSymbol in node.GetSymbols())
          when (s.AssemblyId == assemblyId && string.Equals(s.SymbolTypeId, externalSymbolRef.SymbolTypeId, StringComparison.InvariantCulture))
            return s;
      }

      null
    }

    private _nodes                : Dictionary[int,  HierarchyNode]           = Dictionary();
    private _localSymbols         : Dictionary[int,  IImportableSymbol]       = Dictionary();
    private _referencedAssemblies : Dictionary[byte, AssemblyName]            = Dictionary();
    private _externalSymbols      : Dictionary[int,  ExternalSymbolReference] = Dictionary();

    [Record]
    private struct ExternalSymbolReference
    {
      public SymbolTypeId : string { get; }
      public NodeId       : int    { get; }
      public ReferenceId  : byte   { get; }
    }
  }
}
