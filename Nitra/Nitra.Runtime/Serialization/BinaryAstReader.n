using Nitra.Internal;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Reflection;

namespace Nitra.Serialization
{
  public sealed class BinaryAstReader : IAstReader
  {
    public this(reader : BinaryReader)
    {
      this(reader, ChemicalAstContext(), Assembly.Load)
    }

    public this(reader : BinaryReader, context : ChemicalAstContext)
    {
      this(reader, context, Assembly.Load)
    }

    public this(reader : BinaryReader, resolveAssembly : Func[AssemblyName, Assembly])
    {
      this(reader, ChemicalAstContext(), resolveAssembly)
    }

    public this(reader : BinaryReader, context : ChemicalAstContext, resolveAssembly : Func[AssemblyName, Assembly])
    {
      Context          = context;
      _reader          = reader;
      _resolveAssembly = resolveAssembly;
    }

    private         _reader          : BinaryReader;
    private         _resolveAssembly : Func[AssemblyName, Assembly];
    private mutable _stringTable     : array[string];
    private mutable _ruleTable       : array[RuleDescriptor];

    public Context : ChemicalAstContext { get; }

    public ReadListHeader() : int { _reader.ReadUInt16() }

    public ReadOptionHeader() : bool { _reader.ReadBoolean() }

    public ReadText() : string { _stringTable[_reader.ReadUInt16() :> int] }

    public ReadTupleHeader() : int { _reader.ReadByte() }

    public ReadAstHeader() : AstKind { _reader.ReadByte() :> AstKind }

    public ReadExtension[T]() : T where T : Ast
    {
      def ruleDescriptor = _ruleTable[_reader.ReadUInt16() :> int];
      def ctor           = GetConstructor(ruleDescriptor);
      ctor(this) :> T
    }

    public ReadAst() : Ast
    {
      def stringTableSize = _reader.ReadUInt16() :> int;
      _stringTable = array(stringTableSize);
      for (mutable i = 0; i < stringTableSize; ++i)
        _stringTable[i] = _reader.ReadString();

      def assemblyTable = array(_reader.ReadByte() :> int);
      for (mutable i = 0; i < assemblyTable.Length; ++i)
      {
        def assemblyName = AssemblyName(_stringTable[_reader.ReadUInt16() :> int]);
        def assembly     = _resolveAssembly(assemblyName);
        assert(assembly != null);
        assemblyTable[i] = GrammarDescriptor.GetDescriptors(assembly).ToDictionary(_.FullName);
      }

      def grammarTable = array(_reader.ReadByte() :> int);
      for (mutable i = 0; i < grammarTable.Length; ++i)
      {
        def grammarName       = _stringTable[_reader.ReadUInt16() :> int];
        def grammarDescriptor = assemblyTable[_reader.ReadByte() :> int][grammarName];
        grammarTable[i]       = grammarDescriptor.Rules.ToDictionary(_.Name);
      }

      _ruleTable = array(_reader.ReadUInt16() :> int);
      for (mutable i = 0; i < _ruleTable.Length; ++i)
      {
        def ruleName       = _stringTable[_reader.ReadUInt16() :> int];
        def ruleDescriptor = grammarTable[_reader.ReadByte() :> int][ruleName];
        _ruleTable[i]      = ruleDescriptor;
      }

      def ruleDescriptor = _ruleTable[_reader.ReadUInt16() :> int];
      def ctor           = GetConstructor(ruleDescriptor);
      ctor(this)
    }

    [Memoize]
    private static GetConstructor(ruleDescriptor : RuleDescriptor) : Func[IAstReader, Ast]
    {
      def type =
        if (ruleDescriptor is ExtensionRuleDescriptor as rd)
          ReflectionHelper.GetExtensionAstType(rd)
        else
          ReflectionHelper.GetBaseAstType(ruleDescriptor);

      def createMethod = type.GetMethod("Read", array[typeof(IAstReader)]);
      assert2(createMethod != null);
      Delegate.CreateDelegate(typeof(Func[IAstReader, Ast]), createMethod) :> Func[IAstReader, Ast]
    }
  }
}
