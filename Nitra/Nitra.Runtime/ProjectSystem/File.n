using Nitra.Runtime;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public abstract class File : ISourceSnapshotProvider, ISerializable
  {
    private static _fileFactory : Func[IO.BinaryReader, MetadataReader, DeserializedFile] = fun (reader, metadataReader)
    {
      def fullName = reader.ReadString();
      def language = metadataReader.ReadObject(reader);
      DeserializedFile(fullName, language)
    };
    
    public abstract Project     : Project        { get; }
    public abstract Length      : int            { get; }
    public abstract FullName    : string         { get; }
    public virtual  Name        : string         { get { IO.Path.GetFileNameWithoutExtension(FullName) } }
    public abstract ParseResult : IParseResult   { get; }
    public abstract Ast         : IAst           { get; }
    public abstract HasAst      : bool           { get; }
    public          Statistics  : FileStatistics { get; }
    public virtual  Language    : Language       { get { Language.Instance } }
    public event    Redraw      : Action;
    public virtual  IsFake      : bool           { get { false } }

    [RecordIgnore] protected mutable _parseMessages : CompilerMessageList = CompilerMessageList();
    public ParseMessages        : Seq[CompilerMessage] { get { _parseMessages } }

    [RecordIgnore] protected mutable _astMessages : CompilerMessageList = CompilerMessageList();
    public AstMessages          : CompilerMessageList { get { _astMessages } }

    [RecordIgnore] protected mutable _typingMessages : CompilerMessageList = CompilerMessageList();
    public TypingMessages       : CompilerMessageList{ get { _typingMessages } }
    
    protected this()
    {
      Statistics = null;
    }
    
    protected this(statistics : FileStatistics)
    {
      Statistics = statistics;
    }
    
    protected OnRedraw() : void
    {
      Redraw?.Invoke();
    }

    public abstract GetParseTree() : ParseTree;
    public abstract DeepResetProperties() : void;

    public GetCompilerMessages() : array[CompilerMessage]
    {
      def symbolErrors = 
        if (HasAst)
        {
          def errorCollector = CollectSymbolErrorsVisitor();
          errorCollector.Visit(Ast);
          errorCollector.CompilerMessages
        }
        else CompilerMessageList();
      def len1 =        _parseMessages.Count;
      def len2 = len1 + _astMessages.Count;
      def len3 = len2 + symbolErrors.Count;
      def result = array(len3 + _typingMessages.Count);
      _parseMessages.CopyTo (result, 0);
      _astMessages.CopyTo   (result, len1);
      symbolErrors.CopyTo   (result, len2);
      _typingMessages.CopyTo(result, len3);
      result
    }

    public abstract GetSource() : SourceSnapshot;
    
    public virtual CompleteWord(pos : int, replacementSpan : out NSpan) : Seq[object]
    {
      NitraUtils.CompleteWord(pos, this.ParseResult, this.Ast, out replacementSpan)
    }

    public override ToString() : string { FullName }

    public Serialize(writer : IO.BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      when (metadataWriter.BeginWriteObject(this, writer))
      {
        writer.Write(FullName);
        metadataWriter.WriteObject(Language, writer);
      }
    }

    public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
    {
      mutable file;
      _ = metadataReader.BeginReadObject(reader, out file, _fileFactory);
      file
    }

    GetDeserializationType() : System.Type implements ISerializable.GetType { typeof(File) }
  }

  public abstract class ConcreteFile : File
  {
    mutable _parseResult : IParseResult;
    mutable _ast         : IAst;
    mutable _parseTree   : ParseTree;

    protected this(statistics : FileStatistics = null)
    {
      base(statistics);
    }

    public override ParseResult : IParseResult
    {
      get
      {
        when (_parseResult == null)
          ReParse();
        _parseResult
      }
    }

    public override HasAst : bool { get { _ast != null } }
    
    public override Ast        : IAst
    {
      get
      {
        when (_ast == null)
          UpdateAst();
        _ast
      }
    }

    public override GetParseTree() : ParseTree
    {
      when (_parseTree == null)
        UpdateParseTree();
      _parseTree
    }

    public virtual ResetCache() : void
    {
      _parseMessages.Clear();
      _parseResult = null;
      ResetParseTree();
    }

    public virtual ResetParseTree() : void
    {
      ResetAst();

      _parseTree   = null;
    }

    public virtual ResetAst() : void
    {
      _astMessages.Clear();
      _typingMessages.Clear();

      _ast     = null;
    }

    public override DeepResetProperties() : void
    {
      _typingMessages.Clear();
      when (_ast != null)
        IAstExtensions.DeepResetProperties(_ast);
    }

    protected virtual GetParseSession() : ParseSession
    {
      def language = Language;
      assert(language.StartRule != null);

      ParseSession(language.StartRule, language.CompositeGrammar, compilerMessages=_parseMessages);
    }

    public virtual ReParse() : void
    {
      def stat = Statistics;
      stat?.Parse?.Restart();

      def parseSession = GetParseSession();
      _parseMessages.Clear();
      _astMessages.Clear();
      _typingMessages.Clear();

      _parseResult     = parseSession.Parse(GetSource());

      stat?.Parse?.Stop();
    }

    public virtual UpdateParseTree() : void
    {
      when (_parseResult == null)
        ReParse();

      def stat = Statistics;
      // TODO: The parse tree does not materialize here. So the measurements are incorrect.
      stat?.ParseTree?.Restart();

      _parseTree = _parseResult.CreateParseTree();

      stat?.ParseTree?.Stop();
    }

    public virtual UpdateAst() : void
    {
      when (_parseResult == null)
        ReParse();

      when (_parseTree == null)
        UpdateParseTree();

      def stat = Statistics;
      stat?.Ast?.Restart();

      _astMessages.Clear();
      _typingMessages.Clear();

      _ast = AstContext.GetAstUntyped(_parseTree, _astMessages);

      stat?.Ast?.Stop();
    }
  }

  internal sealed class DeserializedFile : ConcreteFile
  {
    public this(fullName : string, language : Language)
    {
      base(null);
      _fullName = fullName;
      _language = language;
    }

    private         _fullName : string;
    private         _language : Language;
    private mutable _source   : SourceSnapshot;

    public override Project     : Project        { get { null } }
    public override Length      : int            { get { 0 } }
    public override FullName    : string         { get { assert(_fullName : object != null, "Deserialized file is not initialized"); _fullName } }
    public override Language    : Language       { get { assert(_language : object != null, "Deserialized file is not initialized"); _language } }
    public override GetSource() : SourceSnapshot { when(_source == null) _source = SingleLineSourceSnapshot("", this); _source }
    public override IsFake      : bool           { get { true } }
  }
}
