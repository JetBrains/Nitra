using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime
{
  [Record]
  public struct CompilerMessage
  {
    public Type           : CompilerMessageType   { get; }
    public Location       : Location              { get; }
    public Text           : string                { get; }
    public Number         : int                   { get; }
    public NestedMessages : list[CompilerMessage] { get; }
  }

  public module CompilerMessageExtensions
  {
    public TranslateTo(this message : CompilerMessage, target : ICompilerMessages) : void
    {
      match (message.Type)
      {
        | Error =>
          if (message.NestedMessages.IsEmpty)
            target.Error(message.Location, message.Text, message.Number)
          else
            using(root = target.RootError(message.Location, message.Text, message.Number))
              message.NestedMessages.TranslateTo(root)

        | Warning =>
          if (message.NestedMessages.IsEmpty)
            target.Warning(message.Location, message.Text, message.Number)
          else
            using(root = target.RootWarning(message.Location, message.Text, message.Number))
              message.NestedMessages.TranslateTo(root)

        | Hint =>
          if (message.NestedMessages.IsEmpty)
            target.Hint(message.Location, message.Text, message.Number)
          else
            using(root = target.RootHint(message.Location, message.Text, message.Number))
              message.NestedMessages.TranslateTo(root)

        | FatalError => _ = target.FatalError.[object](message.Location, message.Text, message.Number)
      }
    }

    public TranslateTo(this messages : list[CompilerMessage], target : ICompilerMessages) : void
    {
      foreach (message in messages)
        message.TranslateTo(target)
    }
  }
}
