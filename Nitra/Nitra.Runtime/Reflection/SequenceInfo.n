using Nitra.Internal;
using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Reflection
{
  public variant SequenceInfo
  {
    public Parser              : object              { get; }
    public Id                  : int                 { get; }
    public AstSize             : int                 { get; }
    public RuleName            : string              { get; }
    public Description         : string              { get; }
    public IsVoid              : bool;
    public Subrules            : array[SubruleInfo]  { get; }
    public SubrulesWithMarkers : array[SubruleInfo]  { get; }

    public IsExtension         : bool { get { this is Ast && Parser is ExtensionRuleParser } }
    public IsSimple            : bool { get { this is Ast && Parser is SimpleRuleParser    } }
    public CanParseEmptyString : bool { get { Subrules.ForAll(_.CanParseEmptyString) } }

    | Ast
    | Option
    | List
    | ListWithSeparatorRule
    | ListWithSeparatorSeparator
    | Predicate { IsAnd : bool }

    public this(parser : object, id : int, astSize : int, ruleName : string, description : string, isVoid : bool, subrulesWithMarkers : array[SubruleInfo])
    {
      Parser              = parser;
      Id                  = id;
      AstSize             = astSize;
      RuleName            = ruleName;
      Description         = description;
      Subrules            = subrulesWithMarkers.FilterToArray(info => !(info is SubruleInfo.Marker));
      SubrulesWithMarkers = subrulesWithMarkers;
      IsVoid              = isVoid;
      
      foreach (subrule in subrulesWithMarkers)
        subrule.Sequence = this;
    }

    public MandatoryTokenCount : int { get; internal set; }

    public GetSize(astPtr : int, parseResult : ParseResult) : int
    {
      assert3(parseResult.ast[astPtr + ExtensibleRuleParser.AstOfs.State] == ParseResult.AstParsedState);
      mutable size = 0;
      foreach (subrule in Subrules)
        size += parseResult.GetSize(astPtr + subrule.Offset);
      size;
    }

    public override ToString() : string
    {
      Description
    }
  }
}
