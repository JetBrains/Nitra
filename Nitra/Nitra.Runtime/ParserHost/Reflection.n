using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.ObjectModel;

using SCG = System.Collections.Generic;

namespace Nitra
{
  public partial class ParserHost
  {
    private static EmptyRuleApplications : ReadOnlyCollection[RuleApplication] = ReadOnlyCollection(array(0));
    /*public ChildrenReflection(parseResult : ParseResult, ruleApplication : RuleApplication) : ReadOnlyCollection[RuleApplication]
    {
      match (ruleApplication.Sequence)
      {
        | Ast
        | Option
        | List
        | ListWithSeparatorRule
        | ListWithSeparatorSeparator
        | Predicate
      }
    }*/

    public Reflection(parseResult : ParseResult, pos : int) : ReadOnlyCollection[RuleApplication]
    {
      def res = SCG.List();
      for (mutable astPtr = parseResult.memoize[pos]; astPtr > 0; astPtr = parseResult.ast[astPtr + 1])
      {
        def ruleId = parseResult.ast[astPtr];
        if (_allRules[ruleId] is SimpleRuleParser)
          res.Add(RuleApplication(parseResult, pos, astPtr))
        else if (_allRules[ruleId] is ExtensionRuleParser as ruleParser)
        {
          assert(ruleId != ruleParser.RuleId);
          res.Add(RuleApplication(parseResult, pos, astPtr))
        }
        else if (_allRules[ruleId] is ExtensibleRuleParserData as extensibleRuleParserData)
          Reflection(extensibleRuleParserData, parseResult, pos, astPtr, res)
        else
          assert(false)
      }

      ReadOnlyCollection(res.NToArray());
    }

    private Reflection(extensibleRuleParserData : ExtensibleRuleParserData, parseResult : ParseResult, pos : int, mutable astPtr : int, res : SCG.List[RuleApplication]) : void
    {
      def ruleId = parseResult.ast[astPtr];
      if (ruleId == extensibleRuleParserData.PrefixId)
      {
        astPtr = parseResult.ast[astPtr + ExtensibleRuleParser.PrefixOfs.List];
        for (; astPtr > 0; astPtr = parseResult.ast[astPtr + 1])
        {
          def ruleId = parseResult.ast[astPtr] & ExtensibleRuleParser.AstMask.Id;
          if (_allRules[ruleId] is ExtensionRuleParser)
            res.Add(RuleApplication(parseResult, pos, astPtr))
          else
            assert(false)
        }
      }
      else if (ruleId == extensibleRuleParserData.PostfixId)
      {
        astPtr = parseResult.ast[astPtr + ExtensibleRuleParser.PostfixOfs.List];
        for (; astPtr > 0; astPtr = parseResult.ast[astPtr + 1])
        {
          def ruleId = parseResult.ast[astPtr] & ExtensibleRuleParser.AstMask.Id;
          if (_allRules[ruleId] is ExtensionRuleParser)
            res.Add(RuleApplication(parseResult, pos, astPtr))
          else
            assert(false)
        }
      }
      else
        assert(false);
    }
  }
}
