using Nitra.Runtime.Reflection;
using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nitra.Internal;
using Nitra.Runtime;

using System;
using System.Collections.ObjectModel;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public partial class ParserHost
  {
    // System.Collections.Hashtable по тому что:
    // Hashtable is thread safe for use by multiple reader threads and a single writing thread.
    // It is thread safe for multi-thread use when only one of the threads perform write (update) operations,
    // which allows for lock-free reads provided that the writers are serialized to the Hashtable.
    private _grammarSetCache : System.Collections.Hashtable = System.Collections.Hashtable();

    private _compositeGrammars : Hashtable[Set[GrammarDescriptor], CompositeGrammar] = Hashtable();

    private mutable volatile _allRules : array[object] = array(1);//Root recovery stack frame id.

    [Record]
    private class Key
    {
      public CompositeGrammar : CompositeGrammar { get; }
      public GrammarDescriptor : GrammarDescriptor { get; }
      public override GetHashCode() : int { CompositeGrammar.GetHashCode() ^ GrammarDescriptor.GetHashCode() }
      public override Equals(that : object) : bool
      {
        def that = that :> Key;
        object.ReferenceEquals(CompositeGrammar, that.CompositeGrammar) && object.ReferenceEquals(GrammarDescriptor, that.GrammarDescriptor);
      }
    }

    public MakeCompositeGrammar(grammarDescriptors : SCG.IEnumerable[GrammarDescriptor]) : CompositeGrammar
    {
      lock (_syncRoot)
        grammarDescriptors.Fold(DefaultCompositeGrammar, (grammarDescriptor, parent) => AddGrammar(parent, grammarDescriptor))
    }

    public MakeCompositeGrammar(grammarDescriptor : GrammarDescriptor) : CompositeGrammar
    {
      AddGrammar(DefaultCompositeGrammar, grammarDescriptor)
    }

    public AddGrammar(parent : CompositeGrammar, grammarDescriptor : GrammarDescriptor) : CompositeGrammar
      requires object.ReferenceEquals(parent.ParserHost, this)
    {
      if (parent.Grammars.Contains(grammarDescriptor))
        parent
      else
      {
        lock (_syncRoot)
        {
          def key = Key(parent, grammarDescriptor);
          def res = _grammarSetCache[key];
          if (res == null)
          {
            mutable grammars = parent.Grammars;
            def addGrammar(descriptor)
            {
              when (!grammars.Contains(descriptor))
              {
                grammars = grammars.Add(descriptor);
                foreach (descriptor in descriptor.Dependencies)
                  addGrammar(descriptor);
              }
            }
            addGrammar(grammarDescriptor);

            def res = if (_compositeGrammars.Contains(grammars))
              _compositeGrammars[grammars]
            else
            {
              def res = CompositeGrammar(this, grammars, _allRules.Length);
              def newAllRules = array(_allRules.Length + res.RuleParserMap.Count);
              _allRules.CopyTo(newAllRules, 0);
              res.RuleParserMap.CopyTo(newAllRules, _allRules.Length);
              _allRules = newAllRules;
              _compositeGrammars.Add(grammars, res);
              res
            }
            _grammarSetCache.Add(key, res);
            res
          }
          else
            res :> CompositeGrammar;
        }
      }
    }
  }
}
