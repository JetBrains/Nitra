using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Nitra.Typing
{
  public abstract class Symbol : IEquatable[Symbol]
  {
    public Id         : int  { get; }
    [RecordIgnore]
    public AssemblyId : byte { get; protected set; }
    private static mutable _next : int = 0;

    public this(name : string)
    {
      Name = name;
      Id = Interlocked.Increment(ref _next);
    }

    public abstract Locations     : list[Location] { get; }
    public abstract FirstLocation : Location       { get; }
    public abstract Description   : string { get; }

    public FullName : string { get { Node.FullName } }

    public Name : string        { get; }
    public Node : HierarchyNode { get; internal set; }

    public override ToString() : string
    {
      $<#$Name ($Description) Parent: '$(Node?.Parent?.FullName ?? if (Node == null) "not attaced to tree" else "<Root>")'#>
    }

    public static @==(x : Symbol, y : Symbol) : bool { x : object == y }
    public static @!=(x : Symbol, y : Symbol) : bool { x : object != y }

    [OverrideObjectEquals]
    public Equals(other : Symbol) : bool
      implements IEquatable[Symbol].Equals
    {
      other : object == this
    }

    public override GetHashCode() : int { Id }
  }
}
