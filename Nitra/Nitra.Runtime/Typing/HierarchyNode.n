using Nitra.Runtime;
using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.Typing
{
  public class HierarchyNode : IEquatable[HierarchyNode]
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private mutable _children : Hashtable[string, HierarchyNode] = Hashtable();

    private Children : Hashtable[string, HierarchyNode]
    {
      get
      {
        when (_children == null)
          _children = Hashtable();
        _children
      }
    }

    public SubNodes : Seq[HierarchyNode]
    {
      get { if (_children == null) Enumerable.Empty() else _children.Values }
    }

    public GetChildren[T]() : Seq[T]
      where T: Symbol
    {
      def getSymbols(node : HierarchyNode)
      {
        match (node.Symbol)
        {
          | null => []
          | sym is AmbiguousSymbol => sym.AmbiguousList.OfType.[T]()
          | sym is T => [sym]
          | _ => []
        }
      }
      if (_children == null)
        []
      else
        _children.Values.SelectMany(getSymbols)
    }

    public GetSymbols() : list[Symbol]
    {
      match (this.Symbol)
      {
        | null                   => []
        | sym is AmbiguousSymbol => sym.AmbiguousList
        | x                      => [x]
      }
    }

    public GetDescendants[T]() : Seq[T]
      where T: Symbol
    {
      if (_children == null)
        []
      else
      {
        def result = List();
        def getSymbols(node : HierarchyNode) : void
        {
          match (node.Symbol)
          {
            | sym is AmbiguousSymbol =>
              foreach (s is T in sym.AmbiguousList)
                result.Add(s);

            | sym is T => result.Add(sym);
            | _ => ()
          }

          when (node._children != null)
            foreach (subNode in node._children.Values)
              getSymbols(subNode);
        }

        foreach (node in _children.Values)
          getSymbols(node);

        result
      }
    }

    public PartName : string { get; }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    mutable _symbol : Nitra.Typing.Symbol;

    public Symbol : Nitra.Typing.Symbol
    {
      get { _symbol }
    }

    public this() { this(null, null) }

    private this(parent : HierarchyNode, partName : string)
    {
      Parent   = parent;
      PartName = partName;

      when (parent != null)
        parent.Children.Add(partName, this);
    }

    public FullNameParts : list[string]
    {
      [Memoize]
      get
      {
        def loop(node : HierarchyNode, parts : list[string]) : list[string]
        {
          if (node.Parent == null)
            parts
          else
            loop(node.Parent, node.PartName :: parts)

        }

        loop(this, [])
      }
    }

    public FullName : string { [Memoize] get { $<#..$(FullNameParts; ".")#> } }

    public SetRootNamespaceSymbol([NotNull] rootNamespace : NamespaceSymbol) : void
    {
      assert2(rootNamespace.Node == null);
      assert2(_symbol == null);
      rootNamespace.Node = this;
      _symbol            = rootNamespace;
    }

    public SetSymbol([NotNull] symbol : Symbol, location : Location) : void
    {
      assert2(symbol.Name == PartName);
      assert2(symbol.Node == null);

      match (_symbol, symbol)
      {
        | (null, _) => _symbol = symbol;
        | (a1 is AmbiguousSymbol, a2 is AmbiguousSymbol) => _symbol = AmbiguousSymbol(a1.AmbiguousList + a2.AmbiguousList);
        | (a1 is AmbiguousSymbol, s)                     => _symbol = AmbiguousSymbol(s :: a1.AmbiguousList);
        | (_, _ is AmbiguousSymbol)                      => assert2(false);
        | (s1, s2) =>
          s2.Node = this;
          _symbol = AmbiguousSymbol([s1, s2]);
      }

      _symbol.Node = this;
      Project.CurrentProject.AddSymbolDef(_symbol, location);
    }

    public Add([NotNull] symbol : Nitra.Typing.Symbol, location : Location) : HierarchyNode
    {
      def node = AddNode(symbol.Name);
      node.SetSymbol(symbol, location);
      node
    }

    public AddAndReport[T]([NotNull] path : list[string], [NotNull] symbol : T, location : Location) : HierarchyNode
      where T: Nitra.Typing.Symbol
    {
      AddNode(path).AddAndReport(symbol, location)
    }

    public AddAndReport[T]([NotNull] symbol : T, location : Location) : HierarchyNode
      where T: Nitra.Typing.Symbol
    {
      def node = Add(symbol, location);
      def sym = node.Symbol;
      def project = Project.CurrentProject;
      when (sym is AmbiguousSymbol as ambiguous)
        ambiguous.ReportAlreadyDefined(symbol, project);

      node
    }

    public AddNode([NotNull] partName : string) : HierarchyNode
    {
      mutable child;
      if (_children?.TryGetValue(partName, out child))
        child
      else
      {
        def result = HierarchyNode(this, partName);
        Children[partName] = result;
        result
      }
    }

    public AddNode([NotNull] parts : list[string]) : HierarchyNode
    {
      mutable parent = this;
      foreach (part in parts)
        parent = parent.AddNode(part);
      parent
    }

    public Parent : HierarchyNode { get; }

    public override ToString() : string { FullName }

    public BindMany[T](name : list[Location]) : list[T]
      where T: Symbol
    {
      | null | []     => []
      | first :: []   => BindMany.[T](first)
      | first :: tail =>
        def res = BindMany.[Symbol](first);
        if (res is [sym])
          sym.Node.BindMany.[T](tail)
        else
          []
    }

    public BindMany[T](name : list[string]) : list[T]
      where T: Symbol
    {
      | null | []     => []
      | first :: []   => BindMany.[T](first)
      | first :: tail =>
        def res = BindMany.[Symbol](first);
        if (res is [sym])
          sym.Node.BindMany.[T](tail)
        else
          []
    }

    public BindMany[T](name : Location) : list[T]
      where T: Symbol
    {
      assert2(!name.IsEmpty);
      BindMany(name.GetText()); //TODO: get rid of GetText
    }

    public BindMany[T](name : string) : list[T]
      where T: Symbol
    {
      AddNode(name).GetSymbol()
    }

    public GetSymbol[T]() : list[T]
      where T: Symbol
    {
      match (_symbol : object)
      {
        | sym is T => [sym]
        | AmbiguousSymbol(AmbiguousList = ambiguousList) => ambiguousList.OfType()
        | _        => []
      }
    }

    public Path() : Seq[HierarchyNode]
    {
      mutable node = this;

      while (node != null)
      {
        yield node;
        node = node.Parent;
      }
    }
  }
}
