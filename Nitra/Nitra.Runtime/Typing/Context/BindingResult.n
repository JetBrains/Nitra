using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public sealed class BindingResult[T] : Located
  {
    public override Location : Location { get; }

    public this(location : Location, candidates : list[T], mutable messages : list[CompilerMessage])
    {
      Location = location;
      when (!(candidates is [_]) && messages is [])
      {
        def message = "Message not specified for unbound or ambiguous binding result.";
        assert2(false, message);
        messages ::= CompilerMessage(CompilerMessageType.FatalError, location, message, -1, []);
      }
      Candidates = candidates;
      Messages   = messages;
    }

    public Candidates : list[T]               { get; }
    public Messages   : list[CompilerMessage] { get; }

    public AppendCandidates(newCandidates : list[T]) : BindingResult[T]
    {
      | []    => this
      | [one] => BindingResult(Location, one :: Candidates, Messages)
      | many  => BindingResult(Location, many + Candidates, Messages)
    }
  }
}
