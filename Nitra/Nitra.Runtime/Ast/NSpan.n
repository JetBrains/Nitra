using System;
using System.Runtime;
using System.Runtime.ConstrainedExecution;
using Nemerle.Extensions;
using Nemerle.Utility;

namespace Nitra
{
  [Record, StructuralEquality]
  public struct NSpan : IAst
  {
    public StartPos : int
    {
      [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries"), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
      get;
    }
    public EndPos   : int
    {
      [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries"), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
      get;
    }

    public Length : int
    {
      [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries"), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
      get { EndPos - StartPos }
    }

    public IsEmpty : bool
    {
      [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries"), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
      get { StartPos == EndPos }
    }

    [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(start : int, end : int) : bool { start <= EndPos && end >= StartPos }
    [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(other : NSpan)         : bool { IntersectsWith(other.StartPos, other.EndPos) }
    [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(other : Location)       : bool { IntersectsWith(other.StartPos, other.EndPos) }
    [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public Intersection(start : int, end : int)   : ValueOption[NSpan]
    {
      def start = Math.Max(StartPos, start);
      def end   = Math.Min(EndPos, end);

      if (start <= end)
        VSome(NSpan(start, end))
      else
        VNone()
    }

    public override ToString() : string
    {
      $<#"Start: $StartPos Len: $(EndPos - StartPos)"#>;
    }
  }
}
