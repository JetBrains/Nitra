using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public sealed class ListAst[T] : Ast, SCG.IEnumerable[T] where T : IAst
  {
    private static applyItems : bool = CanApplyVisitor.[T]();

    public this(location : Location, items : array[T])
    {
      this.Location = location;
      this.items    = items;
    }

    public this(location : Location, items : SCG.List[T])
    {
      this(location, items.ToArray())
    }

    public this(location : Location)
    {
      this(location, array(0))
    }

    private         items             : array[T];
    public override Location          : Nitra.Location     { get }
    public          Length            : int                { get items.Length }
    public          IsEmpty           : bool               { get items.Length > 0 }
    public          Item[index : int] : T                  { get items[index] }

    public override Apply(visitor : AstVisitor) : Ast
    {
      visitor.Enter(this);
      mutable result = this;
      mutable isDirty;
      when (applyItems)
      {
        mutable newItems;
        for (mutable i = 0; i < items.Length; ++i)
        {
          def newItem = visitor.Visit(items[i] :> Ast) :> T;
          unless (ReferenceEquals(newItem, items[i]))
          {
            isDirty = true;
            when (newItems == null)
            {
              newItems = array(items.Length);
              Array.Copy(items, newItems, items.Length);
            }
            newItems[i] = newItem;
          }
        }
        when (isDirty)
          result = ListAst(this.Location, newItems);
      }
      visitor.Leave(this, result);
      result
    }

    public UpdateItems(newItems : SCG.List[T]) : ListAst[T]
    {
      if (newItems.Count != items.Length)
        ListAst(this.Location, newItems)
      else
      {
        for (mutable i = 0; i < items.Length; ++i)
          unless (ReferenceEquals(newItems[i], items[i]))
            return ListAst(this.Location, newItems);
        this
      }
    }

    public GetEnumerator() : SCG.IEnumerator[T]
    {
      (items : SCG.IEnumerable[T]).GetEnumerator()
    }
  }
}
