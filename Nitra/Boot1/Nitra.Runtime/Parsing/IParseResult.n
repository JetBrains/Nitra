using Nitra.Runtime;
using Nitra.Runtime.Reflection;

using SCG = System.Collections.Generic;

namespace Nitra
{
  public interface IParseResult : ISourceSnapshotProvider
  {
    SourceSnapshot   : SourceSnapshot                      { get; }
    ParseEnd         : int                                 { get; }
    ParseSession     : ParseSession                        { get; }
    IsSuccess        : bool                                { get; }
    Ambiguous        : option[AmbiguousException]          { get; }
    Trivia           : array[SCG.KeyValuePair[NSpan, int]] { get; }
    ParserHost       : ParserHost                          { get; }
    CompilerMessages : ICompilerMessages                   { get; }

    CreateParseTree() : ParseTree;
    GetSpans(startPos : int, endPos : int, spans : SCG.HashSet[SpanInfo]) : void;
    GetOutlining(outlining : SCG.List[OutliningInfo]) : void;
    Reflect() : ReflectionStruct;
  }
}
