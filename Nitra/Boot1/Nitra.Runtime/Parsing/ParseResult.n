using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime;
using Nitra.Runtime.Errors;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using System.Text;
using System.Threading;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public partial class ParseResult : IParseResult, IPrettyPrintSource, ISourceSnapshotProvider
  {
    public static RawTreeParsedState = ~int.MaxValue;

    public static ResultOffset = 0;

    public         Text             : string          { get; }
    public         ParseEnd         : int             { get { rawTree[ResultOffset] } }
    public mutable rawTree          : array[int];
    public mutable memoize          : array[int];
    public mutable allocated        : int;
    public mutable TerminateParsing : bool; // may be volatile?
    public         ParserHost       : ParserHost      { get; }
    public         SourceSnapshot   : SourceSnapshot  { get; }
    public         StartPos         : int             { get; }
    public         RuleParser       : StartRuleParser { get; }//Rename to StartRuleParser
    public mutable LastParseStart   : int;
    public mutable LastParseEnd     : int;
    public         ParseSession     : ParseSession    { get; }
    private mutable _maxFailPos     : int;

    public this([NotNull] parseSession : ParseSession, [NotNull] sourceSnapshot : SourceSnapshot)
    {
      def text              = sourceSnapshot.Text;

      this.ParseSession     = parseSession;
      this.Text             = text;
      this.SourceSnapshot   = sourceSnapshot;
      this.StartPos         = 0;
      this.TokenEnumerator1 = TokenEnumerator(this);
      this.TokenEnumerator2 = TokenEnumerator(this);
      this.rawTree          = array((text.Length + 1) * 10);
      this.memoize          = array(text.Length + 1);
      this.allocated        = 0;
      this.ParserHost       = parseSession.CompositeGrammar.ParserHost;
      this.LastParseStart   = -1;
      this.LastParseEnd     = -1;
      this.MaxFailPos       = 0;
      this.RuleParser       = parseSession.CompositeGrammar.GetStartRuleParser(parseSession.StartRuleDescriptor);
    }

    internal Parse() : void
    {
      if (this.ParseSession.CancellationToken == CancellationToken.None)
        ParseImpl()
      else
        using (this.ParseSession.CancellationToken.Register(CancelParsing))
          ParseImpl()
    }

    private CancelParsing() : void
    {
      TerminateParsing = true
    }

    private ParseImpl() : void
    {
      def statistics = this.ParseSession.Statistics;
      mutable patseStatistics;
      mutable recoveryStatistics;
      when (statistics != null)
      {
        def overalleParseStatistics = statistics.ReplaceContainerSubtask("Parse");
        patseStatistics    = overalleParseStatistics.ReplaceSingleSubtask("ParseMain");
        recoveryStatistics = overalleParseStatistics.ReplaceSingleSubtask("Recovery");
        patseStatistics.Start();
      }

      _ = Allocate(2);
      mutable res = RuleParser.Parse(StartPos, Text, this);

      when (statistics != null)
        patseStatistics.Stop();
      
      def parsedToEnd = res == Text.Length;
      
      if (this.ParseSession.ParseToEndOfString)
        IsSuccess = parsedToEnd;
      else
        IsSuccess = res > 0;
      
      when (res < 0 || !(this.ParseSession.ParseToEndOfString && parsedToEnd) || ParseSession.CompletionStartPos >= 0)
      {
        when (statistics != null)
          recoveryStatistics.Start();
        def maxFailPos = MaxFailPos;
        try
        {
          this.ParseSession.OnRecovery(this);

          res = Text.Length;
          rawTree[ResultOffset] = res;

          def errorCollector = ErrorCollectorWalker();
          errorCollector.Walk(this);
        }
        catch
        {
          | _ is LiteralCompletionException => throw;
          | _ is OperationCanceledException => throw;
          | e =>
            def error = GetParsingFailureError(maxFailPos);
            this.ParseSession.CompilerMessages.Error(error.Location, error.Message);
            IsSuccess = false;
            throw ParsingFailureException(error.ToString(), e, this);
        }
        finally
        {
          when (statistics != null)
            recoveryStatistics.Stop();
        }
      }

      assert2(res >= 0);
      assert(res >= 0);

      rawTree[ResultOffset] = res;
    }

    private GetParsingFailureError(maxFailPos : int) : ParseError
    {
      def isValidToken(x) { x > maxFailPos }

      when (maxFailPos == Text.Length)
        return UnexpectedEndOfFileError(Location(this, maxFailPos));

      def tokens = RuleParser.Grammar.ParseAllGrammarTokens(maxFailPos, this);
      if (tokens.Any(isValidToken))
      {
        def longestToken = tokens.Max();
        UnexpectedError(Location(this, maxFailPos, longestToken))
      }
      else
      {
        mutable pos = maxFailPos + 1; // range already checked
        while (pos < Text.Length)
        {
          when (RuleParser.Grammar.ParseAllGrammarTokens(pos, this).Any(isValidToken))
            break;
          ++pos;
        }
        UnexpectedError(Location(this, maxFailPos, pos))
      }
    }

    [Record]
    public variant RecoveredSequence
    {
      public AllSubrules : array[ParsedSubrule * TokenChanges];
      public TokenChanges : TokenChanges;

      public IsDeleted : bool { get { AllSubrules.Length == 0 && TokenChanges.Deleted > 0 && TokenChanges.Inserted == 0 } }

      | Unambiguous { /** Индекс в RecoveredSubrules  */ Subrules : int }
      | Ambiguous   { /** Индексы в RecoveredSubrules */ Subrules : array[int] }
    }

    [Record]
    public struct SubrulesWithParsingSequence
    {
      public Subrules        : array[SubruleStart];
      public ParsingSequence : ParsingSequence;
    }

    /// В массиве хранятся начала соотвестствующих подправил. Последним элементом массива - позиция конечного состояния (-1).
    /// Таким образом мы можем легко вычислить позиции и размеры всех сабрулей
    public RecoveredSubrules  : SCG.List[SubrulesWithParsingSequence] = SCG.List();

    internal AddRecoveredSubrule(item : array[SubruleStart], parsingSequence : ParsingSequence) : int
    {
      def index = RecoveredSubrules.Count;
      RecoveredSubrules.Add(SubrulesWithParsingSequence(item, parsingSequence));
      index
    }

    /// Key = Start * End * ParsingSequence
    internal RecoveredSequences : Hashtable[int * int * ParsingSequence, RecoveredSequence] { get; default Hashtable(); }

    public TryGetRecoveredSequence(startPos : int, endPos : int, parsingSequence : ParsingSequence) : RecoveredSequence
    {
      mutable result;
      _ = RecoveredSequences.TryGetValue((startPos, endPos, parsingSequence), out result);
      result
    }

    public MaxFailPos : int
    {
      get { _maxFailPos }
      set { _maxFailPos = value }
    }

    public IsSuccess : bool { get; private set; }

    public TokenEnumerator1 : TokenEnumerator;
    public TokenEnumerator2 : TokenEnumerator;

    public DebugText : string
    {
      get
      {
        def sb1 = StringBuilder();
        def sb2 = StringBuilder();
        def sb3 = StringBuilder();
        def appendIndex(len : int, i : int)
        {
          def h = (i / 10);
          _ = sb3.Append(if (h < 10) ('0' + h) :> char else ('A' + h - 10) :> char, len);
          _ = sb2.Append(('0' + (i % 10)) :> char, len);
        }
        def addEsc(ch : string, i : int) : void
        {
          def str = $@"\$ch";
          _ = sb1.Append(str);
          appendIndex(str.Length, i);
        }
        foreach (ch in Text with i)
        {
          | '\"'      => addEsc("\"", i)
          | '\\'      => addEsc("\\", i)
          | '\n'      => addEsc("n", i)
          | '\t'      => addEsc("t", i)
          | '\r'      => addEsc("r", i)
          | '\e'      => addEsc("e", i)
          | '\a'      => addEsc("a", i)
          | '\b'      => addEsc("b", i)
          | '\f'      => addEsc("f", i)
          | '\v'      => addEsc("v", i)
          | '\0'      => addEsc("0", i)
          | '\uFFFF'  => addEsc("uFFFF", i)
          | c         => _ = sb1.Append(c); appendIndex(1, i)

        }

        sb1.AppendLine().Append(sb2.ToString()).AppendLine().Append(sb3.ToString()).ToString()
      }
    }

    public ParseResult : string
    {
      get
      {
        if (LastParseEnd >= 0)
          Text.Substring(LastParseStart, LastParseEnd - LastParseStart)
        else
          "<fail>"
      }
    }

    public RestText : string
    {
      get { Text.Substring(if (LastParseEnd >= 0) LastParseEnd else LastParseStart) }
    }

    public mutable PreviousTextSize : int;

    public PreviousText : string
    {
      get
      {
        when (PreviousTextSize <= 0)
          PreviousTextSize = 20;

        def pos = if (LastParseEnd >= 0) LastParseEnd else LastParseStart;
        if (pos >= PreviousTextSize)
          Text.Substring(pos - PreviousTextSize, PreviousTextSize)
        else
          Text.Substring(0, pos)
      }
    }

    public Allocate(size : int) : int
    {
      def rawTreePtr = allocated;
      allocated = allocated + size;
      while (rawTree.Length <= allocated)
        Array.Resize(ref rawTree, (rawTree.Length * 3) / 2);

      rawTreePtr
    }

    public Allocate(size : int, ruleId : int) : int
    {
      def rawTreePtr = Allocate(size);
      rawTree[rawTreePtr] = ruleId;
      rawTreePtr;
    }

    public FindFirstGrammar(pos : int, descriptor : RuleDescriptor, next : out int) : CompositeGrammar
    {
      next = memoize[pos];
      FindNextGrammar(descriptor, ref next);
    }

    public FindNextGrammar(descriptor : RuleDescriptor, next : ref int) : CompositeGrammar
    {
      while (next > 0)
      {
        def id = rawTree[next + ExtensibleRuleParser.RawTreeOfs.Id] & ExtensibleRuleParser.RawTreeMask.Id;
        next = rawTree[next + ExtensibleRuleParser.RawTreeOfs.Next];
        def parser = ParserHost.RuleParsers[id];
        when (parser.Descriptor : object == descriptor)
          return parser.Grammar;
      }
      null
    }

    public TryGetPrefix(pos : int, prefixRawTreePtr : ref int) : int
    {
      mutable bestResult = rawTree[prefixRawTreePtr + ExtensibleRuleParser.PrefixOfs.List];
      when (bestResult < 0)
      {
        prefixRawTreePtr = GetRawTree(pos, rawTree[prefixRawTreePtr + ExtensibleRuleParser.PrefixOfs.Id] & ExtensibleRuleParser.RawTreeMask.Id);
        bestResult = rawTree[prefixRawTreePtr + ExtensibleRuleParser.PrefixOfs.List]; // исходная ссылка на дерево разбора
        assert3(bestResult >= 0);
        when (bestResult == 0)
          bestResult = -1;
      }
      bestResult;
    }

    public TryGetPostfix(pos : int, postfixRawTreePtr : ref int) : int
    {
      mutable bestResult = rawTree[postfixRawTreePtr + ExtensibleRuleParser.PostfixOfs.List];
      when (bestResult < 0)
      {
        postfixRawTreePtr = GetRawTree(pos, rawTree[postfixRawTreePtr + ExtensibleRuleParser.PostfixOfs.Id] & ExtensibleRuleParser.RawTreeMask.Id);
        bestResult = rawTree[postfixRawTreePtr + ExtensibleRuleParser.PostfixOfs.List]; // исходная ссылка на дерево разбора
        assert3(bestResult >= 0);
        when (bestResult == 0)
          bestResult = -1;
      }
      bestResult;
    }

    public TryGetRawTree(pos : int, ruleId : int) : int
    {
      for (mutable rawTreePtr = memoize[pos]; rawTreePtr > 0; rawTreePtr = rawTree[rawTreePtr + ExtensibleRuleParser.RawTreeOfs.Next])
        when (rawTree[rawTreePtr] == ruleId)
          return rawTreePtr;
      0;
    }

    public GetRawTree(pos : int, ruleId : int) : int
    {
      def rawTreePtr = TryGetRawTree(pos, ruleId);
      assert3(rawTreePtr > 0);
      rawTreePtr;
    }

    public GetSize(sizePos : int) : int
    {
      def size = rawTree[sizePos];
      if (size >= 0)
        size
      else if (size == int.MinValue)
        0
      else
        assert(false, "Skip not supported")
    }

    public GetRawTreeSize(rawTreePtr : int, sequenceInfo : SequenceInfo) : int
    {
      mutable size = 0;
      foreach (subrule in sequenceInfo.Subrules)
        size += GetSize(rawTreePtr + subrule.Offset);
      size;
    }

    public RawSize(rawTreePtr : int, begin : int, end : int) : int
    {
      mutable size = 0;
      def end = rawTreePtr + end;
      for (mutable i = rawTreePtr + begin; i < end; ++i)
        size += GetSize(i);
      size;
    }

    private mutable _trivia : array[SCG.KeyValuePair[NSpan, int]];

    public Ambiguous : option[AmbiguousException]
    {
      get
      {
        try
        {
          def walker = AmbiguityDetectorWalker();
          walker.Walk(this, FakeVoid());
          None()
        }
        catch { e is AmbiguousException => Some(e) }
      }
    }
    
    public Trivia : array[SCG.KeyValuePair[NSpan, int]]
    {
      get
      {
        when (_trivia == null)
        {
          lock (Text)
          {
            when (_trivia == null)
            {
              def walker = TriviaCollector();
              walker.Walk(this);
              _trivia = walker.Trivia.OrderBy(x => x.Key.EndPos).ToArray();
            }
          }
        }
        _trivia
      }
    }

    public CreateParseTree() : Nitra.ParseTree
    {
      (this.RuleParser.Descriptor :> StartRuleDescriptor).CreateParseTree(this.StartPos, this.ParseEnd, this, this.RuleParser.Grammar)
    }

    public GetSpans(startPos : int, endPos : int, spans : SCG.HashSet[SpanInfo]) : void
    {
      def walker = Highlighting.HighlightingWalker(NSpan(startPos, endPos));
      _ = walker.Walk(this, spans);
    }

    public GetOutlining(outlining : SCG.List[OutliningInfo]) : void
    {
      def walker = Outlining.OutliningWalker();
      _ = walker.Walk(this, outlining);
    }

    class Root : INitraReflection
    {
      public FullName            : string { get { "Roor" } }
      public ShortName           : string { get { "Roor" } }
      public IsMarker            : bool   { get { false } }
      public CanParseEmptyString : bool   { get { false } }
    }

    public Reflect() : ReflectionStruct
    {
      def nodes = SCG.List();
      def walker = ReflectionWalker();
      _ = walker.Walk(this, nodes);
      // FIXME: этот код должен быть в волкере
      ReflectionStruct(Root(), RuleParser.Descriptor.Name, ReflectionKind.Normal, NSpan(StartPos, rawTree[ParseResult.ResultOffset]), ReadOnlyCollection(nodes.ToArray()))
    }

    public GetRuleParser(rawTreePtr : int) : IParserInfo
    {
      def ruleId = this.rawTree[rawTreePtr] & ExtensibleRuleParser.RawTreeMask.Id;
      this.ParserHost.RuleParsers[ruleId]
    }

    public GetSequenceInfo(rawTreePtr : int) : SequenceInfo
    {
      def ruleId = this.rawTree[rawTreePtr] & ExtensibleRuleParser.RawTreeMask.Id;
      (this.ParserHost.RuleParsers[ruleId] :> IRuleParserReflection).Reflection(ruleId)
    }

    public GetGarbage(prevPos : int, pos : int) : NSpan
    {
      def cmp(e : SCG.KeyValuePair[NSpan, int]) : int
      {
        if (e.Key.StartPos < prevPos)
          -1
        else if (e.Key.EndPos > pos)
            1
        else
            0
      }
      mutable errorIndex = Trivia.BinarySearch(cmp);
      if (errorIndex >= 0)
      {
        for (mutable i = errorIndex - 1; i >= 0; i--)
          when (cmp(Trivia[i]) == 0)
            errorIndex = i;

        def error = Trivia[errorIndex];
        error.Key
      }
      else
        NSpan()
    }

    private GetSource() : SourceSnapshot implements ISourceSnapshotProvider.GetSource
    {
      SourceSnapshot
    }
    
    public TryGetDynamicSyntaxExtension(syntaxModuleFullName : string) : GrammarDescriptor
    {
      mutable descriptor;
      if (this.ParseSession._dynamicExtensionsMap?.TryGetValue(syntaxModuleFullName, out descriptor))
        descriptor
      else
        null
    }

    public CompilerMessages : ICompilerMessages { get { this.ParseSession.CompilerMessages } }
  }
}
