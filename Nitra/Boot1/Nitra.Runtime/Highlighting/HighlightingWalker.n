using Nemerle;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Highlighting
{
  internal sealed class HighlightingWalker : AstWalkerBase[List[SpanInfo]]
  {
    range : NSpan;

    public this(range : NSpan)
    {
      this.range = range;
    }

    public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : ParseResult, context : List[SpanInfo]) : void
    {
      _ = parseResult;
      when (endPos >= 0)
      {
        def spanClass = ruleInfo.Descriptor.SpanClass;
        when (spanClass != null && range.IntersectsWith(startPos, endPos))
          context.Add(SpanInfo(NSpan(startPos, endPos), spanClass))
      }
    }

    public override OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, parseResult : ParseResult, context : List[SpanInfo]) : void
    {
      _ = parseResult;
      when (endPos >= 0)
      {
        def spanClass = ruleInfo.SpanClass;
        when (spanClass != null && range.IntersectsWith(startPos, endPos))
          context.Add(SpanInfo(NSpan(startPos, endPos), spanClass))
      }
    }

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : ParseResult, context : List[SpanInfo]) : void
    {
      when (range.IntersectsWith(startPos, endPos))
        base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : ParseResult, context : List[SpanInfo]) : void
    {
      when (range.IntersectsWith(startPos, endPos))
        base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnOption(ruleInfo : SubruleInfo.Option, startPos : int, endPos : int, parseResult : ParseResult, context : List[SpanInfo]) : void
    {
      when (range.IntersectsWith(startPos, endPos))
        base.OnOption(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : ParseResult, context : List[SpanInfo]) : void
    {
      when (range.IntersectsWith(startPos, endPos))
        base.OnList(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : ParseResult, context : List[SpanInfo]) : void
    {
      when (range.IntersectsWith(startPos, endPos))
        base.OnListWithSeparator(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override WalkSimple(curTextPos : int, ruleParser : SimpleRuleParser, parseResult : ParseResult, context : List[SpanInfo]) : int
    {
      def endPos    = base.WalkSimple(curTextPos, ruleParser, parseResult, context);
      when (endPos >= 0)
      {
        def spanClass = ruleParser.Descriptor.SpanClass;
        when (spanClass != null && range.IntersectsWith(curTextPos, endPos))
          context.Add(SpanInfo(NSpan(curTextPos, endPos), spanClass));
      }
      endPos
    }

    public override WalkPrefix(astPtr : int, curTextPos : int, parseResult : ParseResult, context : List[SpanInfo]) : int
    {
      def endPos    = base.WalkPrefix(astPtr, curTextPos, parseResult, context);
      when (endPos >= 0)
      {
        def parser    = parseResult.GetRuleParser(astPtr);
        def spanClass = (parser :> ExtensionRuleParser).Descriptor.SpanClass;
        when (spanClass != null && range.IntersectsWith(curTextPos, endPos))
          context.Add(SpanInfo(NSpan(curTextPos, endPos), spanClass));
      }
      endPos
    }

    public override WalkPostfix(astPtr : int, curTextPos : int, parseResult : ParseResult, context : List[SpanInfo]) : int
    {
      def endPos    = base.WalkPostfix(astPtr, curTextPos, parseResult, context);
      when (endPos >= 0)
      {
        def parser    = parseResult.GetRuleParser(astPtr);
        def spanClass = (parser :> ExtensionRuleParser).Descriptor.SpanClass;
        when (spanClass != null && range.IntersectsWith(curTextPos, endPos))
          context.Add(SpanInfo(NSpan(curTextPos, endPos), spanClass));
      }
      endPos
    }
  }
}
