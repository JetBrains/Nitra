using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

using SCG = System.Collections.Generic;

public module X
{
  public Contains[T](this ary : array[T], value : T) : bool
  {
    Array.IndexOf(ary, value) >= 0
  }
  
  public DotEscape(x : string) : string
  {
    x.Replace("\\", <#\\#>).Replace(<#"#>, <#\"#>)
  }
  
  public VisualizeRecoveryParser(recoveryParser : RecoveryParser) : void
  {
    def _toOpen = recoveryParser.ToDot(0);
    //when (sources.Count > 0)
    //  ExecuteDot(toOpen, sources);
  }

  static ToolsDir = "ExternalTools";

  public ConvertToDot(sourcePath : string) : void
  {
    def svgFileName = Path.ChangeExtension(sourcePath, "svg");
    def process = Process.Start(FindDotExe(), $<#$sourcePath -o $svgFileName -Tsvg#>);
    process.WaitForExit();
    _ = Process.Start(svgFileName);
  }

  public ConvertToDot(sourcePaths : Seq[string]) : void
  {
    def sourceFileNames = SCG.Queue(sourcePaths);
    
    while (sourceFileNames.Count > 0)
    {
      def batchSize = 200;
      def sourceFileNamesBatch = List(batchSize);
      for (mutable i; i < batchSize && sourceFileNames.Count > 0; ++i)
        sourceFileNamesBatch.Add(sourceFileNames.Dequeue());

      def si = ProcessStartInfo();
      si.FileName = FindDotExe();
      si.Arguments = $<#-Tsvg -O ..$(sourceFileNamesBatch; " ")#>;

      using (process = Process.Start(si))
        process.WaitForExit();
    }
  }

  public ExecuteDot(source : string) : void
  {
    def dotFileName = Path.ChangeExtension(Path.GetTempFileName(), "dot");
    File.WriteAllText(dotFileName, source);
    def svgFileName = Path.ChangeExtension(dotFileName, "svg");
    def process = Process.Start(FindDotExe(), $<#$dotFileName -o $svgFileName -Tsvg#>);
    process.WaitForExit();
    _ = Process.Start(svgFileName);
  }

  private FindDotExe() : string
  {
    def dir = Path.GetDirectoryName(Path.GetFullPath(Assembly.GetExecutingAssembly().Location));
    def findDot(dir : string) : string
    {
      if (Directory.Exists(Path.Combine(dir, ToolsDir)))
        Path.Combine(dir, ToolsDir, @"DOT\dot.exe")
      else
      {
        def parent = Directory.GetParent(dir);
        if (parent == null)
          null
        else
          findDot(parent.FullName)
      }
    }
    
    findDot(dir)
  }
  
  public static SafeLeftSubstring(this str : string, pos : int, len : int) : string
  {
    assert3(pos >= 0);
    when (pos == 0)
      return "";
      
    // "1234■12345
    if (pos <= len)
      str.Substring(0, pos)
    else
      str.Substring(pos - len, if (pos > str.Length) str.Length - (pos - len) else len)
  }

  public static SafeRightSubstring(this str : string, pos : int, len : int) : string
  {
    str.Substring(pos, if (pos + len > str.Length) str.Length - pos else len)
  }

  [DebuggerStepThroughAttribute]
  public static EscapeSequence(c : char) : char
  {
    | '\'' => '\'' | '\"' => '\"' | '\\' => '\\' | '0'  => '\0'
    | 'a'  => '\a' | 'b'  => '\b' | 'f'  => '\f' | 'n'  => '\n'
    | 'r'  => '\r' | 't'  => '\t' | 'v'  => '\v' | c    => c
  }

  [DebuggerStepThroughAttribute]
  public EscapeChar(ch : char) : string
  {
    | '\0' => @"'\0'"
    | '\t' => @"'\t'"
    | '\n' => @"'\n'"
    | '\r' => @"'\r'"
    | '\\' => @"'\\'"
    | '\'' => @"'\''"
    | x when x == char.MaxValue  => @" char.MaxValue"
    | c when char.IsLetter(c)
    | c when char.IsDigit(c)
    | c when char.IsPunctuation(c)
    | c when char.IsSeparator(c)
    | c when char.IsSymbol(c)      => $"'$c'"
    | c =>
      def c = c : uint;
      string.Format(<#'\u{0,4:X}'#>, c).Replace(' ', '0');
  }

  [DebuggerStepThroughAttribute]
  public EscapeStringChar(ch : char) : string
  {
    | '\0' => @"\0"
    | '\t' => @"\t"
    | '\n' => @"\n"
    | '\r' => @"\r"
    | '\\' => @"\\"
    | '\'' => @"\'"
    | c when char.IsLetter(c)
    | c when char.IsDigit(c)
    | c when char.IsPunctuation(c)
    | c when char.IsSeparator(c)
    | c when char.IsSymbol(c)      => $"$c"
    | c =>
      def c = c : uint;
      string.Format(<#\u{0,4:X}#>, c).Replace(' ', '0');
  }

  [DebuggerStepThroughAttribute]
  public EscapeString(str : string) : string
  {
    def sb = Text.StringBuilder(str.Length);

    foreach (ch in str)
      _ = sb.Append(EscapeStringChar(ch));
      
    sb.ToString()
  }
}
