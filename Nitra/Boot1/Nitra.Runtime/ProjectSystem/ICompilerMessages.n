using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;

using System;
using System.Linq;

namespace Nitra
{
  public interface ICompilerMessages
  {
    ReportMessage    (messageType : CompilerMessageType, loc : Location, msg : string, num : int) : void;
    ReportRootMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : IRootCompilerMessages;
    SetFutureMessagesKind(kind : Guid) : void;
    Remove(predicate : Func[Guid, Location, bool]) : void;
  }

  public module CompilerMessagesExtensions
  {
    public FatalError[T](this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : T                     { messages.ReportMessage    (CompilerMessageType.FatalError, loc.Location,      msg, num); assert(false, msg) }
    public FatalError[T](this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : T                     { messages.ReportMessage    (CompilerMessageType.FatalError, loc,               msg, num); assert(false, msg) }
    public FatalError[T](this messages : ICompilerMessages, ast : ILocated, msg : string, num : int = -1) : T                     { messages.ReportMessage    (CompilerMessageType.FatalError, ToLocation(ast), msg, num); assert(false, msg) }

    public Error        (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Error,      loc.Location,      msg, num) }
    public Error        (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Error,      loc,               msg, num) }
    public Error        (this messages : ICompilerMessages, ast : ILocated, msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Error,      ToLocation(ast), msg, num) }
    public RootError    (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Error,      loc.Location,      msg, num) }
    public RootError    (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Error,      loc,               msg, num) }
    public RootError    (this messages : ICompilerMessages, ast : ILocated, msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Error,      ToLocation(ast), msg, num) }

    public Warning      (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Warning,    loc.Location,      msg, num) }
    public Warning      (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Warning,    loc,               msg, num) }
    public Warning      (this messages : ICompilerMessages, ast : ILocated, msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Warning,    ToLocation(ast), msg, num) }
    public RootWarning  (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Warning,    loc.Location,      msg, num) }
    public RootWarning  (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Warning,    loc,               msg, num) }
    public RootWarning  (this messages : ICompilerMessages, ast : ILocated, msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Warning,    ToLocation(ast), msg, num) }

    public Hint         (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Hint,       loc.Location,      msg, num) }
    public Hint         (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Hint,       loc,               msg, num) }
    public Hint         (this messages : ICompilerMessages, ast : ILocated, msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Hint,       ToLocation(ast), msg, num) }
    public RootHint     (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Hint,       loc.Location,      msg, num) }
    public RootHint     (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Hint,       loc,               msg, num) }
    public RootHint     (this messages : ICompilerMessages, ast : ILocated, msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Hint,       ToLocation(ast), msg, num) }

    public ToLocation(this ast : ILocated) : Location
    {
      def sourceFile = ast.File;
      assert(sourceFile != null);
      def sourceSnapshot = sourceFile.GetSource();
      def span           = ast.Span; // may be span from some old version of SourceSnapshot
      Location(sourceSnapshot, span)
    }

    public Error     (this ast : IAst, text : string, num : int = -1) : void { ast.File.AstMessages.ReportMessage(CompilerMessageType.Error,      ToLocation(ast), text, num) }
    public FatalError(this ast : IAst, text : string, num : int = -1) : void { ast.File.AstMessages.ReportMessage(CompilerMessageType.FatalError, ToLocation(ast), text, num) }
    public Warning   (this ast : IAst, text : string, num : int = -1) : void { ast.File.AstMessages.ReportMessage(CompilerMessageType.Warning,    ToLocation(ast), text, num) }
    public Hint      (this ast : IAst, text : string, num : int = -1) : void { ast.File.AstMessages.ReportMessage(CompilerMessageType.Hint,       ToLocation(ast), text, num) }

    public Error     (this symbol : DeclarationSymbol, text : string, num : int = -1) : void { Error     (symbol.Declarations.First().Name, text, num) }
    public FatalError(this symbol : DeclarationSymbol, text : string, num : int = -1) : void { FatalError(symbol.Declarations.First().Name, text, num) }
    public Warning   (this symbol : DeclarationSymbol, text : string, num : int = -1) : void { Warning   (symbol.Declarations.First().Name, text, num) }
    public Hint      (this symbol : DeclarationSymbol, text : string, num : int = -1) : void { Hint      (symbol.Declarations.First().Name, text, num) }
  }
}
