using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime
{
  /// <summary>
  /// Description of CompilerMessageList.
  /// </summary>
  public sealed class CompilerMessageList : CompilerMessages, IRootCompilerMessages
  {
    [Record]
    private struct CompilerMessageInternal
    {
      public Type           : CompilerMessageType   { get; }
      public Location       : Location              { get; }
      public Text           : string                { get; }
      public Number         : int                   { get; }
      public NestedMessages : List[CompilerMessageInternal] { get; }

      public ToCompilerMessage() : CompilerMessage
      {
        CompilerMessage(Type, Location, Text, Number, ToCompilerMessage(NestedMessages))
      }

      public static ToCompilerMessage(messages : List[CompilerMessageInternal]) : list[CompilerMessage]
      {
        mutable result = [];
        when (messages != null)
          for(mutable i = messages.Count - 1; i >= 0; --i)
            result ::= messages[i].ToCompilerMessage();
        result
      }
    }

    public this()
    {
      this(List())
    }

    private this(messages : List[CompilerMessageInternal])
    {
      _messages = messages;
    }

    private         _messages   : List[CompilerMessageInternal];
    private mutable _isDisposed : bool;

    public GetMessages() : list[CompilerMessage]
    {
      CompilerMessageInternal.ToCompilerMessage(_messages)
    }

    public override Error(loc : Nitra.Location, msg : string, num : int) : void
      requires !_isDisposed otherwise throw InvalidOperationException("Object disposed")
    {
      _messages.Add(CompilerMessageInternal(CompilerMessageType.Error, loc, msg, num, null))
    }

    public override Warning(loc : Nitra.Location, msg : string, num : int) : void
      requires !_isDisposed otherwise throw InvalidOperationException("Object disposed")
    {
      _messages.Add(CompilerMessageInternal(CompilerMessageType.Warning, loc, msg, num, null))
    }

    public override Hint(loc : Nitra.Location, msg : string, num : int) : void
      requires !_isDisposed otherwise throw InvalidOperationException("Object disposed")
    {
      _messages.Add(CompilerMessageInternal(CompilerMessageType.Hint, loc, msg, num, null))
    }

    public override RootError(loc : Nitra.Location, msg : string, num : int) : Nitra.Runtime.IRootCompilerMessages
      requires !_isDisposed otherwise throw InvalidOperationException("Object disposed")
    {
      def m = CompilerMessageInternal(CompilerMessageType.Error, loc, msg, num, List());
      _messages.Add(m);
      CompilerMessageList(m.NestedMessages)
    }

    public override RootWarning(loc : Nitra.Location, msg : string, num : int) : Nitra.Runtime.IRootCompilerMessages
      requires !_isDisposed otherwise throw InvalidOperationException("Object disposed")
    {
      def m = CompilerMessageInternal(CompilerMessageType.Warning, loc, msg, num, List());
      _messages.Add(m);
      CompilerMessageList(m.NestedMessages)
    }

    public override RootHint(loc : Nitra.Location, msg : string, num : int) : Nitra.Runtime.IRootCompilerMessages
      requires !_isDisposed otherwise throw InvalidOperationException("Object disposed")
    {
      def m = CompilerMessageInternal(CompilerMessageType.Hint, loc, msg, num, List());
      _messages.Add(m);
      CompilerMessageList(m.NestedMessages)
    }

    public Dispose() : void
    {
      _isDisposed = true;
    }
  }
}
