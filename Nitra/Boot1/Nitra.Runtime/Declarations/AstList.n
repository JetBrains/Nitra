using Nitra.Internal;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using SCG = System.Collections.Generic;

namespace Nitra.Declarations
{
  // TODO: Добавить возможность различать + и *
  public interface IAstList[+T] : SCG.IEnumerable[T], IAst // SCG.IList[T] conflicts with covariance constraint
    where T : IAst
  {
    Count             : int   { get; }
    Item[index : int] : T     { get; }
  }

  [DebuggerDisplay("Count = {Count}")]
  public class AstList[T] : AstBase, IAstList[T], SCG.IList[T]
    where T : IAst
  {
    private static EmptyItems : array[T] = array(0);

    public this(loc : ILocated, params items : array[T])
    {
      this(loc.File, loc.Span, items)
    }

    public this(file : File, span : NSpan, params items : array[T])
    {
      File   = file;
      Span   = span;
      _items = items ?? EmptyItems;
      foreach (item in _items)
        when (item.File : object == file)
          Span += item.Span;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    protected _items           : array[T];

    public Count             : int   { get { _items.Length } }
    public Item[index : int] : T     { get { _items[index] } }

    public GetEnumerator() : SCG.IEnumerator[T]
    {
      (_items : SCG.IEnumerable[T]).GetEnumerator()
    }

    public override EvalProperties(context : DependentPropertyEvalContext) : void
    {
      foreach (item in _items)
        item.EvalProperties(context);
    }

    public override ToXaml() : string { "List Count: " + _items.Length }

    public override Accept(visitor : IAstVisitor) : void
    {
      foreach (item in _items)
      {
        | x is Reference => visitor.Visit(x);
        | x is Name      => visitor.Visit(x);
        | x              => visitor.Visit(x);
      }
    }

    public Contains(item : T) : bool
    {
      Array.IndexOf(_items, item) >= 0
    }

    public CopyTo(target : array[T], targetIndex : int) : void
    {
      Array.Copy(_items, 0, target, targetIndex, _items.Length)
    }

    public IndexOf(item : T) : int
    {
      Array.IndexOf(_items, item)
    }

    Item1[index : int] : T implements SCG.IList[T].Item
    {
      get { _items[index] }
      set { _ = value; _ = index; throw NotSupportedException() }
    }

    IsReadOnly : bool implements SCG.ICollection[T].IsReadOnly
    {
      get { true }
    }

    Add(_ : T) : void             implements SCG.ICollection[T].Add    { throw NotSupportedException() }
    Clear() : void                implements SCG.ICollection[T].Clear  { throw NotSupportedException() }
    Remove(_ : T) : bool          implements SCG.ICollection[T].Remove { throw NotSupportedException() }
    Insert(_ : int, _ : T) : void implements SCG.IList[T].Insert       { throw NotSupportedException() }
    RemoveAt(_ : int) : void      implements SCG.IList[T].RemoveAt     { throw NotSupportedException() }
  }

  public class AmbiguousAstList[T] : IAstList[T], IAmbiguousAst, SCG.IList[T]
    where T : IAst
  {
    public this(ambiguities : array[IAstList[T]])
    {
      Ambiguities = ambiguities
    }

    public Ambiguities       : array[IAstList[T]] { get; }
    public File              : File               { get { Ambiguities[0].File } }
    public Span              : NSpan              { get { Ambiguities[0].Span } }
    public IsAmbiguous       : bool               { get { true } }
    public IsMissing         : bool               { get { false } }
    public Count             : int                { get { Ambiguities[0].Count } }
    public Item[index : int] : T                  { get { Ambiguities[0][index] } }

    private AmbiguitiesImpl : array[IAst] implements IAmbiguousAst.Ambiguities { get { Ambiguities :> array[IAst] } }

    public GetEnumerator() : SCG.IEnumerator[T]
    {
      (Ambiguities[0] : SCG.IEnumerable[T]).GetEnumerator()
    }

    public virtual EvalProperties(context : DependentPropertyEvalContext) : void
    {
      AstUtils.EvalAmbiguitiesProperties(context, this)
    }

    public PropertiesEvalState : int
    {
      get { Ambiguities[0].PropertiesEvalState }
    }

    public ResetProperties() : void
    {
      AstUtils.ResetAmbiguitiesProperties(this)
    }

    public IsAllPropertiesEvaluated : bool
    {
      get { Ambiguities[0].IsAllPropertiesEvaluated }
    }

    public ToXaml() : string { "<Span Foreground='Red'>AmbiguousList Count: " + Ambiguities.Length + "</Span>" }

    public Accept(visitor : IAstVisitor) : void
    {
      foreach (item in Ambiguities)
        item.Accept(visitor);
    }

    public Contains(item : T) : bool
    {
      (Ambiguities[0] :> SCG.IList[T]).Contains(item)
    }

    public CopyTo(target : array[T], targetIndex : int) : void
    {
      (Ambiguities[0] :> SCG.IList[T]).CopyTo(target, targetIndex)
    }

    public IndexOf(item : T) : int
    {
      (Ambiguities[0] :> SCG.IList[T]).IndexOf(item)
    }

    Item1[index : int] : T implements SCG.IList[T].Item
    {
      get { Ambiguities[0][index] }
      set { _ = value; _ = index; throw NotSupportedException() }
    }

    IsReadOnly : bool implements SCG.ICollection[T].IsReadOnly
    {
      get { true }
    }

    Add(_ : T) : void             implements SCG.ICollection[T].Add    { throw NotSupportedException() }
    Clear() : void                implements SCG.ICollection[T].Clear  { throw NotSupportedException() }
    Remove(_ : T) : bool          implements SCG.ICollection[T].Remove { throw NotSupportedException() }
    Insert(_ : int, _ : T) : void implements SCG.IList[T].Insert       { throw NotSupportedException() }
    RemoveAt(_ : int) : void      implements SCG.IList[T].RemoveAt     { throw NotSupportedException() }
  }
}
