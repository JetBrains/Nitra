using Nitra.Declarations;
using Nitra.Serialization2;

using System;
using System.IO;
using Nemerle.Collections;

namespace Nitra.Declarations
{
  public partial interface ScopedAst : IAst
  {
  }

  public partial interface Declaration : ScopedAst
  {
    IsParsed : bool { get; }
    CreateSymbol() : DeclarationSymbol;
  }

  public partial interface DeclarationSymbol : IDependentPropertyContainer, ISerializable
  {
    Id                        : int         { get; }
    Name                      : string      { get; }
    InitialName               : string      { get; }
    IsNameValid               : bool        { get; }
    Owner                     : TableScope  { get; }
    FirstDeclarationOrDefault : Declaration { get; }
    DeclarationsCount         : int         { get; }
    HasDeclarations           : bool        { get; }
    HasParsedDeclarations     : bool        { get; }

    GetDeclarationsUntyped() : Seq[Declaration];
    AddDeclaration(newDeclaration : Declaration) : void;             // TODO: remove from public interface
    RemoveDeclarations(shouldRemove : Predicate[Declaration]) : int; // TODO: remove from public interface
	/// If return value is greater than 0 it is valid name ID which can be used in StringIndex.GetText().
	/// If return value is 0 the name of symbol is not set.
	/// If return value is less then 0 the name of symbol set more then one time (is ambiguous). 
	///   * You can use bitwise complement (~ operator in C#) to convert returned value to first name id of this symbol if value less then 0.
	///   * All names of symbol you can get in declarations (see GetDeclarations*() methods).
	TryGetNameId() : int;
    CanMerge(candidate : Declaration) : bool;
    IsSameIdentity(candidate : Declaration) : bool;
    AfterStage(stage : int) : void;
    DecomposeType() : ValueOption[TypeStructure];
    ToXaml() : string;
  }
}
