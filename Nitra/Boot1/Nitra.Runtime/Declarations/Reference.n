using Nitra.ProjectSystem;
using Nitra.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public partial class Reference : AstBase
  {
    public this(File : File, Span : NSpan, Id : int)
    {
      this(File, Span);
      this.Id = Id;
    }

    public this(File : File, Span : NSpan, Text : string)
    {
      this(File, Span, StringIndex.GetId(Text));
    }

    public this(located : Located)
    {
      this(located.File, located.Span, located.GetText())
    }

    public virtual  Id   : int    { get; protected set; }
    public          Text : string { get { StringIndex.GetText(Id) } }

    public override ToString() : string { Text }
    public override ToXaml()   : string { AstUtils.XmlEscape(Text) }

    new public sealed partial class AmbiguousOrMissing : Reference, IAmbiguousAst
    {
      public override Id : int
      {
        get
        {
          if (IsAmbiguous)
            Ambiguities[0].Id
          else
          {
            mutable id = base.Id;
            when (id == StringIndex.InvalidId)
            {
              id = StringIndex.GetId("#Missing");
              base.Id = id;
            }
            id
          }
        }
      }
    }
  }
}
