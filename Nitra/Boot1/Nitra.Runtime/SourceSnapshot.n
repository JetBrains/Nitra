using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Utility;

namespace Nitra
{
  public class SourceSnapshot : IPrettyPrintSource
  {
    public OriginalText : string { get; }
    public Text         : string { get; }
    public FileIndex    : int    { get; }
    public FileName     : string { get; }

    private _lineIndexes : array[int];
    private _textOffset  : int;

    public this(original : SourceSnapshot)
    {
      this(original.OriginalText, original.Text, original.FileIndex, original.FileName, original._lineIndexes, original._textOffset);
    }
    
    public this(originalText : string, text : string, fileIndex : int, fileName : string, lineIndexes : array[int], textOffset : int)
    {
      OriginalText = originalText;
      Text         = text;
      FileName     = fileName;
      FileIndex    = fileIndex;
      _lineIndexes = lineIndexes;
      _textOffset  = textOffset;
    }

    public this([NotNull] text : string, fileIndex : int = 0, fileName : string = "")
    {
      this(text, text, fileIndex, fileName, MakeLineIndexes(text), 0);
    }

    public static Default : SourceSnapshot { get; default SourceSnapshot("", -1, "") }

    public PositionToLineColumn(pos : int) : LineColumn
    {
      def pos = _textOffset + pos;

      match (Array.BinarySearch(_lineIndexes, pos))
      {
        | index when index < 0 =>
          def index = ~index;
          if (index > 0)
            LineColumn(index, pos - _lineIndexes[index - 1] + 1)
          else
            LineColumn(1, 1)

        | index =>
          LineColumn(index + 1, pos - _lineIndexes[index] + 1)
      }
    }

    public GetSourceLine(pos : int) : Location
    {
      def pos = _textOffset + pos;
      def (line, col) = PositionToLineColumn(pos);
      def startPos = pos - col + 1;
      def endPos =
        if(line == _lineIndexes.Length)
          Text.Length
        else
          _lineIndexes[line];
      Location(this, startPos, endPos)
    }

    public WithText([NotNull] text : string) : SourceSnapshot
    {
      WithText(text, 0)
    }

    public WithText([NotNull] text : string, textOffset : int) : SourceSnapshot
      requires OriginalText.Length >= text.Length + textOffset
    {
      SourceSnapshot(OriginalText, text, FileIndex, FileName, _lineIndexes, textOffset);
    }

    public WithTextSubstring(pos : int, length : int) : SourceSnapshot
    {
      WithText(Text.Substring(pos, length), _textOffset + pos)
    }

    public GetGarbage(prevPos : int, pos : int) : NSpan
    {
      IgnoreParams();
      NSpan()
    }

    public override ToString() : string
    {
      $<#File index: $FileIndex, File name: $FileName#>
    }

    protected static MakeLineIndexes(text : string) : array[int]
    {
      def lineIndexesBuffer = SCG.List(text.Length / 25);
      lineIndexesBuffer.Add(0);
      mutable pos;
      while (pos < text.Length)
      {
        match (text[pos])
        {
          | '\r' =>
            ++pos;
            when (pos < text.Length && text[pos] == '\n')
              ++pos;
            lineIndexesBuffer.Add(pos);
          | '\n'
          | '\u2028'    /*  line separator       */
          | '\u2029' => /*  paragraph separator  */
            ++pos;
            lineIndexesBuffer.Add(pos);
          | _ =>
            ++pos;
        }
      }
      lineIndexesBuffer.ToArray()
    }
  }
}
