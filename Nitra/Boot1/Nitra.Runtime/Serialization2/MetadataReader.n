using Nitra.ProjectSystem;
using Nitra.Declarations;
using Nitra.Staging;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Reflection;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Serialization2
{
  public sealed class MetadataReader
  {
    private delegate DeserializationHandler(reader : BinaryReader, metadataReader : MetadataReader) : ISerializable;

    public this(project : Project, file : Nitra.ProjectSystem.File)
    {
      Project       = project;
      File          = file;
      ErrorLocation = Location.Default;
    }

    public Project       : Project                  { get; }
    public File          : Nitra.ProjectSystem.File { get; }
    public ErrorLocation : Location                 { get; }

    private _typeDescriptors         : Dictionary[int, MetadataTypeDescriptor] = Dictionary();
    private _deserializationHandlers : Dictionary[int, DeserializationHandler] = Dictionary();
    private _objects                 : Dictionary[int, ISerializable]          = Dictionary();

    public ReadObject[T](reader : BinaryReader) : T
      where T: ISerializable
    {
      def descriptor = reader.ReadInt32();
      if (descriptor != 0)
      {
        def handler = GetDeserializationHandler(descriptor);
        def result  = handler.Invoke(reader, this);
        result :> T
      }
      else
        default(T)
    }

    public ReadType(reader : BinaryReader) : System.Type
    {
      def id = reader.ReadInt32();
      _typeDescriptors[id].Type;
    }

    public ReadObjects[T](reader : BinaryReader) : array[T]
      where T: ISerializable
    {
      def count  = reader.ReadInt32();
      def buffer = array(count);
      for (mutable i = 0; i < buffer.Length; ++i)
        buffer[i] = ReadObject(reader);
      buffer
    }

    public ReadRoot(root : DeclarationSymbol, stream : Stream) : void
    {
      try
      {
        _objects[MetadataDefaults.RootSymbolId] = root;
        _objects[MetadataDefaults.RootScopeId]  = root.Scope;

        def reader = BinaryReader(stream, MetadataDefaults.Encoding);
        def assemblyCount = reader.ReadInt32();
        for (mutable assemblyIndex = 0; assemblyIndex < assemblyCount; ++assemblyIndex)
        {
          def fullName = reader.ReadString();
          def assembly = LoadAssembly(fullName);
          def typeCount = reader.ReadInt32();
          for (mutable typeIndex = 0; typeIndex < typeCount; ++typeIndex)
          {
            def typeName = reader.ReadString();
            def id       = reader.ReadInt32();
            def argCount = reader.ReadInt32();
            def type     = LoadType(assembly, typeName);
            def descriptor =
              if (argCount > 0)
                MetadataTypeDescriptor.GenericDefinition(id, type, argCount)
              else
                MetadataTypeDescriptor.Simple(id, type);

            _typeDescriptors.Add(id, descriptor)
          }
        }

        def genericTypeCount = reader.ReadInt32();
        for (mutable typeIndex = 0; typeIndex < genericTypeCount; ++typeIndex)
        {
          def id            = reader.ReadInt32();
          def definitionId  = reader.ReadInt32();
          def definition    = _typeDescriptors[definitionId] :> MetadataTypeDescriptor.GenericDefinition;
          def arguments     = array(definition.ArgumentCount);
          def argumentTypes = array(arguments.Length);
          for (mutable index = 0; index < arguments.Length; ++index)
          {
            def argumentId       = reader.ReadInt32();
            def argument         = _typeDescriptors[argumentId];
            arguments[index]     = argument;
            argumentTypes[index] = argument.Type;
          }
          def type       = definition.Type.MakeGenericType(argumentTypes);
          def descriptor = MetadataTypeDescriptor.Generic(id, type, definition, arguments.ToNList());
          _typeDescriptors.Add(id, descriptor)
        }

        def symbolCount = reader.ReadInt32();
        repeat (symbolCount)
          _ = ReadObject(reader);
      }
      finally
      {
        _typeDescriptors.Clear();
        _deserializationHandlers.Clear();
        _objects.Clear();
      }
    }

    private LoadAssembly(fullName : string) : Assembly
    {
      foreach (assembly in AppDomain.CurrentDomain.GetAssemblies())
        when(assembly.FullName == fullName)
          return assembly;
      Assembly.Load(fullName)
    }

    private LoadType(assembly : Assembly, typeName : string) : System.Type
    {
      def type = assembly.GetType(typeName, throwOnError = false);
      assert(type != null, $"Failed to find type '$typeName' from assembly '$assembly'.");
      type
    }

    private GetDeserializationHandler(id : int) : DeserializationHandler
    {
      mutable handler;
      unless (_deserializationHandlers.TryGetValue(id, out handler))
      {
        def type   = _typeDescriptors[id].Type;
        def method = type.GetMethod("Deserialize", BindingFlags.Public | BindingFlags.Static);
        assert(method != null, $"Failed to find method 'Deserialize' in type '$type'.");
        handler = Delegate.CreateDelegate(typeof(DeserializationHandler), method) :> DeserializationHandler;

        _deserializationHandlers.Add(id, handler);
      }
      handler
    }

    public BeginReadObject[T](reader : BinaryReader, obj : out T, factory : Func[BinaryReader, MetadataReader, T] = null) : bool
      where T: ISerializable
    {
      def id = reader.ReadInt32();
      if (id < 0)
      {
        def newObj = if (factory == null) Activator.CreateInstance() else factory(reader, this);
        _objects.Add(~id, newObj);
        obj = newObj;
        true
      }
      else
      {
        obj = _objects[id] :> T;
        false
      }
    }

    public BeginReadSymbol[TSymbol](reader : BinaryReader, obj : out TSymbol) : bool
      where TSymbol: DeclarationSymbol, new()
    {
      def id = reader.ReadInt32();
      if (id < 0)
      {
        def nameText        = reader.ReadString();
        def owner           = ReadObject.[ISerializable](reader);
        def containingScope =
          match (owner)
          {
            | null                        => null
            | scope  is Scope             => scope
            | symbol is DeclarationSymbol => symbol.Scope
            | _ => assert(false)
          };

        def isParsed = reader.ReadBoolean();
        obj =
          if (isParsed)
          {
            def name        = Name(this.File, NSpan(), nameText);
            def declaration = ExternalDeclaration.[TSymbol](name);
            declaration.DefineSymbol(containingScope :> TableScope)
          }
          else
          {
            assert(containingScope : object != null, "External symbol has no owner scope.");

            def reference      = Reference(this.File, NSpan(), nameText);
            mutable candidates = LightList();
            containingScope.BindMany(reference, ref candidates);
            match (candidates.Count)
            {
              | 0 => assert(false, $"Failed to lookup reference to external symbol '$reference'");
              | 1 => candidates.FirstItem
              | _ => assert(false, $"Ambiguous symbol reference '$reference'");
            }
          };

        _objects.Add(~id, obj);
        isParsed
      }
      else
      {
        obj = _objects[id] :> TSymbol;
        false
      }
    }
  }
}
