using Nitra.Declarations;
using Nitra.ProjectSystem;
using Nitra.Staging;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Reflection;
using System.IO;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Serialization2
{
  public sealed class MetadataWriter
  {
    public this(project : Project)
    {
      Project = project;
    }

    public Project : Project { get; }

    private _typeDescriptors : SCG.Dictionary[System.Type, MetadataTypeDescriptor] = SCG.Dictionary();
    private _objects         : SCG.Dictionary[ISerializable, int]             = SCG.Dictionary();
    private _symbols         : SCG.Queue[DeclarationSymbol]                   = SCG.Queue();

    private GetTypeDescriptor(type : System.Type) : MetadataTypeDescriptor
    {
      mutable descriptor;
      unless (_typeDescriptors.TryGetValue(type, out descriptor))
      {
        descriptor =
          if (type.IsGenericTypeDefinition)
            MetadataTypeDescriptor.GenericDefinition(_typeDescriptors.Count + 1, type, type.GetGenericArguments().Length)
          else if (type.IsGenericType)
          {
            def definition = GetTypeDescriptor(type.GetGenericTypeDefinition());
            def arguments  = type.GetGenericArguments().MapToList(GetTypeDescriptor);
            MetadataTypeDescriptor.Generic(_typeDescriptors.Count + 1, type, definition, arguments);
          }
          else
            MetadataTypeDescriptor.Simple(_typeDescriptors.Count + 1, type);

        _typeDescriptors.Add(type, descriptor);
      }
      descriptor
    }

    public WriteType(type : System.Type, writer : BinaryWriter) : void
    {
      def descriptor = GetTypeDescriptor(type);
      writer.Write(descriptor.Id : int);
    }

    public WriteObject(obj : ISerializable, writer : BinaryWriter) : void
    {
      if (obj != null)
      {
        WriteType(obj.GetType(), writer);
        obj.Serialize(writer, this);
      }
      else
        writer.Write(0 : int);
    }

    public WriteObjects[T](items : list[T], writer : BinaryWriter) : void
      where T: ISerializable
    {
      writer.Write(items.Length : int);
      foreach (item in items)
        WriteObject(item, writer);
    }

    public WriteObjects[T](items : System.Collections.Generic.ICollection[T], writer : BinaryWriter) : void
      where T: ISerializable
    {
      writer.Write(items.Count : int);
      foreach (item in items)
        WriteObject(item, writer);
    }

    public WriteRoot(root : DeclarationSymbol, stream : Stream) : void
    {
      try
      {
        _objects[root]       = MetadataDefaults.RootSymbolId;
        _objects[root.Scope] = MetadataDefaults.RootScopeId;

        using (symbolBuffer = MemoryStream())
        {
          def symbolWriter = BinaryWriter(symbolBuffer, MetadataDefaults.Encoding);
          (root.Scope :> TableScope).EnqueueSymbols(this);

          mutable symbolCount = 0;
          while (_symbols.Count > 0)
          {
            def symbol = _symbols.Dequeue();
            unless (_objects.ContainsKey(symbol))
            {
              WriteObject(symbol, symbolWriter);
              ++symbolCount;
            }
          }

          def writer = BinaryWriter(stream, MetadataDefaults.Encoding);
          def normalTypes = _typeDescriptors.Values.Where(t => !(t is MetadataTypeDescriptor.Generic)).GroupBy(d => d.Type.Assembly).ToList();
          writer.Write(normalTypes.Count : int);
          foreach (group in normalTypes)
          {
            writer.Write(group.Key.FullName);
            writer.Write(group.Count() : int);
            foreach (type in group.OrderBy(t => t.Id))
            {
              writer.Write(type.Type.FullName);
              writer.Write(type.Id : int);
              def argCount = if (type is MetadataTypeDescriptor.GenericDefinition(argCount)) argCount else 0;
              writer.Write(argCount : int);
            }
          }

          def genericTypes = _typeDescriptors.Values.OfType.[MetadataTypeDescriptor.Generic]().OrderBy(t => t.Id).ToList();
          writer.Write(genericTypes.Count : int);
          foreach (type in genericTypes)
          {
            writer.Write(type.Id : int);
            writer.Write(type.Definition.Id : int);
            foreach (arg in type.Arguments)
              writer.Write(arg.Id : int);
          }

          writer.Write(symbolCount);
          symbolBuffer.WriteTo(stream);
        }
      }
      finally
      {
        _typeDescriptors.Clear();
        _objects.Clear();
        _symbols.Clear();
      }
    }

    public BeginWriteObject(obj : ISerializable, writer : BinaryWriter) : bool
    {
      mutable existingId;
      if (_objects.TryGetValue(obj, out existingId))
      {
        writer.Write(existingId : int);
        false
      }
      else
      {
        def newId = _objects.Count + 1;
        _objects.Add(obj, newId);
        writer.Write(~newId : int);
        true
      }
    }

    public BeginWriteSymbol(obj : DeclarationSymbol, writer : BinaryWriter) : bool
    {
      if (BeginWriteObject(obj, writer))
      {
        writer.Write(obj.InitialName);

        def containingScope = obj.Owner;
        def container =
          if (containingScope : object != null)
          {
            def containingSymbol = containingScope.Owner;
            if (containingSymbol != null && containingSymbol.IsScopeEvaluated && containingSymbol.Scope : object == containingScope)
              containingSymbol
            else
              containingScope
          }
          else
            null;

        WriteObject(container, writer);

        def isParsed = obj.HasParsedDeclarations;
        writer.Write(isParsed : bool);
        isParsed
      }
      else
        false
    }

    internal EnqueueSymbol(symbol : DeclarationSymbol) : void
    {
      _symbols.Enqueue(symbol)
    }
  }
}
