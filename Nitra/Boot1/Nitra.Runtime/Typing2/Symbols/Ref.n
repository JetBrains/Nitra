using Nitra;
using Nitra.ProjectSystem;
using Nitra.Internal;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public interface IRef : ILocated, ISerializable
  {
    Name        : string    { get; }
    IsNameValid : bool      { get; }

    IsUnresolved : bool  { get; }
    IsAmbiguous  : bool  { get; }
    Ambiguities  : Seq[DeclarationSymbol] { get; }

    [DependentProperty("IsFullNameEvaluated")]
    FullName            : string { get; }
    IsFullNameEvaluated : bool   { get; }

    [DependentProperty("IsKindEvaluated")]
    Kind            : string { get; }
    IsKindEvaluated : bool   { get; }

    [DependentProperty("IsSpanClassEvaluated")]
    SpanClass            : SpanClass { get; }
    IsSpanClassEvaluated : bool      { get; }

    [DependentProperty("IsSymbolEvaluated")]
    Symbol            : DeclarationSymbol { get; }
    IsSymbolEvaluated : bool              { get; }

    [DependentProperty("IsScopeEvaluated")]
    Scope             : Scope    { get; }
    IsScopeEvaluated  : bool     { get; }

    [DependentProperty("IsResolvedToEvaluated")]
    ResolvedTo            : IRef { get; }
    IsResolvedToEvaluated : bool { get; }

    Resolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[DeclarationSymbol, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol;

    GetSymbols() : Seq[DeclarationSymbol];
  }

  [Record]
  public variant Ref[TSymbol] : IRef
    where TSymbol : DeclarationSymbol
  {
    public          File        : Nitra.ProjectSystem.File { get; }
    public          Span        : NSpan     { get; }
    public abstract Name        : string    { get; }
    public abstract IsNameValid : bool      { get; }

    [DependentProperty("IsFullNameEvaluated")]
    public abstract FullName            : string { get; }
    public abstract IsFullNameEvaluated : bool   { get; }

    [DependentProperty("IsKindEvaluated")]
    public abstract Kind            : string { get; }
    public abstract IsKindEvaluated : bool   { get; }

    [DependentProperty("IsSpanClassEvaluated")]
    public abstract SpanClass            : SpanClass { get; }
    public abstract IsSpanClassEvaluated : bool      { get; }

    [DependentProperty("IsSymbolEvaluated")]
    public abstract Symbol            : TSymbol { get; }
    public abstract IsSymbolEvaluated : bool    { get; }

    [RecordIgnore]
    private mutable _resolvedTo : IRef;

    [DependentProperty("IsResolvedToEvaluated")]
    public ResolvedTo             : IRef { get { _resolvedTo } }
    public IsResolvedToEvaluated  : bool { get { _resolvedTo != null } }

    public virtual IsUnresolved : bool  { get { false } }
    public virtual IsAmbiguous  : bool  { get { false } }

    AmbiguitiesImpl : Seq[DeclarationSymbol]
      implements IRef.Ambiguities
    {
      get
      {
        match (this)
        {
          | Ambiguous as a => a.Ambiguities
          | _ => []
        }
      }
    }

    public IsAllPropertiesEvaluated : bool  { get { true } }
    public PropertiesEvalState      : int   { get { 0 } }

    [DependentProperty("IsScopeEvaluated")]
    public abstract Scope            : Scope { get; }
    public abstract IsScopeEvaluated : bool  { get; }

    public Resolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol
      requires !IsResolvedToEvaluated
    {
      def algorithm = algorithm ?? ResolutionAlgorithms.TryCast;

      def result = ResolveImpl.[TConcreteSymbol](algorithm);
      _resolvedTo = result;
      result
    }

    ResolveItfImpl[TConcreteSymbol](algorithm : ResolutionAlgorithm[DeclarationSymbol, TConcreteSymbol]) : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol
      implements IRef.Resolve
    {
      // type cast avoids invalid IL
      Resolve((algorithm : object) :> ResolutionAlgorithm[TSymbol, TConcreteSymbol])
    }

    protected abstract ResolveImpl[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol]) : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol;

    public override ToString() : string { Name + " (" + Kind + ")" }
    public abstract GetSymbols() : Seq[DeclarationSymbol];
    public abstract Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void;

    protected static TryResolveAlias[TConcreteSymbol](symbol : DeclarationSymbol, algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol], result : ref ValueOption[TConcreteSymbol]) : void
      where TConcreteSymbol : DeclarationSymbol
    {
      when (symbol is AliasSymbol(IsReplacementEvaluated = true, Replacement = IRef(IsSymbolEvaluated = true, Symbol = s is TSymbol)))
        result = algorithm(s);
    }

    | Some
      {
        public override Name        : string    { get { Symbol.Name } }
        public override IsNameValid : bool      { get { Symbol.IsNameValid } }

        [DependentProperty("IsFullNameEvaluated")]
        public override FullName            : string { get { Symbol.FullName } }
        public override IsFullNameEvaluated : bool   { get { Symbol.IsFullNameEvaluated } }
  
        [DependentProperty("IsKindEvaluated")]
        public override Kind            : string { get { Symbol.Kind } }
        public override IsKindEvaluated : bool   { get { Symbol.IsKindEvaluated } }
  
        [DependentProperty("IsSpanClassEvaluated")]
        public override SpanClass            : SpanClass { get { Symbol.SpanClass } }
        public override IsSpanClassEvaluated : bool      { get { Symbol.IsSpanClassEvaluated } }

        [DependentProperty("IsSymbolEvaluated")]
        public override Symbol            : TSymbol { get; }
        public override IsSymbolEvaluated : bool    { get { true } }

        [DependentProperty("IsScopeEvaluated")]
        public override Scope            : Scope { get { Symbol.Scope } }
        public override IsScopeEvaluated : bool  { get { Symbol.IsScopeEvaluated } }

        protected override ResolveImpl[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol]) : Ref[TConcreteSymbol]
        {
          mutable result = algorithm(Symbol);
          unless (result.HasValue)
            TryResolveAlias(Symbol, algorithm, ref result);
          match (result)
          {
            | VSome(symbol) => Ref.Some(File, Span, symbol)
            | VNone         => Ref.Unresolved(File, Span, Name, ResolutionSource.Resolve(this))
          }
        }

        public override GetSymbols() : Seq[DeclarationSymbol]
        {
          // type hint avoids invalid IL
          array[Symbol : DeclarationSymbol]
        }
        public override GetHashCode() : int { Symbol.GetHashCode() }
        public override Equals(other : object) : bool
        {
          | other is Some => this.Symbol.Equals(other.Symbol)
          | _ => false
        }

        public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
        {
          metadataWriter.WriteObject(File, writer);
          metadataWriter.WriteObject(Symbol, writer);
        }

        public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
        {
          def file   = metadataReader.ReadObject(reader);
          def symbol = metadataReader.ReadObject(reader);
          Ref.Some(file, NSpan(), symbol)
        }
      }

    | Unresolved
      {
        public override Name        : string           { get; }
        public          Source      : ResolutionSource { get; }
        public override IsNameValid : bool             { get { true } }

        [DependentProperty("IsFullNameEvaluated")]
        public override FullName            : string { get { Name } }
        public override IsFullNameEvaluated : bool   { get { true } }
  
        [DependentProperty("IsKindEvaluated")]
        public override Kind            : string { get { "unresolved" } }
        public override IsKindEvaluated : bool   { get { true } }
  
        [DependentProperty("IsSpanClassEvaluated")]
        public override SpanClass            : SpanClass { get { Language.ErrorSpanClass } }
        public override IsSpanClassEvaluated : bool      { get { true } }

        [DependentProperty("IsSymbolEvaluated")]
        public override Symbol            : TSymbol { get { assert(false, "Ref is unresolved.") } }
        public override IsSymbolEvaluated : bool    { get { false } }

        [DependentProperty("IsScopeEvaluated")]
        public override Scope            : Scope { get { EmptyScope.Instance } }
        public override IsScopeEvaluated : bool  { get { true } }

        public override IsUnresolved : bool  { get { true } }

        protected override ResolveImpl[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol]) : Ref[TConcreteSymbol]
        {
          _ = algorithm;
          Ref.Unresolved(File, Span, Name, ResolutionSource.Resolve(this))
        }

        public override GetSymbols() : Seq[DeclarationSymbol] { Enumerable.Empty() }
        public override GetHashCode() : int { Name.GetHashCode() }
        public override Equals(other : object) : bool
        {
          | other is Unresolved => EqualityComparer.Default.Equals(this.File, other.File) && this.Span.Equals(other.Span) && StringComparer.Ordinal.Equals(this.Name, other.Name)
          | _ => false
        }

        public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
        {
          metadataWriter.WriteObject(File, writer);
          writer.Write(Name : string);
        }

        public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
        {
          def file = metadataReader.ReadObject(reader);
          def name = reader.ReadString();
          Ref.Unresolved(file, NSpan(), name, ResolutionSource.Unknown())
        }
      }

    | Ambiguous
      {
        public          Ambiguities : list[TSymbol]    { get; }
        public          Source      : ResolutionSource { get; }

        public override Name        : string    { get { Ambiguities.Head.Name } }
        public override IsNameValid : bool      { get { Ambiguities.Head.IsNameValid } }

        [DependentProperty("IsFullNameEvaluated")]
        public override FullName            : string { get { Ambiguities.Head.FullName } }
        public override IsFullNameEvaluated : bool   { get { Ambiguities.Head.IsFullNameEvaluated } }
  
        [DependentProperty("IsKindEvaluated")]
        public override Kind            : string { get { "ambiguous" } }
        public override IsKindEvaluated : bool   { get { true } }
  
        [DependentProperty("IsSpanClassEvaluated")]
        public override SpanClass            : SpanClass { get { Language.ErrorSpanClass } }
        public override IsSpanClassEvaluated : bool      { get { true } }

        [DependentProperty("IsSymbolEvaluated")]
        public override Symbol            : TSymbol          { get { assert(false, "Ref is ambiguous.") } }
        public override IsSymbolEvaluated : bool             { get { false } }

        [RecordIgnore] private mutable _scope : Scope;

        [DependentProperty("IsScopeEvaluated")]
        public override Scope            : Scope
        {
          get
          {
            when (_scope : object == null)
            {
              mutable acc = EmptyScope.Instance : Scope;
              foreach (s in Ambiguities)
                acc = acc.UnionWith(s.Scope);
              _scope = acc;
            }
            _scope
          }
        }

        public override IsScopeEvaluated : bool
        {
          get
          {
            when (_scope : object == null)
              foreach (s in Ambiguities)
                unless (s.IsScopeEvaluated)
                  return false;
            true
          }
        }

        public          AllDeclarations   : Seq[Declaration] { get { Ambiguities.SelectMany(_.Declarations) } }

        public override IsAmbiguous  : bool  { get { true } }

        protected override ResolveImpl[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol]) : Ref[TConcreteSymbol]
        {
          def results = LightList.[TConcreteSymbol]();
          foreach (symbol in Ambiguities)
          {
            mutable result = algorithm(symbol);
            unless (result.HasValue)
              TryResolveAlias(symbol, algorithm, ref result);
            when (result is VSome(symbol))
              results.Add(symbol);
          }

          match (results.Count)
          {
            | 0 => Ref.Unresolved(File, Span, Name, ResolutionSource.Resolve(this))
            | 1 => Ref.Some(File, Span, results.FirstItem)
            | _ => Ref.Ambiguous(File, Span, results.ToNList(), ResolutionSource.Resolve(this))
          }
        }

        public override GetSymbols() : Seq[DeclarationSymbol]
        {
          // cast avoids invalid IL
          (Ambiguities : object) :> Seq[DeclarationSymbol]
        }
        public override ToString() : string { $<#$Kind: ..$(Ambiguities; " "; _.FullName)#> }
        public override GetHashCode() : int { Ambiguities.GetHashCode() }
        public override Equals(other : object) : bool
        {
          | other is Ambiguous => this.Ambiguities.Equals(other.Ambiguities)
          | _ => false
        }

        public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
        {
          metadataWriter.WriteObject(File, writer);
          metadataWriter.WriteObjects(Ambiguities, writer);
        }

        public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
        {
          def file    = metadataReader.ReadObject(reader);
          def symbols = metadataReader.ReadObjects(reader);
          Ref.Ambiguous(file, NSpan(), symbols.ToNList(), ResolutionSource.Unknown())
        }
      }
  }
}
