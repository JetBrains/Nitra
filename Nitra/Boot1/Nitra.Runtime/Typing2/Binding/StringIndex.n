using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Threading;
using System.Collections.Concurrent;

namespace Nitra.Internal
{
  public module StringIndex
  {
    public static InvalidId = 0;

    private _initialTableSize = 1024;

    private _tableLock     : object = object();
    private mutable _table : array[string] = array(_initialTableSize);
    private mutable _index : int;

    private _internTable : ConcurrentDictionary[string, int] = ConcurrentDictionary(Environment.ProcessorCount * 4, _initialTableSize, StringComparer.InvariantCulture);

    public GetId([NotNull] text : string) : int
    {
      def internTable = _internTable;
      mutable result;
      when (internTable.TryGetValue(text, out result))
        return result;

      lock (_tableLock)
      {
        when (internTable.TryGetValue(text, out result))
          return result;

        def id = _index + 1;
        when (id >= _table.Length)
          Array.Resize(ref _table, _table.Length * 2);
        _table[id] = text;
        _index = id;
        internTable.GetOrAdd(text, id)
      }
    }

    public GetText(id : int) : string
    {
      def text =  _table[id];
      assert(text : object != null, "Text is null");
      text
    }
  }
}
