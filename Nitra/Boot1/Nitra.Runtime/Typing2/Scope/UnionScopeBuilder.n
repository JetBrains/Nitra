using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  internal struct UnionScopeBuilder
  {
    mutable _scopes : HashSet[Scope];
    mutable _scope1 : Scope;
    mutable _scope2 : Scope;
    mutable _scope3 : Scope;
    mutable _scope4 : Scope;

    public this(scopes : array[Scope])
    {
      def length = scopes.Length;
      if (length > 4)
        _scopes = HashSet(scopes);
      else if (length > 3)
        _scope4 = scopes[3];
      else if (length > 2)
        _scope3 = scopes[2];
      else if (length > 1)
        _scope2 = scopes[1];
      else when (length > 0)
        _scope1 = scopes[0];
    }

    public static Add(scope : Scope, builder : ref UnionScopeBuilder) : void
    {
      // TODO: create LightSet[T]

      if (Scope.IsNullOrEmpty(scope))
        ()
      else if (scope is UnionScope(Scopes = scopes))
        foreach (s in scopes)
          Add(s, ref builder);
      else if (builder._scopes : object != null)
        _ = builder._scopes.Add(scope)
      else if (builder._scope1 : object == null)
        builder._scope1 = scope;
      else if (builder._scope2 : object == null)
        unless (builder._scope1.Equals(scope))
          builder._scope2 = scope;
      else if (builder._scope3 : object == null)
        unless (builder._scope1.Equals(scope))
        unless (builder._scope2.Equals(scope))
          builder._scope3 = scope;
      else if (builder._scope4 : object == null)
        unless (builder._scope1.Equals(scope))
        unless (builder._scope2.Equals(scope))
        unless (builder._scope3.Equals(scope))
          builder._scope4 = scope;
      else
      {
        def scopes = HashSet();
        _ = scopes.Add(builder._scope1);
        _ = scopes.Add(builder._scope2);
        _ = scopes.Add(builder._scope3);
        _ = scopes.Add(builder._scope4);
        _ = scopes.Add(scope);
        builder._scopes = scopes;
      }
    }

    public ToScope() : Scope
    {
      if (_scopes != null)
        UnionScope(_scopes.ToArray())
      else if (_scope4 : object != null)
        UnionScope(array[_scope1, _scope2, _scope3, _scope4])
      else if (_scope3 : object != null)
        UnionScope(array[_scope1, _scope2, _scope3])
      else if (_scope2 : object != null)
        UnionScope(array[_scope1, _scope2])
      else if (_scope1 : object != null)
        _scope1
      else
        EmptyScope.Instance
    }
  }
}
