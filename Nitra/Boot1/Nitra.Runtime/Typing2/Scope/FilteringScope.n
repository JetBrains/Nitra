using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  [Record, StructuralEquality]
  public sealed class FilteringScope : Scope
  {
    public Scope     : Scope                         { get; }
    public Predicate : Func[DeclarationSymbol, bool] { get; }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      this.Scope.FindMany(fun(symbol : TSymbol) { Predicate.Invoke(symbol) && predicate(symbol) }, ref results);
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      mutable notFilteredResults = LightList();
      Scope.BindMany(reference, ref notFilteredResults);

      // 'foreach' causes invalid IL
      def e = notFilteredResults.GetEnumerator();
      while (e.MoveNext())
        when (Predicate.Invoke(e.Current))
          results.Add(e.Current);
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      Scope.MakeCompletionList(prefix).Where(Predicate)
    }

    public override ToString() : string
    {
      "Filter"
    }

    public override FilterWith(predicate : Func[DeclarationSymbol, bool]) : Scope
    {
      if (Predicate == predicate)
        this
      else
        base.FilterWith(predicate)
    }

    public override UnionWith(scope : Scope) : Scope
    {
      // filter(s1, p) + filter(s2, p) -> filter(s1 + s2, p)
      if (scope is FilteringScope(Scope = otherScope, Predicate = otherPred) when Predicate == otherPred)
        Scope.UnionWith(otherScope).FilterWith(Predicate)
      else
        base.UnionWith(scope)
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(Scope, writer);

      def method = Predicate.Method;
      metadataWriter.WriteType(method.DeclaringType, writer);
      writer.Write(method.Name);

      if (method.IsStatic)
        metadataWriter.WriteObject(null, writer);
      else if (Predicate.Target is ISerializable as target)
        metadataWriter.WriteObject(target, writer);
      else
        assert(false, $"Cannot serialize predicate '$(Predicate)': method must be static or target must implement interface 'Nitra.Serlialization2.ISerializable'.")
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      def scope      = metadataReader.ReadObject(reader);
      def type       = metadataReader.ReadType(reader);
      def name       = reader.ReadString();
      def target     = metadataReader.ReadObject(reader);
      def methodInfo = type.GetMethod(name, array[typeof(DeclarationSymbol)]);
      assert(methodInfo : object != null, $"Method '$(name)' not found in type '$(type)'.");
      def predicate  = Delegate.CreateDelegate(typeof(Func[DeclarationSymbol, bool]), target, methodInfo) :> Func[DeclarationSymbol, bool];
      FilteringScope(scope, predicate)
    }
  }
}
