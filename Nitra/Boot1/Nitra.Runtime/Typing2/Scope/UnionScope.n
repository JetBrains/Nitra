using Nitra.Serialization2;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public sealed class UnionScope : Scope
  {
    internal Scopes : array[Scope] { get; }

    internal this(scopes : array[Scope])
    {
      Scopes = scopes;
    }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      foreach (scope in Scopes)
        scope.FindMany(predicate, ref results);
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      foreach (scope in Scopes)
        scope.BindMany(reference, ref results)
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      Scopes.SelectMany(_.MakeCompletionList(prefix))
    }

    public override ToString() : string
    {
      $<# Union(..$(Scopes))#>
    }

    public override Equals(other : object) : bool
    {
      | UnionScope(Scopes = otherScopes) =>
        // TODO: use LightSet[T]
        this.Scopes.Length == otherScopes.Length && HashSet(this.Scopes).SetEquals(otherScopes)

      | _ => false
    }

    public override GetHashCode() : int
    {
      unchecked 
      {
        mutable acc = Scopes.Length << 2;
        foreach (s in Scopes)
          acc ^= s.GetHashCode();
        acc
      }
    }

    public override UnionWith(scope : Scope) : Scope
    {
      if (IsNullOrEmpty(scope))
        this
      else
      {
        mutable builder = UnionScopeBuilder(Scopes);
        UnionScopeBuilder.Add(scope, ref builder);
        builder.ToScope();
      }
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObjects(Scopes, writer);
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      def scopes = metadataReader.ReadObjects(reader);
      UnionScope(scopes);
    }
  }
}
