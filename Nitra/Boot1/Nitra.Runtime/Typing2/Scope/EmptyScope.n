using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public sealed class EmptyScope : Scope
  {
    public static Instance : EmptyScope = EmptyScope();

    private this() { }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      IgnoreParams();
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      IgnoreParams()
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      IgnoreParams();
      Enumerable.Empty();
    }

    public override ToString() : string
    {
      "<Empty>"
    }

    public override HideWith(scope : Scope) : Scope
    {
      scope ?? this
    }

    public override UnionWith(scope : Scope) : Scope
    {
      scope ?? this
    }

    public override FilterWith(predicate : Func[DeclarationSymbol, bool]) : Scope
    {
      _ = predicate;
      this
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      IgnoreParams();
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      IgnoreParams();
      Instance
    }
  }
}
