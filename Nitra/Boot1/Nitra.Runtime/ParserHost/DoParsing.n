using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using System.Threading;

using SCG = System.Collections.Generic;

namespace Nitra
{
  public partial class ParserHost
  {
    public DoParsing(source : SourceSnapshot, descriptor : StartRuleDescriptor, recoveryStrategy : RecoveryStrategy = null) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor, recoveryStrategy);
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : StartRuleDescriptor, recoveryStrategy : RecoveryStrategy = null) : ParseResult
    {
      match (descriptor)
      {
        | desc is SimpleRuleDescriptor     => DoParsingImpl(source, 0, grammar.GetSimpleRuleParser(desc), recoveryStrategy, VNone())
        | desc is ExtensibleRuleDescriptor => DoParsingImpl(source, 0, grammar.GetExtensibleRuleParser(desc, 0), recoveryStrategy, VNone())
        | _ => assert3(false, "DoParsing support only SimpleRuleDescriptor or ExtensibleRuleDescriptor")
      }
    }

    public DoParsing(source : SourceSnapshot, descriptor : StartRuleDescriptor, recoveryStrategy : RecoveryStrategy, token : CancellationToken) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor, recoveryStrategy, token);
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : StartRuleDescriptor, recoveryStrategy : RecoveryStrategy, token : CancellationToken) : ParseResult
    {
      match (descriptor)
      {
        | desc is SimpleRuleDescriptor     => DoParsingImpl(source, 0, grammar.GetSimpleRuleParser(desc), recoveryStrategy, VSome(token))
        | desc is ExtensibleRuleDescriptor => DoParsingImpl(source, 0, grammar.GetExtensibleRuleParser(desc, 0), recoveryStrategy, VSome(token))
        | _ => assert3(false, "DoParsing support only SimpleRuleDescriptor or ExtensibleRuleDescriptor")
      }
    }

    private DoParsingImpl(source : SourceSnapshot, startPos : int, ruleParser : StartRuleParser, recoveryStrategy : RecoveryStrategy, token : ValueOption[CancellationToken]) : ParseResult
    {
      def parseResult = ParseResult(source, startPos, source.Text.Length * 10, this, ruleParser);
      def registration = match(token)
      {
        | VSome(token) => VSome(token.Register(() => parseResult.TerminateParsing = true))
        | VNone        => VNone()
      };
      try
      {
        _ = parseResult.Allocate(2);
        mutable res = ruleParser.Parse(startPos, parseResult.Text, parseResult);
        when (res < 0)
        {
          res = if (recoveryStrategy == null)
          {
            assert3(this.RecoveryStrategy != null);
            this.RecoveryStrategy(parseResult);
          }
          else
            recoveryStrategy(parseResult);
        }
        assert3(res >= 0);

        parseResult.ast[ParseResult.ResultOffset] = res;

        parseResult
      }
      finally
      {
        when (registration is VSome(registration))
          registration.Dispose();
      }
    }
  }
}
