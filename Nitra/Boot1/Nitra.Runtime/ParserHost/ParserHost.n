using Nemerle;
using Nemerle.Imperative;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nitra.Internal;
using Nitra.Runtime;
using Nitra.Strategies;

using System;
using System.Linq;
using System.Reflection;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public partial class ParserHost
  {
    internal _syncRoot : object = object();

    private DefaultCompositeGrammar : CompositeGrammar;

    internal AssemblyScope : Func[Seq[Assembly]] { get; }

    public RecoveryStrategy : RecoveryStrategy { get; set; }

    public this()
    {
      this(DefaultAssemblyScope, parseResult => Recovery().Strategy(parseResult)) // TODO: Recovery.Strategy не реентерабельный!
    }

    public this([NotNull] recoveryStrategy : RecoveryStrategy)
    {
      this(DefaultAssemblyScope, recoveryStrategy)
    }

    public this(assemblyScope : Func[Seq[Assembly]])
    {
      this(assemblyScope, parseResult => Recovery().Strategy(parseResult)) // TODO: Recovery.Strategy не реентерабельный!
    }

    public this([NotNull] assemblyScope : Func[Seq[Assembly]], [NotNull] recoveryStrategy : RecoveryStrategy)
    {
      DefaultCompositeGrammar = CompositeGrammar(this);
      _compositeGrammars.Add(DefaultCompositeGrammar.Grammars, DefaultCompositeGrammar);
      AssemblyScope    = assemblyScope;
      RecoveryStrategy = recoveryStrategy;
    }

    internal RuleParsers[ruleId : int] : object
    {
      get { _allRules[ruleId] }
    }

    internal ErrorId : int
    {
      get
      {
        foreach (parser in _allRules with id)
        {
          | SimpleRuleParser as parser =>
            when (parser.Descriptor.Name == "s")//TODO: Hardcode
            {
              def info = parser.Reflection(id);
              when (info.Description == "IgnoreToken")
                return id;
            }
          | _ => ()
        }
        assert(false);
      }
    }

    public static DefaultAssemblyScope : Func[Seq[Assembly]] = () => AppDomain.CurrentDomain.GetAssemblies();
  }
}
