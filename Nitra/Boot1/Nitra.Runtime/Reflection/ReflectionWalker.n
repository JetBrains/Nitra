using Nemerle;
using Nemerle.Surround;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Reflection
{
  internal sealed class ReflectionWalker : AstWalkerBase[List[ReflectionStruct]]
  {
    private static emptyNodes : ReadOnlyCollection[ReflectionStruct] = ReadOnlyCollection(array[]);

    private static CreateNode(name : string, startPos : int, endPos : int, children : ReadOnlyCollection[ReflectionStruct]) : ReflectionStruct
    {
      if (endPos >= 0)
        ReflectionStruct(name, NSpan(startPos, endPos), children);
      else
        ReflectionStruct("Failed: " + name, NSpan(startPos, startPos), children);
    }

    private static ToReadOnly(nodes : List[ReflectionStruct]) : ReadOnlyCollection[ReflectionStruct]
    {
      if (nodes.Count > 0)
        ReadOnlyCollection(nodes.ToArray())
      else
        emptyNodes;
    }

    public override OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = 
        if (ruleInfo.IsOptimized)
          "SkipAnyPattern: " + ruleInfo.Description
        else
          "List: " + ruleInfo.Description;
      def children = List();
      base.OnList(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(name, startPos, endPos, ToReadOnly(children));
      context.Add(node);
    }

    public override OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = "ListWithSeparator: " + ruleInfo.Description;
      def children = List();
      base.OnListWithSeparator(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(name, startPos, endPos, ToReadOnly(children));
      context.Add(node);
    }

    public override OnOption(ruleInfo : SubruleInfo.Option, startPos : int, endPos : int, parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = "Option: " + ruleInfo.Description;
      def children = List();
      base.OnOption(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(name, startPos, endPos, ToReadOnly(children));
      context.Add(node);
    }

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.RuleParser.Descriptor.Name;
      def children = List();
      base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(name, startPos, endPos, ToReadOnly(children));
      context.Add(node);
    }

    public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.RuleParser.Descriptor.Name;
      def children = List();
      base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(name, startPos, endPos, ToReadOnly(children));
      context.Add(node);
    }

    public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, _parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.Descriptor.Name;
      def node = CreateNode(name, startPos, endPos, emptyNodes);
      context.Add(node);
    }

    public override OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, _parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.Description;
      def node = CreateNode(name, startPos, endPos, emptyNodes);
      context.Add(node);
    }

    public override OnMarker(ruleInfo : SubruleInfo.Marker, startPos : int, endPos : int, _parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.Description;
      def node = CreateNode(name, startPos, endPos, emptyNodes);
      context.Add(node);
    }

    public override OnEmpty(_ruleInfo : SubruleInfo.Empty, startPos : int, endPos : int, _parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = "<Empty>";
      def node = CreateNode(name, startPos, endPos, emptyNodes);
      context.Add(node);
    }

    public override OnPrefixMissed(ruleParser : ExtensibleRuleParser, pos : int, _parseResult : ParseResult, context : List[ReflectionStruct]) : void
    {
      def name = "Missed: " + ruleParser.Descriptor.Name;
      def node = CreateNode(name, pos, pos, emptyNodes);
      context.Add(node);
    }
  }
}
