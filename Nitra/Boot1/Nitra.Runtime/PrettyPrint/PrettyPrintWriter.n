using Nitra.Internal;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra
{
  public interface IPrettyPrintSource
  {
    Text : string { get; }
    GetGarbage(prevPos : int, pos : int) : NSpan
  }

  [Record]
  public abstract class PrettyPrintWriter
  {
    public Options : PrettyPrintOptions { get; }
    [RecordIgnore]
    private mutable _previousTokenPos : int;

    protected abstract FormatToken(source : IPrettyPrintSource, token : NSpan) : void;
    protected abstract FormatString(source : IPrettyPrintSource, token : NSpan, text : string) : void;// TODO: сделать protected
    protected abstract Garbage(source : IPrettyPrintSource, token : NSpan) : void;
    public abstract MissingNode(ruleDescriptor : RuleDescriptor) : void;
    public abstract AmbiguousNode(ast : IAmbiguousAst) : void;
    public abstract NewLine() : void;
    public abstract NewLineAndIndent() : void;
    public abstract Whitespace() : void;
    public abstract Indent() : void;
    public abstract Unindent() : void;

    public Token(source : IPrettyPrintSource, token : NSpan) : void
    {
      TryPrintGarbage(source, token);
      FormatToken(source, token);
    }

    public String(source : IPrettyPrintSource, token : NSpan, text : string) : void
    {
      TryPrintGarbage(source, token);
      FormatString(source, token, text);
    }

    protected TryPrintGarbage(source : IPrettyPrintSource, token : NSpan) : void
    {
      when (_previousTokenPos >= token.StartPos)
        return;

      def skip = source.GetGarbage(_previousTokenPos, token.StartPos);
      unless (skip.IsEmpty)
      {
        Garbage(source, skip);
        Whitespace();
      }

      _previousTokenPos = token.StartPos;
    }
  }
}
