using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    public ParseResult       : ParseResult;
    public Sequences         : Hashtable[int * ParsingSequence, ParsedSequence] = Hashtable();
    public Records           : array[SCG.HashSet[ParseRecord]];
    public RecordsToProcess  : SCG.Stack[int * ParseRecord] = SCG.Stack(50);
    public RecordsToComplete : SCG.Stack[int * ParseRecord * ParsedSequence] = SCG.Stack(50);
    public mutable MaxPos    : int = -1;

    mutable  _nextId : int;
    
    public RecordsToProcess2  : array[int * ParseRecord]
    {
      get
      {
        RecordsToProcess.ToArray()
      }
    }
    
    public GetNextId() : int { _nextId++; _nextId }

    //public Records2           : array[array[ParseRecord]]
    //{
    //  get
    //  {
    //    def result = array(Records.Length);
        
    //    foreach (x when x != null in Records with i)
    //      result[i] = x.OrderBy(r => r.ToString(i)).ToArray();
          
    //    result
    //  }
    //}

    public Records3(pattern : string = null, complatedOnly : bool = false, pos : int = -1) : array[array[ParseRecord]]
    {
      def result = array(Records.Length);
        
      foreach (x when x != null && (pos < 0 || pos == i) in Records with i)
        result[i] = x.Where(r => (pattern == null || r.ToString().Contains(pattern)) && (!complatedOnly || r.IsComplete))
                      .OrderBy(r => r.Sequence.StartPos).ThenBy(r => r.ToString(i)).ToArray();
          
      result
    }

    public this(parseResult : ParseResult)
    {
      Records     = array(parseResult.Text.Length + 1);
      ParseResult = parseResult;
    }

    public StartParseSequence(caller : ParseRecord, startPos : int, parsingSequence : ParsingSequence) : void
    {
      def key = (startPos, parsingSequence);
      mutable sequence;
      unless (Sequences.TryGetValue(key, out sequence))
      {
        sequence = ParsedSequence(this, startPos, parsingSequence);
        Sequences.Add(key, sequence);
        foreach (startState in sequence.ParsingSequence.StartStates)
          StartParseSubrule(startPos, ParseRecord(sequence, startState, startPos));
      }
      sequence.AddCaller(caller);
    }

    public StartParseSubrule(pos : int, record : ParseRecord) : void
    {
      when (record.IsComplete)
        record.Sequence.AddEnd(pos);
      mutable set = Records[pos];
      when (set == null)
      {
        set = SCG.HashSet();
        Records[pos] = set;
        MaxPos = Math.Max(MaxPos, pos);
      }
      record.ParsePos = pos;
      def newRecord = set.Add(record);
      when (newRecord && !record.IsComplete)
        RecordsToProcess.Push((pos, record));
    }

    public SubruleParsed(begin : int, end : int, record : ParseRecord) : void
    {
      unless (begin == end && record.ParsingState.IsNullable)
      {
        record.Sequence.Add(ParsedSubrule(begin, end, record.State));
        foreach (next in record.ParsingState.Next)
          StartParseSubrule(end, record.Next(next));
      }
    }

    public StartParse(ruleParser : RuleParser) : void
    {
      def textPos = 0;
      def root = ParseRecord(ParsedSequence(this, 0, ParsingSequence.CreateRoot()), 0, -1);
      match (ruleParser)
      {
        | SimpleRuleParser     as ruleParser =>
          StartParseSequence(root, textPos, ruleParser.ParsingSequence);

        | ExtensibleRuleParser as ruleParser =>
          StartParseSequence(root, textPos, ruleParser.ParsingSequence);

        | _ => assert3(false)
      }
      Parse();
    }

    public Parse() : void
    {
      while (RecordsToProcess.Count > 0 || RecordsToComplete.Count > 0)
      {
        while (RecordsToProcess.Count > 0)
        {
          def (pos, record) = RecordsToProcess.Pop();
          PredictionOrScanning(pos, record, optimize=true);
        }
        while (RecordsToComplete.Count > 0)
          Completion(RecordsToComplete.Pop());
      }
    }

    public Completion(pos : int, caller : ParseRecord, sequence : ParsedSequence) : void
    {
      SubruleParsed(sequence.StartPos, pos, caller);
    }

    public PredictionOrScanning(textPos : int, record : ParseRecord, optimize : bool) : void
    {
      mutable endPos;
      match (record.ParsingState)
      {
        | Simple           as state =>
          if (optimize && { endPos = state.RuleParser.Parse(textPos, ParseResult.Text, ParseResult); endPos >= 0 })
            SubruleParsed(textPos, endPos, record);
          else
            StartParseSequence(record, textPos, state.RuleParser.ParsingSequence);

        | Extensible       as state =>
          if (optimize && { endPos = state.RuleParser.Parse(textPos, ParseResult.Text, ParseResult); endPos >= 0 })
            SubruleParsed(textPos, endPos, record);
          else
            StartParseSequence(record, textPos, state.RuleParser.ParsingSequence);

        | ExtensionPrefix  as state =>
          foreach (prefixRule in state.RuleParser.PrefixRules)
            StartParseSequence(record, textPos, prefixRule.ParsingSequence);

        | ExtensionPostfix as state =>
          foreach (postfixRule when state.RuleParser.FirstPostfixRuleId <= postfixRule.RuleId in state.RuleParser.PostfixRules)
            StartParseSequence(record, textPos, postfixRule.ParsingSequence);

        | Subsequence      as state =>
          StartParseSequence(record, textPos, state.Sequence);

        | Scan             as state =>
          endPos = state.Subrule.Parse(textPos, ParseResult.Text, ParseResult);
          when (endPos >= 0)
            SubruleParsed(textPos, endPos, record);

        | Predicate        as state =>
          when (state.HeadPredicate(textPos, ParseResult.Text, ParseResult))
            SubruleParsed(textPos, textPos, record);
      }
    }

    public static CounterLessThanMax(counter: int, max : Nullable[int]) : bool
    {
      !max.HasValue || counter < max.GetValueOrDefault()
    }
  }
}
