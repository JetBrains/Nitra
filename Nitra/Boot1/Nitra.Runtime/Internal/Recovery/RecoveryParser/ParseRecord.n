using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public struct ParseRecord
  {
    public Sequence : ParsedSequence;
    public State    : int;
    public ParsingState : ParsingState { get { Sequence.ParsingSequence.States[State] } }
    /// Debug only. Position from we try parse this record.
    [EqualsIgnore]
    public mutable ParsePos : int;

    public IsComplete : bool        { get { State == -1 } }

    public Next(next : int) : ParseRecord
    {
      assert3(!IsComplete);
      ParseRecord(Sequence, next, -1);
    }

    public override ToString() : string
    {
      ToString(ParsePos)
    }
    
    public ToString(curPos : int) : string
    {
      def sb = Text.StringBuilder();
      Sequence.ToString(sb, State, curPos);
      sb.ToString()
    }
  }
}
