using Nemerle;
using Nemerle.Utility;

using Nitra.Runtime;
using Nitra.Typing;

using System;
using System.Reflection;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Serialization
{
  public sealed class MetadataWriter : IMetadataWriter, IDisposable
  {
    public this(stream : Stream)
    {
      this(stream, Project.CurrentProject)
    }

    public this(stream : Stream, project : Project)
    {
      this(stream, project, project.RootNamespace)
    }

    public this(stream : Stream, project : Project, root : NamespaceSymbol)
    {
      _writer           = BinaryWriter(stream, Text.Encoding.UTF8);
      _symbolBodyWriter = BinaryWriter(MemoryStream(), Text.Encoding.UTF8);
      _root             = root;
      Project           = project;
    }

    private _writer             : BinaryWriter;
    private _symbolBodyWriter   : BinaryWriter;
    private _root               : NamespaceSymbol;
    private _namespaceNodes     : HashSet[HierarchyNode]              = HashSet();
    private _nonTreeSymbols     : HashSet[IExportableSymbol]          = HashSet();
    private _externalSymbols    : HashSet[IExportableSymbol]          = HashSet();
    private _nodeIds            : Dictionary[HierarchyNode,     int]  = Dictionary();
    private _symbolIds          : Dictionary[IExportableSymbol, int]  = Dictionary();
    private _assemblyIds        : Dictionary[AssemblyName,      byte] = Dictionary();
    private _serializationQueue : Queue[IExportableSymbol]            = Queue();

    public Project : Project { get; }

    public Dispose() : void
    {
      _writer.Dispose();
      _symbolBodyWriter.Dispose();
    }

    public WriteSymbols() : void
    {
      def exportableSymbols = CollectExportableSymbols();
      WriteNameTree(exportableSymbols.Select(_.Node));
      WriteSymbolHeadersAndSerializeSymbols(exportableSymbols);
      WriteReferencedAssemblies();
      WriteNameTree(_externalSymbols.Select(_.Node));
      WriteExternalSymbolInfo();
      WriteSymbolBodies();
      _writer.Flush();
    }

    private WriteNameTree(nodes : IEnumerable[HierarchyNode]) : void
    {
      def write(node : HierarchyNode) : int
      {
        assert(node.Parent != null);

        mutable id;
        unless (_nodeIds.TryGetValue(node, out id))
        {
          def parentId = if (node.Parent : object != _root.Node) write(node.Parent) else -1;
          id = _nodeIds.Count + 1;
          def hasNamespaceSymbol = _namespaceNodes.Contains(node);
          _nodeIds.Add(node, id);
          _writer.Write(id);
          _writer.Write(parentId);
          _writer.Write(node.PartName);
          _writer.Write(hasNamespaceSymbol);
        }
        id
      }
      foreach (node in nodes)
        _ = write(node);
      _writer.Write(0 : int);
    }

    private WriteSymbolHeadersAndSerializeSymbols(symbols : IEnumerable[IExportableSymbol]) : void
    {
      // tree symbols
      foreach (group in symbols.GroupBy(_.SymbolTypeId))
      {
        _writer.Write(group.Key);
        foreach (symbol in group)
        {
          def symbolId = GetSymbolId(symbol);
          def nodeId   = GetNodeId(symbol);
          _writer.Write(symbolId);
          _writer.Write(nodeId);
          _serializationQueue.Enqueue(symbol);
        }
        _writer.Write(0 : int);
      }

      // serialization of all symbols
      while (_serializationQueue.Count > 0)
      {
        def symbol   = _serializationQueue.Dequeue();
        def symbolId = GetSymbolId(symbol);
        _symbolBodyWriter.Write(symbolId);
        symbol.Serialize(_symbolBodyWriter, this);
      }

      // non tree symbols fully populated only after actual serialization
      foreach (group in _nonTreeSymbols.GroupBy(_.SymbolTypeId))
      {
        _writer.Write(group.Key);
        foreach (symbol in group)
        {
          def symbolId = GetSymbolId(symbol);
          def name     = symbol.Name;
          _writer.Write(symbolId);
          _writer.Write(0 : int);
          _writer.Write(name);
        }
        _writer.Write(0 : int);
      }

      _writer.Write("");
    }

    private WriteReferencedAssemblies() : void
    {
      foreach (pair in _assemblyIds)
      {
        def assemblyId   = pair.Value;
        def assemblyName = pair.Key;
        _writer.Write(assemblyId);
        _writer.Write(assemblyName.FullName);
      }
      _writer.Write(0 : byte);
    }

    private WriteExternalSymbolInfo() : void
    {
      foreach (group in _externalSymbols.GroupBy(_.SymbolTypeId))
      {
        _writer.Write(group.Key);
        foreach (symbol in group)
        {
          def symbolId   = GetSymbolId(symbol);
          def nodeId     = GetNodeId(symbol);
          def assemblyId = GetAssemblyId(symbol);
          _writer.Write(symbolId);
          _writer.Write(nodeId);
          _writer.Write(assemblyId);
        }
        _writer.Write(0 : int);
      }
      _writer.Write("");
    }

    private WriteSymbolBodies() : void
    {
      // symbol bodies already written
      (_symbolBodyWriter.BaseStream :> MemoryStream).WriteTo(_writer.BaseStream);
      _writer.Write(0 : int);
    }

    private WriteSymbolRef(symbol : IExportableSymbol, writer : BinaryWriter) : void implements IMetadataWriter.WriteSymbolRef
    {
      if (null == symbol)
        writer.Write(0 : int);
      else if (symbol.Node == null)
      {
        unless (symbol.AssemblyId == AssemblyIds.CurrentAssembly)
          throw NotSupportedException("Serialization of referencies to external non tree symbols not supported");

        // локальный недревесный символ
        AddNonTreeSymbol(symbol);
        writer.Write(GetSymbolId(symbol));
      }
      else if (symbol.AssemblyId == AssemblyIds.CurrentAssembly)
      {
        // локальный древесный символ
        writer.Write(GetSymbolId(symbol));
      }
      else
      {
        // внешний древесный символ
        AddExternalSymbol(symbol);
        writer.Write(GetSymbolId(symbol));
      }
    }

    private WriteLocation(location : Location, writer : BinaryWriter) : void implements IMetadataWriter.WriteLocation
    {
      ignore(location, writer); //TODO: implement location writing
    }

    private CollectExportableSymbols() : List[IExportableSymbol]
    {
      def buffer = List();
      def visitNode(node)
      {
        foreach (symbol in node.GetSymbols())
        {
          when (symbol.AssemblyId == AssemblyIds.CurrentAssembly && symbol is IExportableSymbol)
            buffer.Add(symbol :> IExportableSymbol);
          when (symbol is NamespaceSymbol)
            _ = _namespaceNodes.Add(node);
        }
        foreach (node in node.SubNodes)
          visitNode(node);
      }
      visitNode(_root.Node);
      buffer
    }

    private AddNonTreeSymbol(symbol : IExportableSymbol) : void
    {
      when (_nonTreeSymbols.Add(symbol))
        _serializationQueue.Enqueue(symbol);
    }

    private AddExternalSymbol(symbol : IExportableSymbol) : void
    {
      when (_externalSymbols.Add(symbol))
      {
        def assemblyName = Nitra.Runtime.Project.CurrentProject.GetAssemblyName(symbol.AssemblyId);
        unless (_assemblyIds.ContainsKey(assemblyName))
        {
          def id = (_assemblyIds.Count + 1) :> byte;
          _assemblyIds.Add(assemblyName, id);
        }
      }
    }

    private GetNodeId(symbol : IExportableSymbol) : int
    {
      _nodeIds[symbol.Node]
    }

    private GetSymbolId(symbol : IExportableSymbol) : int
    {
      mutable id;
      unless (_symbolIds.TryGetValue(symbol, out id))
      {
        id = _symbolIds.Count + 1;
        _symbolIds.Add(symbol, id);
      }
      id
    }

    private GetAssemblyId(symbol : IExportableSymbol) : byte
    {
      assert(symbol.AssemblyId != AssemblyIds.CurrentAssembly);
      assert(symbol.AssemblyId != AssemblyIds.NoAssembly);

      def assemblyName = Nitra.Runtime.Project.CurrentProject.GetAssemblyName(symbol.AssemblyId);
      _assemblyIds[assemblyName]
    }
  }
}
