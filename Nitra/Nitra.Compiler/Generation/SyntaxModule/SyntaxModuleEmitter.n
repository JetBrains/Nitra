using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal partial class SyntaxModuleEmitter
  {
    public Environment   : EmitterEnvironment { get; }
    public Env           : GlobalEnv          { get; }
    public SyntaxModule  : SyntaxModuleSymbol { get; }

    public GrammarTB               : TypeBuilder { get; }
    public GrammarImplTB           : TypeBuilder { get; }
    public GrammarDescriptorImplTB : TypeBuilder { get; }

    private GrammarAstTB           : TypeBuilder; //TODO : переместить в более подходящее место

    private _ruleParserEmitters            : List[RuleParserEmitter] = List();
    private _ruleDescriptorEmitters        : List[IRuleDescriptorEmitter] = List();
    private _allAstEmitters                : List[IAstEmitter] = List();
    private _simpleAstEmitters             : List[IAstEmitter] = List();
    private _extensionAstEmitters          : List[IAstEmitter] = List();
    private _splicableAstWalkerEmitter     : SplicableAstWalkerEmitter;
    private _astEmitterDefineTypeFunctions : Hashtable[IRuleDeclarationSite, ClassMember.TypeDeclaration -> TypeBuilder] = Hashtable();

    public this(environment : EmitterEnvironment, syntaxModule : SyntaxModuleSymbol)
    {
      Environment       = environment;
      SyntaxModule      = syntaxModule;
      Env               = Environment.NamespaceOfSymbol(syntaxModule);
      _externalGrammars = HashSet(syntaxModule.ExternalImports);

      GrammarTB               = Env.Define(<[ decl: public partial module $(syntaxModule.Name : usesite) { } ]>);
      GrammarImplTB           = GrammarTB.DefineNestedType(<[decl: public module $(AssemblyConstants.GrammarImplName : usesite) { } ]>);
      GrammarDescriptorImplTB = GrammarTB.DefineNestedType(<[decl:
        public sealed class $(AssemblyConstants.GrammarDescriptorImplName : usesite) : Nitra.GrammarDescriptor
        {
          private this() {}
          public override Name        : string { get { $(syntaxModule.Name                 : string) } }
          public override FullName    : string { get { $(syntaxModule.Node.FullName        : string) } }
          public override Namespace   : string { get { $(syntaxModule.Node.Parent.FullName : string) } }
          public override IsSplicable : bool   { get { $(syntaxModule.IsSplicable          : bool)   } }
        }
      ]>);
      GrammarDescriptorImplTB.DefineConditional(<[ decl: private static _staticDescriptor : this = $(GrammarDescriptorImplTB.GetMemType() : typed)() ]>);
      GrammarDescriptorImplTB.DefineConditional(<[ decl: public static StaticDescriptor : this { get { _staticDescriptor } } ]>);
      GrammarTB.DefineConditional(<[ decl: public static StaticDescriptor : Nitra.GrammarDescriptor { get { $(GrammarDescriptorImplTB.GetMemType() : typed).StaticDescriptor } } ]>);

      if (SyntaxModule.IsSplicable)
        _splicableAstWalkerEmitter = SplicableAstWalkerEmitter(Environment, SyntaxModule);
      else
        GrammarAstTB = Env.Define(<[ decl: public partial module $(syntaxModule.Name + "Ast" : usesite) {} ]>);

      def allRuleSymbols = SyntaxModule.Node.GetDescendants.[RuleDefSymbol]();

      foreach (ruleSymbol in allRuleSymbols)
      {
        | ExtensibleRuleSymbol       => ()
        | ExtensionRuleSymbol  as rs => _ruleParserEmitters.Add(ExtensionRuleParserEmitter(this, rs))
        | SimpleRuleSymbol     as rs => _ruleParserEmitters.Add(SimpleRuleParserEmitter(this, rs))
        | RegularRuleSymbol    as rs => _ruleParserEmitters.Add(RegularRuleParserEmitter(this, rs))
        | _                          => assert(false);
      }

      // TODO: Нужно собрать литералы.
      def code = List();
      foreach (e is RegularRuleParserEmitter in _ruleParserEmitters)
        code.Add(<[  _ = results.Add($(GrammarImplTB.GetMemType() : typed).$(e.MethodName : global)(pos, text)); ]>);
      
      GrammarDescriptorImplTB.Define(<[ decl: 
        public override ParseAllGrammarTokens(pos : int, text : string, results : HashSet[int]) : void
        {
          IgnoreParams();
          ..$code;
        }
      ]>);

      mutable extensibleRuleSymbols = [];
      mutable simpleRuleSymbols     = [];
      mutable regularRuleSymbols    = [];
      mutable postfixRuleSymbols    = [];
      mutable prefixRuleSymbols     = [];
      foreach (ruleSymbol in allRuleSymbols)
      {
        | ExtensibleRuleSymbol                         as ruleSymbol => extensibleRuleSymbols ::= ruleSymbol
        | SimpleRuleSymbol                             as ruleSymbol => simpleRuleSymbols     ::= ruleSymbol
        | RegularRuleSymbol                            as ruleSymbol => regularRuleSymbols    ::= ruleSymbol
        | ExtensionRuleSymbol(ExtensionType = Postfix) as ruleSymbol => postfixRuleSymbols    ::= ruleSymbol
        | ExtensionRuleSymbol(ExtensionType = Prefix)  as ruleSymbol => prefixRuleSymbols     ::= ruleSymbol
        | _ => ()
      }
      unless (extensibleRuleSymbols.IsEmpty) _ruleDescriptorEmitters.Add(ExtensibleRuleDescriptorEmitter(this, extensibleRuleSymbols));
      unless (simpleRuleSymbols.IsEmpty)     _ruleDescriptorEmitters.Add(SimpleRuleDescriptorEmitter(this, simpleRuleSymbols));
      unless (regularRuleSymbols.IsEmpty)    _ruleDescriptorEmitters.Add(RegularRuleDescriptorEmitter(this, regularRuleSymbols));
      unless (prefixRuleSymbols.IsEmpty)     _ruleDescriptorEmitters.Add(PrefixRuleDescriptorEmitter(this, prefixRuleSymbols));
      unless (postfixRuleSymbols.IsEmpty)    _ruleDescriptorEmitters.Add(PostfixRuleDescriptorEmitter(this, postfixRuleSymbols));

      when (GrammarAstTB != null)
      {
        foreach (ruleSymbol when ruleSymbol.Type is RuleType.Ref in SyntaxModule.Node.GetDescendants.[SyntaxRuleSymbol]())
        {
          def emitter = RuleAstEmitter(Environment, ruleSymbol);
          if (ruleSymbol is ExtensionRuleSymbol)
            _extensionAstEmitters.Add(emitter);
          else
            _simpleAstEmitters.Add(emitter);
          _allAstEmitters.Add(emitter);
        }

        foreach (extendSyntaxSymbol in SyntaxModule.Node.GetDescendants.[ExtendSyntaxSymbol]())
        {
          def emitter = ExtendSyntaxAstEmitter(extendSyntaxSymbol);
          _simpleAstEmitters.Add(emitter);
          _allAstEmitters.Add(emitter);
        }

        _astEmitterDefineTypeFunctions[SyntaxModule] = GrammarAstTB.DefineNestedType;
        foreach (emitter when emitter.Symbol is IRuleDeclarationSite in _allAstEmitters)
        {
          _astEmitterDefineTypeFunctions[emitter.Symbol :> IRuleDeclarationSite] =
            fun (decl)
            {
              DefineAstTypes(emitter);
              emitter.DefineNestedType(decl)
            };
        }
      }

      foreach (spanClass in SyntaxModule.Node.GetDescendants.[SpanClassSymbol]())
      {
        GrammarTB.DefineConditional(<[decl:
          public static $("SpanClass_" + spanClass.Name : usesite) : Nitra.SpanClass
            = Nitra.SpanClass($(spanClass.Name : string), $(GrammarDescriptorImplTB.GetMemType() : typed).StaticDescriptor)
        ]>)
      }
    }

    public DefineSimpleAstTypes() : void
    {
      foreach (emitter in _simpleAstEmitters)
        DefineAstTypes(emitter);
    }

    public DefineExtensionAstTypes() : void
    {
      foreach (emitter in _extensionAstEmitters)
        DefineAstTypes(emitter);
    }

    public DefineAstMembers() : void
    {
      foreach (emitter in _allAstEmitters)
        emitter.DefineMembers();
      when (_splicableAstWalkerEmitter != null)
        _splicableAstWalkerEmitter.DefineMembers();
    }

    private _externalGrammars : HashSet[SyntaxModuleSymbol];

    public CallRule(callSymbol : RuleSymbol) : void
    {
      when (callSymbol.DeclaringModule : object != SyntaxModule)
        _ = _externalGrammars.Add(callSymbol.DeclaringModule);
    }

    public DefineParserTypes() : void
    {
      foreach (emitter in _ruleParserEmitters)
        emitter.DefineParser();

      foreach (emitter in _ruleDescriptorEmitters)
        emitter.DefineDescriptor();
    }

    public DefineParserMethods() : void
    {
      foreach (emitter in _ruleParserEmitters)
        emitter.DefineParserMethods();

      GrammarDescriptorImplTB.DefineConditional(<[decl:
        public override Rules : array[Nitra.RuleDescriptor]
        {
          get { array[..$(_ruleDescriptorEmitters.SelectMany(_.RuleSymbols).Select(_.GetRuleDescriptorRef())) ] }
        }
      ]>);

      GrammarDescriptorImplTB.DefineConditional(<[decl:
        public override Dependencies : array[Nitra.GrammarDescriptor]
        {
          get { array[..$(_externalGrammars.Map(_.GetGrammarDescriptorRef()))] }
        }
      ]>);
    }

    public Emit() : void
    {
      foreach (emitter in _ruleParserEmitters)
        emitter.Emit();
      foreach (emitter in _ruleDescriptorEmitters)
        emitter.Emit();
      foreach (emitter in _allAstEmitters)
        emitter.Emit();
      when (_splicableAstWalkerEmitter != null)
        _splicableAstWalkerEmitter.Emit();
      when (GrammarAstTB != null)
        GrammarAstTB.Compile();
      GrammarDescriptorImplTB.Compile();
      GrammarImplTB.Compile();
      GrammarTB.Compile();
    }

    private DefineAstTypes(emitter : IAstEmitter) : void
    {
      unless (emitter.IsTypesDefined)
        emitter.DefineTypes(_astEmitterDefineTypeFunctions[emitter.SymbolDeclarationSite]);
    }
  }
}
