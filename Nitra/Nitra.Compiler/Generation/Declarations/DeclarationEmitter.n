using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class DeclarationEmitter
  {
    private _environment       : EmitterEnvironment;
    private _declarationSymbol : DeclarationSymbol;
    private _env               : GlobalEnv;
    private _tb                : TypeBuilder;

    public this(environment : EmitterEnvironment, declarationSymbol : DeclarationSymbol)
    {
      this._environment       = environment;
      this._declarationSymbol = declarationSymbol;
      this._env               = environment.NamespaceOfSymbol(declarationSymbol);
      this._tb                = this._env.Define(<[ decl:
        public sealed class $(declarationSymbol.Name : usesite) : Nitra.Declaration
        {
          public override Location : Nitra.Location { get; }
        }
      ]>);

      def ctorParameters = SCG.List();
      ctorParameters.Add(<[ parameter: location : Nitra.Location ]>);

      def ctorStatements = SCG.List();
      ctorStatements.Add(<[ this.Location = location ]>);

      def makeType(fieldSymbol) { _environment.MakeNemerleType(this._env, fieldSymbol.TypeLocation, fieldSymbol.Type) }

      foreach (fieldSymbol in this._declarationSymbol.Fields)
      {
        if (fieldSymbol.HasBody)
        {
          this._tb.DefineConditional(<[ decl:
            public $(fieldSymbol.Name : usesite) : $(makeType(fieldSymbol))
            {
              get { $(fieldSymbol.Body.Expr) }
            }
          ]>);
        }
        else
        {
          this._tb.DefineConditional(<[ decl:
            public $(fieldSymbol.Name : usesite) : $(makeType(fieldSymbol));
          ]>);
          ctorParameters.Add(<[ parameter : $(fieldSymbol.Name : usesite) : $(makeType(fieldSymbol)) ]>);
          ctorStatements.Add(<[ this.$(fieldSymbol.Name : usesite) = $(fieldSymbol.Name : usesite) ]>);
        }
      }

      this._tb.DefineConditional(<[ decl:
        public this(..$ctorParameters) { ..$ctorStatements }
      ]>);
    }

    public Emit() : void
    {
      _tb.Compile();
    }
  }
}
