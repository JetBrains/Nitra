using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal module PExprUtils
  {
    public FromQualifiedIdentifier(qid : list[string]) : PExpr
    {
      | []            => throw ArgumentOutOfRangeException("qid", "Non empty list required");
      | first :: tail => tail.FoldLeft(<[ $(first : usesite) ]>, (item, acc) => <[ $acc.$(item : usesite) ]>)
    }

    public static FlattenPExprSequence(this seq : IEnumerable[PExpr], recursive : bool = true) : list[PExpr]
    {
      def expandSequence(expr : PExpr)
      {
        | Sequence(exprs) => if (recursive) exprs.FlattenPExprSequence(true) else exprs
        | _               => [expr]
      }
      seq.Map(expandSequence).Flatten();
    }

    public static FlattenPExpr(this expr : IEnumerable[PExpr]) : PExpr
    {
      PExpr.Sequence(expr.NToList()).FlattenPExpr();
    }

    public static FlattenPExpr(this expr : PExpr) : PExpr
    {
      Macros.TraverseExpr(None(), expr, false, (_, after, expr) =>
      {
        if (after)
          match (expr)
          {
            | PExpr.Sequence(exprs) => PExpr.Sequence(exprs.FlattenPExprSequence(false))
            | expr => expr
          }
        else
          expr
      });
    }
  }
}
