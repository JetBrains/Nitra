using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Serialization
{
  public sealed class SerializationCompiler
  {
    public Manager              : ManagerClass                 { get; }
    public Formatter            : SerializationFormatter       { get; }
    public SerializationFactory : TypeSerializationFactory     { get; }
    public WriteParameters      : list[SerializationParameter] { get; }
    public ReadParameters       : list[SerializationParameter] { get; }

    private mutable _helperTb        : TypeBuilder;
    private         _typesToProcess  : SCG.Queue[FixedType]                                = SCG.Queue();
    private         _builders        : SCG.Dictionary[FixedType, TypeSerializationBuilder] = SCG.Dictionary();

    public this(
      manager              : ManagerClass,
      formatter            : SerializationFormatter,
      serializationFactory : TypeSerializationFactory,
      writeParameters      : list[SerializationParameter] = null,
      readParameters       : list[SerializationParameter] = null)
    {
      Manager              = manager;
      Formatter            = formatter;
      SerializationFactory = serializationFactory;
      WriteParameters      = writeParameters ?? [];
      ReadParameters       = readParameters  ?? [];
    }

    public MappedMemberAttribute : TypeInfo
    {
      mutable _mappedMemberAttribute : TypeInfo;
      get
      {
        when (_mappedMemberAttribute : object == null)
          _mappedMemberAttribute = Manager.LookupTypeInfo("Nemerle.Internal.MappedMemberAttribute", 0);
        _mappedMemberAttribute
      }
    }

    public ImmutableArrayOpt : option[TypeInfo]
    {
      mutable _immutableArrayOpt : option[TypeInfo];
      get
      {
        when (_immutableArrayOpt : object == null)
          _immutableArrayOpt = Manager.NameTree.LookupExactType("System.Collections.Immutable.ImmutableArray", 1);
        _immutableArrayOpt
      }
    }

    public EnqueueType(type : FixedType) : TypeSerializationBuilder
    {
      mutable builder;
      unless (_builders.TryGetValue(type, out builder))
      {
        builder = SerializationFactory.CreateBuilder(this, type);
        _builders.Add(type, builder);
        _typesToProcess.Enqueue(type);
      }
      builder
    }

    private mutable _isEmitting : bool;

    public Emit() : void
    {
      when (_isEmitting)
        return;

      _isEmitting = true;
      while (_typesToProcess.Count > 0)
      {
        def type    = _typesToProcess.Dequeue();
        def builder = _builders[type];
        builder.Emit();
      }

      when (_helperTb : object != null)
      {
        _helperTb.Compile();
        _helperTb = null;
      }
      _isEmitting = false;
    }

    public InitHelperTb() : TypeBuilder
    {
      when (_helperTb : object == null)
      {
        def env   = Manager.CoreEnv.EnterIntoNamespace(["Nitra", "Internal"]);
        _helperTb = env.Define(<[ decl: internal module $(Util.tmpname("SerializationHelper") : usesite) { } ]>);
      }
      _helperTb;
    }

    public MakeWriteParameters() : list[PParameter]
    {
      MakeParameters(Formatter.WriteParameters, MakeParameters(this.WriteParameters, []))
    }

    public MakeReadParameters() : list[PParameter]
    {
      MakeParameters(Formatter.ReadParameters, MakeParameters(this.ReadParameters, []))
    }

    private static MakeParameters(parms : list[SerializationParameter], tail : list[PParameter]) : list[PParameter]
    {
      match (parms)
      {
        | []             => tail
        | first :: other => <[ parameter: $(first.Name : usesite) : $(first.Type) ]> :: MakeParameters(other, tail)
      }
    }

    public MakeWriteArguments() : list[PExpr]
    {
      MakeArguments(Formatter.WriteParameters, MakeArguments(this.WriteParameters, []));
    }

    public MakeReadArguments() : list[PExpr]
    {
      MakeArguments(Formatter.ReadParameters, MakeArguments(this.ReadParameters, []));
    }

    private static MakeArguments(parms : list[SerializationParameter], tail : list[PExpr]) : list[PExpr]
    {
      match (parms)
      {
        | []             => tail
        | first :: other => <[ $(first.Name : global) ]> :: MakeArguments(other, tail)
      }
    }
  }
}
