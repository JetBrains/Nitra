using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Serialization
{
  [Record]
  public sealed class CollectionTypeSerializationBuilder : ComplexTypeSerializationBuilder
  {
    public override Tag : TypeTag { get { TypeTag.Collection } }

    private _collectionType : DefaultTypeSerializationFactory.CollectionType;
    private _itemType       : TypeVar;

    [RecordIgnore] private mutable _itemSerializationBuilder : TypeSerializationBuilder;

    protected override CollectTypeData() : void
    {
      assert(_itemSerializationBuilder : object == null);

      _itemSerializationBuilder = Compiler.EnqueueType(_itemType.Fix());
    }

    protected override GenerateWriteBody(body : SCG.List[PExpr]) : void
    {
      assert(_itemSerializationBuilder : object != null);

      body.Add(Formatter.WriteInt32(CountElements(<[ obj ]>)));
      body.Add(<[ foreach (item in obj)
                    $(_itemSerializationBuilder.Write(<[ item ]>)); ]>);
    }

    protected override GenerateReadBody(body : SCG.List[PExpr]) : void
    {
      assert(_itemSerializationBuilder : object != null);

      body.Add(<[ def buffer = array($(Formatter.ReadInt32())); ]>);
      body.Add(<[ for(mutable i = 0; i < buffer.Length; ++i)
                    buffer[i] = $(_itemSerializationBuilder.Read(<[ "item" ]>, _itemSerializationBuilder.TagExpr)); ]>);
      body.Add(ConvertResult(<[ buffer ]>));
    }

    private CountElements(obj : PExpr) : PExpr
    {
      match (_collectionType)
      {
        | Array          => <[ $obj.Length ]>
        | NemerleList    => <[ $obj.Length ]>
        | IList          => <[ $obj.Count ]>
        | ICollection    => <[ $obj.Count ]>
        | IEnumerable    => <[ System.Linq.Enumerable.Count($obj) ]>
        | ImmutableArray => <[ $obj.Count ]>
      }
    }

    private ConvertResult(obj : PExpr) : PExpr
    {
      match (_collectionType)
      {
        | NemerleList    => <[ Nemerle.Collections.NCollectionsExtensions.NToList($obj) ]>
        | ImmutableArray => <[ System.Collections.Immutable.ImmutableArray.Create($obj) ]> // TODO: use ImmutableArray<T>.Builder.MoveToImmutable
        | _              => obj
      }
    }
  }
}
