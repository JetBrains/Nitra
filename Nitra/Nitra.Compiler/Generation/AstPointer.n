using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

namespace Nitra.Compiler
{
  public interface IVariableEmitter
  {
    CreateVariable(name : string) : string;
  }

  public interface IConstantEmitter
  {
    Environment : EmitterEnvironment { get; }
    CreateConstant(name : string, value : int) : string;
  }

  public class LocalVariableEmitter : IVariableEmitter
  {
    private _variables : SCG.HashSet[string] = SCG.HashSet();
    public CreateVariable(name : string) : string
    {
      _ = _variables.Add(name);
      name
    }

    public Define() : list[PExpr]
    {
      _variables.Map(var => <[ mutable $(var : global) ]>)
    }
  }

  public class AstPointer
  {
    public  Sequence        : SequenceCompileInfo;
    private ConstantEmitter : IConstantEmitter;
    private _nameMaker      : void -> string;
    public  Name            : string { [Memoize] get { _nameMaker() } }
    public  Var             : PExpr  {           get { <[ $(Name : global) ]> } }

    private this(sequence : SequenceCompileInfo, constantEmitter : IConstantEmitter, nameMaker : void -> string)
    {
      Sequence        = sequence;
      ConstantEmitter = constantEmitter;
      _nameMaker      = nameMaker;
    }

    public static New(sequence : SequenceCompileInfo, constantEmitter : IConstantEmitter, variableEmitter : IVariableEmitter, prefix : string) : AstPointer
    {
      AstPointer(sequence, constantEmitter, () => variableEmitter.CreateVariable(sequence.MakeVariableName(prefix)));
    }

    public static Existing(sequence : SequenceCompileInfo, constantEmitter : IConstantEmitter, name : string) : AstPointer
    {
      AstPointer(sequence, constantEmitter, () => name);
    }

    private Ref(sequenceHeader : SequenceHeaderCompileInfo) : PExpr
    {
      if (object.ReferenceEquals(Sequence, sequenceHeader.Owner))
        <[ parseResult.ast[$Var + $(MakeOffsetRef(sequenceHeader))] ]>
      else
        PExpr.Error("Type mismatch.")
    }

    public Set(sequenceHeader : SequenceHeaderCompileInfo, value : PExpr) : PExpr
    {
      <[ $(Ref(sequenceHeader)) = $value ]>
    }

    public Get(sequenceHeader : SequenceHeaderCompileInfo) : PExpr
    {
      Ref(sequenceHeader)
    }

    private Ref(subrule : SubruleCompileInfo) : PExpr
    {
      CheckTypeAndReturn(subrule, <[ parseResult.ast[$Var + $(MakeOffsetRef(subrule))] ]>)
    }

    public Set(subrule : SubruleCompileInfo, value : PExpr) : PExpr
    {
      <[ $(Ref(subrule)) = $value ]>
    }

    public GetSize(subrule : SubruleCompileInfo) : PExpr
    {
//#if DEBUG
//      CheckTypeAndReturn(subrule, <[ { _ = $(subrule?.ToString()); parseResult.GetSize($Var + $(MakeOffsetRef(subrule))) } ]>)
//#else
      CheckTypeAndReturn(subrule, <[ parseResult.GetSize($Var + $(MakeOffsetRef(subrule))) ]>)
//#endif
    }

    public GetRaw(subrule : SubruleCompileInfo) : PExpr
    {
      CheckTypeAndReturn(subrule, Ref(subrule))
    }

    public GetSkipAndSize(subrule : SubruleCompileInfo) : PExpr
    {
      CheckTypeAndReturn(subrule, <[ parseResult.GetSkipAndSize($Var + $(MakeOffsetRef(subrule))) ]>)
    }

    public GetSkip(subrule : SubruleCompileInfo) : PExpr
    {
      CheckTypeAndReturn(subrule, <[ parseResult.GetSkip($Var + $(MakeOffsetRef(subrule))) ]>)
    }

    private CheckTypeAndReturn(subrule : SubruleCompileInfo, result : PExpr) : PExpr
    {
      if (object.ReferenceEquals(Sequence, subrule.Owner))
        if (subrule.Size == 1)
          result
        else
          PExpr.Error("Invalid subrule access.")
      else
        PExpr.Error("Type mismatch.")
    }

    private MakeOffsetRef(sequenceHeader : SequenceHeaderCompileInfo) : PExpr
    {
      if (ConstantEmitter.Environment.IsDebug)
      {
        def name  = ConstantEmitter.Environment.MakeSequenceHeaderOffsetName(sequenceHeader);
        def name2 = ConstantEmitter.CreateConstant(name, sequenceHeader.Offset);
        <[ $(name2 : global) ]>
      }
      else
        <[ $(sequenceHeader.Offset) ]>
    }

    private MakeOffsetRef(subrule : SubruleCompileInfo) : PExpr
    {
      if (ConstantEmitter.Environment.IsDebug)
      {
        def name  = ConstantEmitter.Environment.MakeSubruleOffsetName(subrule);
        def name2 = ConstantEmitter.CreateConstant(name, subrule.Offset);
        <[ $(name2 : global) ]>
      }
      else
       <[ $(subrule.Offset) ]>
    }
  }
}
