using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Model;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal abstract partial class RuleParserEmitter : IConstantEmitter
  {
    public Owner : SyntaxModuleEmitter { get; }
    public RuleSymbol : RuleDefSymbol { get; }
    public Environment : EmitterEnvironment { get { Owner.Environment } }
    public this(owner : SyntaxModuleEmitter, ruleSymbol : RuleDefSymbol)
    {
      Owner          = owner;
      RuleSymbol     = ruleSymbol;
    }

    private mutable _callCounter : int = 0;
    private _simpleCalls : List[SimpleRuleSymbol * string] = List();

    [Memoize]
    public MakeParserName(ruleSymbol : SimpleRuleSymbol) : string
    {
      Owner.CallRule(ruleSymbol);
      def name = $"_parser_$(_callCounter)_$(ruleSymbol.Name)";
      _simpleCalls.Add((ruleSymbol, name));
      ++_callCounter;
      name
    }

    private _extensibleCalls : List[ExtensibleRuleSymbol * int * string] = List();

    [Memoize]
    public MakeParserName(ruleSymbol : ExtensibleRuleSymbol, bindingPower : int) : string
    {
      Owner.CallRule(ruleSymbol);
      def name = $"_parser_$(_callCounter)_$(ruleSymbol.Name)";
      _extensibleCalls.Add((ruleSymbol, bindingPower, name));
      ++_callCounter;
      name
    }

    public abstract DefineParser() : void;

    public abstract DefineParserMethods() : void;

    public abstract Emit() : void;

    protected DefineImplementation(member : ClassMember) : void
    {
      if (Owner.Environment.IsDebug)
        Owner.GrammarImplTB.DefineConditional(member)
      else
        Owner.GrammarImplTB.Define(member)
    }

    protected DefineReflection(tb : TypeBuilder, rootSequence : SequenceCompileInfo.Ast) : void
    {
      def codeForSubrule(subrule : SubruleCompileInfo) : string
      {
        if (subrule is SubruleCompileInfo.Marker)
          ""
        else
        {
          def nextField(subrule : SubruleCompileInfo) : SubruleCompileInfo
          {
            if (subrule == null)
              null
            else if (subrule.NextSibling != null)
              subrule.NextSibling
            else
              nextField(subrule.Owner.Owner)
          }

          mutable str = rootSequence.CodeForState(subrule.State);
          when (subrule.IsLoopSeparatorStart)
          {
            def afterLoopField = nextField(subrule);

            when (afterLoopField != null)
              str += ", " + rootSequence.CodeForState(afterLoopField.State);
          }
          str
        }
      }

      def sequenceFieldCases = List();
      def sequenceFields = List();
      def reflectSequence(sequence : SequenceCompileInfo) : PExpr
      {
        def type =
          match (sequence)
          {
            | SequenceCompileInfo.Ast                        => <[ Nitra.Runtime.Reflection.SequenceInfo.Ast                        ]>
            | SequenceCompileInfo.List                       => <[ Nitra.Runtime.Reflection.SequenceInfo.List                       ]>
            | SequenceCompileInfo.Option                     => <[ Nitra.Runtime.Reflection.SequenceInfo.Option                     ]>
            | SequenceCompileInfo.ListWithSeparatorRule      => <[ Nitra.Runtime.Reflection.SequenceInfo.ListWithSeparatorRule      ]>
            | SequenceCompileInfo.ListWithSeparatorSeparator => <[ Nitra.Runtime.Reflection.SequenceInfo.ListWithSeparatorSeparator ]>
            | SequenceCompileInfo.Predicate                  => <[ Nitra.Runtime.Reflection.SequenceInfo.Predicate ]>
          };
        def subrules = List();
        foreach (subrule in sequence.Subrules)
        {
          def (subruleType, args) =
            match (subrule)
            {
              | SubruleCompileInfo.Empty                                                 => (<[ Nitra.Runtime.Reflection.SubruleInfo.Empty             ]>, [])
              | SubruleCompileInfo.List                                             as x => (<[ Nitra.Runtime.Reflection.SubruleInfo.List              ]>, [reflectSequence(x.Rule), <[ $(x.MinCount) ]>, if (x.MaxCount is Some(max)) <[ $(max) ]> else <[ null ]>, <[ $(x.IsSkipAnyPattern) ]>])
              | SubruleCompileInfo.ListWithSeparator                                as x => (<[ Nitra.Runtime.Reflection.SubruleInfo.ListWithSeparator ]>, [reflectSequence(x.Rule), reflectSequence(x.Separator), <[ $(x.MinCount) ]>, if (x.MaxCount is Some(max)) <[ $(max) ]> else <[ null ]>, <[ $(x.HangingSeparator) ]>])
              | SubruleCompileInfo.Option                                           as x => (<[ Nitra.Runtime.Reflection.SubruleInfo.Option            ]>, [reflectSequence(x.Rule)])
              | SubruleCompileInfo.SimpleCall                                       as x => (<[ Nitra.Runtime.Reflection.SubruleInfo.SimpleCall        ]>, [<[ $(MakeParserName(x.Symbol) : global) ]>])
              | SubruleCompileInfo.ExtensibleCall                                   as x => (<[ Nitra.Runtime.Reflection.SubruleInfo.ExtensibleCall    ]>, [<[ $(MakeParserName(x.Symbol, x.BindingPower) : global) ]>])
              | SubruleCompileInfo.RegularCall as x with rule = x.SrcRule :> Rule.Call   => (<[ Nitra.Runtime.Reflection.SubruleInfo.RegularCall       ]>, [x.Symbol.GetRuleDescriptorRef(), if (rule.SpanClass != null) Environment.MakeSpanClassRef(rule.SpanClass) else <[ null ]>])
              | SubruleCompileInfo.TokenString as x with rule = x.SrcRule :> Rule.String => (<[ Nitra.Runtime.Reflection.SubruleInfo.TokenString       ]>, [<[ $(x.String) ]>, <[ $(rule.IsKeyToken) ]>, if (rule.SpanClass != null) Environment.MakeSpanClassRef(rule.SpanClass) else <[ null ]>])
              | SubruleCompileInfo.Marker(sym)                                           => (<[ Nitra.Runtime.Reflection.SubruleInfo.Marker            ]>, [<[ $(sym.FullName : string) ]>])
            };
          def headPredicate =
            if (subrule.HeadPredicates.Length == 0)
              <[ null ]>
            else
            {
              def name              = Util.tmpname("HeadPredicate");
              def fail              = PExprLabel(this.Environment.Manager, "childFail");
              def headPredicateCode = ParseMethodEmitter(this, tb, rootSequence).CompilePredicate(subrule.HeadPredicates, fail.Goto());
              tb.DefineConditional(<[decl:
                [Nemerle.Diagnostics.CompileStatistic("Reflection:HeadPredicate")]
                private $(name : global)(mutable curTextPos : int, text : string, parseResult : ParseResult) : bool
                {
                  mutable newPos; _ = newPos;
                  mutable tmpSize; _ = tmpSize;
                  mutable parseState; _= parseState;
                  predicateResult:
                  {
                    $headPredicateCode;
                    predicateResult(true);
                    $(fail.Label());
                    false;
                  }
                }]>);
              <[ $(name : global) ]>
            };
          def headPredicates = <[ array[..$(subrule.HeadPredicates.Map(p => reflectSequence(p)))] ]>;
          def isVoid = subrule.SrcRule.Type is RuleType.Void;
          def args =
            <[ $(subrule.Offset) ]>              :: //Offset
            <[ $(subrule.ToString()) ]>          :: //Description
            <[ $(subrule.State) ]>               :: //State
            <[ $(subrule.CanParseEmptyString) ]> :: //CanParseEmptyString
            <[ $(isVoid) ]>                      :: //IsVoid
            <[ $(codeForSubrule(subrule)) ]>     :: //Code
            headPredicate                        :: //HeadPredicate
            headPredicates                       :: //HeadPredicates
            args;
          subrules.Add(<[ $subruleType(..$args) ]>);
        }
        def additionalArgs = if (sequence is SequenceCompileInfo.Predicate(isAnd)) [<[ $isAnd ]>] else [];
        def sequenceFieldName = $"sequenceInfo$(sequenceFields.Count)";
        sequenceFields.Add((sequenceFieldName, type));
        def isVoid = sequence.SrcRule.Type is RuleType.Void;
        def getRuleName(seq : SequenceCompileInfo)
        {
          | Ast as seq => seq.Symbol.Name
          | _          => getRuleName(seq.Owner.Owner);
        }
        sequenceFieldCases.Add(<[case: | _ when ruleId == $(sequence.AstId : global) => $(sequenceFieldName : global) ]>);
        <[
          $(sequenceFieldName : global) = $type(this, $(sequence.AstId : global), $(sequence.Size), $(getRuleName(sequence)), $(sequence.ToString()), $isVoid, array[..$subrules], ..$additionalArgs);
          $(sequenceFieldName : global);
        ]>
      }
      def reflection = reflectSequence(rootSequence);
      sequenceFieldCases.Add(<[case: | _ => assert(false) ]>);

      foreach ((subruleInfoName, type) in sequenceFields)
        tb.DefineConditional(<[decl: private mutable $(subruleInfoName : global) : $type ]>);

      tb.DefineConditional(<[decl:
        [Nemerle.Diagnostics.CompileStatistic("Reflection:Reflection")]
        public override Reflection(ruleId : int) : Nitra.Runtime.Reflection.SequenceInfo
        {
          when ($(sequenceFields[sequenceFields.Count - 1][0] : global) == null)
            _ = $reflection;

          match (ruleId)
          {
            ..$sequenceFieldCases
          }
        }]>);
    }

    protected DefineInit(tb : TypeBuilder, sequence : SequenceCompileInfo.Ast) : void
    {
      def inits = List();
      foreach (sequence in sequence.NestedSequencies)
      {
        tb.DefineConditional(<[decl: public mutable $(sequence.AstId : global) : int; ]>);
        inits.Add(<[ $(sequence.AstId : global) = Grammar.NewRuleId(this); ]>);
      }

      foreach ((ruleSymbol, name) in _simpleCalls)
      {
        tb.DefineConditional(<[decl: private mutable $(name : global) : Nitra.Internal.SimpleRuleParser; ]>);
        inits.Add(<[ $(name : global) = Grammar.GetSimpleRuleParser($(ruleSymbol.GetRuleDescriptorRef())); ]>);
      }
      foreach ((ruleSymbol, bp, name) in _extensibleCalls)
      {
        tb.DefineConditional(<[decl: private mutable $(name : global) : Nitra.Internal.ExtensibleRuleParser; ]>);
        inits.Add(<[ $(name : global) = Grammar.GetExtensibleRuleParser($(ruleSymbol.GetRuleDescriptorRef()), $bp); ]>);
      }

      tb.DefineConditional(<[decl:
        [Nemerle.Diagnostics.CompileStatistic("Reflection:Init")]
        public override Init() : void
        {
          ..$inits
        }
      ]>);
    }

    protected DefineParse(tb : TypeBuilder, sequence : SequenceCompileInfo.Ast) : void
    {
      ParseMethodEmitter(this, tb, sequence).Emit();
    }

    protected DefineIsVoid(tb : TypeBuilder, sequence : SequenceCompileInfo.Ast) : void
    {
      def startState = sequence.Symbol.Type is RuleType.Void;
      tb.DefineConditional(<[ decl: public override IsVoid      : bool { get $(startState : bool) } ]>);
      tb.DefineConditional(<[ decl: public override IsTokenRule : bool { get { $(sequence.Symbol.Options.IsTokenRule) } } ]>);
    }

    public abstract CreateConstant(name : string, value : int) : string;
  }
}
