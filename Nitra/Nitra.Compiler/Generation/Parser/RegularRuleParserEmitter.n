using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Model;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal sealed class RegularRuleParserEmitter : RuleParserEmitter
  {
    public Fsm : FSM { get; }

    public this (owner : SyntaxModuleEmitter, ruleSymbol : RegularRuleSymbol)
    {
      base(owner, ruleSymbol);
      Fsm = ruleSymbol.Fsm;
    }
    
    public MethodName : string { get { this.RuleSymbol.DecorateRuleName() } }

    public override DefineParser() : void
    {
      def methodName = this.MethodName;
      def body =
        if (Owner.Environment.IsIdeMode)
          <[ _ = pos; _ = text; 0 ]>
        else
          FsmEmitter(Owner.Environment, Fsm).Emit();
      DefineImplementation(<[decl:
        [Nemerle.Diagnostics.CompileStatistic("RegularRuleParser")]
        public static $(methodName : global)(pos : int, text : string) : int
        {
          unchecked
          {
            mutable c : char;
            _ = c; // eliminate warning "a local value c was never used"
            $body;
          }
        }
      ]>);
    }

    public override DefineParserMethods() : void
    {
    }

    public override CreateConstant(_name : string, _value : int) : string
    {
      throw NotSupportedException();
    }

    public override Emit() : void
    {
    }
  }
}
