using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal abstract partial class MethodEmitter : IVariableEmitter
  {
    public Owner           : RuleParserEmitter  { get; }
    public SequenceCompileInfo   : SequenceCompileInfo.Ast  { get; }
    public TypeBuilder     : TypeBuilder        { get; }
    public Environment     : EmitterEnvironment { get { Owner.Environment } }
    public ConstantEmitter : IConstantEmitter   { get { Owner } }
    [RecordIgnore]
    protected LocalVariables : SCG.HashSet[string] = SCG.HashSet();

    public CreateVariable(name : string) : string
    {
      _ = LocalVariables.Add(name);
      name
    }

    public CompileSequence(code : SCG.List[PExpr], sequence : SequenceCompileInfo) : void
    {
      foreach (subrule in sequence.Subrules)
      {
        | Empty             as subrule => CompileEmpty            (code, subrule);
        | ExtensibleCall    as subrule => CompileExtensibleCall   (code, subrule);
        | SimpleCall        as subrule => CompileSimpleCall       (code, subrule);
        | RegularCall       as subrule => CompileRegularCall      (code, subrule);
        | List              as subrule => CompileList             (code, subrule); when (!subrule.IsSkipAnyPattern) CompileSequence(code, subrule.Rule);
        | ListWithSeparator as subrule => CompileListWithSeparator(code, subrule); CompileSequence(code, subrule.Rule); CompileSequence(code, subrule.Separator);
        | Option            as subrule => CompileOption           (code, subrule); CompileSequence(code, subrule.Rule);
        | TokenString       as subrule => CompileTokenString      (code, subrule);
        | Marker                       => ()
      }
    }

    public NoneRecursiveCompileSequence(code : SCG.List[PExpr], sequence : SequenceCompileInfo) : void
    {
      foreach (subrule in sequence.Subrules)
      {
        | Empty             as subrule => CompileEmpty            (code, subrule);
        | ExtensibleCall    as subrule => CompileExtensibleCall   (code, subrule);
        | SimpleCall        as subrule => CompileSimpleCall       (code, subrule);
        | RegularCall       as subrule => CompileRegularCall      (code, subrule);
        | List              as subrule => CompileList             (code, subrule);
        | ListWithSeparator as subrule => CompileListWithSeparator(code, subrule);
        | Option            as subrule => CompileOption           (code, subrule);
        | TokenString       as subrule => CompileTokenString      (code, subrule);
        | Marker                       => ()
      }
    }

    public abstract CompileEmpty            (code : SCG.List[PExpr], subrule : SubruleCompileInfo.Empty)             : void;
    public abstract CompileRegularCall      (code : SCG.List[PExpr], subrule : SubruleCompileInfo.RegularCall)       : void;
    public abstract CompileExtensibleCall   (code : SCG.List[PExpr], subrule : SubruleCompileInfo.ExtensibleCall)    : void;
    public abstract CompileSimpleCall       (code : SCG.List[PExpr], subrule : SubruleCompileInfo.SimpleCall)        : void;
    public abstract CompileList             (code : SCG.List[PExpr], subrule : SubruleCompileInfo.List)              : void;
    public abstract CompileListWithSeparator(code : SCG.List[PExpr], subrule : SubruleCompileInfo.ListWithSeparator) : void;
    public abstract CompileOption           (code : SCG.List[PExpr], subrule : SubruleCompileInfo.Option)            : void;
    public abstract CompileTokenString      (code : SCG.List[PExpr], subrule : SubruleCompileInfo.TokenString)       : void;

    public static MakeRegularRuleCallFullName(ruleSymbol : RegularRuleSymbol) : PExpr
    {
      def grammarType = PExprUtils.FromQualifiedIdentifier(ruleSymbol.DeclaringModule.Node.FullNameParts);
      <[ $grammarType.$(AssemblyConstants.GrammarImplName : usesite).$(ruleSymbol.DecorateRuleName() : global) ]>
    }

    public static MakeRegularRuleCall(ruleSymbol : RegularRuleSymbol, pos : PExpr, text : PExpr) : PExpr
    {
      <[ $(MakeRegularRuleCallFullName(ruleSymbol))($pos, $text) ]>
    }
  }
}
