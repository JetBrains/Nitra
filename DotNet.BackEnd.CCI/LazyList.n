using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using SC = System.Collections;

namespace Nitra.BackEnd.Cci
{
  public abstract class LazyList[T] : IReadOnlyList[T], IList[T]
  {
    protected mutable _list : ImmutableArray[T];
    
    protected abstract OnLoad() : void;
    
    Load() : void
    {
      when (_list == null)
        OnLoad();
    }
    
    public Item[index : int] : T
    {
      get
      {
        Load();
        _list[index]
      }
      set
      {
        _ = index; _ = value;
        throw NotSupportedException()
      }
    }

    public Count : int
    {
      get
      {
        Load();
        _list.Length
      }
    }
    
    public GetEnumerator() : ImmutableArray[T].Enumerator
    {
      Load();
      _list.GetEnumerator()
    }
    
    GetEnumeratorImpl() : IEnumerator[T]
     implements Seq[T].GetEnumerator
    {
      Load();
      (_list : Seq[T]).GetEnumerator()
    }

    GetEnumeratorImpl2() : SC.IEnumerator
     implements SC.IEnumerable.GetEnumerator
    {
      Load();
      (_list : SC.IEnumerable).GetEnumerator()
    }

    public CopyTo(ary : array[T], arrayIndex : int) : void
    {
      Load();
      _list.CopyTo(ary, arrayIndex)
    }
    
    public IndexOf(item : T) : int
    {
      Load();
      _list.IndexOf(item)
    }
    
    Contains(item : T) : bool
     implements System.Collections.Generic.ICollection[T].Contains
    {
      Load();
      _list.Contains(item)
    }
    
    Add(item : T) : void
     implements System.Collections.Generic.ICollection[T].Add
    {
      _ = item;
      throw NotSupportedException()
    }
    
    Clear() : void
     implements System.Collections.Generic.ICollection[T].Clear
    { throw NotSupportedException() }
    
    IsReadOnly : bool
     implements System.Collections.Generic.ICollection[T].IsReadOnly
    {
      get { true }
    }
    
    Remove(item : T) : bool
     implements System.Collections.Generic.ICollection[T].Remove
    {
      _ = item;
      throw NotSupportedException()
    }
    
    Insert(index : int, item : T) : void
     implements System.Collections.Generic.IList[T].Insert
    {
      _ = index; _ = item;
      throw NotSupportedException()
    }
    
    RemoveAt(index : int) : void
     implements System.Collections.Generic.IList[T].RemoveAt
    {
      _ = index;
      throw NotSupportedException()
    }
  }
}
