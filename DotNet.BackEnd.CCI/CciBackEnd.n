using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using Microsoft.Cci;

using System;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

using NRB = Nitra.Declarations;

namespace Nitra.BackEnd.Cci
{
  [Record]
  public class CciBackEnd : IBackEnd
  {
    public static NoLocation : Location       = Location(SourceSnapshot.Default.File, NSpan(0));
    public static NoFile : ProjectSystem.File = SourceSnapshot.Default.File;
    public static NoSpan : NSpan              = NSpan(0);

    public CciHost : IMetadataHost { get; protected set; }
    
    [RecordIgnore] mutable _cciInternedKeyToSymbolMap : Hashtable.[uint, TypeSymbol];
    [RecordIgnore] mutable _singleDimensionArray      : SingleDimensionArraySymbol;
    [RecordIgnore] mutable _cciObject                 : INamespaceTypeDefinition;
    [RecordIgnore] mutable _objectSymbol              : TypeSymbol;
    
    public this() { this(PeReader.DefaultHost()) }

    public Types                : Seq[TypeSymbol]            { get { _cciInternedKeyToSymbolMap.Values } }
    public Object               : TypeSymbol                 { get { _objectSymbol } }
    public SingleDimensionArray : SingleDimensionArraySymbol { get { _singleDimensionArray } }
    
    public LoadExternalSymbols(project : Project, context : DependentPropertyEvalContext) : NamespaceSymbol
    {
      LoadExternalSymbols(project.Libs, project.ProjectDir, (loc, err) => project.CompilerMessages.Error(loc, err), context);
    }
    
    public LoadExternalSymbols(libs : IEnumerable[LibReference], libPath : string, addError : Action[Location, string], context : DependentPropertyEvalContext) : NamespaceSymbol
    {
      Debug.WriteLine("LoadExternalSymbols started");
      
      def timer = Stopwatch.StartNew();
      _singleDimensionArray = null;
      _cciObject = null;
      _objectSymbol = null;
      
      def cciInternedKeyToSymbolMap = Hashtable.[uint, TypeSymbol]();
      _cciInternedKeyToSymbolMap = cciInternedKeyToSymbolMap;
      def rootNamespace = NamespaceSymbol();
      rootNamespace.MemberTable = TableScope("<root namespace>", rootNamespace);
      rootNamespace.DeclaredIn  = null;
      rootNamespace.FullName    = "";
      rootNamespace.EvalProperties(context);
      def makeTypeParameters(symbol : GenericEntitySymbol, cciType : ITypeDefinition) : void
      {
        unless (symbol.IsTypeParametersCountEvaluated)
          symbol.TypeParametersCount = cciType.GenericParameterCount;
        unless (symbol.IsTypeParametersEvaluated)
          symbol.TypeParameters = CreateGenericParameters(cciType.GenericParameterCount, cciType.GenericParameters, context);
      }
      
      def host = CciHost;

      foreach(lib in libs)
      {
        | name is FullNameLibReference with filePath = name.Path
        | file is FileLibReference     with filePath = file.Path =>
          def fullPath = Path.GetFullPath(IO.Path.Combine(libPath, filePath));
            
          when (!File.Exists(fullPath))
          {
            addError(NoLocation, "The referenced file '" + fullPath + "' is not found.");
            continue;
          }
            
          def unit = host.LoadUnitFrom(fullPath) :> IAssembly;
          
          when (unit == null || unit.Equals(Dummy.Module) || unit.Equals(Dummy.Assembly))
          {
            addError(NoLocation, "The referenced file '" + fullPath + "' is not .Net assembly.");
            continue;
          }

          def initTypeSymbol(typeSymbol : DeclaredTypeSymbol, type : ITypeDefinition) : void
          {
            cciInternedKeyToSymbolMap[type.InternedKey] = typeSymbol;

            when ((typeSymbol : DeclarationSymbol) is ContainerSymbol as containerSymbol)
              containerSymbol.MemberTable = TypeMemberScope("member", containerSymbol, this);
                
            when (typeSymbol is GenericTypeSymbol as genericSymbol)
              makeTypeParameters(genericSymbol, type);
            
            def modifierHost = typeSymbol;
            def flags = ModifierSet(context);
            mutable modifiers;
            when (type.IsAbstract)
              modifiers |= Modifiers.Abstract;
            when (type.IsSealed)
              modifiers |= Modifiers.Sealed;
            when (type.IsStatic)
              modifiers |= Modifiers.Static;

            // Modifiers
            match (type)
            {
              | INamespaceTypeDefinition as nsType => 
                when (nsType.IsPublic)
                  modifiers |= Modifiers.Public;
                  
              | INestedTypeDefinition as nsType => modifiers |= MakeModifiers(nsType.Visibility);
              | _ => ()
            }
                
            flags.Add(modifiers);
            modifierHost.Flags = flags;

            when ((typeSymbol : DeclarationSymbol)  is CustomAttributeHostDeclarationSymbol as attrHost)
              attrHost.CustomAttributes = LazyAttributeList(type, this);
            
            typeSymbol.EvalProperties(context);
                
            when ((typeSymbol : DeclarationSymbol) is ContainerSymbol as containerSymbol)
            {
              unless (containerSymbol.IsScopeEvaluated)
                typeSymbol.Scope = containerSymbol.MemberTable;
            }

            when (typeSymbol is GenericContainerTypeSymbol as genericContainerTypeSymbol)
            {
              def nestedTypes = LightList();
              foreach (cciNestedType in type.NestedTypes)
              {
                def visibility = cciNestedType.Visibility;
                when (visibility != TypeMemberVisibility.Private && visibility != TypeMemberVisibility.Assembly)
                  nestedTypes.Add(loadNestedType(cciNestedType, genericContainerTypeSymbol));
              }
              
              genericContainerTypeSymbol.NestedTypes = nestedTypes.ToArray();
            }
          }
          and loadNestedType(type : INestedTypeDefinition, declaredIn : GenericContainerTypeSymbol) : NestedTypeSymbol
          {
            def name = Name(NoFile, NoSpan, type.Name.Value); // TODO: type.Name.UniqueKey
            def symbol : NestedTypeSymbol  =
                     if (type.IsDelegate)  ExternalNestsdTypeDeclaration.[NestedDelegateSymbol] (name, type).DefineSymbol(declaredIn.MemberTable) 
                else if (type.IsInterface) ExternalNestsdTypeDeclaration.[NestedInterfaceSymbol](name, type).DefineSymbol(declaredIn.MemberTable)
                else if (type.IsEnum)      ExternalNestsdTypeDeclaration.[NestedEnumSymbol]     (name, type).DefineSymbol(declaredIn.MemberTable)
                else if (type.IsValueType) ExternalNestsdTypeDeclaration.[NestedStructSymbol]   (name, type).DefineSymbol(declaredIn.MemberTable)
                else                       ExternalNestsdTypeDeclaration.[NestedClassSymbol]    (name, type).DefineSymbol(declaredIn.MemberTable);
            
            unless (symbol.IsDeclaredInEvaluated)
              symbol.DeclaredIn = declaredIn;

            initTypeSymbol(symbol, type);
            symbol
          }
          def loadNsMember(member : INamespaceMember, declaredIn : NamespaceSymbol) : void
          {
            match (member)
            {
              | type is INamespaceTypeDefinition when type.IsPublic =>
                def name = Name(NoFile, NoSpan, type.Name.Value); // TODO: type.Name.UniqueKey
                def symbol : TopTypeSymbol =
                         if (type.IsDelegate)  ExternalTopTypeDeclaration.[TopDelegateSymbol] (name, type).DefineSymbol(declaredIn.MemberTable) 
                    else if (type.IsInterface) ExternalTopTypeDeclaration.[TopInterfaceSymbol](name, type).DefineSymbol(declaredIn.MemberTable)
                    else if (type.IsEnum)
                    {
                      def en = ExternalTopTypeDeclaration.[TopEnumSymbol]     (name, type).DefineSymbol(declaredIn.MemberTable);
                      en.UnderlyingType = CciTypeToTypeSymbol(type.UnderlyingType, context);
                      en
                    }
                    else if (type.IsValueType) ExternalTopTypeDeclaration.[TopStructSymbol]   (name, type).DefineSymbol(declaredIn.MemberTable)
                    else                       ExternalTopTypeDeclaration.[TopClassSymbol]    (name, type).DefineSymbol(declaredIn.MemberTable);
                
                unless (symbol.IsDeclaredInEvaluated)
                  symbol.DeclaredIn = declaredIn;

                initTypeSymbol(symbol, type);
                      
              | cciNs is INamespaceDefinition => //loadNsMembers(ns, nsSymbol.MemberTable)
                def name   = NRB.Name(NoFile, NoSpan, cciNs.Name.Value); // TODO: ns.Name.UniqueKey
                def symbol = ExternalNamespaceDeclaration(name, cciNs).DefineSymbol(declaredIn.MemberTable);
                unless (symbol.IsDeclaredInEvaluated)
                  symbol.DeclaredIn = declaredIn;
                symbol.EvalProperties(context);
                foreach (subMember in cciNs.Members)
                  loadNsMember(subMember, symbol);
                
              | _ => {}
            }
          }
              
          foreach (subMember in unit.NamespaceRoot.Members)
            loadNsMember(subMember, rootNamespace);
            
        | _ => throw NotImplementedException("Loading types from " + lib + " not supported yet.")
      }

      Debug.WriteLine($"Read external symbols took: $(timer.Elapsed)");
            
      InitSystemTypes(context);
      InitBaseTypeSet(context);
      
      Debug.WriteLine($"Total of LoadExternalSymbols took: $(timer.Elapsed)");

      rootNamespace
    }

    public LoadCustomAttribute(cciCustomAttribute : ICustomAttribute, context : DependentPropertyEvalContext) : CustomAttributeSymbol
    {
      def customAttributeSymbol = CustomAttributeSymbol();
      def attrType = CciTypeToTypeSymbol(cciCustomAttribute.Type, context);
      customAttributeSymbol.Type = attrType;
      customAttributeSymbol.FullName = attrType.FullName;
      def cciCtorKey = cciCustomAttribute.Constructor.InternedKey;
      def filter(sym : Member.ConstructorSymbol) : bool
      {
        def decl = sym.GetDeclarationsOfType.[ExternalConstructorDeclaration]().FirstOrDefault();
        when (decl == null)
          return false;
        
        decl.Method.InternedKey == cciCtorKey
      }
      mutable result = LightList.[Member.ConstructorSymbol]();
      attrType.Scope.FindMany(filter, ref result);
      when (result.Count > 0)
        customAttributeSymbol.Constructor = result.FirstItem;
      
      def cciArgToCustomAttributeExpression(cciExpr : IMetadataExpression) : CustomAttributeExpression
      {
        | c is IMetadataConstant =>
          match (c.Value)
          {
            | v is bool   => CustomAttributeExpression.Bool  (v)
            | v is byte   => CustomAttributeExpression.Byte  (v)
            | v is char   => CustomAttributeExpression.Char  (v)
            | v is double => CustomAttributeExpression.Double(v)
            | v is float  => CustomAttributeExpression.Float (v)
            | v is int    => CustomAttributeExpression.Int   (v)
            | v is long   => CustomAttributeExpression.Long  (v)
            | v is sbyte  => CustomAttributeExpression.Sbyte (v)
            | v is short  => CustomAttributeExpression.Short (v)
            | v is string => CustomAttributeExpression.String(v)
            | v is uint   => CustomAttributeExpression.Uint  (v)
            | v is ulong  => CustomAttributeExpression.Ulong (v)
            | v is ushort => CustomAttributeExpression.Ushort(v)
            | _ => assert(false);
          }

        | a is IMetadataCreateArray =>
          def elemType = CciTypeToTypeSymbol(a.ElementType, context);
          def elems = a.Initializers.MapToArray(cciArgToCustomAttributeExpression);
          CustomAttributeExpression.Array(elemType, elems)

        | t is IMetadataTypeOf => CustomAttributeExpression.Type(CciTypeToTypeSymbol(t.Type, context))
      }
      customAttributeSymbol.Arguments = cciCustomAttribute.Arguments.MapToArray(cciArgToCustomAttributeExpression);
      def cciNamedArgToCustomAttributeExpression(a : IMetadataNamedArgument) : CustomAttributeNamedArgument
      {
        def expr = cciArgToCustomAttributeExpression(a.ArgumentValue);
        def nameId = StringIndex.GetId(a.ArgumentName.Value); // TODO: ns.Name.UniqueKey
        CustomAttributeNamedArgument(nameId, expr)
      }
      customAttributeSymbol.NamedArguments = cciCustomAttribute.NamedArguments.MapToArray(cciNamedArgToCustomAttributeExpression);

      def name   = NRB.Name(NoFile, NoSpan, customAttributeSymbol.Name); // TODO: ns.Name.UniqueKey
      customAttributeSymbol.AddDeclaration(ExternalCustomAttributeDeclaration(name, cciCustomAttribute));
      customAttributeSymbol.EvalProperties(context);
      customAttributeSymbol
    }

    public Dispose() : void
    {
      when ((CciHost : object) is IDisposable as d)
        d.Dispose();
    }

    MakeModifiers(visibility : TypeMemberVisibility) : Modifiers
    {
      mutable modifiers;
      when (visibility == TypeMemberVisibility.Private)
        modifiers |= Modifiers.Private;
      when (visibility == TypeMemberVisibility.Public)
        modifiers |= Modifiers.Public;
      when (visibility == TypeMemberVisibility.FamilyOrAssembly)
        modifiers |= (Modifiers.Protected | Modifiers.Internal);
      when (visibility == TypeMemberVisibility.Family)
        modifiers |= Modifiers.Protected;
      modifiers
    }
    
    internal LoadParameters(paremeters : Seq[IParameterDefinition], containingScope : TableScope, context : DependentPropertyEvalContext) : void
    {
      foreach (p in paremeters)
      {
        //FormalParameter
        def parameterName = Name(NoFile, NoSpan, p.Name.Value); // TODO: type.Name.UniqueKey
        def parameter = ExternalParameterDeclaration(parameterName, p).DefineSymbol(containingScope);
        parameter.Type = CciTypeToTypeSymbol(p.Type, context);
        mutable parameterModifier;
        when (p.IsOut)
          parameterModifier |= ParameterModifier.Out;
        when (p.IsByReference)
          parameterModifier |= ParameterModifier.Ref;
        when (p.IsParameterArray)
          parameterModifier |= ParameterModifier.Params;
        parameter.Modifier = parameterModifier;
        parameter.Index = p.Index;
        parameter.EvalProperties(context);
      }
    }
    
    internal LoadTypeMembers(member : ITypeDefinitionMember, declaredIn : ContainerSymbol, context : DependentPropertyEvalContext) : DeclarationSymbol
    {
      def visibility = member.Visibility;
            
      //when (visibility != TypeMemberVisibility.Public && visibility != TypeMemberVisibility.Family && visibility != TypeMemberVisibility.FamilyOrAssembly)
      //  return;
              
      def makeStaticIf(isStatic : bool, flags : ModifierSet) : void { when (isStatic) flags.Add(Modifiers.Static) }
      def name = Name(NoFile, NoSpan, member.Name.Value); // TODO: type.Name.UniqueKey
      def flags = ModifierSet(context);
      flags.Add(MakeModifiers(visibility));
            
      def symbol : DeclarationSymbol =
        match (member)
        {
          | m is IPropertyDefinition =>
            makeStaticIf(m.IsStatic, flags);
            def prop = ExternalPropertyDeclaration(name, m).DefineSymbol(declaredIn.MemberTable);
            prop.Flags = flags;
            unless (prop.IsDeclaredInEvaluated)
              prop.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;
            prop.Type = CciTypeToTypeSymbol(m.Type, context); 
            prop
                  
          | m is IMethodDefinition when m.IsConstructor =>
            def method = ExternalConstructorDeclaration(name, m).DefineSymbol(declaredIn.MemberTable);
            makeStaticIf(m.IsStatic, flags);
            method.Flags = flags;
            unless (method.IsDeclaredInEvaluated)
              method.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;
            method.EvalProperties(context);
            LoadParameters(m.Parameters, method.ParameterScope, context);
            method

          | m is IMethodDefinition   =>
            makeStaticIf(m.IsStatic, flags);
            def method = ExternalMethodDeclaration(name, m).DefineSymbol(declaredIn.MemberTable);
            method.Flags = flags;

            unless (method.IsDeclaredInEvaluated)
              method.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;
            unless (method.IsTypeParametersCountEvaluated)
              method.TypeParametersCount = m.GenericParameterCount;
            unless (method.IsTypeParametersEvaluated)
              method.TypeParameters = CreateGenericParameters(m.GenericParameterCount, m.GenericParameters, context);
            
            method.ReturnType = CciTypeToTypeSymbol(m.Type, context); 
            method.EvalProperties(context);
            
            LoadParameters(m.Parameters, method.ParameterScope, context);
            method
                  
          | m is IFieldDefinition    =>
            if (member.ContainingTypeDefinition.IsEnum)
            {
              def field = ExternalEnumFieldDeclaration(name, m).DefineSymbol(declaredIn.MemberTable);
              //field.Flags = flags;
              unless (field.IsDeclaredInEvaluated)
                field.DeclaredIn = declaredIn :> EnumSymbol;
              field
            }
            else
            {
              makeStaticIf(m.IsStatic, flags);
              def field = ExternalFieldDeclaration (name, m).DefineSymbol(declaredIn.MemberTable);
              field.Flags = flags;
              unless (field.IsDeclaredInEvaluated)
                field.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;;
              field.Type = CciTypeToTypeSymbol(m.Type, context); 
              field
            }
                  
          | m is IEventDefinition    =>
            def evnt = ExternalEventDeclaration   (name, m).DefineSymbol(declaredIn.MemberTable);
            unless (evnt.IsDeclaredInEvaluated)
              evnt.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;
            evnt.Type = CciTypeToTypeSymbol(m.Type, context); 
            evnt
                  
          | _ => assert(false)
        };
        
        when (symbol is CustomAttributeHostDeclarationSymbol as attrHost)
          attrHost.CustomAttributes = LazyAttributeList(member, this);
              
        symbol.EvalProperties(context);
        symbol
    }

    CciTypeToTypeSymbol(cciTypeReference : ITypeReference, context : DependentPropertyEvalContext) : TypeSymbol
    {
      | t is IGenericTypeParameter =>
        def typeInfo = CciTypeToTypeSymbol(t.DefiningType, context) :> GenericTypeSymbol;
        def tp = typeInfo.TypeParameters[t.Index];
        tp
          
      | t is IArrayTypeReference =>
        def args = array[CciTypeToTypeSymbol(t.ElementType, context)];
        def typeInfo = if (t.IsVector) _singleDimensionArray : ArraySymbol
                        else 
                        {
                          def a = MultiDimensionArraySymbol();
                          a.TypeParametersCount = 0;
                          a.Rank        = t.Rank;
                          //a.LowerBounds = t.LowerBounds.ToArray();
                          //a.Sizes       = t.Sizes.ToArray();
                          a.EvalProperties(context);
                          a
                        };
        def constructedType = TopConstructedTypeSymbol();
        constructedType.TypeInfo = typeInfo;
        constructedType.Args = args;
        constructedType.EvalProperties(context);
        constructedType
        
      | t is ITypeDefinition =>
        mutable typeSymbol;
        if (_cciInternedKeyToSymbolMap.TryGetValue(t.InternedKey, out typeSymbol))
        {
          typeSymbol
        }
        else
        {
          // the type definition not found
          _objectSymbol
        }
          
      | t is IGenericTypeInstanceReference =>
        def typeInfo = CciTypeToTypeSymbol(t.GenericType, context) :> GenericTypeSymbol;
        def args = t.GenericArguments.Select(CciTypeToTypeSymbol(_, context)).ToArray();

        def constructedType = TopConstructedTypeSymbol();
        constructedType.TypeInfo = typeInfo;
        constructedType.Args = args;
        constructedType.EvalProperties(context);
        constructedType
               
      | _ =>
        //resolvs++;
        mutable typeSymbol;
          
        if (_cciInternedKeyToSymbolMap.TryGetValue(cciTypeReference.InternedKey, out typeSymbol))
        {
          //resolvedByKey++;
          typeSymbol
        }
        else
        {
          _objectSymbol
        }
    }
    
    CreateGenericParameters(genericParameterCount : ushort, genericParams : Seq[IGenericParameter], context : DependentPropertyEvalContext) : array[TypeParameterSymbol]
    {
      if (genericParameterCount == 0)
        AstUtils.NoTypeParameters
      else
      {
        def result = array(genericParameterCount : int);
        foreach (tp in genericParams with i)
        {
          def name  = NRB.Name(NoFile, NoSpan, tp.Name.Value); // TODO: type.Name.UniqueKey
          def tps   = TypeParameterDeclaration(name, tp).DefineSymbol();
          tps.EvalProperties(context);
          result[i] = tps;
        }
        result
      }
    }
    
    InitSystemTypes(context : DependentPropertyEvalContext) : void
    {
      def singleDimensionArray = SingleDimensionArraySymbol();
      singleDimensionArray.TypeParametersCount = 0;
      singleDimensionArray.EvalProperties(context);
      _singleDimensionArray = singleDimensionArray;
      def cciObject = CciHost.PlatformType.SystemObject.ResolvedType;
      _cciObject = cciObject; 
      _ = _cciInternedKeyToSymbolMap.TryGetValue(cciObject.InternedKey, out _objectSymbol);
    }
    
    InitBaseTypeSet(context : DependentPropertyEvalContext) : void
    {
      when (_objectSymbol == null)
        return;
      def timer = Stopwatch.StartNew();
      mutable resolvs = 0;
      mutable resolvedByKey = 0;
      mutable resolvedByResolvedTypeProp = 0;
      
      foreach (x in _cciInternedKeyToSymbolMap.Values)
      {
        def cciType = (x.FirstDeclarationOrDefault :> IExternalTypeDeclaration).Type;
        when (x is SupportsInheritanceTypeSymbol as type)
        {
          def baseTypeSet = BaseTypeReferenceSet(context);
          type.BaseTypeSet = baseTypeSet;
          foreach (cciBaseClasse in cciType.BaseClasses)
          {
            def typeSymbol = CciTypeToTypeSymbol(cciBaseClasse, context);
            baseTypeSet.AddParent(typeSymbol);
          }
          foreach (cciInterface in cciType.Interfaces)
          {
            def typeSymbol = CciTypeToTypeSymbol(cciInterface, context);
            baseTypeSet.AddParent(typeSymbol);
          }
        }
      }

      Debug.WriteLine($"InitBaseTypeSet took: $(timer.Elapsed) resolvs=$resolvs, resolvedByKey=$resolvedByKey, resolvedByResolvedTypeProp=$resolvedByResolvedTypeProp");
    }
  }
  

  [Record]
  public class ExternalNamespaceDeclaration : ExternalDeclaration[NamespaceSymbol]
  {
    public Namespace : INamespaceDefinition { get; private set; }
    public override CreateSymbol() : DeclarationSymbol { NamespaceSymbol() }
  }
  
  public interface IExternalTypeDeclaration
  {
    Type : ITypeDefinition { get; }
  }

  public interface IExternalTopTypeDeclaration
  {
    Type : INamespaceTypeDefinition { get; }
  }

  public interface IExternalNestsdTypeDeclaration
  {
    Type : INestedTypeDefinition { get; }
  }

  [Record]
  public class ExternalTopTypeDeclaration[TSymbol] : ExternalDeclaration[TSymbol], IExternalTopTypeDeclaration, IExternalTypeDeclaration
    where TSymbol : DeclarationSymbol
  {
    public Type : INamespaceTypeDefinition { get; private set; }
  }

  [Record]
  public class ExternalNestsdTypeDeclaration[TSymbol] : ExternalDeclaration[TSymbol], IExternalNestsdTypeDeclaration, IExternalTypeDeclaration
    where TSymbol : DeclarationSymbol
  {
    public Type : INestedTypeDefinition { get; private set; }
  }

  [Record]
  public class TypeParameterDeclaration : ExternalDeclaration[TypeParameterSymbol]
  {
    public TypeParam : IGenericParameter;
    public override CreateSymbol() : DeclarationSymbol { TypeParameterSymbol() }
  }

  [Record]
  public class ExternalPropertyDeclaration : ExternalDeclaration[Member.PropertySymbol]
  {
    public Property : IPropertyDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.PropertySymbol() }
  }

  [Record]
  public class ExternalMethodDeclaration : ExternalDeclaration[Member.MethodSymbol]
  {
    public Method : IMethodDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.MethodSymbol() }
  }

  [Record]
  public class ExternalConstructorDeclaration : ExternalDeclaration[Member.ConstructorSymbol]
  {
    public Method : IMethodDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.ConstructorSymbol() }
  }

  [Record]
  public class ExternalFieldDeclaration : ExternalDeclaration[Member.FieldSymbol]
  {
    public Field : IFieldDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.FieldSymbol() }
  }

  [Record]
  public class ExternalEnumFieldDeclaration : ExternalDeclaration[EnumMemberSymbol]
  {
    public Field : IFieldDefinition;
    public override CreateSymbol() : DeclarationSymbol { EnumMemberSymbol() }
  }

  [Record]
  public class ExternalEventDeclaration : ExternalDeclaration[Member.EventSymbol]
  {
    public Event : IEventDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.EventSymbol() }
  }

  [Record]
  public class ExternalParameterDeclaration : ExternalDeclaration[FormalParameterSymbol]
  {
    public Parameter : IParameterDefinition;
    public override CreateSymbol() : DeclarationSymbol { FormalParameterSymbol() }
  }

  [Record]
  public class ExternalCustomAttributeDeclaration : ExternalDeclaration[CustomAttributeSymbol]
  {
    public Attribute : ICustomAttribute;
    public override CreateSymbol() : DeclarationSymbol { CustomAttributeSymbol() }
  }
}
