using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.IO;
using System.Linq;

module Program
{
  Main(args : array[string]) : int
  {
    when (args.Length != 1)
      Prompt(1);
    
    def path = args[0];
    
    when (!Directory.Exists(path))
      Prompt(2);

    def configPath = Path.Combine(path, "config.xml");
      
    when (!File.Exists(configPath))
      Prompt(3);

    def dirs = Directory.GetDirectories(path);
    
    mutable totalConverted = 0;
    
    foreach (dir in dirs)
    {
      def testName = Path.GetFileNameWithoutExtension(dir);
      def projectPath = Path.Combine(dir, testName);
      
      when (Directory.Exists(projectPath))
      {
        Error($<#Can't create dirrectory for '$testName' test. The dirrectory '$projectPath' allredy exists.#>);
        continue;
      }
      
      _ = Directory.CreateDirectory(projectPath);
      
      def files = Enumerable.Concat(Directory.EnumerateFiles(dir, "*.test"), Directory.EnumerateFiles(dir, "*.gold"));
      foreach (file in files)
        File.Move(file, Path.Combine(projectPath, Path.GetFileName(file)));
        
      totalConverted++;
    }
      
    def files = Directory.GetFiles(path, "*.test");
    
    foreach (file in files)
    {
      def testName = Path.GetFileNameWithoutExtension(file);
      def solutionPath = Path.Combine(path, testName);
      when (Directory.Exists(solutionPath))
      {
        Error($<#Can't create dirrectory for '$testName' test. The dirrectory '$solutionPath' allredy exists.#>);
        continue;
      }
      
      _ = Directory.CreateDirectory(solutionPath);
      def projectPath = Path.Combine(solutionPath, testName);
      _ = Directory.CreateDirectory(projectPath);
      
      def destTestFilePath = Path.Combine(projectPath, testName) + ".test";
      File.Move(file, destTestFilePath);
      
      def destGoldFilePath = Path.Combine(projectPath, testName) + ".gold";
      def goldPath = Path.ChangeExtension(file, ".gold");
      when (File.Exists(goldPath))
        File.Move(goldPath, destGoldFilePath);
        
      totalConverted++;
    }

    def totalTests = dirs.Length + files.Length;
    WriteLine($"Converted $totalConverted of $totalTests tests.");
    0;
  }
  
  Prompt(errorNum : int = 0) : void
  {
    WriteLine(<#usings: TestsConverter.exe "path to test-suit folder"#>);
    when (errorNum > 0)
      Environment.Exit(errorNum);
  }

  Error(msg : string) : void
  {
    WriteLine(msg);
  }
}
