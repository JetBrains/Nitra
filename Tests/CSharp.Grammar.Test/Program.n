using System.Text;
using System;
using System.Console;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

using CSharp.Grammar;

using Nemerle.Collections;
using Nemerle.Imperative;

namespace CSharp.Grammar.Test
{
  module Program
  {
    StopOnError        : bool   = false;
    Extention          : string = @"*.cs";
    //TestsRootDir       : string = @"C:\P\Tmp\";
    //DestTestsDataDir   : string = TestsRootDir + @"data\";
    TestsRootDir       : string = @"c:\P\csharp-tests\";
    DestTestsDataDir   : string = TestsRootDir;

    SourceTestsDataDir : string = @"c:\P\ReSharper\Psi.Features\test\data\";

    Main() : void
    {
      //PrepareTests();

      //Test(warmupPass = true);
      Test(warmupPass = false);

      _ = ReadLine();
    }

    CaretRx : Regex = Regex(@"\{/?((\w|\d)\:?)+((\w|\d|\s)\:?)*\}|{(def|ref):[^}]+}", RegexOptions.Compiled);
    //CaretRx : Regex = Regex(@"\{add\}|\{caret\:?\w*\}|\{source\d*\}|{target\d*}|\{selstart\d*\}|\{selend\d*\}|\{ReturnDefaultValue\}|\{ThrowNotImplemented\}|\{NotCompiledCode\}", RegexOptions.Compiled);

    PrepareTests() : void
    {
      WriteLine("Preparing test data catalog.");

      when (Directory.Exists(DestTestsDataDir))
        Directory.Delete(DestTestsDataDir, recursive=true);

      def convert(content : string) : string
      {
        CaretRx.Replace(content, "")
      }

      def ensurEndSlash(path : string) { path.TrimEnd('\\', '/') + "\\" }
      def sourseRoot    = ensurEndSlash(Path.GetFullPath(SourceTestsDataDir));
      def sourseRootLen = sourseRoot.Length;
      def destRoot      = ensurEndSlash(DestTestsDataDir);
      def changeRoot(path : string) : string
      {
        assert2(path.StartsWith(sourseRoot));
        Path.Combine(destRoot, path.Substring(sourseRootLen))
      }
      def dirs = Directory.GetDirectories(sourseRoot, "*.*", SearchOption.AllDirectories);

      _ = dirs;

      foreach (dir in dirs)
      {
        def destDir = changeRoot(dir);

        when (Directory.Exists(destDir))
          continue;

        def files = Directory.GetFiles(dir, Extention);

        when (files.Length == 0)
          continue;

        _ = Directory.CreateDirectory(destDir);

        Write(".");

        foreach (file in files)
        {
          def destFile = changeRoot(file);
          def content  = File.ReadAllText(file);
          File.WriteAllText(destFile, convert(content));
        }
      }

      WriteLine();
      WriteLine("Finish preparing.");
    }

    Test(warmupPass : bool) : void
    {
      def topSize = 10;
      def preprocessorSymbols = ["DEBUG", "TRACE"];
      mutable filesWithErrors = 0;
      //def asmPath = Uri(Reflection.Assembly.GetCallingAssembly().CodeBase).AbsolutePath;
      //def path    = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(asmPath), @"..\..\Tests"));
      //def files   = Directory.GetFiles(path, "*.cs");
      //def files = array[@"c:\P\Tmp\aspnet-61\Samples\Net45\CS\HttpClient\GoogleMapsSample\Program.cs"];

      def files   = Directory.GetFiles(TestsRootDir, Extention, SearchOption.AllDirectories);

//      def files = array[
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//@"c:\P\Tmp\aspnet-61\Samples\Net4\CS\HttpClient\WorldBankSample\Program.cs",
//];

      def files = if (warmupPass) files.Take(200).ToArray() else files;

      when (warmupPass)
      {
        Console.ForegroundColor = ConsoleColor.Red;
        WriteLine("warm-up pass");
        Console.ResetColor();
        Console.Clear();
      }

      def (count, len) = files.FoldI((0, 0L), (i, file, (_, len)) => (i, FileInfo(file).Length + len));
      def len = len + 1;

      WriteLine($"Processing $count files. Total size: $len");

      def timer = Diagnostics.Stopwatch.StartNew();
      def timer2 = Diagnostics.Stopwatch();
      def times = List(len :> int);
      def report(isFail : bool) : void
      {
        timer.Stop();
        def rawTyle = times.Aggregate((a, b) => a + b);
        def lenInMb = (len :> double) / 1024 / 1024;
        WriteLine($"Processed $count files. Total size: $lenInMb MB. Processing took raw $rawTyle total: $(timer.Elapsed). MB/sec. $((lenInMb : double) / rawTyle.TotalSeconds).");
        WriteLine($"  Files with errors: $filesWithErrors.");

        when (isFail)
          return;

        def top = times.ZipLazy(files).OrderByDescending((time, _) => time).Take(20);
        Console.ResetColor();
        WriteLine($"  Top $topSize of most slowest files:");
        Console.ForegroundColor = ConsoleColor.DarkCyan;

        def padd(str : string, fieldSize : int = 8) : string
        {
          def paddingLen = fieldSize - str.Length;
          (if (paddingLen > 0) string(' ', paddingLen) else "") + str;
        }
        def toString(num : double) : string { padd(num.ToString("N")) }

        WriteLine("     Took              Size (KB)  Kb/sec.   File");
        foreach ((time, file) in top with i)
        {
          def fileLenKb  = FileInfo(file).Length / 1024.0;
          def len        = toString(fileLenKb);
          def kbInSec    = toString(fileLenKb / time.TotalSeconds);
          WriteLine($"     $time $len $kbInSec $(file)");
        }

        Console.ResetColor();
      }

      foreach (file in files with i)
      {
        def parser = CSharpParser();

        when (StopOnError)
          Write(file);
        def content = File.ReadAllText(file, Text.Encoding.UTF8);
        timer2.Restart();
        _ = parser.Parse(content, i, file, preprocessorSymbols);
        times.Add(timer2.Elapsed);

        // TODO: make error reporting
        WriteLine(":  OK");

        //WriteLine("-----------------------------------------------------");
        //WriteLine(ast.GetDump());
      }

    Console.ForegroundColor = ConsoleColor.Green;
    report(isFail = false);
    Console.ResetColor();
    }
  }
}
