namespace Nitra
{
  map syntax Core.Start -> Xxx
  {
    Value = ParsedValue(this.Span, this.Value());
  }

  language Language
  {
    span class Default { ForegroundColor=Black; }
    span class Keyword    regex ['a'..'z', '_']['a'..'z', '_']+                                              { ForegroundColor=Blue;  }
    span class Operator   regex ['+', '-', '/', '*', '^', '!', '?', ':', '<', '=', '>', '|', '&', '~', '%']+ { ForegroundColor=Olive; }
    span class OpenBrace  regex "(" | "{" | "[" = Brace;
    span class CloseBrace regex ")" | "}" | "]" = Brace;
    span class InlineComment    = Comment;
    span class MultilineComment = Comment;
    span class Error   { ForegroundColor=Red;      }
    span class Number  { ForegroundColor=DarkCyan; }
    span class Char    { ForegroundColor=DarkRed;  }
    span class String  { ForegroundColor=DarkRed;  }

    style Comment { ForegroundColor=Green;    }
    style Brace   { ForegroundColor=DarkGray; }
    
    extension = .nitra;
  
    company     = JetBrains;
    description = Nitra plugin for Visual Studio;
    authors     = Vlad Chistyakov, Stanislav Matveev;
    copyright   = Jet Brains;
    license url = http://opensource.org/licenses/BSD-3-Clause;
    // require license acceptance;
  
    syntax module Core start rule Start;
  }
  
  ast Xxx
  {
    in Prop : int;
    Y : Nitra.ParsedValue[int];
    Y1 : Zzz*;
    Y2 : Y*;
    Yd : int * string;
  }

  ast Yyy
  {
  }
  
  ast Zzz : Xxx
  {
  }

  syntax module Core
  {
    using Module1;
  
    literal OpenBrace           = "(", "{";
    literal CloseBrace          = ")", "}";
    literal OpenSquareBrace     = "[";
    literal CloseSquareBrace    = "]";
    literal SingleQuote         = "\'";
    literal Quote               = "\"";
    literal Semicolon           = ";";
    literal Comma               = ",";
    literal Dot                 = ".";
    literal Colon               = ":";
    literal Question            = "?";
    literal At                  = "@";
    literal Prefix              = "\\u";
    literal Op                  = "=>", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=", "==",
                                  "??", "||", "&&", "=", "|", "&", "!=", "<=", ">=", "<<", ">>", "<", ">",
                                  "^",  "+", "-", "!", "~", "++", "--", "*", "/", "%", "->";
    literal Backslash           = "\\";
    literal Epsilon             = "";
    
    syntax Start = "s" sm "." Any s Rule1 "..." Ext sm IdentifierBody nl;


    syntax Ext
    {
      | A = IdentifierBody "..."
      | B
    }
    
    syntax B = ("aaa" "xx" Ext; ",")*;
    syntax C = "cccc";

    /// The next token will be marked as KeyToken
    marker key;

    marker outline_impl; // begin outlining of implementation
    marker outline_begin;
    marker outline_end;
    marker outline_begin_before;
    marker outline_end_before;
    marker outline_hiden;

    marker i;   // increase an indent
    marker d;   // decrease an indent
    marker nl;  // optional spacer and plase for \n while pretty printing
    marker inl; // i + nl
    marker sm;  // optional spacer and prefer to print space while pretty printing

    regex Any = ['\u0000'..'\uFFFF'];

    regex UnicodeLineSeparator      = '\u2028';
    regex UnicodeParagraphSeparator = '\u2029';
    regex NewLineCharacter          = '\n' | '\r' | UnicodeLineSeparator | UnicodeParagraphSeparator;
    regex NewLine                   = "\r\n" | NewLineCharacter;
    regex Whitespace                = [Zs] | '\t' | '\v' | '\f' | '\uFEFF';
    regex Space                     = Whitespace | NewLineCharacter;
    regex Spaces                    = Space+;

    token IgnoreToken
    {
      | SpaceToken = Spaces
        {
        }
    }

    void s = IgnoreToken*;                // optional spacer
    void S = !IdentifierPartCharacters s; // identifier break spacer

    regex LetterCharacter           = [Lu, Ll, Lt, Lm, Lo, Nl];
    regex CombiningCharacter        = [Mn, Mc];
    regex DecimalDigitCharacter     = [Nd];
    regex ConnectingCharacter       = [Pc];
    regex FormattingCharacter       = [Cf];

    regex IdentifierStartCharacter  = LetterCharacter | "_";
    regex IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter;
    regex IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;
  }
}

syntax module Module1
{
  syntax Rule1 = "aa";
  literal Ellipsis  = "...";
}

