namespace Nitra
{
  syntax module Core
  {
    literal OpenBrace           = "(", "{";
    literal CloseBrace          = ")", "}";
    literal OpenSquareBrace     = "[";
    literal CloseSquareBrace    = "]";
    literal SingleQuote         = "\'";
    literal Quote               = "\"";
    literal Semicolon           = ";";
    literal Comma               = ",";
    literal Dot                 = ".";
    literal Colon               = ":";
    literal Question            = "?";
    literal At                  = "@";
    literal Assign              = "=";
    literal Prefix              = "\\u";
    literal Op                  = "=>", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=", "==",
                                  "??", "||", "&&", "=", "|", "&", "!=", "<=", ">=", "<<", ">>", "<", ">",
                                  "^",  "+", "-", "!", "~", "++", "--", "*", "/", "%", "->";
    literal Backslash           = "\\";
    literal Epsilon             = "";

    /// The next token will be marked as KeyToken
    marker key;

    marker outline_impl; // begin outlining of implementation
    marker outline_begin;
    marker outline_end;
    marker outline_begin_before;
    marker outline_end_before;
    marker outline_hiden;

    marker i;   // increase an indent
    marker d;   // decrease an indent
    marker nl;  // optional spacer and plase for \n while pretty printing
    marker inl; // i + nl
    marker sm;  // optional spacer and prefer to print space while pretty printing

    regex Any = ['\u0000'..'\uFFFF'];

    regex UnicodeLineSeparator      = '\u2028';
    regex UnicodeParagraphSeparator = '\u2029';
    regex NewLineCharacter          = '\n' | '\r' | UnicodeLineSeparator | UnicodeParagraphSeparator;
    regex NewLine                   = "\r\n" | NewLineCharacter;
    regex Whitespace                = [Zs] | '\t' | '\v' | '\f' | '\uFEFF';
    regex Space                     = Whitespace | NewLineCharacter;
    regex Spaces                    = Space+;

    token IgnoreToken
    {
      | SpaceToken = Spaces;
    }

    void s = IgnoreToken*;                // optional spacer
    void S = !IdentifierPartCharacters s; // identifier break spacer

    regex LetterCharacter           = [Lu, Ll, Lt, Lm, Lo, Nl];
    regex CombiningCharacter        = [Mn, Mc];
    regex DecimalDigitCharacter     = [Nd];
    regex ConnectingCharacter       = [Pc];
    regex FormattingCharacter       = [Cf];

    regex IdentifierStartCharacter  = LetterCharacter | "_";
    regex IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter;
    regex IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;
  }
}
