namespace Nitra
{
  map syntax Core.Start -> Xxx
  {
    Value = ParsedValue(this.Span,this.Value()); !!! no new line before indentation decreasing !!!}
  language Language
  {
    span class Default 
    {
      ForegroundColor = Black; !!! no new line before indentation decreasing !!!}
    span class Keyword regex ['a'..'z', '_'] ['a'..'z', '_']+ 
    {
      ForegroundColor = Blue; !!! no new line before indentation decreasing !!!}
    span class Operator regex ['+', '-', '/', '*', '^', '!', '?', ':', '<', '=', '>', '|', '&', '~', '%']+ 
    {
      ForegroundColor = Olive; !!! no new line before indentation decreasing !!!}
    span class OpenBrace regex "(" |"{"|"[" = Brace;span class CloseBrace regex ")" |"}"|"]" = Brace;span class InlineComment = Comment;span class MultilineComment = Comment;span class Error 
    {
      ForegroundColor = Red; !!! no new line before indentation decreasing !!!}
    span class Number 
    {
      ForegroundColor = DarkCyan; !!! no new line before indentation decreasing !!!}
    span class Char 
    {
      ForegroundColor = DarkRed; !!! no new line before indentation decreasing !!!}
    span class String 
    {
      ForegroundColor = DarkRed; !!! no new line before indentation decreasing !!!}
    style Comment 
    {
      ForegroundColor = Green; !!! no new line before indentation decreasing !!!}
    style Brace 
    {
      ForegroundColor = DarkGray; !!! no new line before indentation decreasing !!!}
    extension = .nitra;company = JetBrains;description = Nitra plugin for Visual Studio;authors = Vlad Chistyakov, Stanislav Matveev;copyright = Jet Brains;license url = http://opensource.org/licenses/BSD-3-Clause;syntax module Core start rule Start; !!! no new line before indentation decreasing !!!}
  ast Xxx
  {
    inProp : int;
    Y : Nitra.ParsedValue[int];
    Y1 : Zzz*;
    Y2 : Y*;
    Yd : int*string;
  }
  ast Yyy
  {
  }
  ast Zzz: Xxx
  {
  }
  syntax module Core
  {
    using Module1;
    literal OpenBrace = "(", "{";
    literal CloseBrace = ")", "}";
    literal OpenSquareBrace = "[";
    literal CloseSquareBrace = "]";
    literal SingleQuote = "\'";
    literal Quote = "\"";
    literal Semicolon = ";";
    literal Comma = ",";
    literal Dot = ".";
    literal Colon = ":";
    literal Question = "?";
    literal At = "@";
    literal Prefix = "\\u";
    literal Op = "=>", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=", "==", "??", "||", "&&", "=", "|", "&", "!=", "<=", ">=", "<<", ">>", "<", ">", "^", "+", "-", "!", "~", "++", "--", "*", "/", "%", "->";
    literal Backslash = "\\";
    literal Epsilon = "";
    syntax Start = "s" sm "." Any s Rule1 "..." Ext sm IdentifierBody nl;
    syntax Ext
    {
      | A=IdentifierBody "..."| B !!! no new line before indentation decreasing !!!}
    syntax B = ("aaa" "xx" Ext; ",")*;
    syntax C = "cccc";
    marker key;
    marker outline_impl;
    marker outline_begin;
    marker outline_end;
    marker outline_begin_before;
    marker outline_end_before;
    marker outline_hiden;
    marker i;
    marker d;
    marker nl;
    marker inl;
    marker sm;
    regex Any = ['\u0000'..'\uFFFF'];
    regex UnicodeLineSeparator = '\u2028';
    regex UnicodeParagraphSeparator = '\u2029';
    regex NewLineCharacter = '\n' |'\r'|UnicodeLineSeparator|UnicodeParagraphSeparator;
    regex NewLine = "\r\n" |NewLineCharacter;
    regex Whitespace = [Zs] |'\t'|'\v'|'\f'|'\uFEFF';
    regex Space = Whitespace |NewLineCharacter;
    regex Spaces = Space+;
    token IgnoreToken
    {
      | SpaceToken=Spaces
      {
      }
    }
    void s = IgnoreToken*;
    void S = !IdentifierPartCharacters s;
    regex LetterCharacter = [Lu, Ll, Lt, Lm, Lo, Nl];
    regex CombiningCharacter = [Mn, Mc];
    regex DecimalDigitCharacter = [Nd];
    regex ConnectingCharacter = [Pc];
    regex FormattingCharacter = [Cf];
    regex IdentifierStartCharacter = LetterCharacter |"_";
    regex IdentifierPartCharacters = LetterCharacter |DecimalDigitCharacter|ConnectingCharacter|CombiningCharacter|FormattingCharacter;
    regex IdentifierBody = IdentifierStartCharacter IdentifierPartCharacters*;
  }
}
syntax module Module1
{
  syntax Rule1 = "aa";
  literal Ellipsis = "...";
}
