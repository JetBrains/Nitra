// REFERENCE: Sample.Calc.dll

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nitra;

module Program
{
  parserHost : ParserHost = ParserHost();

  Main () : void
  {
    def eval(text : string) : void
    {
      def source = SourceSnapshot(text);
      def parseResult = CalcGrammar.start(source, parserHost);
      if (parseResult.IsSuccess)
      {
        def ast = CalcGrammarAst.start.Create(parseResult);

        def stream  = System.IO.MemoryStream();
        def binaryWriter = System.IO.BinaryWriter(stream);
        def astWriter = Nitra.Serialization.BinaryAstWriter();
        ast.Write(astWriter);
        astWriter.WriteTo(binaryWriter);

        stream.Position = 0;

        def binaryReader = System.IO.BinaryReader(stream);
        def astReader = Nitra.Serialization.BinaryAstReader(binaryReader);
        def astCopy = astReader.ReadAst() :> CalcGrammarAst.start;

        WriteLine($<#Result: ..$(astCopy.Value(); ", ")#>);
        WriteLine($"Pretty print: $astCopy");
        WriteLine("---");
      }
      else
      {
        foreach (error in parseResult.GetErrors())
        {
          def (line, col) = error.Location.StartLineColumn;
          WriteLine($<#($line, $col): $(error.Message)#>);
        }
      }
    }
    eval("1+2");
    eval("1+2   * 3");
    eval("2   +3 *5");
    eval("(  2+3 )*5");
  }
}

/*
BEGIN-OUTPUT
Result: 3
Pretty print: 1 + 2
---
Result: 7
Pretty print: 1 + 2 * 3
---
Result: 17
Pretty print: 2 + 3 * 5
---
Result: 25
Pretty print: (2 + 3) * 5
---
END-OUTPUT
*/
