using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.ClientServer.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using NUnit.Framework;

namespace Nitra.ClientServer.Macros.Tests
{
  [TestFixture]
  public class SerializationTests
  {
    [NitraMessage, StructuralEquality]
    public struct SimpleStruct
    {
      public IntField: int;
      public FloatField: double;
      public StringField: string;
    }

    [Test]
    public Struct_with_primitive_fields(): void 
    {
      def msg = SimpleStruct(2, 3.3, "foo");
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized)
    }

    [NitraMessage, StructuralEquality]
    public struct StructWithNestedStruct
    {
      public BoolField: bool;
      public Nested: SimpleStruct
    }
    
    [Test]
    public Struct_with_nested_struct(): void 
    {
      def msg = StructWithNestedStruct(true, SimpleStruct(2, 3.3, "foo"));
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized)
    }

    [NitraMessage, StructuralEquality]
    public struct StructWithLists
    {
      public IntList: list[int];
      public StructList: list[SimpleStruct]
    }
    
    [Test]
    public Struct_with_list(): void 
    {
      def msg = StructWithLists([1, 2, 3], [SimpleStruct(2, 3.3, "foo"), SimpleStruct(4, 5.5, "bar")]);
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized)
    }

    [Test]
    public Empty_list_is_ok(): void 
    {
      def msg = StructWithLists([], []);
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized)
    }

    [Test]
    public Null_list_is_ok(): void 
    {
      def msg = StructWithLists(null, null);
      def deserialized: StructWithLists = Test(msg.Serialize);
      Assert.AreEqual([], deserialized.IntList, "IntList");
      Assert.AreEqual([], deserialized.StructList, "StructList")
    }
    
    [NitraMessage, StructuralEquality]
    public struct StructWithImmutableArray
    {
      public IntArray: ImmutableArray[int];
      public StructArray: ImmutableArray[SimpleStruct]
    }
    
    [Test]
    public Struct_with_immutable_arrays(): void 
    {
      def msg = StructWithImmutableArray(
        [1, 2, 3].ToImmutableArray(), 
        [SimpleStruct(2, 3.3, "foo"), SimpleStruct(4, 5.5, "bar")].ToImmutableArray());
      def deserialized: StructWithImmutableArray = Test(msg.Serialize);
      Assert.AreEqual(msg.IntArray.ToArray().ToNList(), deserialized.IntArray.ToArray().ToNList(), "IntArray");
      Assert.AreEqual(msg.StructArray.ToArray().ToNList(), deserialized.StructArray.ToArray().ToNList(), "StructArray")
    }

    [Test]
    public Empty_immutable_array_is_ok(): void 
    {
      def msg = StructWithImmutableArray(ImmutableArray.Create(), ImmutableArray.Create());
      def deserialized: StructWithImmutableArray = Test(msg.Serialize);
      Assert.AreEqual([], deserialized.IntArray.ToArray().ToNList(), "IntArray");
      Assert.AreEqual([], deserialized.StructArray.ToArray().ToNList(), "StructArray")
    }

    [Test]
    public Default_immutable_array_is_ok(): void 
    {
      def msg = StructWithImmutableArray(ImmutableArray(), ImmutableArray());
      def deserialized: StructWithImmutableArray = Test(msg.Serialize);
      Assert.AreEqual([], deserialized.IntArray.ToArray().ToNList(), "IntArray");
      Assert.AreEqual([], deserialized.StructArray.ToArray().ToNList(), "StructArray")
    }
    
    [NitraMessage, StructuralEquality]
    public struct StructWithNestedCollections
    {
      public ListOfLists: list[list[int]];
      public ArrayOfArrays: ImmutableArray[ImmutableArray[int]];
    }
    
    [Test]
    public Nested_collections(): void 
    {
      def msg = StructWithNestedCollections(
        [[1, 2], [3, 4]],
        ImmutableArray.CreateRange([ImmutableArray.CreateRange([1, 2]), ImmutableArray.CreateRange([3, 4])]));
          
      def deserialized: StructWithNestedCollections = Test(msg.Serialize);
      Assert.AreEqual(msg.ListOfLists, deserialized.ListOfLists, "ListsOfLists");
      Assert.AreEqual(
        msg.ArrayOfArrays, 
        deserialized
          .ArrayOfArrays
          .ToArray()
          .ToNList()
          .Map(x => x.ToArray().ToNList()), "ArrayOfArrays")
    }
    
    [NitraMessage, StructuralEquality]
    public class Base { public BaseField: int }
    
    [NitraMessage, StructuralEquality]
    public class Derived : Base { public DerivedField: string }
    
    [Test]
    public Record_hierarchy(): void
    {
      def msg = Derived(2, "foo");
      def deserialized: Derived = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized)
    }

    [Test]
    public Record_hierarchy_base_class_reference(): void 
    {
      def msg = Derived(2, "foo") : Base;
      def deserialized: Base = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized)
    }
    
    [NitraMessage, StructuralEquality]
    public abstract class Base1 { public Base1Field: int }

    [NitraMessage, StructuralEquality]
    public class Base2 : Base1 { public Base2Field: int }

    [NitraMessage, StructuralEquality]
    public class Leaf : Base2 { public LeafField: int }
    
    [Test]
    public Three_level_record_hierarchy(): void
    {
      def msg = Leaf(1, 2, 3);
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized)
    }
    
    [NitraMessage, StructuralEquality]
    public variant SimpleVariant
    {
      | Case1 { intField: int }
      | Case2 { doubleField: double; structField: SimpleStruct }
    }
    
    [Test]
    public Simple_variant(): void 
    {
      def msg = SimpleVariant.Case1(2);
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized);
      
      def msg = SimpleVariant.Case2(3.3, SimpleStruct(4, 5.5, "foo"));
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized)
    }
    
    [Test]
    public Simple_variant_variant_class_reference(): void 
    {
      def msg = SimpleVariant.Case1(2) : SimpleVariant;
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized);
    }
    
    [NitraMessage, StructuralEquality]
    public variant VariantWithNestedVariant
    {
      | Case1 { v: SimpleVariant }
    }
    
    [Test]
    public Variant_with_nested_variant(): void
    {
      def msg = VariantWithNestedVariant.Case1(SimpleVariant.Case2(2.2, SimpleStruct(3, 4.4, "foo")));
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized);
    }

    [NitraMessage, StructuralEquality]
    public variant VariantWithCommonFields
    {
      public CommonField: int;
      | Case1 { intField: int }
    }

    [Test]
    public Variant_with_common_field(): void
    {
      def msg = VariantWithCommonFields.Case1(2, 3);
      def deserialized = Test(msg.Serialize);
      Assert.AreEqual(msg, deserialized)
    }
    
    Test[T](serialize: BinaryWriter -> void): T
    {
      def stream = MemoryStream();
      using (writer = BinaryWriter(stream, System.Text.Encoding.Default, true))
      {
        serialize(writer);
        writer.Flush();
      }
      
      stream.Position = 0;
      
      using (reader = BinaryReader(stream))
        Nitra.ClientServer.Messages.Deserializer.Deserialize(reader);
    }
  }
}