using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;
using Nitra.ViewModels;
using System.Collections.ObjectModel;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using Nitra.Visualizer.Serialization;
using Messages = Nitra.ClientServer.Messages;

namespace Nitra.Visualizer
{
  public module Utils
  {
    enum FILE_ATTRIBUTE
    {
      | DIRECTORY = 0x10
      | NORMAL = 0x80
    }
    
    _configRx: Regex = Regex(@"[\\/](Release|Debug)[\\/]", RegexOptions.Compiled | RegexOptions.IgnoreCase);

    public LoadAssembly(assemblyFilePath: string, config: string): Assembly
    {
      def assemblyFilePath = UpdatePathForConfig(assemblyFilePath, config);

      //def assembly = Assembly.ReflectionOnlyLoadFrom(assemblyFilePath);
      //def runtime = typeof(ParseResult).Assembly.GetName();
      
      //def refWithIncompatibleRuntime = 
      //  assembly
      //    .GetReferencedAssemblies()
      //    .Filter(x => x.Name == runtime.Name)
      //    .Find(x => x.Version != runtime.Version);
        
      //when (refWithIncompatibleRuntime is Some(reference))
      //  throw Exception($"Assembly '$assemblyFilePath' use incompatible runtime (Nitra.Runtime.dll) version $(reference.Version)." +
      //                  $" The current runtime has version $(runtime.Version).");
      
      Assembly.LoadFrom(assemblyFilePath)
    }

    public UpdatePathForConfig(assemblyFilePath: string, config: string): string
    {
      _configRx.Replace(assemblyFilePath, @"\" + config + @"\")
    }

    [DllImport("shlwapi.dll", EntryPoint = "PathRelativePathTo")]
    static extern PathRelativePathTo(lpszDst: StringBuilder, from: string, attrFrom: FILE_ATTRIBUTE,
                                     to: string, attrTo: FILE_ATTRIBUTE) : bool;

    public MakeRelativePath(from: string, isFromDir: bool, to: string, isToDir: bool): string
    {
      def builder = StringBuilder(1024);
      def result = 
        PathRelativePathTo(
          builder, 
          @from, 
          if (isFromDir) FILE_ATTRIBUTE.DIRECTORY else 0, 
          to, 
          if (isToDir) FILE_ATTRIBUTE.DIRECTORY else 0);

      if (result) builder.ToString() else to
    }

    public EnsureBackslash(baseDir: string): string
    {
      if (baseDir.Length == 0) "" 
      else 
        if (baseDir[baseDir.Length - 1] == '\\') baseDir else baseDir + @"\"
    }

    public GetAssemblyPaths(assemblyPaths: string): array[string]
    {
      assemblyPaths.Split(array["\r\n", "\n", "\r"], StringSplitOptions.RemoveEmptyEntries)
    }

    public IsInvalidDirName(testSuiteName: string): bool
    {
      def invalidChars = Path.GetInvalidFileNameChars();
      testSuiteName.Any(invalidChars.Contains)
    }

    public MakeXml(language : Language) : string
    {
      SerializationHelper.Serialize(language)
    }

    public Escape(str: string): string
    {
      str.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;")
    }

    public WrapToXaml(xaml: string): string
    {
      @"
<Span xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'>
" + xaml + @"
</Span>"
    }
  }
}