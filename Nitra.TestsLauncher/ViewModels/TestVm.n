using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nitra.ClientServer.Client;
using Nitra.ClientServer.Messages;
using System;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.Linq;
using System.IO;
using System.Text;
using System.Threading;
using IOFile = System.IO.File;

namespace Nitra.ViewModels
{
  public class TestVm : BaseVm, IClientHost, IDisposable
  {
    mutable       _client   : NitraClient;
    public static TypingMsg : Guid = Guid.NewGuid(); 
    public        Id        : int { get; private set }
    mutable _isBatchCodeUpdate : bool;
    mutable _pipe : ServerPipe;
    
    public Project           : ProjectVm { get; private set }
    public Code              : string
    {
      get { File.ReadAllText(FullPath, Encoding.UTF8) }
      set { File.WriteAllText(FullPath, value, Encoding.UTF8) }
    }
    public Gold              : string
    {
      get { File.ReadAllText(GoldFullPath, Encoding.UTF8) }
      set { File.WriteAllText(GoldFullPath, value, Encoding.UTF8) }
    }

    public GoldFullPath      : string { [Memoize] get { Path.ChangeExtension(FullPath, ".gold") } }
    public PrettyPrintResult : string { get; private set }
    public Exception         : Exception { get; private set }
    public TestTime          : TimeSpan { get; private set }
    public Statistics        : Statistics { get; private set }
    public override Name     : string { get { Path.GetFileNameWithoutExtension(FullPath) }}
    public override Hint     : string { get { "Test" }}

    public this(suite: SuiteVm, project : ProjectVm, filePath : string, id: int)
    {
      base(suite, filePath);
      Project = project;
      Id = id;
      Statistics = Statistics();
    }

    public SetRecoveryAlgorithm(_recoveryAlgorithm: RecoveryAlgorithm = RecoveryAlgorithm.Smart) : void
    {
      throw NotImplementedException()
    }

    // IClientHost
    public Activate([NotNull] client : NitraClient) : void
    {
      _client = client;
      _pipe = ServerPipe(OnServerMessage, ThreadPriority.AboveNormal);
      _client.Send(ClientMessage.FileActivated(Id, _pipe.PipeName))
    }

    // IClientHost
    public Deactivate() : void
    {
      _pipe?.Dispose();
      _pipe = null;
      _client = null;
    }
    
    OnServerMessage(message: ServerMessage) : void
    {
      WriteLine($"$message received.")
    }
    
    public StartBatchCodeUpdate() : void
    {
      _isBatchCodeUpdate = true;
      // TODO: flash server stream
    }
    
    public FinishBatchCodeUpdate() : void
    {
      _isBatchCodeUpdate = false;
    }

    public OnTextChanged(inserted : string, insertionLength : int, offset : int, removed : string, removalLength : int) : void
    {
      Debug.WriteLine($"offset=$offset, isBatch=$_isBatchCodeUpdate, inserted='$inserted' ($insertionLength) removed='$removed' ($removalLength)");
      // TODO: send messages to server
      unless (_isBatchCodeUpdate)
      {
        // TODO: flash server stream
      }
    }
    
    public Run() : bool
    {
      // TODO: Send massages to server: Close(old_prj), Open(new_prj), Open(file)*, Reference()*, ProjectRedy().
      // get result...
      // compare result with gold...
      // show ststistics.
      true
    }

    public CheckGold(_recoveryAlgorithm: RecoveryAlgorithm): void
    {
      unless (Suite.TestState == TestState.Ignored)
      {
        //def gold = Gold;
        // TODO: For each twst file send massages to server: RetrivePrettyprint()
        // Check pretty print with gold.
        
        //def parseTree = _file.GetParseTree() : ParseTree;
        //def prettyPrintResult = parseTree.ToString(PrettyPrintOptions.DebugIndent | PrettyPrintOptions.MissingNodes);
        //PrettyPrintResult = prettyPrintResult;
        //TestState = if (gold == prettyPrintResult) TestState.Success else TestState.Failure
      }
    }

    public Update(code: string, gold: string): void
    {
      IOFile.WriteAllText(FullPath, code);
      IOFile.WriteAllText(Path.ChangeExtension(FullPath, ".gold"), gold)
    }

    public Remove(): void
    {
      def fullPath = Path.GetFullPath(FullPath);
      IOFile.Delete(fullPath);
      def goldFullPath = Path.ChangeExtension(fullPath, ".gold");
      when (IOFile.Exists(goldFullPath))
        IOFile.Delete(goldFullPath);
      def tests = Project.Children;
      def index = tests.IndexOf(this);
      _ = tests.Remove(this);
      when (tests.Count > 0)
        tests[index].IsSelected = true;
    }

    public override GetAllTests() : Seq[TestVm] { [this] }
        
    public override ToString(): string { Name }
    
    public Dispose() : void
    {
      _client = null;
    }
  }
}