using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Client;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace Nitra.ViewModels
{
  public class WorkspaceVm : IDisposable
  {
    public StringManager : StringManager = StringManager();
    public TestSuites: ObservableCollection[SuiteVm] { get; private set }
    public IsDirty: bool { get; private set }
    public SolutinFilePath: string { get; private set }
    public RootFolder: string { get; private set }

    public this(workspaceFilePath: string, selectedPath: string, config: string)
    {
      def isSolutinFileExists = workspaceFilePath != null && File.Exists(workspaceFilePath);
      unless (isSolutinFileExists)
      {
        def message = $"The '$workspaceFilePath' not exists.";
        Debug.Assert(isSolutinFileExists, message);
        // ReSharper disable once HeuristicUnreachableCode
        throw Exception(message)
      }

      SolutinFilePath = workspaceFilePath;
      RootFolder = Path.GetDirectoryName(workspaceFilePath);
      def suiteFolders = File.ReadAllLines(workspaceFilePath);
      def rootDir = Path.GetDirectoryName(workspaceFilePath);
      Debug.Assert(rootDir != null, "rootDir != null");
      TestSuites = ObservableCollection.[SuiteVm]();

      foreach (suiteFolder in suiteFolders.Map(_.Trim()).Filter(x => !string.IsNullOrEmpty(x)))
      {
        def testSuite = SuiteVm(this, suiteFolder, config);
          
        unless (selectedPath == null)
        {
          match (testSuite.GetTree().Find(x => x.FullPath == selectedPath))
          {
            | Some(vm) => vm.IsSelected = true
            | None => ()
          }
        }
      }

      TestSuites.CollectionChanged += TestSuites_CollectionChanged;
      IsDirty = false;
    }

    public Name: string { get { Path.GetFileName(SolutinFilePath) }}

    TestSuites_CollectionChanged(_: object, _: NotifyCollectionChangedEventArgs): void
    {
      IsDirty = true
    }

    public Save(): void
    {
      when (IsDirty)
      {
        def builder = StringBuilder();
  
        foreach (testSuiteVm in TestSuites)
          _ = builder.AppendLine(testSuiteVm.Name);
  
        File.WriteAllText(SolutinFilePath, builder.ToString(), Encoding.UTF8);
        IsDirty = false
      }
    }

    public override ToString(): string { Name }

    public GetUnattachedTestSuites(): array[string]
    {
      def dir = Path.GetDirectoryName(SolutinFilePath);
      Directory.GetDirectories(dir ?? "").Select(Path.GetFileName).Except(TestSuites.Select(s => s.Name)).ToArray()
    }

    public GetAllTests() : Seq[TestVm]
    {
      foreach (s in TestSuites)
        foreach (t in s.GetAllTests())
          yield t;
    }

    public Dispose() : void 
    { 
      foreach(suite in TestSuites)
        suite.Dispose();
      
      TestSuites.Clear()
    }
  }
}