using N2;

using Nemerle.Collections;
using Nemerle.Imperative;

using System.Collections.Generic;
using System.Text;
using System.Linq;

syntax module N2Syntax
{
  using PrettyPrint;
  using TokenNames;
  using StandardSpanClasses;
  using Whitespaces;
  using Identifiers;
  using CStyleComments;

  token field Prefix              = "\\u";
  token field DodDot              = "..";
  token field Op                  = ".";
  token field Pipe                = "|";

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  keyword regex IdentifierStartCharacter (IdentifierPartCharacters | '-')* rule S;

  alias Name            = Identifier;
  alias QualifiedName   = QualifiedIdentifier;
  alias NamespaceOrType = QualifiedIdentifier;
  alias Char            = Any;
  alias GrammarName     = QualifiedIdentifier;
  alias BaseName        = QualifiedIdentifier;
  alias SeparatorToken  = TokenRuleExpression;
  alias SeparatorRule   = RuleExpression;

  token PredefinedType = "void" | "int" | "string";

  token Keyword = "as" | "syntax" | "marker" | "token" | "field" | "span" | "alias"
                | "in" | "out" | "rule" | "precedence" | "using" | "namespace" | PredefinedType;

  extend syntax IgnoreToken
  {
    | [SpanClass(Comment), ExplicitSpaces] SingleLineComment;
    | [SpanClass(Comment), ExplicitSpaces] MultiLineComment;
  }

  token HexDigit                  = ['0'..'9', 'a'..'f', 'A'..'F'];
  token ReservedStringChar        = "\"" | "\\";
  token ReservedCharChar          = "\'" | "\\";

  [SpanClass(String), ExplicitSpaces]
  syntax StringLiteral                    = "\""  StringPart* "\""
  {
  }

  [ExplicitSpaces]
  syntax StringPart
  {

    | UnicodeEscapeSequence = "\\u" HexDigit HexDigit HexDigit HexDigit
      {
      }
    | EscapeSequence        = "\\"  Char
      {
      }
    | Simple                = Chars=(!ReservedStringChar !NewLine Any)+
      {
      }
  }

  [SpanClass(Char), ExplicitSpaces]
  syntax CharLiteral                      = "\'"  CharPart "\'" {  }

  [ExplicitSpaces]
  syntax CharPart
  {

    | Simple                = !ReservedCharChar Char
      {
      }
    | UnicodeEscapeSequence = "\\u" HexDigit HexDigit HexDigit HexDigit
      {
      }
    | EscapeSequence        = "\\" Char
      {
      }
  }

  token Digits = ['0'..'9']+;

  [SpanClass(Number), ExplicitSpaces]
  syntax Number = Digits {  }

  [ExplicitSpaces]
  syntax Identifier                       = !(Keyword !IdentifierPartCharacters) IdentifierBody
  {
  }

  [ExplicitSpaces]
  syntax QualifiedIdentifier              = Names=(Identifier; s "." s)+
  {
  }

  ///////////////////////////////////////////////////////////////////////////
  //

  [StartRule, ExplicitSpaces]
  syntax Start                = s NamespaceBody !Any
  {
  }

  syntax NamespaceBody = Using*  TopDeclaration*
  {
  }

  syntax Using
  {
    | UsingOpen  = "using" sm NamespaceOrType ";" nl
      {
      }
    | UsingAlias = "using" Name sm "=" sm NamespaceOrType ";" nl
      {
      }
  }

  syntax TopDeclaration
  {
    | Namespace = "namespace" sm QualifiedName nl "{" inl NamespaceBody d "}" nl
      {
      }

    | SyntaxModule = "syntax" sm "module"sm Name nl "{" inl Using* SyntaxModuleMember* d "}" nl
      {
      }
  }

  syntax RuleAttribute
  {
    | Start                  = AttributeName="StartRule"
      {
      }
    | SpanClass              = AttributeName="SpanClass" "(" Class=Identifier ")"
      {
      }
    | ExplicitSpaces         = AttributeName="ExplicitSpaces"
      {
      }
    | ImplicitSpaces         = AttributeName="ImplicitSpaces"
      {
      }
    | SuppressTrailingSpaces = AttributeName="SuppressTrailingSpaces"
      {
      }
    | AllowTrailingSpaces   = AttributeName="AllowTrailingSpaces"
      {
      }
  }

  syntax RuleAttributeList = "[" (RuleAttribute; ","sm)+ "]"
  {
  }

  syntax RuleAttributes    = RuleAttributeList*
  {
  }

  [StartRule]
  syntax SyntaxModuleMember
  {

    | TokenRule
      {
      }
    | SimpleRule
      {
      }
    | VoidRule
      {
      }
    | ExtensibleRule
      {
      }
    | Marker              =                "marker"  sm             Name                                      ";"nl
      {
      }
    | ExtendSyntax        =                "extend"  sm "syntax" sm (Name sm "=" sm)? BaseName nl "{" inl InlineExtentionRule* d "}"nl
      {
      }
    | RuleAlias
      {
      }
    | TokenField          =                "token"   sm "field"  sm Name  sm "="  sm (StringLiteral; ","sm)+  ";"nl
      {
      }
    | SpanClass           =                "span"    sm "class"  sm Name MatchTokens=("=" TokenRuleExpression)?         ";"nl
      {
      }
    | BracePair           =                "braces"  sm Open=TokenRuleExpression "," sm Close=TokenRuleExpression                 ";"nl
      {
      }
    | KeywordRegex        =                "keyword" sm "regex"  sm MatchTokens=TokenRuleExpression sm "rule" sm QualifiedName ";"nl
      {
      }
  }

  syntax RuleAlias = "alias" sm Name sm "=" sm RuleExpression ";"nl
  {
  }

  syntax TokenRule = RuleAttributes "token" sm Name sm "=" sm TokenRuleExpression TokenRuleBody
  {
  }

  syntax TokenRuleBody
  {
    | Empty = ";"nl
      {
      }
    | Block = "{"  TokenRuleBodyMember* "}"nl
      {
      }
  }

  syntax TokenRuleBodyMember
  {
    | RuleAlias
      {
      }
    | TokenRule
      {
      }
  }

  syntax SimpleRule = RuleAttributes "syntax" sm Name sm "=" sm RuleExpression SimpleRuleBody
  {
  }

  syntax VoidRule = RuleAttributes "void" sm Name sm "=" sm RuleExpression SimpleRuleBody
  {
  }

  syntax SimpleRuleBody
  {
    | Empty = ";"nl
      {
      }
    | Block = "{"  SimpleRuleBodyMember* "}"nl
      {
      }
  }

  syntax SimpleRuleBodyMember
  {
    | RuleAlias
      {
      }
    | TokenRule
      {
      }
    | VoidRule
      {
      }
    | SimpleRule
      {
      }
    | ExtensibleRule
      {
      }
    | ExtraField
      {
      }
    | ExtraFieldOverride
      {
      }
    | ExtraFieldMissing
      {
      }
  }

  syntax ExtensibleRule = RuleAttributes "syntax"  sm Name ExtensibleRuleBody
  {
  }

  syntax ExtensibleRuleBody
  {
    | Empty = ";"nl
      {
      }
    | Block = "{"  ExtensibleRuleBodyMember* "}"nl
      {
      }
  }

  syntax ExtensibleRuleBodyMember
  {
    | RuleAlias
      {
      }
    | TokenRule
      {
      }
    | VoidRule
      {
      }
    | SimpleRule
      {
      }
    | ExtensibleRule
      {
      }
    | InlineExtentionRule
      {
      }
    | ExtraField
      {
      }
    | ExtraFieldOverride
      {
      }
    | ExtraFieldMissing
      {
      }
  }

  syntax InlineExtentionRule = "|" RuleAttributes (Name "=")? RuleExpression ExtentionRuleBody?
  {
  }

  syntax ExtentionRuleBody
  {
    | Empty = ";"nl
      {
      }
    | Block = "{"  ExtentionRuleBodyMember* "}"nl
      {
      }
  }

  syntax ExtentionRuleBodyMember
  {
    | RuleAlias
      {
      }
    | TokenRule
      {
      }
    | VoidRule
      {
      }
    | SimpleRule
      {
      }
    | ExtensibleRule
      {
      }
    | ExtraField
      {
      }
    | ExtraFieldOverride
      {
      }
    | ExtraFieldMissing
      {
      }
    | Precedence
      {
      }
  }

  syntax ExtraFieldsParam = Name sm ":" sm Type;
  [ExplicitSpaces]
  syntax ExtraFieldPrivate = "private" sm;

  syntax ExtraFieldAttribute
  {
    | Cached = AttributeName="Cached"
      {
      }
  }
  syntax ExtraFieldAttributeList = "[" (ExtraFieldAttribute; ",")+ "]"
  {
  }
  syntax ExtraFieldAttributes = ExtraFieldAttributeList*
  {
  }

  syntax ExtraField = ExtraFieldAttributes ExtraFieldPrivate? Name sm "(" (ExtraFieldsParam; "," sm)* ")" sm ":" sm Type ExtraFieldBody
  {
  }

  syntax ExtraFieldOverride = ExtraFieldAttributes "override"     sm  Name ExtraFieldBody
  {
  }

  syntax ExtraFieldMissing = ExtraFieldAttributes "missing"        sm  Name ExtraFieldBody
  {
  }

  syntax Precedence = "precedence"   sm  Number RightAssociative=("right-associative")? ";"
  {
  }

  syntax ExtraFieldBody
  {
    | Block
      {
      }
    | Expression = sm "=" sm Expression ";" nl
      {
      }
    | Empty = ";" nl
      {
      }
  }

  syntax TypeParams = "[" (Type; ","sm)+ "]";
  syntax SimpleName = Identifier TypeParams?;

  syntax Type
  {
    | PredefinedType
    | SimpleName
    | Qualified = Type "." SimpleName { precedence 20; }
    | Pointer   = Type "*" Type       { precedence 10; }
  }

  syntax Block = nl "{" inl (Expression; ";" nl)* ";"* d "}" nl;
  syntax Parentheses = "(" Expression? ")";

  syntax Content
  {
    | Block;
    | IgnoreToken+;
    | CharLiteral;
    | StringLiteral;
    | Parentheses;
    | "fold" sm Identifier "(" Expression ";" (Expression; ";"sm)+ ")";
  }

  syntax ExpressionContent
  {
    | Content1 = Content;
    | Content2 = (!";" !")" !"}" !Content Any)+;
  }

  syntax Expression = ExpressionContent+;

  syntax Range
  {
    | SingleChar = CharLiteral
      {
      }
    | CharRange       = CharLiteral ".." CharLiteral
      {
      }
    | UnicodeRange    = Name
      {
      }
  }

  syntax TokenRuleExpression
  {
    | Choice                  = LeftRule=TokenRuleExpression ^ 10 sm RightRules=("|" TokenRuleExpression ^ 10)+
      {
      }
    | Sequence                = LeftRule=TokenRuleExpression ^ 20 sm RightRules=(TokenRuleExpression ^ 20)+
      {
      }
    | Optional                = TokenRuleExpression "?"
      {
        precedence 30;
      }
    | ZeroOrMany              = TokenRuleExpression "*"
      {
        precedence 30;
      }
    | OneOrMany               = TokenRuleExpression "+"
      {
        precedence 30;
      }
    | Char                    = CharLiteral
      {
      }
    | String                  = StringLiteral
      {
      }
    | Call                    = QualifiedName
      {
      }
    | Rounds                  = "(" TokenRuleExpression ")"
      {
      }
    | Range                   = "[" (Range; ","sm)+ "]"
      {
      }
    | InvertedRange           = "[" "^" (Range; ","sm)+ "]"
      {
      }
    | ZeroOrManyWithSeparator = "(" TokenRuleExpression ";"sm SeparatorToken ")" "*"
      {
      }
    | OneOrManyWithSeparator  = "(" TokenRuleExpression ";"sm SeparatorToken ")" "+"
      {
      }
  }

  syntax RuleExpression
  {
    | Sequence                        = LeftRule=RuleExpression ^ 10 RightRules=(sm RuleExpression ^ 10)+
      {
      }
    | Not                             = "!" RuleExpression ^ 20
      {
      }
    | And                             = "&" RuleExpression ^ 20
      {
      }
    | Optional                        = RuleExpression "?"
      {
        precedence 30;
      }
    | ZeroOrMany                      = RuleExpression "*"
      {
        precedence 30;
      }
    | OneOrMany                       = RuleExpression "+"
      {
        precedence 30;
      }
    | FieldName1                      = RuleExpression ^ 12 sm "as" sm Name
      {
      }
    | FieldName2                      = Name sm "=" sm RuleExpression ^ 11
      {
      }
    | Char                            = CharLiteral
      {
      }
    | String                          = StringLiteral
      {
      }
    | Rounds                          = "(" RuleExpression ")"
      {
      }
    | Call                            = QualifiedName BindingPower=(sm "^" sm Number)?
      {
      }
    | ZeroOrManyWithSeparator         = "(" RuleExpression ";"sm SeparatorRule ")" "*"
      {
      }
    | ZeroOrManyWithHangingSeparator  = "(" RuleExpression ";"sm SeparatorRule ";"sm "?" ")" "*"
      {
      }
    | OneOrManyWithSeparator          = "(" RuleExpression ";"sm SeparatorRule ")" "+"
      {
      }
    | OneOrManyWithHangingSeparator   = "(" RuleExpression ";"sm SeparatorRule ";"sm "?" ")" "+"
      {
      }
  } // extend syntax RuleExpression
} // syntax module
