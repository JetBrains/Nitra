using Nitra;

namespace JetBrains.Nitra.Samples.SimpleSharp
{
  syntax module SimpleSharpSyntax
  {
    using PrettyPrint;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using CStyleComments;

    alias Name                = Identifier;
    alias QualifiedName       = QualifiedIdentifier;
    alias NamespaceName       = QualifiedIdentifier;
    alias BooleanExpression   = Expression;

    [StartRule, ExplicitSpaces]
    syntax CompilationUnit = s UsingDirective* NamespaceMemberDeclaration* !Any;

    regex KeywordToken = "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while" | "__arglist";

    [ExplicitSpaces] syntax Keyword = Name=KeywordToken !IdentifierPartCharacters;
    [ExplicitSpaces] syntax Identifier = !Keyword At = "@"? IdentifierBody;
    [ExplicitSpaces] syntax QualifiedIdentifier = (Identifier; s "." s)+;


    extend token IgnoreToken // declared in Whitespaces module
    {
      | [SpanClass(Comment)] SingleLineComment;
      | [SpanClass(Comment)] MultiLineComment;
    }

    [ExplicitSpaces] syntax RegularStringLiteral = "\"" (!"\"" Any)* "\"";

    regex IntegerLiteral = ['0'..'9']+ |  ("0x" | "0X") ['0'..'9', 'a'..'f', 'A'..'F']+;
    regex BooleanLiteral = "true" | "false";

    syntax UsingDirective
    {
      | Alias = "using" sm Name sm "=" sm QualifiedName ";" nl;
      | Open  = "using" sm QualifiedName ";" nl;
    }

    syntax NamespaceMemberDeclaration
    {
      | Namespace = "namespace"sm NamespaceName nl "{" inl UsingDirective* NamespaceMemberDeclaration* d "}" ";"? nl;
      | TypeDeclaration
    }

    [StartRule]
    syntax TypeDeclaration = "class" sm Name TypeBody;
    syntax TypeBody = "{" inl TypeMemberDeclaration* d "}" ";"? nl;

    [StartRule]
    syntax TypeMemberDeclaration
    {
      | Method          = Modifiers MethodHeader Body;
      | Field           = Modifiers AnyType sm VariableDeclarators  ";" nl;
      | Constant        = Modifiers "const"sm AnyType sm ConstantDeclarators ";" nl;
      //| Constructor     = Modifiers Name "(" FormalParameters ")" ConstructorInitializer? Body;
    }

    syntax MethodHeader = AnyType sm Identifier "(" FormalParameters ")";

    syntax AnyType = Type;

    syntax Type
    {
      | PredefinedType = "int" | "string" | "bool"
      | QualifiedName
    }

    syntax FormalParameter  = AnyType sm Name;
    syntax FormalParameters = (FormalParameter; ","sm)*;

    syntax Modifiers = Modifier*;

    syntax Modifier
    {
      | New       = "new"       sm;
      | Public    = "public"    sm;
      | Protected = "protected" sm;
      | Internal  = "internal"  sm;
      | Private   = "private"   sm;
      | Virtual   = "virtual"   sm;
      | Static    = "static"    sm;
      | Readonly  = "readonly"  sm;
      | Sealed    = "sealed"    sm;
      | Override  = "override"  sm;
      | Abstract  = "abstract"  sm;
    }

    syntax Body
    {
      | Block = nl "{" inl Statement* d "}" ";"? nl;
      | Empty = ";" nl;
    }

    syntax VariableDeclarators = (VariableDeclarator; ","sm)+;
    syntax VariableDeclarator  = Name (sm "=" sm VariableInitializer)?;

    syntax VariableInitializer
    {
      //| Array                 = "{"sm (VariableInitializer; ","sm)* sm Comma "}";
      | Expression;
      //| Property              = Name sm "=" sm ComplexInitializer;
    }

    syntax ConstantDeclarator  = Name sm "=" sm Expression;
    syntax ConstantDeclarators = (ConstantDeclarator; ","sm)*;

    syntax LocalVariableDeclaration = LocalVariableType sm VariableDeclarators;

    syntax LocalVariableType
    {
      | Var  = "var";
      | Type = AnyType;
    }

    syntax Block    = nl "{" inl Statement* d "}" nl;

    syntax IndentedEmbeddedStatement
    {
      | Statement = !"{" (inl EmbeddedStatement d); // not a block statment
      | Block     = &"{" Block;
    }

    [ExplicitSpaces]
    syntax CastPredicate
    {
      | CastPredicate01 = '~';
      | CastPredicate02 = '!' !'=';
      | CastPredicate03 = '&' !'=';
      | CastPredicate04 = '&' !'&';
      | CastPredicate05 = '(';
      | CastPredicate06 = !("as"S) IdentifierStartCharacter;
      | CastPredicate07 = !("is"S) IdentifierStartCharacter;
      | CastPredicate08 = '@';
      | CastPredicate09 = IntegerLiteral;
      | CastPredicate11 = BooleanLiteral S;
      | CastPredicate12 = RegularStringLiteral;
      | CastPredicate13 = "null" S;
    }

    [StartRule]
    syntax Statement
    {
      | LocalVariable     = LocalVariableDeclaration ";"nl;
      | LocalConstant     = "const" sm AnyType ConstantDeclarators ";"nl;
      | EmbeddedStatement
    }

    syntax EmbeddedStatement
    {
      | Empty       = ";" nl;
      | Block;
      | Expression  = Expression ";" nl;
      | If          = "if" sm "(" BooleanExpression ")" IndentedEmbeddedStatement ("else" IndentedEmbeddedStatement)?;
      | While       = "while" sm "(" BooleanExpression ")" IndentedEmbeddedStatement;
    }

    [StartRule]
    syntax Expression
    {
      | IntegerLiteral
      | BooleanLiteral
      | NullLiteral            = "null";
      | QualifiedName
      | Parenthesized          = "(" Expression ")";
      | Cast1                  = "(" !Expression AnyType ")" Expression;
      | Cast2                  = "(" AnyType ")" &CastPredicate Expression;
      | ThisAccess             = "this";
      | BaseAccessMember       = "base" "." QualifiedName;
      | RegularStringLiteral;
      | Invocation             =  Expression ^ 150 "(" (Argument=Expression; ","sm)* ")";
      | PostIncrement          =  Expression "++"                 precedence 150;
      | PostDecrement          =  Expression "--"                 precedence 150;
      | Identity               = "+"  Expression                  precedence 140;
      | Negation               = "-"  Expression                  precedence 140;
      | LogicalNegation        = "!"  Expression                  precedence 140;
      | BitwiseNegation        = "~"  Expression                  precedence 140;
      | PreIncrement           = "++" Expression                  precedence 140;
      | PreDecrement           = "--" Expression                  precedence 140;
      | Mul                    = Expression sm "*"  sm Expression precedence 130;
      | Div                    = Expression sm "/"  sm Expression precedence 130;
      | Remainder              = Expression sm "%"  sm Expression precedence 130;
      | Add                    = Expression sm "+"  sm Expression precedence 120;
      | Sub                    = Expression sm "-"  sm Expression precedence 120;
      | LessThan               = Expression sm "<"  sm Expression precedence 100;
      | GreaterThan            = Expression sm ">"  sm Expression precedence 100;
      | LessThanOrEqual        = Expression sm "<=" sm Expression precedence 100;
      | GreaterThanOrEqual     = Expression sm ">=" sm Expression precedence 100;
      | ConditionalAnd         = Expression sm "&&" sm Expression precedence  50;
      | ConditionalOr          = Expression sm "||" sm Expression precedence  40;
      | Assignment             = Expression sm "="  sm Expression precedence  10 right-associative;
    }
  }
}
