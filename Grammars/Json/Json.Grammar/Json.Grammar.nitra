namespace Nitra.Tests
{
  syntax module JsonParser
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using CStyleComments;

    braces "(", ")";
    braces "{", "}";
    braces "[", "]";

    [StartRule, ExplicitSpaces]
    syntax Start = s Value !Any;

    ///////////////////////////////////////////////////////////////////////////
    // Whitespaces

    extend token IgnoreToken
    {
      | [SpanClass(Comment)] SingleLineComment = SingleLineComment;
      | [SpanClass(Comment)] MultiLineComment;
    }

    ///////////////////////////////////////////////////////////////////////////
    // Identifier

    // Non ambiguous
    token Identifier = !Keyword IdentifierBody
    {
      regex KeywordToken = "true" | "false" | "null";
      token Keyword = KeywordToken !IdentifierPartCharacters;
    }

    // Non ambiguous (Keyword vs. Identifier)
    //token Identifier = IdentifierBody;


    ///////////////////////////////////////////////////////////////////////////
    // Strings

    regex EscChar                   = '\\' | '/' | 'b' | 'f' | 'n' | 'r'| 't' | 'u' HexDigit HexDigit HexDigit HexDigit
    {
      regex HexDigit                  = ['0'..'9', 'a'..'f', 'A'..'F'];
    }

    [SpanClass(String)]
    token StringLiteral1 = Quote StringPart* Quote
    {
      regex Quote   = '\"';
      regex Esc     = '\\' (Quote | EscChar);
      regex Escs    = Esc+;
      regex NotEscs = ~(Quote | '\\');

      token StringPart
      {
        | Escs;
        | NotEscs;
      }
    }

    [SpanClass(String)]
    token StringLiteral2 = Quote StringPart* Quote
    {
      regex Quote   = '\'';
      token StringPart
      {
        regex Esc = '\\' (Quote | EscChar);
        | Escs    { regex Escs    = Esc+; }
        | NotEscs { regex NotEscs = ~(Quote | '\\') - ""; }
      }
    }

    ///////////////////////////////////////////////////////////////////////////
    // Numbers

    regex Digits   = ['0'..'9']+;
    regex Integer  = '0' | ['1'..'9'] ['0'..'9']*;
    regex Exponent = ("E" | "e") ("-" | "+")? Digits;

    //[ExplicitSpaces]
    regex Fraction = "." Digits ;

    //[ExplicitSpaces]
    [SpanClass(Number)]
    regex Number = "-"? Integer Fraction? Exponent?;

    ///////////////////////////////////////////////////////////////////////////
    // Value

    syntax Value
    {
      | Identifier
      | StringLiteral1
      | StringLiteral2
      | Number
      //| [ExplicitSpaces] Number = Integer Fraction? Exponent? s;
      //| [ExplicitSpaces] NumberNeg = Minus="-" Integer Fraction? Exponent? s;
      | Object = "{" outline_begin_before inl (Property; "," nl)* nl d outline_end "}";
      | Array  = "[" outline_begin_before (Value; "," sm)* outline_end "]";
      | "true"
      | "false"
      | "null"
    }

    syntax Key
    {
      | StringLiteral1
      | StringLiteral2
      | Identifier
    }

    syntax Property = Key sm ":" sm Value;
  }
}
