using Nitra;

syntax module N2Parser
{
    using AttributeParser;
    using Identifiers;
    using StandardSpanClasses;
    using ModifierParser;
    using PrettyPrint;
    using Whitespaces;

    literal Semicolon           = ";";
    literal Eq                  = "=";
    literal OpenBrace           = "(";
    literal CloseBrace          = ")";
    literal OpenBrace           = "{";
    literal CloseBrace          = "}";
    literal OpenSquareBrace     = "[";
    literal CloseSquareBrace    = "]";

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    alias NsOrTypeName  = QualifiedIdentifier;
    alias QualifiedName = QualifiedIdentifier;
    alias Name          = Identifiers;

    [StartRule, ExplicitSpaces]
    syntax CompilationUnit = s NamespaceBody !Any;

    syntax NamespaceBody = NamespaceMember*;

    syntax NamespaceMember
    {
      | UsingImportDeclaration = "using" sm QualifiedIdentifier    ";"nl;
      | UsingAliasDeclaration  = "using" sm Alias=Identifier sm "=" sm NsOrTypeName ";"nl;
      | NamespaceDeclaration   = "namespace" sm QualifiedName nl       "{" inl Body=NamespaceBody d "}" nl;
    }

    regex IdentifierFirst = ['A'..'Z', 'a'..'z', '_'..'_'];
    regex IdentifierNext  = IdentifierFirst | ['0'..'9'];
    regex IdentifierBody  = IdentifierFirst IdentifierNext*;

    regex Identifier          = IdentifierBody;
    syntax QualifiedIdentifier = (Identifier; ".")+;

    syntax Expression;
}
