using Nemerle.Collections;
using Nitra;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Console;
using System.Linq;

using SCG = System.Collections.Generic;

public partial abstract class N2Parser
{
  _grammarDescriptors : Dictionary[string, GrammarDescriptor] = Init();

  static Init() : Dictionary[string, GrammarDescriptor]
  {
    def value = AppDomain.CurrentDomain.GetData("ExternalGrammars");
    def grammarDescriptors =
      if (value == null && _globalGrammarDescriptors != null)
        _globalGrammarDescriptors
      else
        (value :> array[GrammarDescriptor] ?? array(0)).ToDictionary(_.FullName);

    grammarDescriptors
  }

  internal static mutable _globalGrammarDescriptors : Hashtable[string, GrammarDescriptor];

  // FIXME: currently does not work
  UsingImportDeclarationHandler(usingImport : N2ParserAst.NamespaceMember.UsingImportDeclaration) : void
  {
    | N2ParserAst.NamespaceMember.UsingImportDeclaration(QualifiedIdentifier = N2ParserAst.QualifiedIdentifier.Ast as nsOrTypeName) =>
      mutable grammarDescriptor;
      if (_grammarDescriptors.TryGetValue(nsOrTypeName.Path, out grammarDescriptor))
        ()//Parser.AddGrammar(grammarDescriptor);
      else
        ();

    | _ => ()
  }

  // FIXME: currently does not work
  NamespaceScopeBegin() : void
  {
    //Parser.PushState();
  }

  // FIXME: currently does not work
  NamespaceScopeEnd(_ : bool) : void
  {
    //Parser.PopState();
  }
}

public partial module N2ParserAst
{
  public partial class QualifiedIdentifier : Nitra.Ast
  {
    public partial class Ast : QualifiedIdentifier
    {
      public Path : string
      {
        get
        {
          $<#..$(Identifiers.Item1; "."; GetText)#>
        }
      }
    }
  }
}


module Program
{
  Main() : void
  {
    InitGrammars();

    def test(code : string) : void
    {
      def parserHost = ParserHost();
      def source = SourceSnapshot(code);
      def parseResult = N2Parser.CompilationUnit(source, parserHost);
      if (parseResult.IsSuccess)
      {
        def ast = N2ParserAst.CompilationUnit.Create(parseResult);
        WriteLine("OK:");
        Console.BackgroundColor = ConsoleColor.DarkGray;
        Console.ForegroundColor = ConsoleColor.White;
        WriteLine(ast);
        Console.ResetColor();
      }
      else
      {
        Console.ForegroundColor = ConsoleColor.Red;
        foreach(error in parseResult.GetErrors())
        {
          def (line, col) = error.Location.StartLineColumn;
          WriteLine($<#($line, $col): $(error.Message)#>);
        }
        Console.ResetColor();
      }
      WriteLine();
    }

    test(<#
namespace Ns1
{
  using NitraParserExtension1;
  type X =
    A.
    B;

  namespace Ns2
  {
    namespace Ns2 { type X = C; }
    using Ns3;
  }
}
    #>);

    test(<#
namespace Ns1
{
  using NitraParserExtensions.N2ParserExtension1
  type X - A.B;
}
    #>);

    test(<#
namespace Ns1
{
  using NitraParserExtensions.N2ParserExtension1;
  type X - A.B;
}
    #>);

    test(<#
namespace Ns1
{
  namespace Ns2
  {
    using NitraParserExtensions.N2ParserExtension1;
    type X = A.B;
  }
using Y;
    #>);
    _ = ReadKey();
  }

  static InitGrammars() : void
  {
    def globalGrammarDescriptors = Hashtable();

    def path               = Path.GetDirectoryName(Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath);
    def files              = Directory.GetFiles(path, "*.dll");
    def standardAssemblies = HashSet(array["Nemerle.dll", "Nemerle.Compiler.dll", "Nitra.Runtime.dll", "Boot.Nitra.Runtime.dll", "Boot.Nitra.Core.dll", "Nitra.Compiler.dll"]);

    // Обрабатываем файлы не входящие в список сборок самого немерла (стандратные сборки).
    // В них точно не может быть парсеров.
    foreach (file when !standardAssemblies.Contains(file) in files)
    {
      def assembly = Assembly.LoadFrom(file);
      foreach(grammar in GrammarDescriptor.GetDescriptors(assembly))
        globalGrammarDescriptors.Add(grammar.FullName, grammar);
    }

    N2Parser._globalGrammarDescriptors = globalGrammarDescriptors;
  }
}
