using Nitra;

// L<I?,I?,I?,I?,I?,I?,D?>((y,m,d,h,i,s) =>
syntax module LambdaParser
{
  span class Keyword;

  regex any = ['\u0000'..'\uFFFF'];

  keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

  [StartRule, ExplicitSpaces]
  syntax Start       = s Body !any;

  literal T = "(", ")", "<", ">", "?", "^", "%", "&", "!", ",", ".", "=>";

  syntax Body       = "L" "<" (Type; ",")* ">" "(" "(" (Identifier; ",")* ")" "=>";

  syntax Type       = Identifier "?"?;

  regex IdentifierFirst = ['A'..'Z', 'a'..'z', '_'..'_'];
  regex IdentifierNext  = IdentifierFirst | ['0'..'9'];
  regex IdentifierBody  = IdentifierFirst IdentifierNext*;

  token Identifier       = Name=IdentifierBody;

  regex newLineCharacter   = '\n'
                      | '\r'
                      | '\u2028'    /*  line separator       */
                      | '\u2029';   /*  paragraph separator  */
  regex newLine   = "\r\n" | newLineCharacter;

  regex whitespace = [Zs]
            | '\t'
            | '\v'        /*  vertial tab          */
            | '\f';       /*  form feed            */


  regex space = whitespace | newLine;

  void s = space*;                      /* optional spacer          */
  void S = !IdentifierNext s; /* identifier break spacer  */
}
