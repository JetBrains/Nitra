using Nitra.Runtime;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nitra;
using Nitra.Quote;

[assembly: ImportRules(Grammar = "SplicableCalcGrammar")]

module Program
{
  parserHost : ParserHost = ParserHost();

  Main () : void
  {
    def x    = quote <# expr: $Number(number.Create(context, "3")) #>;
    def expr = quote <# expr: 7 + $(x) #>;
    def ast  = quote <# start: 2 + $(expr) * 4, 8 + 1 #>;
    WriteLine($<#Result: ..$(ast.Value(); ", ")#>);
    WriteLine($"Pretty print: $ast");
    
    quote match (ast)
    {
      | <# start: $ExprsItem(_), 8 + 1 #> => WriteLine("ok");
      | _ => WriteLine("fail")
    }
    
    def commandPrompt = "input>";
    def eval(text : string) : void
    {
      def error(msg : string, pos : int) : void
      {
        WriteLine(string(' ', pos + commandPrompt.Length) + "^");
        WriteLine(msg);
      }
      def writeColored(color : ConsoleColor, text : string, pos : int, length : int)
      {
        def originalColor = ForegroundColor;
        ForegroundColor = color;
        Write(text.Substring(pos, length));
        ForegroundColor = originalColor;
      }

      def source = SourceSnapshot(text);
      def parseResult = CalcGrammar.start(source, parserHost);
      try
      {
        Write("Highlighting: ");
        def spans = List();
        def text = source.Text;
        parseResult.GetSpans(0, text.Length, spans);
        mutable pos = 0;
        foreach (span in spans)
        {
          when (span.SpanClass : object == StandardSpanClasses.SpanClass_Number)
          {
            writeColored(ConsoleColor.Gray, text, pos, span.Span.StartPos - pos);
            writeColored(ConsoleColor.Magenta, text, span.Span.StartPos, span.Span.Length);
            pos = span.Span.EndPos;
          }
          when (span.SpanClass : object == StandardSpanClasses.SpanClass_Operator)
          {
            writeColored(ConsoleColor.Gray, text, pos, span.Span.StartPos - pos);
            writeColored(ConsoleColor.Cyan, text, span.Span.StartPos, span.Span.Length);
            pos = span.Span.EndPos;
          }
        }
        writeColored(ConsoleColor.Gray, text, pos, text.Length - pos);
        WriteLine();

        def ast = CalcGrammarAst.start.Create(parseResult);
        WriteLine($<#Result: ..$(ast.Value(); ", ")#>);
        WriteLine($"Pretty print: $ast");
      }
      catch
      {
        | e => error(e.Message, 0);
      }
      WriteLine();
    }
    def inputLoop() : void
    {
      Write(commandPrompt);
      def text = ReadLine();
      unless (string.IsNullOrEmpty(text))
      {
        eval(text);
        inputLoop()
      }
    }
    inputLoop()
  }
}
