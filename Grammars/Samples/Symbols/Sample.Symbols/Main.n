using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nitra;
using Nitra.Runtime;
using Nitra.Typing;
using Nitra.Serialization;

public class StubProject : Project
{
}

[Record, ExportableSymbol]
public abstract class SampleSymbol1 : SingleDefSymbol
{
  public abstract X : list[string] { get; }
  public abstract S : option[Symbol] { get; }
  public override Description : string { get { "SampleSymbol1" } }
  public abstract TestProp : Test { get; }
}

[Record, StructuralEquality]
public class Test : Located
{
  public override Location : Location { get; }
  public Prop1 : int    { get; }
  public Prop2 : string { get; }
}

[Record]
public sealed class ParsedSampleSymbol1 : SampleSymbol1
{
  public override X : list[string] { get; }
  public override S : option[Symbol] { get; }
  public override TestProp : Test { get; }
}

[Record, ExportableSymbol(ExternalSampleSymbol2)]
public abstract class SampleSymbol2 : SingleDefSymbol
{
  public abstract K : int { get; }
  public override Description : string { get { "SampleSymbol2" } }

  public Serialize(writer : BinaryWriter, _ : IMetadataWriter) : void
  {
    writer.Write(K);
  }
}

[Record]
public sealed class ParsedSampleSymbol2 : SampleSymbol2
{
  public override K : int { get; }
}

public sealed class ExternalSampleSymbol2 : SampleSymbol2
{
  public Deserialize(reader : BinaryReader, _ : IMetadataReader) : void
  {
    K = reader.ReadInt32();
  }
}

[Record, ExportableSymbol]
public abstract class NonTreeSymbol : SingleDefSymbol
{
  public abstract Z : string { get; }
  public override Description : string { get { "NoneTreeSymbol1" } }
}

[Record]
public sealed class ParsedNonTreeSymbol : NonTreeSymbol
{
  public override Z : string { get; }
}

module Program
{
  Main() : void
  {
    def p1 = StubProject();
    p1.Init([]);
    Project.CurrentProject = p1;

    def sym1 = ParsedSampleSymbol1("Sample1", Location.Default, ["xxx"], None(), Test(Location.Default, 42, "Hi!"));
    def sym2 = ParsedSampleSymbol1("Sample2", Location.Default, [], Some(ParsedNonTreeSymbol("NonTree1", Location.Default, "zzz")), Test(Location.Default, 333, "Wow!"));
    def sym3 = ParsedSampleSymbol2("Sample3", Location.Default, 123);
    _ = p1.RootNamespace.Node.AddAndReport.[SampleSymbol1]([ "Foo", "Bar" ], sym1, Location.Default);
    _ = p1.RootNamespace.Node.AddAndReport.[SampleSymbol1]([ "Foo", "Baz" ], sym2, Location.Default);
    _ = p1.RootNamespace.Node.AddAndReport.[SampleSymbol2]([ "Foo", "Byz" ], sym3, Location.Default);

    def stream = MemoryStream();
    def writer = MetadataWriter(stream);
    writer.WriteSymbols();

    def p2 = StubProject();
    p2.Init([]);
    Project.CurrentProject = p2;

    def registry = ExternalSymbolConstructorRegistry.CreateFromAppDomainAssemblies();

    _ = stream.Seek(0L, SeekOrigin.Begin);
    def reader = MetadataReader(stream, registry, AssemblyIds.NoAssembly, Location.Default);
    reader.CreateSymbols();
    reader.ReadSymbols();

    def node = p2.RootNamespace.Node.AddNode(["Foo", "Bar", "Sample1"]);
    def sym1_loaded = node.Symbol :> SampleSymbol1;
    assert2(sym1.TestProp == sym1_loaded.TestProp);
    assert2(sym1.X.Equals(sym1_loaded.X));

    def node = p2.RootNamespace.Node.AddNode(["Foo", "Baz", "Sample2"]);
    def sym2_loaded = node.Symbol :> SampleSymbol1;
    assert2(sym2.TestProp == sym2_loaded.TestProp);
    assert2(sym2.X.Equals(sym2_loaded.X));

    def node = p2.RootNamespace.Node.AddNode(["Foo", "Byz", "Sample3"]);
    def sym3_loaded = node.Symbol :> SampleSymbol2;
    assert2(sym3.K == sym3_loaded.K);

    _ = ReadLine();
  }
}
