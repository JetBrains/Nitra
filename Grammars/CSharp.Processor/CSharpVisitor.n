using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra;
using Nitra.Quote;

[assembly: ImportRules(Grammar = "SplicableCSharp", GrammarAlias = "cs")]

internal sealed class CSharpVisitor : AstVisitor
{
  [Record]
  private struct VisitorContext
  {
    public Statements : SCG.List[CSharpAst.Statement];
  }

  _contexts : SCG.Stack[VisitorContext] = SCG.Stack();
  _parents  : SCG.Stack[Ast]            = SCG.Stack();

  public override Enter(ast : Ast)        : void { _parents.Push(ast); }

  public override Leave(_ : Ast, _ : Ast) : void { _ = _parents.Pop(); }

  public override Visit(ast : Ast) : Ast
  {
    quote match (ast)
    {
      | statementList is ListAst[CSharpAst.Statement] =>
        def newStatements = SCG.List(statementList.Length);
        _contexts.Push(VisitorContext(newStatements));
        foreach (item in statementList)
          newStatements.Add(Visit(item) :> CSharpAst.Statement);
        _ = _contexts.Pop();
        statementList.UpdateItems(newStatements)

      | expressionStatement is CSharpAst.EmbeddedStatement.Expression when _parents.Peek() is CSharpAst.IndentedEmbeddedStatement =>
        def newStatements = SCG.List();
        _contexts.Push(VisitorContext(newStatements));
        def newExpressionStatement = expressionStatement.Apply(this) :> CSharpAst.EmbeddedStatement;
        _ = _contexts.Pop();
        if (newStatements.Count > 0)
        {
          newStatements.Add(quote <# cs::Statement: $EmbeddedStatement(newExpressionStatement) #>);
          quote <# EmbeddedStatement: { $Statements(newStatements.ToNList()) } #>
        }
        else newExpressionStatement;

      | <# Expression: $(expr1).Where($Name(item) => $Expression(pred)) #> when _contexts.Count > 0 with context = _contexts.Peek() =>
        def varName = NameGenerator.GenerateName("buffer");
        context.Statements.Add(quote <# Statement:
          List<object> $Name(Identifier.Create(context, false, varName)) = new List<object>();
        #>);
        context.Statements.Add(quote <# Statement:
          foreach (var $Name(item) in $Expression(expr1))
            if ($BooleanExpression(pred))
              $Identifier(Identifier.Create(context, false, varName)).Add($Identifier(item));
        #>);
        quote <# Expression: $Identifier(Identifier.Create(context, false, varName)) #>;

      | <# Expression: !false #> => quote <# Expression: true #>
      | x => x.Apply(this)
    }
  }
}

internal module NameGenerator
{
  private mutable _id : int = 0;

  public GenerateName(body : string) : string
  {
    _id += 1;
    "__N_" + body + "_" + _id
  }
}
