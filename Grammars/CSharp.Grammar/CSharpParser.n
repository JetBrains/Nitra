using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using CSharpParser;

using Peg = Nemerle.Peg;

using Nitra;
using Nitra.Internal;

namespace CSharp.Grammar
{
  [Record]
  public class PegError : Peg.Located
  {
    public Message : string { get; }
  }

  public class CSharpParser
  {
    public Parse(code : string, fileIndex : int, fileName : string, preprocessorSymbols : list[string]) : CSharpAst.CompilationUnit
    {
      mutable pegErrors = [];
      def source = Peg.SourceSnapshot(code, fileIndex, fileName);

      try
      {
        def preParser = PreParser();

        match(preParser.Parse(source))
        {
          | Some(preAst) =>
            def preResult = Preprocessor.Run(preAst, preprocessorSymbols);
            when(preResult.HasErrors)
              pegErrors = preResult.Errors;

            def prepSource = preResult.Source;
            //IO.File.WriteAllText(fileName + "-prep", prepSource.Text);
            def nitraSource = Nitra.SourceSnapshot(prepSource.OriginalText, prepSource.Text, prepSource.FileIndex,
              prepSource.FileName, prepSource.GetLinesRelocationTable(), 0);

            def parserHost = ParserHost();
            def parseResult = CSharp.CompilationUnit(nitraSource, parserHost);
            if (parseResult.IsSuccess)
              CSharpAst.CompilationUnit.Create(parseResult);
            else
              assert(false);

          | _ =>
            def (errorPos, ids) = preParser.GetMaxRollbackPosAndIds();
            def loc = Peg.Location(source, errorPos, errorPos);
            //pegErrors = [PegError(Peg.Location(source, errorPos, errorPos), $<#Preprocessor error. Expected: ..$(ids; "; "; id => preParser.GetRuleName(id))#>)];
            //SimpleError($<#Preprocessor error. Expected: ..$(ids; "; "; id => preParser.GetRuleName(id))#>);
            def (line, col) = loc.StartLineColumn;;
            throw Exception($<#$fileName($line, $col): Preprocessor error. Expected: ..$(ids; "; "; id => preParser.GetRuleName(id))#>)

        }
      }
      catch
      {
        | _ is Exception => throw
      }
    }
  }
}
