using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;

namespace CSharpParser
{
  public module Preprocessor
  {
    public Run(unit : PreparedCompilationUnit, predefinedSymbols : SCG.IEnumerable[string]) : PreprocessorResult
    {
      using(elements = unit.Elements.GetEnumerator())
      {
        def source = unit.Location.Source;
        def writer = PreprocessorWriter(source.OriginalText);
        def context = PreprocessorContext(writer, predefinedSymbols, elements);

        while(context.MoveNext())
          unless(EvalElement(context))
            context.Errors.Add(context.Current);
        writer.WriteTail();

        PreprocessorResult(
          source.WithText(writer.ToString()),
          context.CompilationMessages,
          context.LineHints,
          context.PragmaHints,
          context.Errors,
          context.DocComments,
          SCG.List(context.GetDefinedSymbols()))
      }
    }

    private EvalElement(context : PreprocessorContext) : bool
    {
      match(context.Current)
      {
        | Comment => true

        | DocComment as c =>
          when(context.IsPositiveBranch)
            context.DocComments.Add(c);
          true

        | Directive(Define(symbol)) =>
          when(context.IsPositiveBranch)
            context.Define(symbol.id);
          true

        | Directive(Undefine(symbol)) =>
          when(context.IsPositiveBranch)
            context.Undefine(symbol.id);
          true

        | Directive(If(condition)) =>
          EvalIf(context, condition)

        | Directive(Region) =>
          EvalRegion(context)

        | Directive(CompilationError as msg)
        | Directive(CompilationWarning as msg) =>
          when(context.IsPositiveBranch)
            context.CompilationMessages.Add(msg);
          true

        | Directive(LineNumber as lineHint)
        | Directive(LineDefault as lineHint)
        | Directive(LineHidden as lineHint) =>
          when(context.IsPositiveBranch)
            context.LineHints.Add(lineHint);
          true

        | Directive(Pragma as pragmaHint) =>
          when(context.IsPositiveBranch)
            context.PragmaHints.Add(pragmaHint);
          true

        | Directive(Error as error) =>
          context.Errors.Add(error);
          true

        | _ => false
      }
    }

    private EvalIf(context : PreprocessorContext, condition : DirectiveExpression) : bool
    {
      def ifContext = context.WithPositiveBranch(context.IsPositiveBranch && EvalCondition(context, condition));
      def loop()
      {
        if(ifContext.MoveNext())
          match(context.Current)
          {
            | Directive(Elif(condition)) =>
              EvalIf(context.WithPositiveBranch(context.IsPositiveBranch && !ifContext.IsPositiveBranch), condition)

            | Directive(Else) =>
              EvalElse(context.WithPositiveBranch(context.IsPositiveBranch && !ifContext.IsPositiveBranch))

            | Directive(EndIf) =>
              true

            | _ =>
              EvalElement(ifContext) && loop()
          }
        else
          false
      }
      loop()
    }

    private EvalElse(context : PreprocessorContext) : bool
    {
      def loop()
      {
        if(context.MoveNext())
          match(context.Current)
          {
            | Directive(EndIf) =>
              true

            | _ =>
              EvalElement(context) && loop()
          }
        else
          false
      }
      loop()
    }

    private EvalRegion(context : PreprocessorContext) : bool
    {
      def loop()
      {
        if(context.MoveNext())
          match(context.Current)
          {
            | Directive(EndRegion) =>
              true

            | _ =>
              EvalElement(context) && loop()
          }
        else
          false
      }
      loop()
    }

    private EvalCondition(context : PreprocessorContext, condition : DirectiveExpression) : bool
    {
      match(condition)
      {
        | Symbol(id)                => context.IsDefined(id)
        | Boolean(value)            => value
        | AndOperator(e1, e2)       => EvalCondition(context, e1) && EvalCondition(context, e2)
        | OrOperator(e1, e2)        => EvalCondition(context, e1) || EvalCondition(context, e2)
        | EqualsOperator(e1, e2)    => EvalCondition(context, e1) == EvalCondition(context, e2)
        | NotEqualsOperator(e1, e2) => EvalCondition(context, e1) != EvalCondition(context, e2)
        | NotOperator(e)            => !EvalCondition(context, e)
      }
    }
  }
}
