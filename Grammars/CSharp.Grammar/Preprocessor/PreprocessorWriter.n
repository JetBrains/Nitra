using System;
using System.Text;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

namespace CSharpParser
{
  internal sealed class PreprocessorWriter
  {
    public this(originalText : string)
    {
      this.originalText = originalText;
      this.buffer = StringBuilder(originalText.Length);
      this.pos = 0;
    }

    originalText : string;

    buffer : StringBuilder;

    mutable pos : int;

    public WriteElement(element : PreParseElement, isPositiveBranch : bool) : void
    {
      def loc = element.Location;
      when(isPositiveBranch)
      {
        _ = buffer.Append(originalText, pos, loc.StartPos - pos);
        pos = loc.StartPos;
      }
      _ = buffer.Append(' ', loc.EndPos - pos);
      pos = loc.EndPos;
    }

    public WriteTail() : void
    {
      _ = buffer.Append(originalText, pos, originalText.Length - pos);
      pos = originalText.Length;
    }

    public override ToString() : string
    {
      buffer.ToString()
    }
  }
}
