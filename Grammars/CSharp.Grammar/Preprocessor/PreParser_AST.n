using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Peg;

namespace CSharpParser
{
  [Record]
  public class PreparedCompilationUnit : Located
  {
    [Accessor] elements : SCG.List[PreParseElement];
  }

  public variant PreParseElement : Located
  {
    | Comment
    | DocComment  { values     : list[Location]; }
    | Directive   { directive  : CSharpParser.Directive; }
  }

  public variant Directive : Located
  {
    | If                  { condition   : DirectiveExpression; }
    | Elif                { condition   : DirectiveExpression; }
    | Else
    | EndIf
    | Define              { symbol      : DirectiveExpression.Symbol; }
    | Undefine            { symbol      : DirectiveExpression.Symbol; }
    | LineDefault
    | LineHidden
    | LineNumber          { number      : int; fileName : string; }
    | Region              { title       : string; }
    | EndRegion           { title       : string; }
    | CompilationWarning  { message     : string; }
    | CompilationError    { message     : string; }
    | Pragma              { text        : string; }
    | Error               { message     : string; }

    public override ToString() : string
    {
      match(this)
      {
        | If(e) => $"#if $e"
        | Elif(e) => $"#elif $e"
        | Else => "#else"
        | EndIf => "#endif"
        | Define(e) => $"#define $e"
        | Undefine(e) => $"#undefine $e"
        | LineDefault => "#line default"
        | LineHidden => "#line hidden"
        | LineNumber(num, null) => $"#line $num"
        | LineNumber(num, file) => $"#line $num \"$file\""
        | Region(title) => $"#region $title"
        | EndRegion(title) => $"#endregion $title"
        | CompilationWarning(message) => $"#warning $message"
        | CompilationError(message) => $"#error $message"
        | Pragma(text) => $"#pragma $text"
        | Error(message) => message
      }
    }
  }

  public variant DirectiveExpression
  {
    | Symbol              { id    : string; }
    | Boolean             { value : bool;   }
    | AndOperator         { left  : DirectiveExpression;
                            right : DirectiveExpression; }
    | OrOperator          { left  : DirectiveExpression;
                            right : DirectiveExpression; }
    | EqualsOperator      { left  : DirectiveExpression;
                            right : DirectiveExpression; }
    | NotEqualsOperator   { left  : DirectiveExpression;
                            right : DirectiveExpression; }
    | NotOperator         { e     : DirectiveExpression; }

    public override ToString() : string
    {
      match(this)
      {
        | Symbol(id) => id
        | Boolean(value) => value.ToString()
        | AndOperator(left, right) => $"($left && $right)"
        | OrOperator(left, right) => $"($left || $right)"
        | EqualsOperator(left, right) => $"($left == $right)"
        | NotEqualsOperator(left, right) => $"($left != $right)"
        | NotOperator(expr) => $"!$expr"
      }
    }
  }
}
