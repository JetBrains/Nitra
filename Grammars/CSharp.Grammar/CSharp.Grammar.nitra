//using Nitra;

syntax module CSharp
{
  using Outline;
  using PrettyPrint;
  using StandardSpanClasses;
  using CStyleComments;
  using Whitespaces;

  literal Less                = "<";
  literal Greater             = ">";
  literal OpenBrace           = "(";
  literal CloseBrace          = ")";
  literal OpenBrace           = "{";
  literal CloseBrace          = "}";
  literal OpenSquareBrace     = "[";
  literal CloseSquareBrace    = "]";
  literal SingleQuote         = "\'";
  literal Quote               = "\"";
  literal Semicolon           = ";";
  literal Comma               = ",";
  literal Dot                 = ".";
  literal Colon               = ":";
  literal Question            = "?";
  literal At                  = "@";
  literal AliasSeparator      = "::";
  literal Assign              = "=";
  literal Prefix              = "\\u";
  literal DodDot              = "..";
  literal Op                  = "=>", "=", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=", "??",
                                      "||", "&&", "|", "^", "&", "==", "!=", "<=", ">=", "<<", ">>", "+", "-", "!", "~", "++", "--", "*", "/", "%", "->";
  literal Backslash           = "\\";
  literal Epsilon             = "";

  span class Keyword = ['a'..'z', '_']['a'..'z', '_']+;

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  alias Attributes              = AttributeSection*;
  alias GlobalAttributes        = GlobalAttributeSection*;
  alias BooleanExpression       = Expression;
  alias ConstantExpression      = Expression;
  alias Epsilon                 = "";

  [StartRule]
  syntax CompilationUnit = ExternAliasDirective* UsingDirective* GlobalAttributes NamespaceMemberDeclaration* !Any;

// Contextual keywords:
// "add" | "alias" | "ascending" | "assembly" | "by" | "descending" | "dynamic" | "equals" | "field" | "from" | "get" | "global"!!! | "group" |
// "into" | "join" | "let" | "method" | "module" | "on" | "orderby" | "param" | "partial" | "property" | "remove" | "select" | "set" | "type" |
// "typevar"!!! | "value" | "var" | "where" | "yield"

  regex KeywordToken
                =   "abstract" | "as"         | "base"      | "bool"      | "break"     | "byte"     | "case"   | "catch"       | "char"      | "checked"
                  | "class"    | "const"      | "continue"  | "decimal"   | "default"   | "delegate" | "do"     | "double"      | "else"      | "enum"
                  | "event"    | "explicit"   | "extern"    | "false"     | "finally"   | "fixed"    | "float"  | "for"         | "foreach"   | "goto"
                  | "if"       | "implicit"   | "in"        | "int"       | "interface" | "internal" | "is"     | "lock"        | "long"      | "namespace"
                  | "new"      | "null"       | "object"    | "operator"  | "out"       | "override" | "params" | "private"     | "protected" | "public"
                  | "readonly" | "ref"        | "return"    | "sbyte"     | "sealed"    | "short"    | "sizeof" | "stackalloc"  | "static"    | "string"
                  | "struct"   | "switch"     | "this"      | "throw"     | "true"      | "try"      | "typeof" | "uint"        | "ulong"     | "unchecked"
                  | "unsafe"   | "ushort"     | "using"     | "virtual"   | "void"      | "volatile" | "while"
                  | "__arglist";

  alias Name                = Identifier;
  alias QualifiedName       = QualifiedIdentifier;
  alias Char                = Any;
  alias Comma               = ","?;

  [Keyword]
  token Keyword = Name=KeywordToken !IdentifierPartCharacters;

  regex Any = ['\u0000'..'\uFFFF'];

  /////////////////////////////////////////////////////////
  // Spacing

  extend token IgnoreToken
  {
    | [SpanClass(Comment), ExplicitSpaces] SingleLineComment;
    | [SpanClass(Comment), ExplicitSpaces] MultiLineComment;
    | [SpanClass(Comment), ExplicitSpaces] Preprocessor = Start='#' Body=(!NewLineCharacter Any)* End=NewLine?;
  }

  keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

  // Spacing
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // Identifiers

  [Identifier]
  token Identifier = !Keyword At="@"? IdentifierBody;
  [ExplicitSpaces]
  syntax QualifiedIdentifier  = QualifiedAlias? (QualifiedIdentifierPart; s "." s)+; // TODO: In C# spec. it's "namespace-or-type-name". Rename it!
  [ExplicitSpaces]
  syntax NamespaceName        = (Identifier; s "." s)+;

  [ExplicitSpaces]
  syntax QualifiedIdentifierPartTypeArguments
  {
    | QualifiedIdentifierPartTypeArgumentList  = s "<" s TypeArguments ">" s;
    | QualifiedIdentifierPartOpenTypeArguments = s "<" s RankSeparator* ">" s;
  }

  [ExplicitSpaces]
  syntax QualifiedIdentifierPart = Identifier QualifiedIdentifierPartTypeArguments?;
  syntax QualifiedAlias = Alias = Identifier "::";


  // same as 'QualifiedIdentifierPart' but avoids capturing type arguments of method name
  syntax TypeMemberIdentifierPart  = Identifier (QualifiedIdentifierPartTypeArguments !"(")?;
  syntax TypeMemberIdentifier      = QualifiedAlias? (TypeMemberIdentifierPart; ".")+; // TODO: Maybe a bug. It's should end with Identifier

  regex LetterCharacter           = [Lu, Ll, Lt, Lm, Lo, Nl];//['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я', 'і'];//
  regex CombiningCharacter        = [Mn, Mc];
  regex DecimalDigitCharacter     = [Nd];
  regex ConnectingCharacter       = [Pc];
  regex FormattingCharacter       = [Cf];

  regex IdentifierStartCharacter  = LetterCharacter | "_" | UnicodeEscapeSequence;
  regex IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter | UnicodeEscapeSequence;
  regex IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;

  // Identifiers
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // Literals

  regex DecimalDigit                        = ['0'..'9'];
  regex HexDigit                            = ['0'..'9', 'a'..'f', 'A'..'F'];
  regex IntegerTypeSuffixTerminal           = ('U' | 'u') ('l' | 'L')? | ('l' | 'L') ('U' | 'u')?;
  regex IntegerTypeSuffix                   = IntegerTypeSuffixTerminal; // "UL" | "ul" | "uL" | "Ul" | "LU" | "lu" | "Lu" | "lU" | "U" | "u" | "L" | "l";
  [SpanClass(Number)]
  regex DecimalIntegerLiteral               = DecimalDigit+ IntegerTypeSuffix?;
  [SpanClass(Number)]
  regex HexadecimalIntegerLiteral           = ("0x" | "0X") HexDigit+ IntegerTypeSuffix?;
  [SpanClass(Number)]
  regex IntegerLiteral                      = HexadecimalIntegerLiteral | DecimalIntegerLiteral;

  regex RealTypeSuffix                      = "F" | "f" | "D" | "d" | "M" | "m";
  regex ExponentPart                        = ("E" | "e") ("-" | "+")? DecimalDigit+;
  regex RealLiteral_1                       = DecimalDigit* "." DecimalDigit+ ExponentPart? RealTypeSuffix?;
  regex RealLiteral_2                       = DecimalDigit+ ExponentPart RealTypeSuffix?;
  regex RealLiteral_3                       = DecimalDigit+ RealTypeSuffix;
  [SpanClass(Number)]
  regex RealLiteral                         = RealLiteral_1 | RealLiteral_2 | RealLiteral_3;

  regex UnicodeEscapeSequence_u             = "\\u" HexDigit HexDigit HexDigit HexDigit;
  regex UnicodeEscapeSequence_U             = "\\U" HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit;
  regex UnicodeEscapeSequence               = UnicodeEscapeSequence_u | UnicodeEscapeSequence_U;
  regex HexadecimalEscapeSequence           = "\\x" HexDigit HexDigit? HexDigit? HexDigit?;
  regex SimpleEscapeSequence                = "\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v";
  regex NotAllowedCharLiteralChar           = NewLineCharacter | "'" | "\\";
  token SingleCharacter   = !NotAllowedCharLiteralChar Any;

  token Character
  {
    | SimpleEscapeSequenceChar      = SimpleEscapeSequence;
    | UnicodeEscapeSequenceChar     = UnicodeEscapeSequence;
    | HexadecimalEscapeSequenceChar = HexadecimalEscapeSequence;
    | SingleCharacterChar           = SingleCharacter;
  }

  [SpanClass(Char)] token CharacterLiteral = "'" Character "'";

  regex NotAllowedRegularStringLiteralChar = NewLineCharacter | "\"" | "\\";

  token RegularStringLiteralPart
  {
    | SimpleEscapeSequenceStrPart           = SimpleEscapeSequence;
    | UnicodeEscapeSequenceStrPart          = UnicodeEscapeSequence;
    | HexadecimalEscapeSequenceStrPart      = HexadecimalEscapeSequence;
    | RegularStringLiteralCharacterSequence = (!NotAllowedRegularStringLiteralChar Any)+;
  }

  [SpanClass(String)]
  token RegularStringLiteral = "\"" RegularStringLiteralPart* "\"";

  regex DoubleQuote = "\"\"";

  token VerbatimStringLiteralPart
  {
    | QuoteEscapeSequence                     = DoubleQuote;
    | VerbatimStringLiteralCharacterSequence  = (!"\"" Any)+;
  }

  [SpanClass(String)]
  token VerbatimStringLiteral = OpenQuote = "@\"" VerbatimStringLiteralPart* CloseQuote = "\"";

  regex BooleanLiteral = "true" | "false";

  // Literals
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  //

  syntax ExternAliasDirective = "extern" sm "alias" sm Name ";"nl;

  syntax UsingDirective
  {
    | Alias = "using"sm Name sm "=" sm QualifiedName ";" nl;
    | Open  = "using"sm QualifiedName ";" nl;
  }

  syntax NamespaceMemberDeclaration
  {
    | Namespace = "namespace" sm NamespaceName outline_begin_before nl "{" inl ExternAliasDirective* UsingDirective* NamespaceMemberDeclaration* d "}" ";"? nl outline_end_before;
    | Type      = TypeDeclaration;
  }

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeDeclaration

  syntax TypeBase = ":" (AnyType; ","sm)+;
  syntax Partial  = "partial"sm;

  // TODO: Make separate modifier lists for each kind of type declaration.

  syntax StructHead = "struct"    sm         Name;
  syntax InterfaceHead = "interface";

  syntax TypeDeclaration
  {
    | Class     = Attributes Modifiers Partial? "class"       sm         Name TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
    | Struct    = Attributes Modifiers Partial? StructHead                    TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
    | Interface = Attributes Modifiers Partial? InterfaceHead sm         Name TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
    | Enum      = Attributes Modifiers          "enum"        sm         Name                 EnumBase? nl                                    EnumBody;
    | Delegate  = Attributes Modifiers          "delegate"    sm AnyType Name TypeParameters? "(" FormalParameters ")" TypeParameterConstraintsClauses? ";"nl;
  }

  syntax TypeBody = outline_begin_before "{" inl TypeMemberDeclaration* d "}" ";"? nl outline_end_before;
  syntax EnumBody = outline_begin_before "{" inl EnumMemberDeclarations d "}" ";"? nl outline_end_before;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeMemberDeclarations

  syntax TypeMemberDeclaration
  {
    | NestedType      = TypeDeclaration;
    | Method          = Attributes Modifiers Partial? MethodHeader Body;
    | Property        = Attributes Modifiers AnyType sm TypeMemberIdentifier PropertyBody;
    | Field           = Attributes Modifiers AnyType sm VariableDeclarators  ";" nl;
    | Constant        = Attributes Modifiers "const"sm AnyType sm ConstantDeclarators ";" nl;
    | Constructor     = Attributes Modifiers Name "(" FormalParameters ")" ConstructorInitializer? Body;
    | Event           = Attributes Modifiers "event"sm AnyType sm TypeMemberIdentifier nl "{" inl EventAccessorDeclarations d "}";
    | SimpleEvent     = Attributes Modifiers "event"sm AnyType sm VariableDeclarators ";" nl;
    | Indexer         = Attributes Modifiers AnyType sm  (TypeMemberIdentifier ".")? "this" "[" FormalParameters "]" PropertyBody;
    | Destructor      = Attributes Modifiers "~" Name "(" FormalParameters ")" Body;
    | FixedSizeBuffer = Attributes Modifiers "fixed"sm AnyType sm (FixedSizeBufferDeclarator; ","sm)+ ";" nl;
    | Operator1       = Attributes Modifiers AnyType sm "operator"sm OverloadableOperator "(" FormalParameters ")" Body;
    | Operator2       = Attributes Modifiers OperatorKind sm "operator" sm AnyType "(" FormalParameters ")" Body;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Members

  syntax Body
  {
    | Block = nl outline_begin_before "{" inl Statement* d "}" ";"? nl outline_end_before;
    | Empty = ";" nl;
  }

  syntax PropertyBody = nl outline_begin_before "{" inl AccessorDeclarations d "}" nl outline_end_before;

  syntax FixedSizeBufferDeclarator = Identifier "[" ConstantExpression "]";

  // TODO: keyword choice detection will not work!
  regex OverloadableOperator = "++" | "--" | "<<" | ">>" | "==" | "!=" | ">=" | "<=" | ">" | "<" | "true" | "false"
                              | "^" | "!" | "~" | "+" | "-" | "*" | "/" | "%" | "&" | "|";

  regex OperatorKind = "implicit" | "explicit";

  syntax MethodHeader = AnyType sm TypeMemberIdentifier TypeParameters? "(" FormalParameters ")" TypeParameterConstraintsClauses?;

  syntax GetAccessorDeclaration = Attributes Modifiers "get"sm Body;
  syntax SetAccessorDeclaration = Attributes Modifiers "set"sm Body;

  syntax AccessorDeclarations
  {
    | GetSet = GetAccessorDeclaration SetAccessorDeclaration?;
    | SetGet = SetAccessorDeclaration GetAccessorDeclaration?;
    | None   = Epsilon; // TODO: Add error hendling here.
  }

  syntax ConstructorInitializer
  {
    | This = sm ":" sm "this" "(" ArgumentList ")";
    | Base = sm ":" sm "base" "(" ArgumentList ")";
  }

  syntax EnumBase               = sm ":" sm AnyType;
  syntax EnumMemberDeclaration  = Attributes Name (sm "=" sm ConstantExpression)?;
  syntax EnumMemberDeclarations = (EnumMemberDeclaration; ","nl; ?)* nl;

  syntax AddAccessorDeclaration    = Attributes "add" sm    Body;
  syntax RemoveAccessorDeclaration = Attributes "remove" sm Body;

  syntax EventAccessorDeclarations
  {
    | AddRemove = AddAccessorDeclaration    RemoveAccessorDeclaration;
    | RemoveAdd = RemoveAccessorDeclaration AddAccessorDeclaration;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // FormalParameters

  regex ParameterModifier = "ref" | "out" | "this" | "params";
  syntax DefaultArgument  = "=" Expression;
  syntax FormalParameter  = Attributes (ParameterModifier sm)? AnyType sm Name DefaultArgument?; // TODO: Add "__arglist"
  syntax FormalParameters = (FormalParameter; ","sm)*;

  //
  ////////////////////////////////////////////////////////////////////////////////////


  ////////////////////////////////////////////////////////////////////////////////////
  // Modifiers

  syntax Modifiers = Modifier*;

  syntax Modifier
  {
    | New       = "new"sm;
    | Public    = "public"sm;
    | Protected = "protected"sm;
    | Internal  = "internal"sm;
    | Private   = "private"sm;
    | Virtual   = "virtual"sm;
    | Volatile  = "volatile"sm;
    | Static    = "static"sm;
    | Readonly  = "readonly"sm;
    | Sealed    = "sealed"sm;
    | Override  = "override"sm;
    | Abstract  = "abstract"sm;
    | Extern    = "extern"sm;
    | Unsafe    = "unsafe"sm;
    | AsyncMod  = "async"sm; // C# 5
  }

  syntax Async = "async"sm; // C# 5

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Attributes

  syntax AttributeArguments = "(" ArgumentList ")";
  syntax Attribute          = QualifiedName AttributeArguments?;
  syntax AttributeList      = (Attribute; ","sm; ?)*;

  regex GlobalAttributeTarget = "assembly" | "module";
  syntax GlobalAttributeTargetSpecifier = GlobalAttributeTarget ":";
  syntax GlobalAttributeSection         = "[" GlobalAttributeTargetSpecifier sm AttributeList "]"nl;

  regex AttributeTarget = "field" | "event" | "method" | "param" | "property" | "return" | "type" | "typevar";

  syntax AttributeTargetSpecifier = AttributeTarget ":";
  syntax AttributeSection         = "[" AttributeTargetSpecifier? AttributeList "]"nl;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Arguments

  regex ArgumentModfier = "ref" | "out";
  syntax ArgumentName    = Name ":" sm;
  syntax Argument        = ArgumentName? Modfier=(ArgumentModfier sm)? Expression;
  syntax ArgumentList    = (Argument; ","sm)*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeParameters

  regex InOrOut  = "in" | "out";
  syntax VarianceAnnotation  = Annotation=InOrOut sm;
  syntax TypeParameter       = Attributes VarianceAnnotation? Name;
  syntax TypeParameters   = "<" (TypeParameter; ","sm)+ ">";

  syntax TypeParameterConstraint
  {
    | Ctor   = "new" "(" ")";
    | Class  = "class";
    | Struct = "struct";
    | Base   = AnyType;
  }

  syntax TypeParameterConstraints        = (TypeParameterConstraint; ","sm)+;
  syntax TypeParameterConstraintsClause  =  "where"sm Name ":"sm TypeParameterConstraints nl;
  syntax TypeParameterConstraintsClauses = TypeParameterConstraintsClause*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Types

  regex EnumBaseType      = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong";
  regex IntegralType      = EnumBaseType | "char";
  regex FloatingPointType = "float" | "double";
  regex NumericType       = IntegralType | FloatingPointType | "decimal";
  regex PredefinedType    = NumericType | "void"  | "bool" | "string" | "dynamic" | "object";

  syntax TypeName
  {
    | PredefinedType
    | QualifiedName = !PredefinedType QualifiedIdentifier
  }

  regex Pointer = "*";
  syntax PointerSpecifiers = Pointer*;

  syntax RankSeparator = ",";
  syntax RankSpecifier = "[" RankSeparator* "]";

  syntax TypeSpecifier
  {
    | RankSpecifier;
    | PointerSpecifier = Pointer;
  }

  [ExplicitSpaces] syntax NullableSpecifier = "?" !"?"; // dont't collide with `??' operator

  syntax AnyNonArrayType             = TypeName NullableSpecifier?;
  syntax AnyNonArrayTypeNullableHack = TypeName NullableSpecifier = (NullableSpecifier !(Expression ":" Expression))?; // don't collide with ternary op ? : // BUG:
  syntax AnyType                     = AnyNonArrayType TypeSpecifier*;
  syntax AnyTypeNullableHack         = AnyNonArrayTypeNullableHack TypeSpecifier*;
  syntax TypeArgument                = AnyType;
  syntax TypeArguments               = (TypeArgument; ","sm)+;

  syntax MayBeGenericArgumentList    = "<" TypeArguments ">" &GenericArgumentListFollow;

  regex GenericArgumentListFollow    = '(' | ')' | ']' | '}' | ':' | ';' | ',' | '.' | '?' | "==" | "!=";

  syntax AnyTypeWithSpecifier
  {
    | Common   = AnyNonArrayType TypeSpecifier+;
    | Nullable = TypeName NullableSpecifier;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Variables

  syntax VariableDeclarators = (VariableDeclarator; ","sm)+;
  syntax VariableDeclarator  = Name (sm "=" sm VariableInitializer)?;

  syntax VariableInitializer
  {
    | Array                 = "{"sm (VariableInitializer; ","sm)* sm Comma "}"; //TODO: replace with list with dangling separator
    | Expression;
    | Property              = Name sm "=" sm ComplexInitializer;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Constants

  syntax ConstantDeclarator  = Name sm "=" sm ConstantExpression;
  syntax ConstantDeclarators = (ConstantDeclarator; ","sm)*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  Lamdas

  regex  ExplicitAnonymousFunctionParameterModifier = "ref" | "out";
  syntax ExplicitAnonymousFunctionParameter         = ExplicitAnonymousFunctionParameterModifier? AnyType sm Name;
  syntax ExplicitAnonymousFunctionSignature         = "(" (ExplicitAnonymousFunctionParameter; ","sm)* ")";

  syntax ImplicitAnonymousFunctionSignature         = "(" (Name; ","sm)+ ")";

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  object-creation-expression, array-creation-expression, delegate-creation-expression, anonymous-object-creation-expression

  syntax ComplexInitializer = "{" (VariableInitializer; ","sm; ?)* "}";

  syntax MemberDeclarator
  {
    | QualifiedIdentifier;
    | Expression          = Expression ^ 150 "." QualifiedIdentifier;
    | PredefinedType      = PredefinedType "." QualifiedIdentifier;
    | Named               = Name sm "=" sm Expression;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  Statement internals

  syntax Block    = nl "{" inl Statement* d "}" nl;

  syntax IndentedEmbeddedStatement
  {
    | Statement = !"{" (inl EmbeddedStatement d); // not a block statment
    | Block     = &"{" Stmt=Block;
  }

  syntax SwitchLabel
  {
    | Case    = "case" sm ConstantExpression ":"nl;
    | Default = "default" ":"nl;
  }

  syntax SwitchSection = SwitchLabel+ i Statement+ d;

  syntax LocalVariableDeclaration = LocalVariableType sm VariableDeclarators; // local-variable-declaration

  syntax ForInitializer
  {
    | Var = LocalVariableDeclaration;
    | List = (Expression; ","sm)+;
  }

  syntax ForIterator = (Expression; ","sm)+;

  alias  ForCondition            = Expression;

  syntax LocalVariableType
  {
    | Var = "var"
    | Type = !"var" AnyType;
  }

  [ExplicitSpaces]
  syntax CastPredicate
  {
    | CastPredicate01 = '~';
    | CastPredicate02 = '!' !'=';
    | CastPredicate03 = '&' !'=';
    | CastPredicate04 = '&' !'&';
    | CastPredicate05 = '(';
    | CastPredicate06 = !("as"S) IdentifierStartCharacter;
    | CastPredicate07 = !("is"S) IdentifierStartCharacter;
    | CastPredicate08 = '@';
    | CastPredicate09 = IntegerLiteral;
    | CastPredicate10 = CharacterLiteral;
    | CastPredicate11 = BooleanLiteral S;
    | CastPredicate12 = RegularStringLiteral;
    | CastPredicate13 = "null" S;
    | CastPredicate14 = RealLiteral;
  }

  syntax ResourceAcquisition
  {
    | LocalVar   = LocalVariableDeclaration /* &")" */;
    | Expression;
  }

  syntax CatchExceptionFilter = "(" AnyType Name = (sm Identifier)? ")";
  syntax CatchClause   = "catch"   sm (CatchExceptionFilter sm)? Block;
  syntax FinallyClause = "finally" sm Block;

  syntax AnonymousFunctionBody
  {
    | Block;
    | Expression;
  }

  //  Statement internals
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  Linq Query

  // "from" ignored
  regex LinqKeywordToken = "where" | "join" | "on" | "equals" | "into" | "let" | "orderby" | "ascending" | "descending" | "select" | "group" | "by";
  token LinqKeyword = Name=LinqKeywordToken !IdentifierPartCharacters;

  syntax LinqExpression  = !LinqKeyword Expression;
  syntax LinqType        = !LinqKeyword AnyType;
  syntax LinqName        = !LinqKeyword Name;

  syntax FromClause
  {
    | Common = "from" sm             LinqName sm "in" sm LinqExpression;
    | Casted = "from" sm LinqType sm LinqName sm "in" sm LinqExpression;
  }

  regex OrderingDirection = "ascending" | "descending";

  syntax SelectOrGroupClause
  {
    | "select" sm LinqExpression;
    | "group"  sm LinqExpression sm "by" sm LinqExpression;
  }

  syntax QueryBody = QueryBodyClause* SelectOrGroupClause QueryContinuation?;

  syntax IntoClause = "into" sm LinqName;

  syntax Ordering = LinqExpression OrderingDirection?;

  syntax QueryBodyClause
  {
    | From    = FromClause; // from-clause
    | Let     = "let" sm LinqName sm "=" sm LinqExpression; // let-clause
    | Where   = "where" sm BooleanExpression; // where-clause
    | Join1   = "join" sm             LinqName sm "in" sm LinqExpression sm "on" sm LinqExpression sm "equals" sm LinqExpression (sm IntoClause)?; // join-clause && join-into-clause
    | Join2   = "join" sm LinqType sm LinqName sm "in" sm LinqExpression sm "on" sm LinqExpression sm "equals" sm LinqExpression (sm IntoClause)?; // join-clause && join-into-clause
    | Orderby = "orderby" sm (Ordering; ","sm)+; // orderby-clause
  }

  syntax QueryContinuation = IntoClause sm QueryBody;

  syntax Await = "await";

  //  Linq Query
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  Statements

  syntax Statement
  {
    | Labeled           = Name ":" sm Statement;
    | LocalVariable     = LocalVariableDeclaration ";"nl;
    | LocalConstant     = "const" sm AnyType ConstantDeclarators ";"nl;
    | EmbeddedStatement;
  }

  syntax EmbeddedStatement
  {
    | Empty       = ";" nl;
    | Block;
    | Expression  = Expression ";" nl;

    // selection-statement
    | If          = "if" sm "(" BooleanExpression ")" IndentedEmbeddedStatement ("else" IndentedEmbeddedStatement)?;
    | Switch      = "switch" sm "(" Expression ")"nl "{" inl SwitchSection* d "}" nl;
    // iteration-statement
    | While       = "while" sm "(" BooleanExpression ")" IndentedEmbeddedStatement;
    | Do          = "do" nl IndentedEmbeddedStatement "while" sm "(" BooleanExpression ")" ";" nl;
    | For         = "for" "(" ForInitializer? ";"sm ForCondition? ";"sm ForIterator? ")" IndentedEmbeddedStatement;
    | Foreach     = "foreach" "(" LocalVariableType sm Name sm "in" sm Expression ")" IndentedEmbeddedStatement;

    | Checked     = "checked" sm   Block; // checked-statement
    | Unchecked   = "unchecked" sm Block; // unchecked-statement

    | Lock        = "lock" sm  "(" Expression ")"          IndentedEmbeddedStatement; // lock-statement
    | Using       = "using" sm "(" ResourceAcquisition ")" IndentedEmbeddedStatement; // using-statement

    | YieldReturn = "yield" sm "return" sm Expression ";"nl; // try-statement
    | YieldBreak  = "yield" sm "break"    ";"nl;             // try-statement

    | TryCatch    =  "try" sm Block CatchClause+ FinallyClause?;
    | TryFinally  =  "try" sm Block FinallyClause;


    // jump-statement
    | Break                 = "break"                                 ";" nl;
    | Continue              = "continue"                              ";" nl;
    | GotoCase    = "goto" sm "case"sm   ConstantExpression  ";" nl;
    | GotoDefault = "goto" sm "default"                      ";" nl;
    | GotoId      = "goto" sm            Name                ";" nl;
    | Return                = "return"sm          Expression          ";" nl;
    | ReturnVoid  = "return"                                ";" nl;
    | Throw       = "throw" sm           Expression?         ";" nl;

    // Unsafe
    | Unsafe      = "unsafe" Block; // unsafe
    | Fixed       = "fixed" sm "(" LocalVariableType sm VariableDeclarators ")"nl IndentedEmbeddedStatement; // unsafe
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Expressions

  syntax Expression
  {
    // B.1.8 Literals
    | BooleanLiteral;
    | RegularStringLiteral;
    | VerbatimStringLiteral;
    | RealLiteral;
    | IntegerLiteral;
    | CharacterLiteral;
    | NullLiteral            = "null";

    | QualifiedName; // simple-name || member-access
    | Parenthesized          = "(" Expression ")"; // parenthesized-expression
    | Cast1                  = "(" !Expression AnyType ")" Expression;
    | Cast2                  = "(" &Expression AnyType ")" &CastPredicate Expression;
    | ThisAccess             = "this";
    | BaseAccessMember       = "base" "." QualifiedName;
    | BaseAccessIndexer      = "base" "[" ArgumentList "]";
    //BaseError              = "base" = Error;

    // Lambdas
    | Lambda_SingleParam1    =          Name                               sm "=>" sm AnonymousFunctionBody;
    | Lambda_ExplicitParams1 =          ExplicitAnonymousFunctionSignature sm "=>" sm AnonymousFunctionBody;
    | Lambda_ImplicitParams1 =          ImplicitAnonymousFunctionSignature sm "=>" sm AnonymousFunctionBody;
    | Lambda_SingleParam2    = Async sm Name                               sm "=>" sm AnonymousFunctionBody;
    | Lambda_ExplicitParams2 = Async sm ExplicitAnonymousFunctionSignature sm "=>" sm AnonymousFunctionBody;
    | Lambda_ImplicitParams3 = Async sm ImplicitAnonymousFunctionSignature sm "=>" sm AnonymousFunctionBody;

    | Query                            = FromClause sm QueryBody;

    // Anonymous function
    | AnonymousFunction1     =       "delegate"sm ExplicitAnonymousFunctionSignature? nl "{" inl Statement* d "}";
    | AnonymousFunction2     = Async "delegate"sm ExplicitAnonymousFunctionSignature? nl "{" inl Statement* d "}";

    | StackallocInitializer  = "stackalloc"sm AnyType "[" Expression "]"; // unsafe

    // Group: Primary
    | PointerMemberAccess    =  Expression "->" Expression                    precedence 150;// pointer-member-access
    | MemberAccess1          =  Expression ^ 150 "." QualifiedName; // member-access
    | MemberAccess2          =  PredefinedType "." QualifiedName; // member-access
    | Invocation             =  Expression ^ 150 "(" ArgumentList ")";
    | IndexerAccess          =  Expression ^ 150 "[" ArgumentList "]";
    | PostIncrement          =  Expression "++"                               precedence 150;
    | PostDecrement          =  Expression "--"                               precedence 150;

    // delegate-creation-expression || object-creation-expression || anonymous-object-creation-expression
    | NewObject_1            = "new"sm AnyNonArrayType "(" ArgumentList ")";             // delegate-creation-expression || object-creation-expression (1)
    | NewObject_2            = "new"sm AnyNonArrayType "(" ArgumentList ")"sm ComplexInitializer;                          // object-creation-expression (2)
    | NewObject_3            = "new"sm AnyNonArrayType sm ComplexInitializer;                                               // object-creation-expression (3)
    | NewArray_1             = "new"sm AnyNonArrayType PointerSpecifiers "[" (Expression; ","sm)+ "]" RankSpecifier*;                       // array-creation-expression  (1)
    | NewArray_2             = "new"sm AnyNonArrayType PointerSpecifiers "[" (Expression; ","sm)+ "]" RankSpecifier* sm ComplexInitializer; // array-creation-expression  (1)
    | NewArray_3             = "new"sm AnyNonArrayType RankSpecifier+ ComplexInitializer;                                   // array-creation-expression  (2)
    | NewArray_4             = "new"sm RankSpecifier ComplexInitializer;                                                    // array-creation-expression  (3)
    | NewAnonymous           = "new"sm "{"sm (MemberDeclarator; ","sm; ?)* sm "}";                                          // anonymous-object-creation-expression

    | TypeOf                 =  "typeof"     "(" AnyType    ")";
    | Checked                =  "checked"    "(" Expression ")";
    | Unchecked              =  "unchecked"  "(" Expression ")";
    | Default                =  "default"    "(" AnyType    ")";
    | Sizeof                 =  "sizeof"     "(" AnyType    ")";


    // Group: Unary
    | Identity               = "+"  Expression                                     precedence 140;
    | Negation               = "-"  Expression                                     precedence 140;
    | LogicalNegation        = "!"  Expression                                     precedence 140;
    | BitwiseNegation        = "~"  Expression                                     precedence 140;
    | PreIncrement           = "++" Expression                                     precedence 140;
    | PreDecrement           = "--" Expression                                     precedence 140;
    | Addressof              = "&"  Expression                                     precedence 140;// unsafe
    //ExplicitlyCast         = (T) Expression                                      precedence 140;
    | Await                  = Await sm Expression;                                                // C# 5

    | PointerIndirection     = "*"  Expression                                     precedence 135;// pointer-indirection-expression

    // Group: Multiplicative
    | Mul                    = Expression sm "*"  sm Expression                     precedence 130;
    | Div                    = Expression sm "/"  sm Expression                     precedence 130;
    | Remainder              = Expression sm "%"  sm Expression                     precedence 130;
    // Group: Additive
    | Add                    = Expression sm "+"  sm Expression                     precedence 120;
    | Sub                    = Expression sm "-"  sm Expression                     precedence 120;
    // Group: Shift
    | ShiftLeft              = Expression sm "<<" sm Expression                     precedence 110;
    | ShiftRight             = Expression sm ">>" sm Expression                     precedence 110;
    // Group: Relational and type testing
    | LessThan               = Expression sm "<"  sm Expression                     precedence 100;
    | GreaterThan            = Expression sm ">"  sm Expression                     precedence 100;
    | LessThanOrEqual        = Expression sm "<=" sm Expression                     precedence 100;
    | GreaterThanOrEqual     = Expression sm ">=" sm Expression                     precedence 100;
    | Is                     = Expression ^ 100 sm "is" sm AnyTypeNullableHack;
    | As                     = Expression ^ 100 sm "as" sm AnyTypeNullableHack;
    // Equality
    | Equal                  = Expression sm "==" sm Expression                     precedence 90;
    | NotEqual               = Expression sm "!=" sm Expression                     precedence 90;
    // Group: Logical AND
    | LogicalAnd             = Expression sm "&"  sm Expression                     precedence 80;
    // Group: Logical XOR
    | LogicalXor             = Expression sm "^"  sm Expression                     precedence 70;
    // Group: Logical OR
    | LogicalOr              = Expression sm "|"  sm Expression                     precedence 60;
    // Group: Conditional AND
    | ConditionalAnd         = Expression sm "&&" sm Expression                     precedence 50;
    // Group: Conditional OR
    | ConditionalOr          = Expression sm "||" sm Expression                     precedence 40;
    // Group: Null coalescing
    | NullCoalescing         = Expression sm "??" sm Expression                     precedence 30;
    // Group: Conditional
    | Conditional            = Expression ^ 21 sm "?" sm Expression sm ":" sm Expression; // right-associative
    // Group: Assignment or anonymous function
    | Assignment             = Expression sm "="  sm Expression                     precedence  10 right-associative;
    | MulAssignment          = Expression sm "*=" sm Expression                     precedence  10 right-associative;
    | DivAssignment          = Expression sm "/=" sm Expression                     precedence  10 right-associative;
    | RemainderAssignment    = Expression sm "%=" sm Expression                     precedence  10 right-associative;
    | AddAssignment          = Expression sm "+=" sm Expression                     precedence  10 right-associative;
    | SubAssignment          = Expression sm "-=" sm Expression                     precedence  10 right-associative;
    | ShiftLeftAssignment    = Expression sm "<<="sm Expression                     precedence  10 right-associative;
    | ShiftRightAssignment   = Expression sm ">>="sm Expression                     precedence  10 right-associative;
    | AndAssignment          = Expression sm "&=" sm Expression                     precedence  10 right-associative;
    | XorAssignment          = Expression sm "^=" sm Expression                     precedence  10 right-associative;
    | OrAssignment           = Expression sm "|=" sm Expression                     precedence  10 right-associative;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////
}
