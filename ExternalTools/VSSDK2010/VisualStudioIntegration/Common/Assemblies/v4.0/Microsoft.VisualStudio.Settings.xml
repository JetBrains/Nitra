<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Settings</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Settings.ApplicationDataFolder">
      <summary>This enumeration is used to specify the folder that Visual Studio uses to keep various files for different purposes like cache files, backup files or template files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.ApplicationExtensions">
      <summary>Folder that Visual Studio specifies for installing per-machine Extensions </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.UserExtensions">
      <summary>Folder that Visual Studio uses for loading user extensions. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.Documents">
      <summary>Folder that Visual Studio uses for the user generated files like project, snippets or backup files. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.RoamingSettings">
      <summary>Folder that Visual Studio uses for storing the roaming files specific to user. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.LocalSettings">
      <summary>Folder that Visual Studio uses for storing the local files specific to user. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.Configuration">
      <summary>Folder that Visual Studio uses for storing the machine wide files. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.EnclosingScopes">
      <summary>Enumeration returned as a result of a querying call to GetPropertyScope or GetCollectionScope methods of the SettingsManager class to learn the enclosing scopes of the provided property or collection. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.UserSettings">
      <summary>User Settings scope contains the property or the collection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.None">
      <summary>None of the scopes contains the property or the collection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.Configuration">
      <summary>Configuration scope contains the property or the collection.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.ExternalSettingsManager">
      <summary>This is the gateway class to reach for the settings stored inside Visual Studio. It provides two basic functionalities. It allows searches for properties and collections inside the scopes. It hands the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> and <see cref="T:WritableSettingsStore" /> classes for further manipulation of the collections and properties within the scopes. This class implements the <see cref="T:System.IDisposable" /> pattern and as a result it needs to be disposed after it is no longer necessary.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForApplication(System.String)">
      <summary>Used to construct the SettingsManager AppID based Visual Studio applications.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForApplication(System.String,System.Boolean)">
      <summary>Used to construct the SettingsManager AppID based Visual Studio applications.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="isLogged">Flag to control the logging of the package definition management operations at startup and shutdown.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForApplication(System.String,System.String)">
      <summary>Used to construct the SettingsManager AppID based Visual Studio applications with suffixed mode. In suffixed mode, any changes made to the settings are isolated from the normal running mode.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="rootSuffix">Name of the suffix.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForApplication(System.String,System.String,System.Boolean)">
      <summary>Used to construct the SettingsManager AppID based Visual Studio applications with suffixed mode. In suffixed mode, any changes made to the settings are isolated from the normal running mode.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="rootSuffix">Name of the suffix.</param>
      <param name="isLogged">Flag to control the logging of the package definition management operations at startup and shutdown.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForIsolatedApplication(System.String,System.String)">
      <summary>Used to construct the SettingsManager AppEnv based Visual Studio custom applications. Custom applications are isolated among themselves.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="applicationName">Name of the custom application.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.CreateForIsolatedApplication(System.String,System.String,System.Boolean)">
      <summary>Used to construct the SettingsManager AppEnv based Visual Studio custom applications. Custom applications are isolated among themselves.</summary>
      <param name="applicationPath">Path of the executable of Visual Studio.</param>
      <param name="applicationName">Name of the custom application.</param>
      <param name="isLogged">Flag to control the logging of the package definition management operations at startup and shutdown.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Settings.ExternalSettingsManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetApplicationDataFolder(Microsoft.VisualStudio.Settings.ApplicationDataFolder)">
      <summary>Returns the folder that Visual Studio uses for storing various cache, backup, template, etc. files</summary>
      <param name="folder">Requested folder.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetCollectionScopes(System.String)">
      <summary>Outputs the scopes that contain the given collection. If more than one scope contains the collection, the corresponding bit flags of those scopes are set.</summary>
      <param name="collectionPath">Path of the collection to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetCommonExtensionsSearchPaths">
      <summary>Returns the list of folders that Visual Studio uses for installing/discovering machine-wide extensions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetPropertyScopes(System.String,System.String)">
      <summary>Outputs the scopes that contain the given property. If more than one scope contains the property, the corresponding bit flags of those scopes are set.</summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> class for the requested scope which can be used for read-only operations.</summary>
      <param name="scope">Requested scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ExternalSettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> class for the requested scope which can be used both for reading and writing.</summary>
      <param name="scope">Requested scope.</param>
      <exception cref="T:System.ArgumentException">If the given scope is not a writable one.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsManager">
      <summary>This is the gateway class to reach for the settings stored inside the Visual Studio. It provides two basic functionality. It allows to search for properties and collections inside the scopes. It hands the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> and <see cref="T:WritableSettingsStore" /> classes for further manipulation of the collections and properties within the scopes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetApplicationDataFolder(Microsoft.VisualStudio.Settings.ApplicationDataFolder)">
      <summary>Returns the folder that Visual Studio uses for storing various cache, backup, template, etc. files</summary>
      <returns>Full path of the requested folder.</returns>
      <param name="folder">Requested folder.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetCollectionScopes(System.String)">
      <summary>Outputs the scopes that contain the given collection. </summary>
      <returns>Enclosing scopes.</returns>
      <param name="collectionPath">Path of the collection to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetCommonExtensionsSearchPaths">
      <summary>Returns the list of folders that Visual Studio uses for installing or discovering machine-wide extensions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetPropertyScopes(System.String,System.String)">
      <summary>Outputs the scopes that contain the given property. </summary>
      <returns>Enclosing scopes.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> class for the requested scope which can be used for read-only operations.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> instance that can be used for accessing the scope.</returns>
      <param name="scope">Requested scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> class for the requested scope which can be used both for reading and writing.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> instance that can be used for accessing the scope.</returns>
      <param name="scope">Requested scope.</param>
      <exception cref="T:System.ArgumentException">If the given scope is not a writable one.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsScope">
      <summary>This enumeration is used to specify the scope of the settings that is retrieved from the SettingsManager class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsScope.UserSettings">
      <summary>Denotes the user-configurable user settings scope.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsScope.Configuration">
      <summary>Denotes the installation specific configuration scope. This scope is read-only to the users.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsStore">
      <summary>Abstract class for reading or enumerating the selected scope's collections and properties. It is obtained from <see cref="M:SettingsManager.GetReadOnlySettingsStore" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.CollectionExists(System.String)">
      <summary>Checks the existence of the collection passed in to this method.</summary>
      <returns>Returns true if the collection exists and false otherwise.</returns>
      <param name="collectionPath">Path of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetBoolean(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" /> as boolean.</summary>
      <returns>If the underling integer value for the property is non-zero, it returns true and false otherwise.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetBoolean(System.String,System.String,System.Boolean)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" /> as boolean.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in otherwise it returns true if the underling integer value is non-zero and false if it is zero.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt32(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" />.</summary>
      <returns>Value of the property. If the value was stored as an unsigned integer previously, then regular type conversion semantics applies.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt32(System.String,System.String,System.Int32)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an unsigned integer previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt64(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int64" />.</summary>
      <returns>Value of the property. If the value was stored as an unsigned long previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt64(System.String,System.String,System.Int64)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int64" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an unsigned long previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetLastWriteTime(System.String)">
      <summary>Provides the last write time of the properties and sub-collections immediate to the given collection. </summary>
      <returns>Last update time to the collection in <see cref="!:DateTimeKind.Local" /> format.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetMemoryStream(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Binary" />. In order to access the underlying byte array at once <see cref="!:MemoryStream.ToArray" /> method can be used.</summary>
      <returns>
        <see cref="T:System.IO.MemoryStream" /> for the stream of bytes this property.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyCount(System.String)">
      <summary>Returns the number of properties under the given collection.</summary>
      <returns>Number of properties is returned.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the collection does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyNames(System.String)">
      <summary>Returns the names of properties under the given collection.</summary>
      <returns>Names of properties are returned.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the collection does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyType(System.String,System.String)">
      <summary>Returns the type of the requested property.</summary>
      <returns>Type of the property.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetString(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.String" />.</summary>
      <returns>Value of the property.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetString(System.String,System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.String" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetSubCollectionCount(System.String)">
      <summary>Returns the number of sub-collections under the given collection.</summary>
      <returns>Number of sub-collections is returned.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the collection does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetSubCollectionNames(System.String)">
      <summary>Returns the names of sub-collections under the given collection.</summary>
      <returns>Names of sub collections is returned.</returns>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the collection does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt32(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" />.</summary>
      <returns>Value of the property. If the value was stored as a signed integer previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt32(System.String,System.String,System.UInt32)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int32" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as a signed integer previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt64(System.String,System.String)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int64" />.</summary>
      <returns>Value of the property. If the value was stored as a signed long previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt64(System.String,System.String,System.UInt64)">
      <summary>Returns the value of the requested property whose data type is <see cref="!:SettingsType.Int64" />.</summary>
      <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as a signed long previously, then regular type conversion semantics apply.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">Value to be returned if the property does not exist.</param>
      <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.PropertyExists(System.String,System.String)">
      <summary>Checks the existance of the property passed in to this method.</summary>
      <returns>Returns true if the property exists and false otherwise.</returns>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsType">
      <summary>Data types of the properties that are stored inside the collections.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Int64">
      <summary>Data type used to store 8-byte (64-bit) properties which are Int64 and UInt64.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Int32">
      <summary>Data type used to store 4 byte (32 bits) properties which are Boolean, Int32 and UInt32. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Invalid">
      <summary>Invalid data type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Binary">
      <summary>Data type used to store byte streams (arrays).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsType.String">
      <summary>Data type used to store the strings.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.WritableSettingsStore">
      <summary>Abstract class for both reading and writing the selected scope's collections and properties. It is obtained from <see cref="M:SettingsManager.GetWritableSettingsStore" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.CreateCollection(System.String)">
      <summary>Creates the given collection path by creating each nested collection while skipping the ones that already exist. </summary>
      <param name="collectionPath">Path of the collection.</param>
      <exception cref="T:System.ArgumentException">If empty string ("") which deis passed to the method it throws this exception.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.DeleteCollection(System.String)">
      <summary>Deletes the given collection recursively deleting all of the sub-collections and properties in it. If the collection does not exist or an empty string ("") is passed then the method returns false.</summary>
      <param name="collectionPath">Path of the collection to be deleted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.DeleteProperty(System.String,System.String)">
      <summary>Deletes the given property from the collection. If the property or the collection does not exist then the method returns false.</summary>
      <param name="collectionPath">Collection that contains the property to be deleted.</param>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetBoolean(System.String,System.String,System.Boolean)">
      <summary>Updates the value of the specified property to the given Boolean value while setting its data type to <see cref="!:SettingsType.Int32" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetInt32(System.String,System.String,System.Int32)">
      <summary>Updates the value of the specified property to the given integer value while setting its data type to <see cref="!:SettingsType.Int32" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetInt64(System.String,System.String,System.Int64)">
      <summary>Updates the value of the specified property to the given long value while setting its data type to <see cref="!:SettingsType.Int64" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetMemoryStream(System.String,System.String,System.IO.MemoryStream)">
      <summary>Updates the value of the specified property to the bits of the MemoryStream while setting its data type to <see cref="!:SettingsType.Binary" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">MemoryStream to set the bits of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetString(System.String,System.String,System.String)">
      <summary>Updates the value of the specified property to the given string value while setting its data type to <see cref="!:SettingsType.String" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetUInt32(System.String,System.String,System.UInt32)">
      <summary>Updates the value of the specified property to the given unsigned integer value while setting its data type to <see cref="!:SettingsType.Int32" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetUInt64(System.String,System.String,System.UInt64)">
      <summary>Updates the value of the specified property to the given unsigned long value while setting its data type to <see cref="!:SettingsType.Int64" />. </summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">New value of the property.</param>
      <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>
    </member>
  </members>
</doc>