<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VSSDK.UnitTestLibrary</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs">
            <summary>
            Arguments passed to the callback functions used by the GenericMockFactory
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs.#ctor(System.Object[])">
            <summary>
            Builds a new CallbackArgs using an array of objects as values for the parameters.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs.GetParameter(System.Int32)">
            <summary>
            Get the value of a specific parameter.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs.SetParameter(System.Int32,System.Object)">
            <summary>
            Set the value of a parameter.
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs.ReturnValue">
            <summary>
            The return value of the method.
            </summary>
        </member>
        <member name="T:Microsoft.VsSDK.UnitTestLibrary.BaseMock">
            <summary>
            Base class for dynamicaly generated mock objects.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.AddMethodReturnValues(System.String,System.Object[])">
            <summary>
            Provide an array of values that will be used as return values in the 
            mock object method implementation. Index 0 being the return value index 1
            the value assigned to the first parameter (assuming it is ref/out),...
            To remove an entry, pass a null ArrayList.
            </summary>
            <param name="methodName">Name of the method the values are for. Case sensitive.</param>
            <param name="valuesToReturn">List of objects to return.
            Index 0 is the return value while higher indexes are used for ref/out parameters.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.AddMethodCallback(System.String,System.EventHandler{Microsoft.VsSDK.UnitTestLibrary.CallbackArgs})">
            <summary>
            Provide a call back method that the mock object will call when
            methodName is called on the mock object.
            As long as no value were specified for AddMethodReturnValues,
            the callBackMethod can set the value in the array list to set
            which value should be returned (return value and ref/out parameters).
            To remove an entry pass null as the callBackMethod.
            </summary>
            <param name="methodName">Name of the method for which the callback is provided</param>
            <param name="callBackMethod">Method to call when methodName is called on the mock object</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.FunctionCalls(System.String)">
            <summary>
            Returns the number of times a function is called.
            </summary>
            <param name="name">Function name.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.TotalCallsAllFunctions">
            <summary>
            Returns the sum of the number of times each function exposed by this
            object was called.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.IncrementFunctionCalls(System.String)">
            <summary>
            This function is called by the code generated by the GenericMockFactory
            when a function is called.
            </summary>
            <param name="name">Full name of the function.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.ResetAllFunctionCalls">
            <summary>
            Clears all the data about the number of times aech function is called.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.ResetFunctionCalls(System.String)">
            <summary>
            Clears the data about the number of times a specific function is called.
            </summary>
            <param name="name">Function name.</param>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseMock.Item(System.String)">
            <summary>
            Any data that is needed in the implementation of the callback
            can be saved here.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.ConnectionPointHelper.AddConnectionPointsToContainer(Microsoft.VsSDK.UnitTestLibrary.BaseMock,System.Type[])">
            <summary>
            Given a mock object, this function will add to it a callback function to handle
            IConnectionPointContainer.FindConnectionPoint for all the event interfaces contained
            in the array passed as parameter.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.FileGenerator.CreateFile(System.String)">
            <summary>
            Create the specified path under a temp directory
            The file will have some content
            </summary>
            <param name="fileName">FileName, can include relative path</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.FileGenerator.CreateFileWithSpecificContent(System.String,System.String)">
            <summary>
            Create the specified path under a temp directory
            Add the specified content to the file
            </summary>
            <param name="fileName">FileName, can include relative path</param>
            <param name="content">Content to add to the file</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.FileGenerator.FilesContentIsSame(System.String,System.String,System.StringComparison)">
            <summary>
            Verify that the files have the same content
            </summary>
            <param name="path1">Full path of one of the file</param>
            <param name="path2">Full path of the other file</param>
            <param name="comparaisonType">What kind of comparaison to use</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory">
            <summary>
            This class creates Mock object classes implementing specific interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory.#ctor(System.String,System.Type[])">
            <summary>
            Creates an instance of the factory for a specific class.
            </summary>
            <param name="className">The name of the class that this factory will create.</param>
            <param name="interfaces">The interfaces implemented by the generated class.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory.GetInstance">
            <summary>
            This is similar to GetGeneratedType, but instead of returning the Type
            it returns an instance of that type
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory.GetGeneratedType">
            <summary>
            Create a new class type dynamicly.
            The type will be derived from BaseMock.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory.CreateType(System.String,System.Type[])">
            <summary>
            Creates a new class with a given name derived from BaseMock and implementing 
            a specific set of interfaces.
            </summary>
            <param name="className">The name of the class to create.</param>
            <param name="interfaces">The interfaces implemented by the generated class.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.CreateOleServiceProviderWithBasicServices">
            <summary>
            Use to create an IOleServiceProvider with the basic services required by
            MS.VS.Shell.Package.SetSite() base implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the given service to the service container.
            </summary>
            <param name="serviceType">The type of the service to add.</param>
            <param name="serviceInstance">An instance of the service.</param>
            <param name="shouldDisposeServiceInstance">true if the Dipose of the service provider is allowed to dispose the sevice instance.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.RemoveService(System.Type)">
            <devdoc>
            Removes the given service type from the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.CreateKey(System.String)">
            <summary>
            Creates the key
            </summary>
            <param name="name">name of the key</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.EscapePath(System.String)">
            <summary>
            Sets the escape path
            </summary>
            <param name="str">escape string</param>
            <returns>output after applying the escape string</returns>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.RegistryEntries">
            <summary>
            THe hash table containing all the values that are being added.
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.CodeBase">
            <summary>
            Returns the code base to be used for the context
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.ComponentPath">
            <summary>
            Returns the component path
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.ComponentType">
            <summary>
            Returns the component type
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.RootFolder">
            <summary>
            Returns the root folder of the target host
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.InprocServerPath">
            <summary>
            Inprocserver path
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.Log">
            <summary>
            Logger if looging is needed.
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.RegistrationMethod">
            <summary>
            Registration method to use
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.Close">
            <summary>
            Close the key
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.CreateSubkey(System.String)">
            <summary>
            Create a sub key under the key with name
            </summary>
            <param name="name">name of the sub key</param>
            <returns>Key instance</returns>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.SetValue(System.String,System.Object)">
            <summary>
            Set the reg key value
            </summary>
            <param name="valueName">name of the value</param>
            <param name="value">value</param>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.Keys">
            <summary>
            Collection of keys that are added.
            </summary>
        </member>
    </members>
</doc>
