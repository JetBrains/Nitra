<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.Data</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.ContinueProcessingPredicate`1">
            <summary>
            A predicate used by <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceService"/> that allows callers to stop differencing prematurely.
            </summary>
            <typeparam name="T">The type of sequences being differenced.</typeparam>
            <param name="leftIndex">The current index in the left sequence being differenced.</param>
            <param name="leftSequence">The left sequence being differenced.</param>
            <param name="longestMatchSoFar">The length of the longest match so far.</param>
            <returns><c>true</c> if the algorithm should continue processing, <c>false</c> to stop the algorithm.</returns>
            <remarks>
            When <c>false</c> is returned, the algorithm stops searching for matches and uses the information it has computed so
            far to create the <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1"/> that will be returned.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DetermineLocalityCallback">
            <summary>
            A delegate for determining the locality for a given difference type and left/right strings.
            </summary>
            <param name="differenceType">The type of difference to get the locality for.  This is
            guaranteed to be only a single type.</param>
            <param name="leftStrings">The left text, decomposed into a list of strings.</param>
            <param name="rightStrings">The right text, decomposed into a list of strings.</param>
            <returns>The locality, if desired, or <c>null</c>, to fallback to the default
            locality.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.Difference">
            <summary>
            Represents a single difference in the set of differences of two
            lists of elements.  
            </summary>
            <remarks>Each difference consists of a left span and a right span, either
            of which may have zero length (that is, the operation may be an add operation or a delete operation).
            The text before and after the difference matches.  
            In general, differencess are non-null. However, when the difference
            appears at the beginning of the lists of differences, the "before" is null, and when the difference appears at
            the end of the lists, the "after" is null.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Difference.#ctor(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Differencing.Match,Microsoft.VisualStudio.Text.Differencing.Match)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Differencing.Difference"/> with the specified left and right spans and before and after matches.
            </summary>
            <param name="left">The left side of the difference (may have zero length).</param>
            <param name="right">The right side of the difference (may have zero length).</param>
            <param name="before">The non-differing element range before this difference.</param>
            <param name="after">The non-differing element range after this difference.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Difference.ToString">
            <summary>
            The string representation of this difference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Difference.Equals(System.Object)">
            <summary>
            Determines whether two Difference objects are the same (have the same difference type and the same before and after matches).
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Difference.GetHashCode">
            <summary>
            Serves as a hash code for this type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.Left">
            <summary>
            The left side of the difference (may be zero length).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.Right">
            <summary>
            The right side of the difference (may be zero length).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.Before">
            <summary>
            The match before this section. It is null at the beginning of
            the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.After">
            <summary>
            The mtch after this difference. It is null at the end of the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Difference.DifferenceType">
            <summary>
            The type of the difference (Add, Remove, or Change).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceType">
            <summary>
            The types of differences.
            
            </summary>
            <remarks>Differences are read from left to right, so that Add means that only
            the right span has text, Remove means that only the left span has text, and
            Change means that both the left and right spans have text.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceType.Add">
            <summary>
            Lines were added, so the text is on the right-hand side
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceType.Remove">
            <summary>
            Lines were removed, so the text is on the left-hand side
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceType.Change">
            <summary>
            Lines were changed, so the text is on both sides
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceService">
            <summary>
            Determines the differences between two
            sequences, based on adding or removing elements (but not translating or copying elements).
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IDifferenceService diffService = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceService.DifferenceSequences``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Computes the differences between the two sequences.
            </summary>
            <typeparam name="T">The type of the sequences.</typeparam>
            <param name="left">The left sequence. In most cases this is the "old" sequence.</param>
            <param name="right">The right sequence. In most cases this is the "new" sequence.</param>
            <returns>A collection of the differences between the two sequences.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceService.DifferenceSequences``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},Microsoft.VisualStudio.Text.Differencing.ContinueProcessingPredicate{``0})">
            <summary>
            Computes the differences between the two sequences.  The supplied predicate will be called on each
            step through the <paramref name="left"/> sequence.
            </summary>
            <typeparam name="T">The type of the sequences.</typeparam>
            <param name="left">The left sequence. In most cases this is the "old" sequence.</param>
            <param name="right">The right sequence. In most cases this is the "new" sequence.</param>
            <param name="continueProcessingPredicate">A predicate that will be called on each step through the <paramref name="left"/> sequence,
            with the option of stopping the algorithm prematurely.</param>
            <returns>A collection of the differences between the two sequences.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection">
            <summary>
            Represents a difference collection in which the left and right
            sequences are <see cref="T:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList"/> objects, and each difference may itself contain
            an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection"/>.  
            </summary>
            <remarks>You can get this collection by using the <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService"/>. 
            When you request multiple types of string differencing
            (e.g. line and word), the first level of differences will be the lines,
            and each line difference may contain an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection"/>
            of word differences. See <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService"/>
            for more information and examples.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1">
            <summary>
            Represents a collection of <see cref="T:Microsoft.VisualStudio.Text.Differencing.Difference"/> objects extracted from two lists of same-typed elements,
            given a maximal match sequence generated from a difference algorithm.
            </summary>
            <typeparam name="T">The element type of the compared lists.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1.MatchSequence">
            <summary>
            Gets the original match sequence that was used to create this difference collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1.LeftSequence">
            <summary>
            Gets the left sequence that was used to create this difference collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1.RightSequence">
            <summary>
            Gets the right sequence that was used to create this difference collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1.Differences">
            <summary>
            Returns the difference collection as a list. 
            </summary>
            <remarks>Since the difference collection itself implements the IEnumerable interface,
            you can use it to iterate over the differences.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.GetContainedDifferences(System.Int32)">
            <summary>
            Gets the contained difference collection for the given element, if
            it has any.  This forces an evaluation of the contained differences.
            </summary> 
            <param name="index">The index at which to compute the contained differences.</param>
            <returns>The contained differences at this level, or <c>null</c> if there are none.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.HasContainedDifferences(System.Int32)">
            <summary>
            Determines whether or not the <see cref="T:Microsoft.VisualStudio.Text.Differencing.Difference"/> at the given index itself contains differences.  This forces an evaluation of the contained differences for the given element.
            </summary>
            <param name="index">The index at which to check for contained differences.</param>
            <returns><c>true</c> if the <see cref="T:Microsoft.VisualStudio.Text.Differencing.Difference"/> in question has contained differences, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.LeftDecomposition">
            <summary>
            Gets the original left tokenized list.
            </summary>
            /// <remarks>
            This is the same as IDifferenceCollection.LeftSequence, except that
            it is typed as an <see cref="T:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.RightDecomposition">
            <summary>
            Get the original right tokenized list.
            </summary>
            <remarks>
            This is the same as IDifferenceCollection.RightSequence, except that
            it is typed as an <see cref="T:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService">
            <summary>
            This service has several shortcut methods that compute
            differences over strings, snapshots, and spans.
            Differences are computed according to the specified <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes"/>,
            starting with the most general type 
            (line is more general than word, and word is more general than character).
            </summary>
            <example>
            Given string A:
            ---
            This is a
            line!
            ---
            And string B:
            ---
            This is but a
            line!
            ---
            
            The returned difference collection contains one line difference, which maps to line 1 of each string.
            This difference contains one
            word difference, which is the addition of the words "but" and " ".
            </example>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IHierarchicalStringDifferenceService diffService = null;
            </remarks>    
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService.DiffStrings(System.String,System.String,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Computes the differences between two strings, using the given difference options.
            </summary>
            <param name="left">The left string. In most cases this is the the "old" string.</param>
            <param name="right">The right string. In most cases this is the "new" string.</param>
            <param name="differenceOptions">The options to use in differencing</param>
            <returns>A hierarchical collection of differences.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService.DiffSnapshotSpans(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Computes the differences between two snapshot spans, using the given difference options.
            </summary>
            <param name="left">The left snapshot. In most cases this is the the "old" snapshot.</param>
            <param name="right">The right snapshot. In most cases this is the "new" snapshot.</param>
            <param name="differenceOptions">The options to use.</param>
            <returns>A hierarchical collection of differences.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList">
            <summary>
            A tokenized representation of a string into abutting and non-overlapping segments.
            </summary>
            <remarks>
            This interface implements IList so that it can be used with 
            <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceService"/>, which finds the differences between two sequences represented
            as ILists. </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList.GetElementInOriginal(System.Int32)">
            <summary>
            Maps the index of an element to its span in the original list.
            </summary>
            <param name="index">The index of the element in the element list.</param>
            <returns>The span of the element.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is either negative or exceeds the list's Count property.</exception>
            <remarks>This method returns a zero-length span at the end of the string if index
            is equal to the list's Count property.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList.GetSpanInOriginal(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Maps a span of elements in this list to the span in the original list.
            </summary>
            <param name="span">The span of elements in the elements list.</param>
            <returns>The span mapped onto the original list.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList.Original">
            <summary>
            The original string that was tokenized.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.Match">
             <summary>
             Represents a range of matches between two sequences as a pair of spans of equal length.
             </summary>
             <remarks>
             Given two sequences:
             abCCd (left)
             abFFd (right)
             The generated pairs of matches would be:
             (0, 0), (1, 1), (4, 4)
             Which would turn into the Matches (left-start, right-start, length):
             (0, 0, 2) and (4, 4, 1)
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.#ctor(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Creates a match from two spans of equal length.
            </summary>
            <param name="left">The span from the left sequence.</param>
            <param name="right">The span from the right sequence.</param>
            <exception cref="T:System.ArgumentNullException">The left span or right span is null.</exception>
            <exception cref="T:System.ArgumentException">The spans are not of equal length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.Equals(System.Object)">
            <summary>
            Determines whether two Match objects have the same left and right spans.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.GetHashCode">
            <summary>
            Provides a hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.GetEnumerator">
            <summary>
            Gets an enumerator typed as a <see cref="T:System.Tuple"/> of integers.
            </summary>
            <returns>The typed enumerator.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.Match.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an untyped enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Match.Left">
            <summary>
            Get the left-side range
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Match.Right">
            <summary>
            Gets the right span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.Match.Length">
            <summary>
            Gets the length of the spans. Both spans have equal lengths.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes">
            <summary>
            A bitwise combination of the enumeration values to use when computing differences with the various methods in 
            <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService"/>. 
            </summary>
            <remarks>
            See the comments on 
            <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService"/> for an explanation of how differences are computed.
            Since computing differences can be slow with large data sets, you should not use the Character type
            unless the given text is relatively small.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes.Line">
            <summary>
            Compute the line difference.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes.Word">
            <summary>
            Compute the word difference.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes.Character">
            <summary>
            Compute the character difference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions">
            <summary>
            Options to use in computing string differences.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.#ctor(Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes,System.Int32,System.Boolean)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>.
            </summary>
            <param name="differenceType">The type of string differencing to do, as a combination of line, word, and character differencing.</param>
            <param name="locality">The greatest distance a differencing element (line, span, or character) can move and still be considered part of the same source.  A value of 0 disables locality checking.</param>
            <param name="ignoreTrimWhiteSpace">Determines whether whitespace should be ignored.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.#ctor(Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/> from a given <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/> to use in constructing a new <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.ToString">
            <summary>
            Provides a string representation of these difference options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.GetHashCode">
            <summary>
            Provides a hash function for the type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.Equals(System.Object)">
            <summary>
            Determines whether two StringDifferenceOptions are the same.
            </summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.op_Equality(Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Determines whether two StringDifferenceOptions are the same
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.op_Inequality(Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Determines whether two StringDifferenceOptions are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.DifferenceType">
            <summary>
            The type of string differencing to do, as a combination
            of line, word, and character differencing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.Locality">
            <summary>
            The greatest distance a differencing element (line, span, or character) can move 
            and still be considered part of the same source.  A value of 0 disables locality checking.
            </summary>
            <remarks>
            For example, if Locality is set to 100, a line is considered the same line 
            if it is separated by 100 or fewer lines from its neighboring lines. 
            If it is separated by more than 100 lines, it is considered a different line.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.IgnoreTrimWhiteSpace">
            <summary>
            Gets or sets whether to ignore white space.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.WordSplitBehavior">
            <summary>
            The behavior to use when splitting words, if word differencing is requested
            by the <see cref="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.DifferenceType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.DetermineLocalityCallback">
            <summary>
            An optional callback to override the locality for a specific round of differencing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.ContinueProcessingPredicate">
            <summary>
            An optional predicate that allows clients to cancel differencing before it has completely finished.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior">
            <summary>
            Behavior to use while splitting words in string differencing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.Default">
            <summary>
            Split words by <see cref="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.CharacterClass"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.CharacterClass">
            <summary>
            Split words by character class.
            </summary>
            <remarks>
            The word split logic uses the following character classes:
            1) Whitespace and control characters
            2) Numbers/Digits
            3) Punctuation/Symbols
            4) Letters
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.WhiteSpace">
            <summary>
            Split the text into words by whitespace only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior.WhiteSpaceAndPunctuation">
            <summary>
            Split the text into words by whitespace and punctuation/symbols.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.EncodingChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.EncodingChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EncodingChangedEventArgs.#ctor(System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.EncodingChangedEventArgs"/>
            </summary>
            <param name="oldEncoding">The previous encoding.</param>
            <param name="newEncoding">The new encoding.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.EncodingChangedEventArgs.OldEncoding">
            <summary>
            Gets the previous encoding.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.EncodingChangedEventArgs.NewEncoding">
            <summary>
            Gets the new encoding.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IEncodingDetector">
            <summary>
            Attempts to detect a text encoding associated with a stream.
            </summary>
            <remarks>
            <para>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(NameSource=typeof(IEncodingDetector))]
            </para>
            <para>
            Exports must include a [Name] attribute and at least one [ContentType] attribute.
            Exports may optionally include the [Order] attribute.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IEncodingDetector.GetStreamEncoding(System.IO.Stream)">
            <summary>
            Attempts to detect an encoding associated with a stream.
            </summary>
            <remarks>
            The stream is read from its current position. The encoding sniffer does not need to reset the stream's position.
            </remarks>
            <param name="stream">The stream to read.</param>
            <returns>The detected encoding, or null if one could not be determined.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextDocument">
            <summary>
            Represents a document in the file system that persists an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SetEncoderFallback(System.Text.EncoderFallback)">
            <summary>
            Change the encoder fallback of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.Encoding"/>.
            </summary>
            <param name="fallback">The new encoder fallback</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.Rename(System.String)">
            <summary>
            Rename the document to the given new file path.
            </summary>
            <param name="newFilePath">The new file path for this document.</param>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.Reload">
            <summary>
            Reloads the contents of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> into <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/>.  
            If the load fails, the contents of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> remains unchanged.
            </summary>
            <returns>Indicates whether the reload took place and whether the encoding was sufficient.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred during file load.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file load.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.Reload(Microsoft.VisualStudio.Text.EditOptions)">
            <summary>
            Reloads the contents of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> into <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/>,
            using the given <see cref="T:Microsoft.VisualStudio.Text.EditOptions"/>.  
            If the load fails, the contents of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> remains unchanged.
            </summary>
            <param name="options">The options to use for the text buffer edit.</param>
            <returns>Indicates whether the reload took place and whether the encoding was sufficient.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred during file load.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file load.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.Save">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/>.  
            If the save operation fails, the value of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <exception cref="T:System.IO.IOException"> An I/O error occurred during file save.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            If the save operation is successful, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> is set to <paramref name="filePath"/>, 
            and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> is set to <c>false</c>.  If the save operation fails,
            <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <param name="filePath">The name of the new file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is <c>false</c>).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            If the save operation is successful, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> is set to <paramref name="filePath"/>, 
            and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> is set to <c>false</c>.  If the save operation fails,
            <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <param name="filePath">The name of the new file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <param name="createFolder"><c>true</c> if the folder containing <paramref name="filePath"/> should be created if it does not exist, otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is <c>false</c>).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveAs(System.String,System.Boolean,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            If the save is successful, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> is set to <paramref name="filePath"/>, 
            and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> is set to <c>false</c>.  If the save fails,
            <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <param name="filePath">The name of the new file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <param name="newContentType">The new <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> or <paramref name="newContentType"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is false).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
            <remarks>
            The order of events raised as a result of a successful file SaveAs
            operation is <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred"/> followed by <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ContentTypeChanged"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveAs(System.String,System.Boolean,System.Boolean,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            If the save is successful, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> is set to <paramref name="filePath"/>, 
            and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> is set to <c>false</c>.  If the save fails,
            <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> remains unchanged.
            </summary>
            <param name="filePath">The name of the new file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <param name="createFolder"><c>true</c> if the folder containing <paramref name="filePath"/> should be created if it does not exist, otherwise <c>false</c>.</param>
            <param name="newContentType">The new <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> or <paramref name="newContentType"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is false).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
            <remarks>
            The order of events raised as a result of a successful file SaveAs
            operation is <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred"/> followed by <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ContentTypeChanged"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveCopy(System.String,System.Boolean)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            </summary>
            <param name="filePath">The name of the file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is <c>false</c>).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <remarks>This call does not affect the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/>, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.LastSavedTime"/>, and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> properties.
            The <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred"/> event is not raised.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.SaveCopy(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the contents of the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> to the given <paramref name="filePath"/>.
            </summary>
            <param name="filePath">The name of the file.</param>
            <param name="overwrite"><c>true</c> if <paramref name="filePath"/> should be overwritten if it exists, otherwise <c>false</c>.</param>
            <param name="createFolder"><c>true</c> if the folder containing <paramref name="filePath"/> should be created if it does not exist, otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (including an error caused by attempting
            to overwrite an existing file when <paramref name="overwrite"/> is <c>false</c>).</exception>
            <exception cref="T:System.UnauthorizedAccessException">An access error occurred during file save.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <remarks>This call does not affect the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/>, <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.LastSavedTime"/>, and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath"/> properties.
            The <see cref="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred"/> event is not raised.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocument.UpdateDirtyState(System.Boolean,System.DateTime)">
            <summary>
            Updates the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> and <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.LastContentModifiedTime"/> properties.
            </summary>
            <param name="isDirty">The new value for <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/>.</param>
            <param name="lastContentModifiedTime">The new value for <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.LastContentModifiedTime"/>.</param>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This object is in the middle of raising events.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.FilePath">
            <summary>
            The name and path of the file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> containing the document. This value is always non-null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty">
            <summary>
            Determines whether the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is dirty.  
            </summary>
            <remarks>If <c>true</c>, the contents of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> have
            changed since the file was last loaded or saved. If <c>false</c>, the contents of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.TextBuffer"/> have
            not changed since the file was last loaded or saved.</remarks>  
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.LastSavedTime">
            <summary>
            Gets the last <see cref="T:System.DateTime"/> the file was saved.  This time exactly matches the last file written 
            time on the file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.LastContentModifiedTime">
            <summary>
            Gets the last <see cref="T:System.DateTime"/> a change was made to the contents of the document. If it has not been modified
            since it was loaded or reloaded from disk, this will be the last write time of the underlying file at the time the
            load or reload occurred; otherwise, it is the last time the contents of the text buffer were changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.Encoding">
            <summary>
            Gets or sets the encoding of the document when saved to disk.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocument.EncodingChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.Encoding"/> property changes.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocument.FileActionOccurred">
            <summary>
            Occurs when the document has been loaded from or saved to disk.  
            You may not call Reload/Save/SaveAs to perform another file action while handling this event.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocument.DirtyStateChanged">
            <summary>
            Occurs when the value of <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> changes. 
            You may not call <see cref="M:Microsoft.VisualStudio.Text.ITextDocument.UpdateDirtyState(System.Boolean,System.DateTime)"/> in order to change 
            the <see cref="P:Microsoft.VisualStudio.Text.ITextDocument.IsDirty"/> property while handling this event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDocument.IsReloading">
            <summary>
            Determines whether the document is currently being reloaded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextDocumentFactoryService">
            <remarks>
            Represents a service that creates, load, and disposes text documents. This is a MEF component part, and should be imported as follows:
            [Import]
            ITextDocumentFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.CreateAndLoadTextDocument(System.String,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that opens and loads the contents of <paramref name="filePath"/> into a new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="filePath">The full path to the file to be loaded.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> or <paramref name="contentType"/> is null.</exception>
            <remarks>This method is equivalent to CreateAndLoadTextDocument(filePath, contentType, true, out unusedBoolean).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.CreateAndLoadTextDocument(System.String,Microsoft.VisualStudio.Utilities.IContentType,System.Text.Encoding,System.Boolean@)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that opens and loads the contents of <paramref name="filePath"/> into a new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="filePath">The full path to the file to be loaded.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <param name="encoding">The encoding to use. The decoder part of the Encoding object won't be used.</param>
            <param name="characterSubstitutionsOccurred">Set to true if some of the file bytes could not be directly translated using the given encoding.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/>, <paramref name="contentType"/>, or <paramref name="encoding"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.CreateAndLoadTextDocument(System.String,Microsoft.VisualStudio.Utilities.IContentType,System.Boolean,System.Boolean@)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that opens and loads the contents of <paramref name="filePath"/> into a new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="filePath">The full path to the file to be loaded.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <param name="attemptUtf8Detection">Whether to attempt to load the document as a UTF-8 file.</param>
            <param name="characterSubstitutionsOccurred">Set to true if some of the file bytes could not be directly translated using the given encoding.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> or <paramref name="contentType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.CreateTextDocument(Microsoft.VisualStudio.Text.ITextBuffer,System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> with <paramref name="textBuffer"/>, which is to be saved to <paramref name="filePath"/>
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to be saved to <paramref name="filePath"/>.</param>
            <param name="filePath">The full path to the file.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> or <paramref name="filePath"/> is null.</exception>
            <remarks>This call does not save the contents of the buffer to the given path.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.TryGetTextDocument(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.ITextDocument@)">
            <summary>
            Retrieve an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> for the given buffer, if one exists.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to get a document for.</param>
            <param name="textDocument">The <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> for this buffer, if one exists.</param>
            <returns><c>true</c> if a document exists for this buffer, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.TextDocumentCreated">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> is created.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDocumentFactoryService.TextDocumentDisposed">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> is disposed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ReloadResult">
            <summary>
            The return value of Reload methods on <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.ReloadResult.Aborted">
            <summary>
            The reload was blocked by the text document buffer's read only regions or <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changing"/> event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.ReloadResult.Succeeded">
            <summary>
            The reload completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.ReloadResult.SucceededWithCharacterSubstitutions">
            <summary>
            The reload completed but some bytes could not be decoded and were replaced with a replacement character.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextDocumentEventArgs">
            <summary>
            Provides information for events when an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> has been created or disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextDocumentEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextDocument)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.TextDocumentEventArgs"/>.
            </summary>
            <param name="textDocument">The <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that was created or disposed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDocumentEventArgs.TextDocument">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> that was created or disposed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.FileActionTypes">
            <summary>
            Describes the type of file action.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.FileActionTypes.ContentSavedToDisk">
            <summary>
            The content was saved to disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.FileActionTypes.ContentLoadedFromDisk">
            <summary>
            The content was loaded from disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.FileActionTypes.DocumentRenamed">
            <summary>
            The document was renamed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs">
            <summary>
            Provides information for events that are raised when an <see cref="T:Microsoft.VisualStudio.Text.ITextDocument"/> has loaded from or saved to disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs.#ctor(System.String,System.DateTime,Microsoft.VisualStudio.Text.FileActionTypes)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs"/> for a file action event.
            </summary>
            <param name="filePath">The path to the file.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the file action occurred.</param>
            <param name="fileActionType">The <see cref="T:Microsoft.VisualStudio.Text.FileActionTypes"/> that occurred.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs.FilePath">
            <summary>
            Gets the path to the file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs.Time">
            <summary>
            Gets the <see cref="T:System.DateTime"/> when the file action occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs.FileActionType">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.FileActionTypes"/> that occurred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs">
            <summary>
            Provides information about a change to the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> on an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs">
            <summary>
            Provides information about a transaction on a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> 
            that causes a new <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to be generated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs"/> for a Change event.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> immediately after the change occurred.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="beforeSnapshot"/> or <paramref name="afterSnapshot"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.Before">
            <summary>
            Gets the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> before the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.After">
            <summary>
            Gets the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> after the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.BeforeVersion">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/> associated with <see cref="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.Before"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.AfterVersion">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>n associated with <see cref="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.After"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs.EditTag">
            <summary>
            Gets an arbitrary object provided by the initiator of the changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Utilities.IContentType,Microsoft.VisualStudio.Utilities.IContentType,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs"/>
            with the specified before and after snapshots and before and after content types.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> immediately after the change occurred.</param>
            <param name="beforeContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> before the change occurred.</param>
            <param name="afterContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> after the change occurred.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException"> One of <paramref name="beforeSnapshot"/>, 
            <paramref name="afterSnapshot"/>, <paramref name="beforeContentType"/>, or
            <paramref name="afterContentType"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs.BeforeContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> before the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs.AfterContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> after the change occurred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CustomTrackToVersion">
            <summary>
            Provides a custom implementation of span tracking. This delegate should be implemented by custom tracking spans.
            </summary>
            <param name="customSpan">The span to be tracked.</param>
            <param name="currentVersion">The version to which <paramref name="currentSpan"/> belongs.</param>
            <param name="targetVersion">The version to which <paramref name="currentSpan"/> is to be tracked.</param>
            <param name="currentSpan">The span to track.</param>
            <param name="customState">The custom state that was provided when the span was created.</param>
            <returns>The span to which <paramref name="currentSpan"/> tracks.</returns>
            <remarks><paramref name="targetVersion"/> may be earlier than <paramref name="currentVersion"/>.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.EdgeInsertionMode">
            <summary>
            Specifies the edge insertion modes for read-only regions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.EdgeInsertionMode.Allow">
            <summary>
            Allows insertions at the edge of read-only regions. If
            there is a read-only region [3, 6) that allows edge insertions, an insertion at
            position 3 or position 6 will succeed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.EdgeInsertionMode.Deny">
            <summary>
            Prevents insertions at the edge of read-only regions. If
            there is a read-only region [3, 6) that allows edge insertions, an insertion at
            position 3 or position 6 will fail.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.EditOptions">
            <summary>
            Options applicable to text editing transactions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.EditOptions.None">
            <summary>
            Do nothing special with this edit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.EditOptions.DefaultMinimalChange">
            <summary>
            Turn this edit into a minimal change, using line and word string differencing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.#ctor(Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Create a set of edit options for computing a minimal difference,
            with the given <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.#ctor(System.Boolean,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions)">
            <summary>
            Create a set of edit options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.ToString">
            <summary>
            Provides a string representation of these edit options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.GetHashCode">
            <summary>
            Provides a hash function for the type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.Equals(System.Object)">
            <summary>
            Determines whether two spans are the same.
            </summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.op_Equality(Microsoft.VisualStudio.Text.EditOptions,Microsoft.VisualStudio.Text.EditOptions)">
            <summary>
            Determines whether two EditOptions are the same
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.EditOptions.op_Inequality(Microsoft.VisualStudio.Text.EditOptions,Microsoft.VisualStudio.Text.EditOptions)">
            <summary>
            Determines whether two EditOptions are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.EditOptions.ComputeMinimalChange">
            <summary>
            True if this edit computes minimal change using the differencing option <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions"/>, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.EditOptions.DifferenceOptions">
            <summary>
            The differencing options for this edit, if <see cref="P:Microsoft.VisualStudio.Text.EditOptions.ComputeMinimalChange"/> is true.
            </summary>
            <remarks>
            <see cref="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.IgnoreTrimWhiteSpace"/> will be
            ignored.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IExtensionErrorHandler">
            <summary>
            Allows editor hosts to detect exceptions that get captured at extension points.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IExtensionErrorHandler errorHandler = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IExtensionErrorHandler.HandleError(System.Object,System.Exception)">
            <summary>
            Notifies that an exception has occured.
            </summary>
            <param name="sender">The extension object or event handler that threw the exception.</param>
            <param name="exception">The exception that was thrown.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IMappingPoint">
            <summary>
            A position in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that can be mapped within a <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingPoint.GetPoint(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps the point to a particular <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="targetBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which to map the point.</param>
            <param name="affinity">If the mapping is ambiguous (the position lies on a source span seam), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the anchor buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the anchor buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the targeted buffer or null if the point and affinity do not appear in that buffer.</returns>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetBuffer"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingPoint.GetPoint(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps the point to a particular <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="targetSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to which to map the point.</param>
            <param name="affinity">If the mapping is ambiguous (the position lies on a source span seam), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the anchor buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the anchor buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the targeted buffer or null if the point and affinity do not appear in that buffer.</returns>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetSnapshot"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingPoint.GetPoint(System.Predicate{Microsoft.VisualStudio.Text.ITextBuffer},Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps the point to a matching <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="match">The predicate used to match the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <param name="affinity">If the mapping is ambiguous (the position lies on a source span seam), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the anchor buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the anchor buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the matching buffer, or null if the point and affinity do not appear in that buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <remarks><paramref name="match"/> will be called as text buffers in the buffer graph are encountered, until a match is found. 
            This selects the buffer of interest and <paramref name="match"/> is not called again. 
            If no match is found with any of the buffers, the result is null.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingPoint.GetInsertionPoint(System.Predicate{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Maps the point to an insertion point in a matching <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="match">The predicate used to match the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the matching buffer or null if the point does not appear in that buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <remarks>In the usual case, this is a straightforward computation that maps through projection buffers, subject to
            caller approval using <paramref name="match"/>. If there is ambiguity in a projection mapping, the
            <see cref="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.GetTypicalInsertionPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotPoint})"/> method for the relevant projection buffer will be consulted.
            <paramref name="match"/> will be called as text buffers in the buffer graph are encountered, until a match is found. 
            This selects the buffer of interest and the predicate will not be called again. 
            If no match is found with any of encountered buffers, the result will be null.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingPoint.AnchorBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> from which this point was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingPoint.BufferGraph">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> that this point uses to perform the mapping.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IMappingSpan">
            <summary>
            A span in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that can be mapped within a <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingSpan.GetSpans(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Maps the span to a particular <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="targetBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which to map the span.</param>
            <returns>The possibly empty collection of spans in the <paramref name="targetBuffer"/> to which the span maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetBuffer"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingSpan.GetSpans(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the span to a particular <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="targetSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to which to map the span.</param>
            <returns>The possibly empty collection of spans in the <paramref name="targetSnapshot"/> to which the span maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetSnapshot"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMappingSpan.GetSpans(System.Predicate{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Maps the span to a matching <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="match">The predicate used to identify the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>A possibly empty collection of spans in the matching buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <remarks><paramref name="match"/> is called on each text buffer in the buffer graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingSpan.Start">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> for the start of this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingSpan.End">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> for the end of this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingSpan.AnchorBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> from which this span was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMappingSpan.BufferGraph">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> that this span uses to perform mapping.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.INormalizedTextChangeCollection">
            <summary>
            A normalized list of <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> objects. Changes are sorted in ascending order of position,
            and abutting and overlapping changes are combined into a single change.
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Text.INormalizedTextChangeCollection"/> objects are immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.INormalizedTextChangeCollection.IncludesLineChanges">
            <summary>
            Determines whether any of the <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> objects in this list have a nonzero <see cref="P:Microsoft.VisualStudio.Text.ITextChange.LineCountDelta"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IReadOnlyRegion">
            <summary>
            A handle that tracks a possibly empty read-only region of text.
            </summary>
            <remarks>
            <para>
            The text in a read-only region is not necessarily immutable; a read-only region created on a 
            projection buffer makes that region read-only to clients of the projection buffer but
            does not affect the source buffers for that text. </para>
            <para>
            Read-only regions prevent edits only on their owning buffer.
            A read-only region that does not prohibit edge insertions does not prevent any insertion if the
            region has (or shrinks to) zero length.
            A zero-length read-only region that prohibits edge insertions prevents insertions only at its starting
            position, but allows deletions and modifications that span that position.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IReadOnlyRegion.EdgeInsertionMode">
            <summary>
            The edge insertion behavior of the read-only region.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IReadOnlyRegion.Span">
            <summary>
            The span of text marked read-only by this region.
            </summary>
            <remarks>
            Not null.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IReadOnlyRegion.QueryCallback">
            <summary>
            The delegate that notifies the read-only region of read-only checks and edits.
            </summary>
            <remarks>
            <para>May be null.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit">
            <summary>
            Provides for an atomic set of read-only region editing operations on an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            Edition positions are specified with respect to the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> 
            at the time the <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit"/> object was created.
            </summary>
            <remarks>
            <para>At most one <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object may be active for a particular <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. It is considered
            active as long as it has been neither applied nor canceled; calling Dispose() on an unapplied object is equivalent to calling Cancel. </para>
            <para>The operations performed using this object do not appear in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> until the <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> 
            method has been called.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextBufferEdit">
            <summary>
            Represents edit operations against a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply">
            <summary>
            Commits all the modifications made with this <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object to the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            Depending on the type of edit, it may also cause the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to generate a new snapshot and raise its Changed 
            event if any modifications were made. This method may be called only 
            once. After it is called, any other calls on this object (other than Dispose) will result in an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            Canceled will be <c>true</c> after this method returns if a handler of the buffer's Changing event canceled the change.
            </remarks>
            <returns>
            A snapshot of the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> after the change is applied. 
            If there was no change, or edit was canceled, or the edit is of a type that does not generate snapshots, no new snapshot will be created,
            and the previous snapshot will be returned.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel">
            <summary>
            Abandons all modifications started using this <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object. Any further calls 
            on this object will result in an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object, or the edit has already been applied.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferEdit.Snapshot">
            <summary>
            A snapshot of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> at the time this ITextBufferEdit object was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferEdit.Canceled">
            <summary>
            Determines whether this edit has been canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit.CreateReadOnlyRegion(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Marks a span of text in this buffer as read-only. The span remains 
            read-only until the <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> is removed.
            </summary>
            <param name="span">
            The span to mark as read-only.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> used to track this read-only region. This object must be used
            to remove the read-only region.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is past the end of the buffer.</exception>
            <remarks>Insertions at the edge of the read-only region are allowed by default.</remarks>
            <remarks>The region is created edge exclusive by default.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit.CreateReadOnlyRegion(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.EdgeInsertionMode)">
            <summary>
            Marks a span of text in this buffer as read-only.  The span remains 
            read-only until it is marked as writable or forced writable again.
            </summary>
            <param name="span">
            The span to mark as read-only.
            </param>
            <param name="trackingMode">
            Specifies the tracking behavior of the read-only region.
            </param>
            <param name="edgeInsertionMode">
            Specifies the edge insertion behavior of the read-only region.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> used to track this read-only region. This object will be used
            to remove the read-only region.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is past the end of the buffer.</exception>
            <remarks>
            Zero-length read-only regions restrict inserts only at that point.  A deletion or modification over that span
            can still occur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit.CreateDynamicReadOnlyRegion(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.EdgeInsertionMode,Microsoft.VisualStudio.Text.DynamicReadOnlyRegionQuery)">
            <summary>
            Marks a span of text in this buffer as as conditionally read-only,
            subject to a check performed when the region is queried.  The span remains 
            read-only until it is marked as writable or forced writable again.
            </summary>
            <param name="span">
            The span to mark as read-only.
            </param>
            <param name="trackingMode">
            Specifies the tracking behavior of the read-only region.
            </param>
            <param name="edgeInsertionMode">
            Specifies the edge insertion behavior of the read-only region.
            </param>
            <param name="callback">
            The delegate that notifies the read-only region of read-only checks and edits. May be null.
            See <see cref="P:Microsoft.VisualStudio.Text.IReadOnlyRegion.QueryCallback"/>.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> used to track this read-only region. This object will be used
            to remove the read-only region.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is past the end of the buffer.</exception>
            <remarks>
            Zero-length read-only regions restrict inserts only at that point.  A deletion or modification over that span
            can still occur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit.RemoveReadOnlyRegion(Microsoft.VisualStudio.Text.IReadOnlyRegion)">
            <summary>
            Removes the read-only region from the list of read-only regions in this buffer.
            </summary>
            <param name="readOnlyRegion">
            The read-only region to remove.
            </param>
            <remarks>
            Removing a read-only region that has already been removed does nothing.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="readOnlyRegion"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="readOnlyRegion"/> was created on another buffer.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextBuffer">
            <summary>
            A mutable sequence of Unicode characters encoded using UTF-16.
            Positions withing the buffer are treated as a sequence of characters (starting at character zero) or
            as a sequence of lines (starting at line zero). An empty buffer has a single line containing no characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.CreateEdit(Microsoft.VisualStudio.Text.EditOptions,System.Nullable{System.Int32},System.Object)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object that handles compound edit operations on this buffer.
            </summary>
            <param name="options">Options to apply to the compound edit operation.</param>
            <param name="reiteratedVersionNumber">If not null, indicates that the version to be created by this edit operation is
            the product of an undo or redo operation.</param>
            <param name="editTag">An arbitrary object that will be associated with this edit transaction.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">Another <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this text buffer, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.CreateEdit">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object that handles compound edit operations on this buffer.
            </summary>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">Another <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this text buffer.</exception>
            <remarks>This method is equivalent to CreateEdit(EditOptions.None, null, null).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.CreateReadOnlyRegionEdit">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit"/> object that handles adding or removing read-only regions from this buffer.
            </summary>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">Another <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this text buffer, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership">
            <summary>
            Claims ownership of this buffer for the current thread. All subsequent modifications of this <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>
            must be made from the current thread, or else an <see cref="T:System.InvalidOperationException"/> will be raised.
            </summary>
            <exception cref="T:System.InvalidOperationException">This method has been called previously from a different thread, or a
            <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess">
            <summary>
            Determines whether edit operations on this text buffer are permitted on the calling thread. If <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has
            previously been called, edit operations are permitted only from the same thread that made that call.
            </summary>
            <returns><c>true</c> if the calling thread is allowed to perform edit operations, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.ChangeContentType(Microsoft.VisualStudio.Utilities.IContentType,System.Object)">
            <summary>
            Changes the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for this <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="newContentType">The new <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.</param>
            <param name="editTag">An arbitrary object that will be associated with this edit transaction.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newContentType"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Another <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object is active for this <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given <paramref name="text"/>at the specified <paramref name="position"/>in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="position">The buffer position at which the first character of the text will appear.</param>
            <param name="text">The text to be inserted.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to insert the text, and then applying it. If the insertion
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted insertion.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">A text edit is currently active, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.Delete(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Deletes a sequence of characters from the buffer.
            </summary>
            <param name="deleteSpan">The span of characters to delete.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to delete the text, and then applying it. If the deletion
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted deletion.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="deleteSpan"/>.End is greater than the length of the buffer.</exception>
            <exception cref="T:System.InvalidOperationException">A TextEdit is currently active, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.Replace(Microsoft.VisualStudio.Text.Span,System.String)">
            <summary>
            Replaces a sequence of characters with different text. This is equivalent to first deleting the text to be replaced and then
            inserting the new text.
            </summary>
            <param name="replaceSpan">The span of characters to replace.</param>
            <param name="replaceWith">The new text to replace the old.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to replace the text, and then applying it. If the replacement
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted replacement.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="replaceSpan"/>.End is greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaceWith"/>is null.</exception>
            <exception cref="T:System.InvalidOperationException">A text edit is currently active, or 
            <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.CheckEditAccess"/> would return false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.IsReadOnly(System.Int32)">
            <summary>
            Determines whether a text insertion would be prohibited at <paramref name="position"/> due to an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/>.
            </summary>
            <param name="position">The position of the proposed text insertion.</param>
            <returns>
            <c>true</c> if an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> would prohibit insertions at this position, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot"/>.Length.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.IsReadOnly(System.Int32,System.Boolean)">
            <summary>
            Determines whether a text insertion would be prohibited at <paramref name="position"/> due to an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/>.
            </summary>
            <param name="position">The position of the proposed text insertion.</param>
            <param name="isEdit"><c>true</c> if this check is part of an edit. <c>false</c> for a query without side effects.</param>
            <returns><c>true</c> if an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/> would prohibit insertions at this position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot"/>.Length.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.IsReadOnly(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether a text modification or deletion would be prohibited at <paramref name="span"/> due to an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/>
            </summary>
            <param name="span">The span to check.</param>
            <returns>
            <c>true</c> if the entire span could be deleted or replaced, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:Microsoft.VisualStudio.Text.Span.End"/> property of <paramref name="span"/> is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot"/>.Length.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.IsReadOnly(Microsoft.VisualStudio.Text.Span,System.Boolean)">
            <summary>
            Determines whether a text modification or deletion would be prohibited at <paramref name="span"/> due to an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegion"/>
            </summary>
            <param name="span">The span to check.</param>
            <param name="isEdit"><c>true</c> if this check is part of an edit. <c>false</c> for a querry without side effects.</param>
            <returns><c>true</c> if the entire span could be deleted or replaced, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:Microsoft.VisualStudio.Text.Span.End"/> property of <paramref name="span"/> is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot"/>.Length.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBuffer.GetReadOnlyExtents(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Gets a list of read-only regions that overlap the given span.
            </summary>
            <param name="span">
            The span to check for read-only regions.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> of read-only regions that intersect the given span.
            </returns>
            <remarks>
            This method returns an empty list if there are no read-only 
            regions intersecting the span, or if the span is zero-length.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is past the end of the buffer.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.TakeThreadOwnership"/> has previously been called, and this call is being made
            from a different thread.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBuffer.ContentType">
            <summary>Gets the content type of the text in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot">
            <summary>
            Gets the current content of the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBuffer.EditInProgress">
            <summary>
            Determines whether an edit operation is currently in progress on the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.ReadOnlyRegionsChanged">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.IReadOnlyRegionEdit"/> has created or removed read-only regions.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed">
             <summary>
             Occurs when a non-empty <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> is successfully applied. 
             </summary>
             <remarks>
             This event is raised after <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> events and before <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedLowPriority"/> events.
            
             In the case that a second edit is applied by a listener of the Changed event (or the
             ChangedLowPriority or ChangedHighPriority events), the Changed events for the second edit 
             won't be raised until all listeners have been notified of the first edit (via ChangedLowPriority, Changed, and 
             ChangedHighPriority events).  That is, the events for subsequent edits are queued.  This ensures listeners
             recieve the Changed events in the order the edits were applied.
             </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedLowPriority">
            <summary>
            Occurs when a non-empty <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> is successfully applied. 
            </summary>
            <remarks>
            This event is raised after <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> and <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> events.
            
            Changed events for edits made within a ChangedLowPriority, <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/>, or 
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> listener are queued. See <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> for more 
            information about event queuing.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority">
            <summary>
            Occurs when a non-empty <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> is successfully applied. 
            </summary>
            <remarks>
            This event is raised before <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> and <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> events.
            
            Changed events for edits made within a ChangedLowPriority, <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/>, or 
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.ChangedHighPriority"/> listener are queued. See <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> for more 
            information about event queuing.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.Changing">
            <summary>
            Occurs just before a non-empty <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> is applied.
            </summary>
            <remarks>
            <para>
            If the edit operation is canceled in this event, another edit operation can be be started immediately in the event handler.
            For example, this event may be used to provide checkout on edit as an implicit, user-cancelable source control functionality.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.PostChanged">
            <summary>
            Occurs after the Changed event and any resulting edits.
            </summary>
            <remarks>
            Once <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> events have been raised for an edit as well as any resulting
            edits (i.e. when an edit is made within a Changed listener), the PostChanged event is
            raised.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBuffer.ContentTypeChanged">
            <summary>
            Occurs whenever the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> has been changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextBufferFactoryService">
            <summary>
            The factory service for ordinary TextBuffers.
            </summary>
            <remarks>This is a MEF Component, and should be imported as follows:
            [Import]
            ITextBufferFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService.CreateTextBuffer">
            <summary>
            Creates an empty <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> "text".
            </summary>
            <returns>
            An empty <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService.CreateTextBuffer(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an empty <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the specified <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.
            </summary>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>
            An empty <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the given ContentType.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="contentType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService.CreateTextBuffer(System.String,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the specified <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> and populates it 
            with the given text.
            </summary>
            <param name="text">The initial text to add.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object with the given text and <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="text"/> or <paramref name="contentType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService.CreateTextBuffer(System.IO.TextReader,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the given <paramref name="contentType"/> and populates it by 
            reading data from the specified TextReader.
            </summary>
            <param name="reader">The TextReader from which to read.</param>
            <param name="contentType">The <paramref name="contentType"/> for the text contained in the new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/></param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object with the given TextReader and <paramref name="contentType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="contentType"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferFactoryService.TextContentType">
            <summary>
            Predefined default content type. This is the base type for most content types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferFactoryService.PlaintextContentType">
            <summary>
            Predefined content type for plain text files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextBufferFactoryService.InertContentType">
            <summary>
            A content type for which no associated artifacts are automatically created.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextBufferFactoryService.TextBufferCreated">
            <summary>
            Raised when any <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextChange">
            <summary>
            Describes a single contiguous text change operation on the Text Buffer.
            
            All text changes are considered to be the replacement of <c>oldText</c> with <c>newText</c>.
            <para>
            Insertion is a text change in which <c>oldText</c> is an empty string and <c>newText</c> a non-empty string.
            </para>
            <para>
            Deletion is a text change in which  <c>oldText</c> is a non-empty string and <c>newText</c> is an empty string.
            </para>
            <para>
            Modification is a text change in which both <c>oldText</c> and <c>newText</c> are non-empty strings.
            </para>
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> objects are immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldSpan">
            <summary>
            The span of the text change in the snapshot immediately before the change. 
            </summary>
            <remarks>
            This span is empty for a pure insertion. Its start position may differ from NewSpan.Start only when there is more
            than one <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> included in moving from one snapshot to the next.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewSpan">
            <summary>
            The span of the <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> in the snapshot immediately after the change.
            </summary>
            <remarks>
            This span is empty for a pure deletion. Its start position may differ from OldSpan.Start only when there is more
            than one <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> included in moving from one snapshot to the next.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldPosition">
            <summary>
            The position of the text change in the snapshot immediately before the change. The position can differ from
            NewPosition only when there is more than one <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> included in moving from one snapshot to the next.
            </summary>
            <remarks>This is the equivalent of <c>OldSpan.Start</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewPosition">
            <summary>
            The position of the text change in the snapshot immediately after the change. The position can differ from
            OldPosition only when there is more than one <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> included in moving from one snapshot to the next.
            </summary>
            <remarks>This is the equivalent of <c>NewSpan.Start</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.Delta">
            <summary>
            The effect On the length of the buffer resulting from this change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldEnd">
            <summary>
            The end position of the <see cref="P:Microsoft.VisualStudio.Text.ITextChange.OldText"/> in the snapshot immediately before the change.
            </summary>
            <remarks>Equivalent to <c>OldSpan.End</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewEnd">
            <summary>
            The end position of the <see cref="P:Microsoft.VisualStudio.Text.ITextChange.NewText"/> in the snapshot immediately after the text change.
            </summary>
            <remarks>Equivalent to <c>NewSpan.End</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldText">
            <summary>
            The text that was replaced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewText">
            <summary>
            The text that replaced the old text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.OldLength">
            <summary>
            The length of <see cref="P:Microsoft.VisualStudio.Text.ITextChange.OldText"/>.
            </summary>
            <remarks>This is the equivalent of <c>OldSpan.Length</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.NewLength">
            <summary>
            The length of <see cref="P:Microsoft.VisualStudio.Text.ITextChange.NewText"/>.
            </summary>
            <remarks>This is the equivalent of <c>NewSpan.Length</c>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextChange.LineCountDelta">
            <summary>
            The effect of this change on the number of lines in the snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextEdit">
            <summary>
            Represents a set of editing operations on an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. The positions of all edit operations are specified
            with respect to the state of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> at the time this object was created.
            </summary>
            <remarks>
            <para>At most one <see cref="T:Microsoft.VisualStudio.Text.ITextBufferEdit"/> object may be active at a given time for a particular <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            This object is considered
            active as long as it has been neither Applied nor Cancelled; calling Dispose on an unapplied object is equivalent to calling Cancel. </para>
            <para>The operations performed using this object are not reflected in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> until the <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> 
            method has been called.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given <paramref name="text"/> at the specified <paramref name="position"/>in the text buffer.
            </summary>
            <param name="position">The buffer position at which the first character of the text will appear.</param>
            <param name="text">The text to be inserted.</param>
            <returns><c>true</c> if the insertion succeeded, <c>false</c> if it failed due to a read-only region.</returns>
            <remarks>Inserting an empty string will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Inserts an array of characters at the specified <paramref name="position"/> in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="position">The buffer position at which the first character of the text will appear.</param>
            <param name="characterBuffer">The character array from which characters will be inserted.</param>
            <param name="startIndex">The index in <paramref name="characterBuffer"/> of the first character to insert.</param>
            <param name="length">The number of characters to insert from <paramref name="characterBuffer"/>.</param>
            <returns><c>true</c> if the insertion succeeded, <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Inserting zero characters will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="characterBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the buffer, or
            <paramref name="startIndex"/> is less than zero, or <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> + <paramref name="length"/> is 
            greater than the length of <paramref name="characterBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Delete(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Deletes a sequence of characters from the buffer.
            </summary>
            <param name="deleteSpan">The span of characters to delete.</param>
            <returns><c>true</c> if the deletion succeeded, <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Deleting an empty span will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="deleteSpan"/>.End is greater than the length of the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes a equence of characters from the buffer.
            </summary>
            <param name="startPosition">The position of the first character to delete.</param>
            <param name="charsToDelete">The number of characters to delete.</param>
            <returns><c>true</c> if the deletion succeeded; <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Deleting zero characters will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> is less than zero or greater than the length of the buffer, or
            <paramref name="charsToDelete"/> is less than zero, or <paramref name="startPosition"/> + <paramref name="charsToDelete"/>
            is greater than the length of the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Replace(Microsoft.VisualStudio.Text.Span,System.String)">
            <summary>
            Replaces a sequence of characters with different text. This method has the same effect as first deleting the characters in
            <paramref name="replaceSpan"/> and then inserting <paramref name="replaceWith"/>.
            </summary>
            <param name="replaceSpan">The span of characters to replace.</param>
            <param name="replaceWith">The new text.</param>
            <returns><c>true</c> if the replacement succeeded, <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Replacing an empty span with an empty string will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="replaceSpan"/>.End is greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaceWith"/>is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextEdit.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces a sequence of characters with different text. This method has the same effect as first deleting the 
            <paramref name="charsToReplace"/> and then inserting <paramref name="replaceWith"/>.
            </summary>
            <param name="startPosition">The buffer position at which to start replacing.</param>
            <param name="charsToReplace">The number of characters to replace.</param>
            <param name="replaceWith">The new text.</param>
            <returns><c>true</c> if the replacement succeeded; <c>false</c> if it was prevented by a read-only region.</returns>
            <remarks>Replacing zero characters with an empty string will succeed but will not generate a new snapshot or raise a
            <see cref="E:Microsoft.VisualStudio.Text.ITextBuffer.Changed"/> event.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> or <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Cancel"/> or <see cref="M:System.IDisposable.Dispose"/> 
            method has previously been called on this object.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> is less than zero or greater than the length of the buffer, or
            <paramref name="charsToReplace"/> is less than zero, or <paramref name="startPosition"/> + <paramref name="charsToReplace"/>
            is greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaceWith"/>is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextEdit.HasEffectiveChanges">
            <summary>
            Determines whether the edit has changes in non-read-only regions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextEdit.HasFailedChanges">
            <summary>
            Determines whether any changes failed to be added to this edit due to read-only regions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextSnapshot">
            <summary>
            Provides read access to an immutable snapshot of a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> containing a sequence of Unicode characters. 
            The first character in the sequence has index zero.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetText(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Gets text from the snapshot starting at the beginning of the span and having length equal to the length of the span.
            </summary>
            <param name="span">The span to return.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the span is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length"/>.</exception>
            <returns>A non-null string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetText(System.Int32,System.Int32)">
            <summary>
            Gets text from the snapshot starting at <paramref name="startIndex"/> and having length equal to <paramref name="length"/>.
            </summary>
            <param name="startIndex">The starting index.</param>
            <param name="length">The length of text to get.</param>
            <returns>The string of length <paramref name="length"/> starting at <paramref name="startIndex"/> in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or greater than the length of the snapshot,
            or <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> plus <paramref name="length"/> is greater than the length of the snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetText">
            <summary>
            Gets all the text in the snapshot.
            </summary>
            <returns>A non-null string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.ToCharArray(System.Int32,System.Int32)">
            <summary>
            Converts a range of text to a character array.
            </summary>
            <param name="startIndex">
            The starting index of the range of text.
            </param>
            <param name="length">
            The length of the text.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or greater than the length of the snapshot, or
            <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> plus <paramref name="length"/> is greater than the length of the snapshot.</exception>
            <returns>The array of characters starting at <paramref name="startIndex"/> in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> and extend to its end.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies a range of text to a character array.
            </summary>
            <param name="sourceIndex">
            The starting index in the text snapshot.
            </param>
            <param name="destination">
            The destination array.
            </param>
            <param name="destinationIndex">
            The index in the destination array at which to start copying the text.
            </param>
            <param name="count">
            The number of characters to copy.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is less than zero or greater than the length of the snapshot, or
            <paramref name="count"/> is less than zero, or <paramref name="sourceIndex"/> + <paramref name="count"/> is greater than the length of the snapshot, or
            <paramref name="destinationIndex"/> is less than zero, or <paramref name="destinationIndex"/> plus <paramref name="count"/> is greater than the length of <paramref name="destination"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingPoint(System.Int32,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> against this snapshot.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="trackingMode">The tracking mode of the point.</param>
            <returns>A non-null TrackingPoint.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingPoint(System.Int32,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> against this snapshot.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="trackingMode">The tracking mode of the point.</param>
            <param name="trackingFidelity">The tracking fidelity of the point.</param>
            <returns>A non-null TrackingPoint.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the snapshot.</exception>
            <remarks>This text point reprises its previous position when visiting a version that was created by undo or redo.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this snapshot.
            </summary>
            <param name="span">The span of text in this snapshot.</param>
            <param name="trackingMode">How the tracking span will react to changes at its boundaries.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the span is greater than the length of the text snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this snapshot.
            </summary>
            <param name="span">The span of text in this snapshot.</param>
            <param name="trackingMode">How the tracking span should react to changes at its boundaries.</param>
            <param name="trackingFidelity">The tracking fidelity of the span.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the span is greater than the length of the text snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingSpan(System.Int32,System.Int32,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this snapshot.
            </summary>
            <param name="start">The starting position of the tracking span.</param>
            <param name="length">The length of the tracking span.</param>
            <param name="trackingMode">How the tracking span should react to changes at its boundaries.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length"/>, or
            <paramref name="length"/> is negative, or <paramref name="start"/> plus <paramref name="length"/>
            is less than <paramref name="start"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.CreateTrackingSpan(System.Int32,System.Int32,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this snapshot.
            </summary>
            <param name="start">The starting position of the tracking span.</param>
            <param name="length">The length of the tracking span.</param>
            <param name="trackingMode">How the tracking span should react to changes at its boundaries.</param>
            <param name="trackingFidelity">The tracking fidelilty mode.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>..</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length"/>, or
            <paramref name="length"/> is negative, or <paramref name="start"/> plus <paramref name="length"/>
            is less than <paramref name="start"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetLineFromLineNumber(System.Int32)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> for the given line number.
            </summary>
            <param name="lineNumber">The line number.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber"/> is less than zero or greater than or equal to LineCount/&gt;.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetLineFromPosition(System.Int32)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> for a line at the given position.
            </summary>
            <param name="position">The position.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than length of line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.GetLineNumberFromPosition(System.Int32)">
            <summary>
            Gets the number of the line that contains the character at the specified position.
            </summary>
            <returns>The line number of the line in which <paramref name="position"/> lies.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than Length/&gt;.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.Write(System.IO.TextWriter,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Writes a substring of the contents of the snapshot.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to use.</param>
            <param name="span">The span of text to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the span is greater than the length of the snapshot.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshot.Write(System.IO.TextWriter)">
            <summary>
            Writes the contents of the snapshot.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/>to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> of which this is a snapshot.
            </summary>
            <remarks>
            This property always returns the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object, but the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is not itself immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.ContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.TextBuffer"/> when this snapshot was current.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.Version">
            <summary>
            The version of the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that this <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> represents.
            </summary>
            <remarks>
            This property always returns the same <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>. The <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.Changes"/> property is
            initially null and becomes populated when it ceases to be the most recent version.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length">
            <summary>
            Gets the number of UTF-16 characters contained in the snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.LineCount">
            <summary>
            Gets the positive number of lines in the snapshot. A snapshot whose <see cref="P:Microsoft.VisualStudio.Text.ITextSnapshot.Length"/> is zero is considered to have one line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.Item(System.Int32)">
            <summary>
            Gets a single character at the specified position.
            </summary>
            <param name="position">The position of the character.</param>
            <returns>The character at <paramref name="position"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than or equal to the length of the snapshot.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshot.Lines">
            <summary>
            An enumerator for the set of lines in the snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextSnapshotLine">
            <summary>
            Immutable information about a line of text from an ITextSnapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshotLine.GetText">
            <summary>
            The text of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshotLine.GetTextIncludingLineBreak">
            <summary>
            The text of the line, including any line break characters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextSnapshotLine.GetLineBreakText">
            <summary>
            The string consisting of the line break characters (if any) at the
            end of the line. Has zero length for the last line in the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.Snapshot">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> in which the line appears.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.Extent">
            <summary>
            The extent of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.ExtentIncludingLineBreak">
            <summary>
            The extent of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.LineNumber">
            <summary>
            The 0-origin line number of the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.Start">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the first character in the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.Length">
            <summary>
            Length of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.LengthIncludingLineBreak">
            <summary>
            Length of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.End">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the first character past the end of the line, excluding any
            line break characters (thus will address a line break character, except 
            for the last line in the buffer, in which case it addresses a
            position past the end of the buffer).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.EndIncludingLineBreak">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the first character past the end of the line, including any
            line break characters (thus will address the first character in 
            the succeeding line, unless this is the last line, in which case it addresses a
            position past the end of the buffer).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextSnapshotLine.LineBreakLength">
            <summary>
            Length of line break characters (always falls in the range [0..2]).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextVersion">
            <summary>
            Describes a version of an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. Each application of an <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> to a text buffer
            generates a new ITextVersion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingPoint(System.Int32,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> against this version.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="trackingMode">The tracking mode of the point.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of this version.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingPoint(System.Int32,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> against this version.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="trackingMode">The tracking mode of the point.</param>
            <param name="trackingFidelity">The tracking fidelity of the point.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the snapshot.</exception>
            <remarks>This text point reprises its previous position when visiting a version that was created by undo or redo.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="span">The span of text in this snapshot that the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> should represent.</param>
            <param name="trackingMode">How the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> will react to changes at its boundaries.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/>.End is greater than the length of this version, or
            <paramref name="trackingMode"/> is equal to <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="span">The span of text in this snapshot that the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> should represent.</param>
            <param name="trackingMode">How the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> will react to changes at its boundaries.</param>
            <param name="trackingFidelity">The tracking fidelity of the span.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/>.End is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.Length"/>, or
            <paramref name="trackingMode"/> is equal to <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingSpan(System.Int32,System.Int32,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="start">The starting position of the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> in this version.</param>
            <param name="length">The length of the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> in this version.</param>
            <param name="trackingMode">How the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> will react to changes at its boundaries.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than the length of this version, or
            <paramref name="length"/> is negative, or <paramref name="start"/> + <paramref name="length"/>
            is less than <paramref name="start"/>, or
            <paramref name="trackingMode"/> is equal to <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateTrackingSpan(System.Int32,System.Int32,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="start">The starting position of the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> in this snapshot.</param>
            <param name="length">The length of the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> in this snapshot.</param>
            <param name="trackingMode">How the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> will react to changes at its boundaries.</param>
            <param name="trackingFidelity">The tracking fidelity mode.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.Length"/>, or
            <paramref name="length"/> is negative, or <paramref name="start"/> + <paramref name="length"/>
            is less than <paramref name="start"/>, or
            <paramref name="trackingMode"/> is equal to <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextVersion.CreateCustomTrackingSpan(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.TrackingFidelityMode,System.Object,Microsoft.VisualStudio.Text.CustomTrackToVersion)">
            <summary>
            Creates a custom <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> against this version.
            </summary>
            <param name="span">The span of text in this snapshot that the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> should represent.</param>
            <param name="trackingFidelity">The tracking fidelity of the span.</param>
            <param name="customState">Client-defined state associated with the span.</param>
            <param name="behavior">The custom tracking behavior.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/>.End is greater than <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.Length"/>.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.Next">
            <summary>
            Gets the next <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>. Returns null if and only if this is the most recent version of its text buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.Length">
            <summary>
            Gets the length in characters of this <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.Changes">
            <summary>
            Gets the text changes that produce the next version. Returns null if and only if this is the most recent version of its text buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which this <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/> applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.VersionNumber">
            <summary>
            The version number for this version. It is used for comparisons between versions of the same buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextVersion.ReiteratedVersionNumber">
             <summary>
             Gets the oldest version number for which all text changes between that version and this version have
             been canceled out by corresponding undo/redo operations.
             </summary>
             <remarks>
             If ReiteratedVersionNumber is not equal to <see cref="P:Microsoft.VisualStudio.Text.ITextVersion.VersionNumber"/>, then for every 
             <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> not originated by an undo operation between ReiteratedVersionNumber and VersionNumber, there is a
             corresponding <see cref="T:Microsoft.VisualStudio.Text.ITextChange"/> originated by an undo operation that cancels it out.  So the contents of the two 
             versions are necessarily identical.
            <para>
             Setting this property correctly is the responsibility of the undo system; aside from this
             property, the text buffer and related classes are unaware of undo and redo.
             </para>
             <para>
             Note that the <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/> objects created through <see cref="M:Microsoft.VisualStudio.Text.ITextBuffer.ChangeContentType(Microsoft.VisualStudio.Utilities.IContentType,System.Object)"/>
             have no text changes and will therefore keep the ReiteratedVersionNumber of the
             previous version.
             </para>
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITrackingPoint">
            <summary>
            A tracking position in an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingPoint.GetPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the tracking point to a particular snapshot of its <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="snapshot">The snapshot to which to map the tracking point.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingPoint.GetPosition(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            The position of the tracking point in the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="snapshot">The snapshot to which to map the position.</param>
            <returns>An integer position in the given snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingPoint.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingPoint.GetPosition(Microsoft.VisualStudio.Text.ITextVersion)">
            <summary>
            The position of the tracking point in the specified <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/>.
            </summary>
            <param name="version">The version to which to map the position.</param>
            <returns>An integer position in the given version.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="version"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="version"/> is not a version of <see cref="P:Microsoft.VisualStudio.Text.ITrackingPoint.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingPoint.GetCharacter(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps this tracking point to the specified snapshot and gets the character at that position.
            </summary>
            <param name="snapshot">The snapshot to which to map the position.</param>
            <returns>The character at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This ITrackingPoint denotes the end position of the snapshot.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingPoint.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which this point refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingPoint.TrackingMode">
            <summary>
            Determines whether the tracking point shifts or remains stationary when insertions occur at its position.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingPoint.TrackingFidelity">
            <summary>
            Determines how the tracking point behaves when moving to a previous version or when
            encountering versions that are replications of previous versions (due to undo or redo).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITrackingSpan">
            <summary>
            A span of text in an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that grows or shrinks 
            with changes to the text buffer. The span may be empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetSpan(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the tracking span to a particular snapshot of its text buffer.
            </summary>
            <param name="snapshot">The snapshot to which to map the tracking span.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetSpan(Microsoft.VisualStudio.Text.ITextVersion)">
            <summary>
            Maps the TrackingSpan to a particular version of its text buffer.
            </summary>
            <param name="version">The version to which to map the tracking span.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="version"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="version"/> is not a version of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetText(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the tracking span to a particular snapshot of its text buffer and gets the text it designates.
            </summary>
            <param name="snapshot">The snapshot to which to map the tracking span.</param>
            <returns>The contents of the tracking span in the specified text snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetStartPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the start of the tracking span to a particular snapshot of its text buffer.
            </summary>
            <param name="snapshot">The snapshot to which to map the start point.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the provided snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITrackingSpan.GetEndPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps the end of the tracking span to a particular snapshot of its text buffer.
            </summary>
            <param name="snapshot">The snapshot to which to map the end point.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of the provided snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is not a snapshot of <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer"/>.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingSpan.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which this tracking span refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingSpan.TrackingMode">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.Text.ITrackingSpan.TrackingMode"/> of this tracking span, which determines how it behaves when insertions occur at its edges.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITrackingSpan.TrackingFidelity">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.TrackingFidelityMode"/> of the tracking span, which determines how it behaves when moving to a previous version or when
            encountering versions that are replications of previous versions (due to undo or redo).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection">
            <summary>
            A read-only collection of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects, all from the same snapshot. 
            </summary>
            <remarks>
            The snapshot spans are sorted by start position, 
            with adjacent and overlapping spans combined.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor">
            <summary>
            Initializes an empty <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> with a single element.
            </summary>
            <param name="span">The sole member of the collection.</param>
            <exception cref="T:System.ArgumentException"><paramref name="span"/> is not initialized.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> from a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> and a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to apply to <paramref name="spans"/>.</param>
            <param name="spans">The normalized spans.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> or <paramref name="spans"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The spans in <paramref name="spans"/> extend beyond the end of <paramref name="snapshot"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> from a list of <see cref="T:Microsoft.VisualStudio.Text.Span"/>s and a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to apply to <paramref name="spans"/>.</param>
            <param name="spans">An arbitrary set of <see cref="T:Microsoft.VisualStudio.Text.Span"/> objects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> or <paramref name="spans"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The spans in <paramref name="spans"/> extend beyond the end of <paramref name="snapshot"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.SnapshotSpan})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> from a list of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects.
            </summary>
            <param name="snapshotSpans">An arbitrary set of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshotSpans"/> is null.</exception>
            <exception cref="T:System.ArgumentException">A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> is uninitialized, or it
            does not refer to the same <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> as the other snapshot spans, or it refers to an uninitialized <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.op_Implicit(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)~Microsoft.VisualStudio.Text.NormalizedSpanCollection">
            <summary>
            Converts the specified <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> to a <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/>.
            </summary>
            <param name="spans">The collection to convert.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> containing the corresponding normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Span"/> objects.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Union(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Computes the union of two snapshot span collections and normalizes the result.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <param name="right">The second <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <returns>The normalized union of the input collections.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Overlap(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Computes the overlap of two normalized snapshot span collections and normalizes the result.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <param name="right">The second <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/></param>
            <returns>The normalized set of overlapping snapshot spans.</returns>
            <remarks>Empty SnapshotSpans never overlap any other SnapshotSpan.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The input collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Intersection(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Computes the intersection of two normalized snapshot span collections and normalizes the result.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <param name="right">The second<see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.</param>
            <returns>The normalized set of intersecting spans.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Difference(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Computes the difference between two normalized snapshot span collections and normalizes the result.
            </summary>
            <param name="left">The collection from which to subtract <paramref name="right"/>.</param>
            <param name="right">The collection to subtract from <paramref name="left"/>.</param>
            <returns>The normalized set difference.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The input collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.OverlapsWith(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Determines whether this collection overlaps with another normalized snapshot span collection.
            </summary>
            <param name="set">The collection.</param>
            <returns><c>true</c> if the collections refer to the same snapshot and their spans overlap, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.IntersectsWith(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Determines whether this collection intersects with another normalized snapshot span collection.
            </summary>
            <param name="set">The colllection.</param>
            <returns><c>true</c> if the collections intersect, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The input collections refer to different snapshots.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.IndexOf(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the index of the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <param name="item">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.</param>
            <returns>The index of the snapshot span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#IList{Microsoft#VisualStudio#Text#SnapshotSpan}#Insert(System.Int32,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Inserts a snapshot span into the list. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location at which to insert the snapshot span.</param>
            <param name="item">The snapshot span to insert.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#IList{Microsoft#VisualStudio#Text#SnapshotSpan}#RemoveAt(System.Int32)">
            <summary>
            Removes a snapshot span at the specified location. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location at which to remove the snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#ICollection{Microsoft#VisualStudio#Text#SnapshotSpan}#Add(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Adds a snapshot span to the collection. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">The snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#ICollection{Microsoft#VisualStudio#Text#SnapshotSpan}#Clear">
            <summary>
            Clears the collection. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Contains(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether the collection contains the specified snapshot span.
            </summary>
            <param name="item">The snapshot span.</param>
            <returns><c>true</c> if the collection contains the snapshot span, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.CopyTo(Microsoft.VisualStudio.Text.SnapshotSpan[],System.Int32)">
            <summary>
            Copies the collection to an array of snapshot spans at the specified location.
            </summary>
            <param name="array">The array of snapshot spans.</param>
            <param name="arrayIndex">The location to which to copy the snapshot spans.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is negative or greater than the array length, 
            or the number of spans in the collection is greater than the length of the array minus the array index.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#ICollection{Microsoft#VisualStudio#Text#SnapshotSpan}#Remove(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Removes the specified span from the collection. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">The snapshot span.</param>
            <returns><c>true</c> if it was possible to remove the span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an object to the list. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">The object to add.</param>
            <returns>The location at which the object was added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Clear">
            <summary>
            Clears the list. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains the specified snapshot span.
            </summary>
            <param name="value">The snapshot span.</param>
            <returns><c>true</c> if the snapshot span is contained in the collection, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.IndexOf(System.Object)">
            <summary>
            Gets the index of the specified snapshot span.
            </summary>
            <param name="value">The snapshot span.</param>
            <returns>The location of the snapshot span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a snapshot span into the list at the specified location. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location.</param>
            <param name="value">The snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the specified snapshot span. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary> 
            <param name="value">The snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes a snapshot span at the specified location. This method throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the snapshot spans in this collection to the specified array, starting at the specified index.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The location at which to start copying.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is negative, or greater than
            the length of the array, or the number of spans is greater than the length of the array less the index.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is not one-dimensional.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.op_Equality(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> objects are the same.
            </summary>
            <param name="left">The first collection.</param>
            <param name="right">The second collection.</param>
            <returns><c>true</c> if the two sets are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.op_Inequality(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/> are different..
            </summary>
            <param name="left">The first collection.</param>
            <param name="right">The second collection.</param>
            <returns><c>true</c> if the two collections are different.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.GetHashCode">
            <summary>
            Gets a hash code for the collection.
            </summary>
            <returns>A 32-bit hash code associated with the collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Equals(System.Object)">
            <summary>
            Determines whether two snapshot span collections are equal
            </summary>
            <param name="obj">The second collection.</param>
            <returns><c>true</c> if the two collections are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.ToString">
            <summary>
            Converts the spans to a string..
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Item(System.Int32)">
            <summary>
            Gets the snapshot span at the specified location. The setter throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location at which to get the snapshot span.</param>
            <returns>The snapshot span.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.Count">
            <summary>
            Gets the number of spans in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#Generic#ICollection{Microsoft#VisualStudio#Text#SnapshotSpan}#IsReadOnly">
            <summary>
            Determines whether the collection is read-only. Always returns <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#IsFixedSize">
            <summary>
            Determines whether the collection is of fixed size. Always returns <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets the snapshot span at the specified location. The setter throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The location.</param>
            <returns>The snapshot span.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#IList#IsReadOnly">
            <summary>
            Determines whether this collection is read-only. This property always returns <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Determines whether this collection is synchronized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronized access to this collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection">
            <summary>
            A collection of spans that are sorted by start position, with adjacent and overlapping spans combined.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> that is empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.#ctor(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> that contains the specified span.
            </summary>
            <param name="span">Span contained by the span set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.NormalizedSpanCollection"/> that contains the specified list of spans.
            </summary>
            <param name="spans">The spans to be added.</param>
            <remarks>
            <para>The list of spans will be sorted and normalized (overlapping and adjoining spans will be combined).</para>
            <para>This constructor runs in O(N log N) time, where N = spans.Count.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="spans"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Union(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Finds the union of two span sets.
            </summary>
            <param name="left">
            The first span set.
            </param>
            <param name="right">
            The second span set.
            </param>
            <returns>
            The new span set that corresponds to the union of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <remarks>This operator runs in O(N+M) time where N = left.Count, M = right.Count.</remarks>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="left"/> or <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Overlap(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Findx the overlap of two span sets.
            </summary>
            <param name="left">The first span set.</param>
            <param name="right">The second span set.</param>
            <returns>The new span set that corresponds to the overlap of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <remarks>This operator runs in O(N+M) time where N = left.Count, M = right.Count.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Intersection(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Finds the intersection of two span sets.
            </summary>
            <param name="left">The first span set.</param>
            <param name="right">The second span set.</param>
            <returns>The new span set that corresponds to the intersection of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <remarks>This operator runs in O(N+M) time where N = left.Count, M = right.Count.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Difference(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Finds the difference between two sets. The difference is defined as everything in the first span set that is not in the second span set.
            </summary>
            <param name="left">The first span set.</param>
            <param name="right">The second span set.</param>
            <returns>The new span set that corresponds to the difference between <paramref name="left"/> and <paramref name="right"/>.</returns>
            <remarks>
            Empty spans in the second set do not affect the first set at all. This method returns empty spans in the first set that are not contained by any set in
            the second set.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.op_Equality(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Determines whether two span sets are the same. 
            </summary>
            <param name="left">The first set.</param>
            <param name="right">The second set.</param>
            <returns><c>true</c> if the two sets are equivalent, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.op_Inequality(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Determines whether two span sets are not the same.
            </summary>
            <param name="left">The first set.</param>
            <param name="right">The second set.</param>
            <returns><c>true</c> if the two sets are not equivalent, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.OverlapsWith(Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Determines whether this span set overlaps with another span set.
            </summary>
            <param name="set">The span set to test.</param>
            <returns><c>true</c> if the span sets overlap, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.IntersectsWith(Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Determines wheher this span set intersects with another span set.
            </summary>
            <param name="set">Set to test.</param>
            <returns><c>true</c> if the span sets intersect, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.GetHashCode">
            <summary>
            Gets a unique hash code for the span set.
            </summary>
            <returns>A 32-bit hash code associated with the set.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.Equals(System.Object)">
            <summary>
            Determines whether this span set is the same as another object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.ToString">
            <summary>
            Provides a string representation of the set.
            </summary>
            <returns>Thetring representation of the set.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.NormalizedSpanCollection.#ctor(Microsoft.VisualStudio.Text.NormalizedSpanCollection.OrderedSpanList)">
            <summary>
            Private ctor for use when the span list is already normalized.
            </summary>
            <param name="normalizedSpans">An already normalized span list.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PointTrackingMode">
            <summary>
            Represents tracking modes for <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PointTrackingMode.Positive">
            <summary>
            With this setting, a point tracks toward the end of the document, so that an
            insertion at the current position pushes the point to the end of the inserted text. 
            If a replacement contains the point, it will end up at the end of the replacement text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PointTrackingMode.Negative">
            <summary>
            With this setting, a point tracks toward the beginning of the document, 
            so that an insertion at the current position leaves the point unaffected.  If a
            replacement contains the point, it will end up at the beginning of the replacement text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PositionAffinity">
            <summary>
            Describes whether a position in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that can be thought of as
            lying between two characters is coupled to the preceding character or the following character.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor">
            <summary>
            The position is coupled to with the preceding character.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor">
            <summary>
            The position is coupled to the following character.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PreContentChangedEventArgs">
            <summary>
            Information provided before content changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PreContentChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.INormalizedTextChangeCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.PreContentChangedEventArgs"/>.
            </summary>
            <param name="beforeSnapshot">A text snapshot before the change.</param>
            <param name="changes">The collection of changes.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.PreContentChangedEventArgs.BeforeSnapshot">
            <summary>
            Gets the text snapshot before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.PreContentChangedEventArgs.Changes">
            <summary>
            Gets the collection of changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions">
            <summary>
            Options that apply to an <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions.None">
            <summary>
            No special treatment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions.FillInMappingMode">
            <summary>
            When mapping spans, include hidden text between the start point and the end point.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs">
            <summary>
            Provides data about an edit transaction on a <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/> in which the set of hidden source spans has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextContentChangedEventArgs">
            <summary>
            Provides information about an edit transaction on an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextContentChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.EditOptions,System.Object)">
            <summary>
            Initializes an new instance of <see cref="T:Microsoft.VisualStudio.Text.TextContentChangedEventArgs"/> for a Change event.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> immediately after the change occurred.</param>
            <param name="options">Edit options that were applied to this change.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="beforeSnapshot"/> or
            <paramref name="afterSnapshot"/> or
            <paramref name="options"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangedEventArgs.Changes">
            <summary>
            Gets the set of changes that occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangedEventArgs.Options">
            <summary>
            Gets the edit options that were applied to this change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection,System.Object)">
            <summary>
            Initialize a new instance of an <see cref="T:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs"/> object.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> immediately after the change occurred.</param>
            <param name="elidedSpans">Zero or more source spans that were hidden.</param>
            <param name="expandedSpans">Zero or more source spans that were expanded.</param>
            <param name="sourceToken">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException">One of <paramref name="beforeSnapshot"/>,  <paramref name="afterSnapshot"/>,
            <paramref name="elidedSpans"/>, or <paramref name="expandedSpans"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.ElidedSpans">
            <summary>
            The set of source spans that were inserted into the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> by this edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.ExpandedSpans">
            <summary>
            The set of source spans that were deleted from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> by this edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.Before">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> before the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs.After">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> after the change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs">
            <summary>
            Provides data about a change of <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> on a member of a <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Utilities.IContentType,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs"/> with the specified
            text buffer and the old and new content types.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> whose <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> has changed.</param>
            <param name="beforeContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> before the change.</param>
            <param name="afterContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> after the change.</param>
            <exception cref="T:System.ArgumentNullException">One of <paramref name="textBuffer"/>, <paramref name="beforeContentType"/>, 
            or <paramref name="afterContentType"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs.TextBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> whose <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs.BeforeContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs.AfterContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> after the change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs">
            <summary>
            Information provided when a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is added or removed from a <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs.#ctor(System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs"/> with the provided buffers.
            </summary>
            <param name="addedBuffers">The list of buffers that were added.</param>
            <param name="removedBuffers">The list of buffers that were removed.</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="addedBuffers"/> or <paramref name="removedBuffers"/>
            is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs.AddedBuffers">
            <summary>
            The list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects that have been added to the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs.RemovedBuffers">
            <summary>
            The list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects that have been removed from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph">
            <summary>
            Represents a graph of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects. The 
            top level text buffer might or might not be a <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.GetTextBuffers(System.Predicate{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Finds all the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects in the graph that match the specified predicate.
            </summary>
            <param name="match">The predicate used for matching.</param>
            <returns>A non-null but possibly empty collection of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.CreateMappingPoint(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> with the specified snapshot point and tracking mode.
            </summary>
            <param name="point">A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in one of the buffers of the graph.</param>
            <param name="trackingMode">How to track the point.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> that can track within its buffer and map within the graph.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.CreateMappingSpan(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Initializes a new instance of a  <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>.
            </summary>
            <param name="span">A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> in one of the buffers of the graph.</param>
            <param name="trackingMode">How to track the span.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> that can track within its buffer and map within the graph.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToBuffer(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the graph to the corresponding position in a buffer lower in the graph. Source buffers are considered to be lower than 
            the projection buffers that consume them.
            </summary>
            <param name="position">The position in a buffer in the graph.</param>
            <param name="trackingMode">How <paramref name="position"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetBuffer">The buffer to which to map the <paramref name="position"/>.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting  has no effect if the mapping is unambiguous.</param>
            <returns>A point in a snapshot of the target buffer, or null if <paramref name="position"/> is not in this graph or does not map to 
            the target buffer with the given affinity.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>.Snapshot or <paramref name="targetBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the graph to the corresponding position in a snapshot lower in the graph. Source buffers are considered to be lower than 
            the projection buffers that consume them.
            </summary>
            <param name="position">The position in a buffer in the graph.</param>
            <param name="trackingMode">How <paramref name="position"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetSnapshot">The buffer to which to map the <paramref name="position"/>.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <returns>A point in a snapshot of the target buffer, or null if <paramref name="position"/> is not in this graph or does not map to the
            target buffer with the given affinity.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>.Snapshot or <paramref name="targetSnapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToFirstMatch(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot},Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the graph to a position in a matching buffer that is lower in the graph. Source buffers are 
            considered to be lower than the projection buffers that consume them.
            </summary>
            <param name="position">The position in a buffer in the graph.</param>
            <param name="trackingMode">How <paramref name="position"/> is tracked to the current snapshot if necessary.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <returns>A point in a snapshot of the target buffer, or null if <paramref name="position"/> does not map down to any buffer 
            selected by <paramref name="match"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>.Snapshot or <paramref name="match"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
            <remarks>The <paramref name="match"/> predicate is called on each text buffer in the buffer graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToInsertionPoint(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot})">
            <summary>
            Maps a position in some buffer in the graph to a position in a matching buffer that is lower in the graph and to which an
            insertion would be routed. Source buffers are considered to be lower than the projection buffers that consume them.
            </summary>
            <param name="position">the position in a buffer in the graph.</param>
            <param name="trackingMode">How <paramref name="position"/> is tracked to the current snapshot if necessary.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <returns>A point in a snapshot of some source buffer, or null if <paramref name="position"/> is not in this graph or  does not
            map down to any buffer selected by <paramref name="match"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>.Snapshot or <paramref name="match"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToBuffer(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Maps a snapshot span in some buffer in the graph to a sequence of zero or more spans in a buffer that is lower in the graph.
            Source buffers are considered to be lower than the projection buffers that consume them.
            </summary>
            <param name="span">The span that is to be mapped.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetBuffer">The buffer to which to map the span.</param>
            <returns>A collection of zero or more snapshot spans in the target buffer to which the span maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot or <paramref name="targetBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToSnapshot(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps a snapshot span in some buffer in the graph to a sequence of zero or more spans in a buffer that is lower in the graph.
            Source buffers are considered to be lower than the projection buffers that consume them.
            </summary>
            <param name="span">The span that is to be mapped.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetSnapshot">The buffer to which to map the span.</param>
            <returns>A collection of zero or more snapshot spans in the target buffer to which the span maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot or <paramref name="targetSnapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapDownToFirstMatch(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot})">
            <summary>
            Maps a snapshot span in some buffer in the graph to a sequence of zero or more spans in some source snapshot selected by a predicate.
            </summary>
            <param name="span">The span that is to be mapped.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <returns>A collection of zero or more snapshot spans in the target buffer to which the topSpan maps.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot or <paramref name="match"/>  is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
            <remarks><paramref name="match"/> is called on each text buffer in the buffer graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToBuffer(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.PositionAffinity,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Maps a position in the current snapshot of some buffer that is a member of the buffer graph to a snapshot of some buffer.
            </summary>
            <param name="point">A point in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="point"/> is tracked to the current snapshot if necessary.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <param name="targetBuffer">The buffer to which to map.</param>
            <returns>The corresponding position in a snapshot of the target buffer, or null if the position does not map to the target buffer 
            using this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="point"/>.Snapshot is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.PositionAffinity,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps a position in the current snapshot of some buffer that is a member of the buffer graph to specified snapshot.
            </summary>
            <param name="point">A point in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="point"/> is tracked to the current snapshot if necessary.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <param name="targetSnapshot">The snapshot to which to map.</param>
            <returns>The corresponding position in <paramref name="targetSnapshot"/>, or null if the position does not map to <paramref name="targetSnapshot"/> 
            using this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="point"/>.Snapshot is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToFirstMatch(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot},Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the current snapshot of some buffer that is a member of the buffer graph to a snapshot of some buffer
            that is selected by a predicate.
            </summary>
            <param name="point">A point in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="point"/> is tracked to the current snapshot if necessary.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position is on a source span seam), determines
            whether the mapping should target the position immediately after the preceding
            character or immediately before the following character in the top buffer.
            This setting has no effect if the mapping is unambiguous.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <remarks><paramref name="match"/> is called for each text buffer in the buffer graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
            <returns>The corresponding position in a snapshot of the matching buffer, or null if does not map to the matching buffer using
            this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="point"/>.Snapshot or <paramref name="match"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/>, or
            <paramref name="affinity"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToBuffer(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Maps a span in the current snapshot of some buffer that is a member of the buffer graph to a sequence of spans in a snapshot of 
            a designated buffer.
            </summary>
            <param name="span">A span in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetBuffer">The buffer to which to map.</param>
            <returns>A collection of zero or more snapshot spans in <paramref name="targetBuffer"/> to which the span maps using this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToSnapshot(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Maps a span in the current snapshot of some buffer that is a member of the buffer graph to a sequence of spans in a snapshot of 
            a designated buffer.
            </summary>
            <param name="span">A span in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="targetSnapshot">The snapshot to which to map.</param>
            <returns>A collection of zero or more snapshot spans in <paramref name="targetSnapshot"/> to which the span maps using this graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraph.MapUpToFirstMatch(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,System.Predicate{Microsoft.VisualStudio.Text.ITextSnapshot})">
            <summary>
            Maps a span in the current snapshot of some buffer that is a member of the buffer graph up to a sequence of spans in a snapshot of 
            some buffer that is selected by a predicate.
            </summary>
            <param name="span">A span in some buffer in the IBufferGraph.</param>
            <param name="trackingMode">How <paramref name="span"/> is tracked to the current snapshot if necessary.</param>
            <param name="match">The predicate that identifies the target buffer.</param>
            <returns>A collection of zero or more snapshot spans in the buffer selected by <paramref name="match"/>.</returns>
            <remarks><paramref name="match"/> is called on each text buffer in the graph until it
            returns <c>true</c>. The predicate will not be called again.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/>.Snapshot or <paramref name="match"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trackingMode"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/>.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IBufferGraph.TopBuffer">
            <summary>
            Gets the top text buffer in the buffer graph.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IBufferGraph.GraphBuffersChanged">
            <summary>
            Occurs when the set of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects in the buffer graph changes.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IBufferGraph.GraphBufferContentTypeChanged">
            <summary>
            Occurs when the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of any <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> in the buffer graph changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IBufferGraphFactoryService">
            <summary>
            Creates a buffer graph from a graph of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects created by projection.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IBufferGraphFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IBufferGraphFactoryService.CreateBufferGraph(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</returns>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer">
            <summary>
            A restricted projection buffer that has exactly one source buffer. Spans from the source buffer
            must appear in the same order in the projection buffer as in the source buffer.
            </summary>
            <remarks>
            The source spans of an elision buffer are all <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeInclusive"/>. Consequently,
            if all of the contents of a source span are deleted, and later an insertion is made at the location of that span
            in the source buffer, the insertion will appear in the elision buffer.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase">
            <summary>
            A text buffer that contains projections of other text buffers, composed
            of a list of text spans of those buffers. The other buffers that contribute to
            the projection buffer are called source buffers, and the text spans that describe
            the contributed regions are called source spans.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given <paramref name="text"/> at the specified <paramref name="position"/> in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="position">The buffer position at which the first character of the text will appear.</param>
            <param name="text">The text to be inserted.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to insert the text, and then applying it. If the insertion
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted insertion.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">A TextEdit is currently active.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.Delete(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Deletes a span of characters from the buffer.
            </summary>
            <param name="deleteSpan">The span of characters to delete.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to delete the text, and then applying it. If the deletion
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted deletion.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="deleteSpan"/>.The end of the span is greater than the length of the buffer.</exception>
            <exception cref="T:System.InvalidOperationException">A TextEdit is currently active.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.Replace(Microsoft.VisualStudio.Text.Span,System.String)">
            <summary>
            Replaces a span of characters with different text. This is equivalent to first deleting the text to be replaced and then
            inserting the new text.
            </summary>
            <param name="replaceSpan">The span of characters to replace.</param>
            <param name="replaceWith">The new text.</param>
            <remarks>
            This is a shortcut for creating a new <see cref="T:Microsoft.VisualStudio.Text.ITextEdit"/> object, using it to replace the text, and then applying it. If the replacement
            fails on account of a read-only region, the snapshot returned will be the same as the current snapshot of the buffer before
            the attempted replacement.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="replaceSpan"/>.The end of the span is greater than the length of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaceWith"/>is null.</exception>
            <exception cref="T:System.InvalidOperationException">A TextEdit is currently active.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.CurrentSnapshot">
            <summary>
            The current snapshot of the contents of the projection buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase.SourceBuffers">
            <summary>
            The set of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects that directly contribute to the projection buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.ElideSpans(Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Hides the text designated by <paramref name="spansToElide"/>. 
            </summary>
            <param name="spansToElide">The spans of text to hide with respect to the current snapshot of the source buffer. 
            It is not an error if some of the designated text is already hidden. These spans are converted to EdgeExclusive
            tracking spans.</param>
            <returns>A newly generated snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="spansToElide"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the final span in <paramref name="spansToElide"/> is greater 
            than <see cref="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceBuffer"/>.CurrentSnapshot.Length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.ExpandSpans(Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Expands the text specified by <paramref name="spansToExpand"/>.
            </summary>
            <param name="spansToExpand">The spans of text to expand, with respect to the current snapshot of the source buffer.
            It is not an error if some of the designated text is already expanded.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="spansToExpand"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the final spans in <paramref name="spansToExpand"/> is greater 
            than <see cref="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceBuffer"/>.CurrentSnapshot.Length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.ModifySpans(Microsoft.VisualStudio.Text.NormalizedSpanCollection,Microsoft.VisualStudio.Text.NormalizedSpanCollection)">
            <summary>
            Modifies the exposed text by hiding <paramref name="spansToElide"/> and then expanding <paramref name="spansToExpand"/>
            in a single transaction.
            </summary>
            <param name="spansToElide">The spans of text to hide with respect to the current snapshot of the source buffer. 
            It is not an error if some of the designated text is already hidden. These spans are converted to EdgeExclusive
            tracking spans. This parameter may be null.</param>
            <param name="spansToExpand">The spans of text to expand, with respect to the current snapshot of the source buffer.
            It is not an error if some of the designated text is already expanded. This parameter may be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The end of the final spans in <paramref name="spansToElide"/> or 
            <paramref name="spansToExpand"/> is greater than <see cref="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceBuffer"/>.CurrentSnapshot.Length.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceBuffer">
            <summary>
            Gets the source buffer of this elision buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.CurrentSnapshot">
            <summary>
            Gets the current snapshot of this elision buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.Options">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions"/> in effect for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/>.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IElisionBuffer.SourceSpansChanged">
            <summary>
            Occurs when the set of hidden spans changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IElisionSnapshot">
            <summary>
            A snapshot from an <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/> object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot">
            <summary>
            An immutable text snapshot that represents a state of an <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.
            This snapshot contains projections of other text snapshots, described
            by a list of tracking spans from those buffers. Every modification of a projection buffer
            or one of its source buffers generates a new projection snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.GetMatchingSnapshot(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the snapshot of the specified text buffer that corresponds to this snapshot.
            </summary>
            <param name="textBuffer"></param>
            <returns>The snapshot of the text buffer. Returns null if <paramref name="textBuffer"/> is not a text buffer of this projection buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.GetSourceSpans(System.Int32,System.Int32)">
            <summary>
            Gets a read-only collection of source snapshot spans starting at the specified span index.
            The <paramref name="startSpanIndex"/> is an index into the collection of source spans, not into the characters
            in the text buffer.
            </summary>
            <param name="startSpanIndex">The position at which to start getting snapshot spans.</param>
            <param name="count">The number of spans to get.</param>
            <returns>A read-only collection of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects that are sources of the projection snapshot.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startSpanIndex"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero or <paramref name="count"/> plus <paramref name="startSpanIndex"/> 
            is greater than SpanCount.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.GetSourceSpans">
            <summary>
            Gets all the source spans for the projection snapshot.
            </summary>
            <returns>A read-only collection of source spans of the projection snapshot, listed in the order they have in the projection snapshot.
            The collection may be empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapToSourceSnapshot(System.Int32,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps a position in the projection snapshot to the corresponding position in a source snapshot. 
            </summary>
            <param name="position">The position in the projection snapshot .</param>
            <param name="affinity">
            If the mapping is ambiguous (the position lies on a source span seam), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the projection buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the projection buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A snapshot point in one of the source snapshots.</returns>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than or equal to the length of the snapshot.</exception>
            <exception cref="T:System.InvalidOperationException">The projection snapshot has no source spans.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapToSourceSnapshots(System.Int32)">
            <summary>
            Maps a position in the projection snapshot to the corresponding position in one or more source snapshots.
            </summary>
            <param name="position">The position in the projection snapshot.</param>
            <returns>A read-only collection of snapshot points to which the position maps. This collection contains one snapshot point unless the position lies
            on a source span seam, in which case it can contain two or more points.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than or equal to the length of the snapshot.</exception>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapToSourceSnapshot(System.Int32)">
            <summary>
            Maps a position in the projection snapshot to the corresponding position in a source snapshot. If the mapping
            is ambiguous (occurs on a source span seam), see <see cref="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.GetTypicalInsertionPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotPoint})"/>
            to choose a source buffer.
            </summary>
            <param name="position">The position in the projection snapshot.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than or equal to the length of the snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapFromSourceSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps from a snapshot point in one of the source snapshots to the corresponding position in the projection snapshot.
            </summary>
            <param name="point">The snapshot point in a source buffer.</param>
            <param name="affinity">
            If the mapping is ambiguous (the position lies between two source spans), this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the projection buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the projection buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns>A position in the projection snapshot, or null if the source point does not correspond
            to text belonging to a span that is a member of the projection snapshot.</returns>
            <remarks>
            In general, a source span seam occurs at the end of a source span of nonzero length
            and the beginning of a source span of nonzero length, and
            coincides with zero or more source spans of zero length. Every span on a seam
            has a point in the result collection.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="point"/> does not belong to a source snapshot of this projection snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapToSourceSnapshots(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Maps a span of the current projection snapshot to a list of snapshot spans belonging to source
            snapshots. The resulting spans will be ordered by the order of their appearance in the projection.
            </summary>
            <param name="span">The span in the projection snapshot.</param>
            <returns>A non-empty list of snapshot spans.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/> is not valid for this buffer.</exception>
            <remarks>If a null span occurs on a source span seam, it may map to more than one null source span.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.MapFromSourceSnapshot(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Maps a snapshot span of a source buffer to a list of spans of the projection snapshot. 
            The resulting ordered list may be empty, contain a single element, or contain multiple elements.
            </summary>
            <param name="span">The snapshot span in a source buffer to map.</param>
            <returns>A non-null list of spans. The list will be empty if none of the positions in <paramref name="span"/> are projected by a source span
            of the projection snapshot. This list is <b>not</b> normalized; the spans will be ordered by their original position in the
            source snapshot, not their position in the projection snapshot. Adjacent spans are not coalesced.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="span"/> does not belong to a source buffer of this projection buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase"/> of which this is a snapshot.
            </summary>
            <remarks>
            This property always returns the same projection buffer, but the projection buffer is not itself immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.SpanCount">
            <summary>
            Gets the number of source spans in the projection snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot.SourceSnapshots">
            <summary>
            Gets the set of one or more text snapshots that contribute source spans to this projection snapshot. 
            The ordering of the list is arbitrary. It does not contain duplicates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IElisionSnapshot.MapFromSourceSnapshotToNearest(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Maps from a snapshot point in the source buffer to the corresponding point in the elision snapshot.
            If the source buffer position is not exposed in the elision snapshot, returns the nearest point that is
            exposed. If nothing is exposed, returns position zero.
            </summary>
            <param name="point">The snapshot point in a source buffer to map.</param>
            <returns>A position in the elision snapshot.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="point"/> does not belong to the source snapshot of this elision snapshot.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionSnapshot.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/> of which this is a snapshot.
            </summary>
            <remarks>
            This property always returns the same elision buffer, but that elision buffer is not itself immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IElisionSnapshot.SourceSnapshot">
            <summary>
            Gets the text snapshot on which this elision snapshot is based.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer">
            <summary>
            A text buffer that contains projections of other text buffers, composed
            of a list of tracking spans of those buffers. The buffers that contribute to
            the projection buffer are called source buffers, and the tracking spans that describe
            the contributed regions are called source spans.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.InsertSpan(System.Int32,Microsoft.VisualStudio.Text.ITrackingSpan)">
            <summary>
            Inserts a tracking span into the list of source spans. 
            </summary>
            <param name="position">The position at which to insert <paramref name="spanToInsert"/>.</param>
            <param name="spanToInsert">The span to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="spanToInsert"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="spanToInsert"/> would cause any duplicated projection.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="spanToInsert"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer. 
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
            <exception cref="T:System.ArgumentException">Adding the TextBuffer containing <paramref name="spanToInsert"/> would create a cycle
            among a set of projection buffers by virtue of the SourceBuffer relationship.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.InsertSpan(System.Int32,System.String)">
            <summary>
            Inserts a literal string into the list of SourceSpans. 
            </summary>
            <param name="position">The position at which to insert <paramref name="literalSpanToInsert"/>.</param>
            <param name="literalSpanToInsert">The string to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="literalSpanToInsert"/> is null.
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.InsertSpans(System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Inserts a list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects and/or literal strings into the list of source spans in the order in which they appear in the list. 
            </summary>
            <param name="position">The position at which to insert the spans.</param>
            <param name="spansToInsert">The list of spans to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="spansToInsert"/> is null or a span in that list is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <parmref name="spansToInsert"/> is neither an <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> nor a string.</exception>
            <exception cref="T:System.ArgumentException">A span in <paramref name="spansToInsert"/> would cause a duplicated projection.</exception>
            <exception cref="T:System.ArgumentException">A tracking span in <paramref name="spansToInsert"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer.
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
            <exception cref="T:System.ArgumentException">Adding one of the text buffers containing any of the <paramref name="spansToInsert"/> would 
            create a cycle among a set of projection vuffers by virtue of the SourceBuffer relationship.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.DeleteSpans(System.Int32,System.Int32)">
            <summary>
            Deletes a sequence of source spans from the projection buffer.
            </summary>
            <param name="position">The position at which to begin deleting spans.</param>
            <param name="spansToDelete">The number of spans to delete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="spansToDelete"/> is less than zero or 
            <paramref name="position"/> + <paramref name="spansToDelete"/> is greater than SpanCount.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.ReplaceSpans(System.Int32,System.Int32,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.EditOptions,System.Object)">
            <summary>
            Replaces a sequence of source spans with a new list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects and/or literal strings.
            </summary>
            <param name="position">The position at which to begin replacing spans.</param>
            <param name="spansToReplace">The number of spans to replace.</param>
            <param name="spansToInsert">The new spans to insert.</param>
            <param name="options">Options to apply to the span edit.</param>
            <param name="editTag">An arbitrary object that will be associated with this edit transaction.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero or greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="spansToReplace"/> is less than zero or <paramref name="position"/> + <paramref name="spansToReplace"/>
            is greater than SpanCount.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="spansToInsert"/> is null or a span in the list are null.</exception>
            <exception cref="T:System.ArgumentException">An element of <parmref name="spansToInsert"/> is neither an <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> nor a string.</exception>
            <exception cref="T:System.ArgumentException">A span in <paramref name="spansToInsert"/> would cause a duplicated projection.</exception>
            <exception cref="T:System.ArgumentException">A tracking span in <paramref name="spansToInsert"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer.
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
            <exception cref="T:System.ArgumentException">Adding a text buffer containing one of the <paramref name="spansToInsert"/> would 
            create a cycle among a set of projection buffers by virtue of the SourceBuffer relationship.</exception>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceSpansChanged">
            <summary>
            Raised when source spans are added or deleted. It is not raised when
            the contents of a source span change, for example when a source span becomes empty. When
            a nonempty span is added or deleted, the <see cref="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceBuffersChanged"/> event will be raised first. 
            The sequence of events is: 1) SourceBuffersChanged, 2) SourceSpansChanged, 3) ITextBuffer.Changed.
            The <see cref="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceSpansChanged"/> event is raised first).
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceBuffersChanged">
            <summary>
            Raised when source buffers are added or deleted by virtue of the addition or deletion
            of source spans. This event is raised before the <see cref="E:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer.SourceSpansChanged"/> event is raised.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService">
            <summary>
            Used to create projection buffers.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IProjectionBufferFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.CreateProjectionBuffer(Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> object with a specified <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> and
            the specified list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects and/or literal strings.
            </summary>
            <param name="projectionEditResolver">The conflict resolver for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>. May be null.</param>
            <param name="sourceSpans">The initial set of source spans for the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="options">Options for this buffer.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the new <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <returns>A non-null projection buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceSpans"/> or any of its elements is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="sourceSpans"/> is neither a string nor an <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</exception>
            <exception cref="T:System.ArgumentException">A tracking span in <paramref name="sourceSpans"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer.
            These checks are not performed if the projection buffer was created with the PermissiveEdgeInclusiveSourceSpans option.</exception>
            <exception cref="T:System.ArgumentException">Some of the tracking spans in <paramref name="sourceSpans"/> overlap.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.CreateProjectionBuffer(Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> object with the default projection <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> and  
            the specified list of source spans.
            </summary>
            <param name="projectionEditResolver">The conflict resolver for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>. May be null.</param>
            <param name="sourceSpans">The initial set of source spans for the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="options">Options for this buffer.</param>
            <returns>A non-null projection buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceSpans"/> or any of its elements is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="sourceSpans"/> is neither a string nor an <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.</exception>
            <exception cref="T:System.ArgumentException">A tracking spans in <paramref name="sourceSpans"/> is EdgeInclusive and does not cover its entire buffer,
            or is EdgePositive and does not abut the end of its buffer, or is EdgeNegative and does not abut the beginning of its
            buffer.</exception>
            <exception cref="T:System.ArgumentException">Any of the tracking spans in <paramref name="sourceSpans"/> overlap.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.CreateElisionBuffer(Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Create an elision buffer initialized to expose the provided list of snapshot spans from a single source buffer.
            </summary>
            <param name="projectionEditResolver">The conflict resolver for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>. May be null.</param>
            <param name="exposedSpans">The set of spans (from a single source buffer) that are initially exposed in the elision buffer.</param>
            <param name="options">Options for this buffer.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the new <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/>.</param>
            <returns>A non-null elision buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="contentType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="exposedSpans"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.CreateElisionBuffer(Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions)">
            <summary>
            Create an ElisionBuffer with the default projection <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> and initialized to the provided list of snapshot spans from
            a single source buffer.
            </summary>
            <param name="projectionEditResolver">The conflict resolver for this <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>. May be null.</param>
            <param name="exposedSpans">The set of spans (from a single source buffer) that are initially exposed in the elision buffer.</param>
            <param name="options">Options for this buffer.</param>
            <returns>A non-null elision buffer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exposedSpans"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.ProjectionContentType">
            <summary>
            The default content type for projection buffers.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService.ProjectionBufferCreated">
            <summary>
            Raised when any <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> or <see cref="T:Microsoft.VisualStudio.Text.Projection.IElisionBuffer"/> is created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver">
            <summary>
            Allows the creator of a projection buffer to control behavior of certain edits to the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.FillInInsertionSizes(Microsoft.VisualStudio.Text.SnapshotPoint,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotPoint},System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            When text is inserted into the projection buffer at <paramref name="projectionInsertionPoint"/>, determine how many characters
            of the <paramref name="insertionText"/> are to be inserted into the source buffer at each source insertion point.
            If length of the <paramref name="sourceInsertionPoints"/> is greater than two, all but the first and last snapshot point will denote
            the boundary of an empty source span.
            </summary>
            <remarks>
            This call is made while an edit is in progress, so any attempt to change the projection buffer or its sources during
            this call will fail.
            </remarks>
            <param name="projectionInsertionPoint">The insertion point in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="sourceInsertionPoints">The list of insertion points in the source buffers (of length two or more).</param>
            <param name="insertionText">The text to be split between the insertion points.</param>
            <param name="insertionSizes">Filled in by the callee; the number of characters in the <paramref name="insertionText"/> to be inserted into the corresponding source insertion point.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.FillInReplacementSizes(Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotSpan},System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            When text at <paramref name="projectionReplacementSpan"/> is replaced in a projection buffer, determine how many characters
            of the <paramref name="insertionText"/> are to be inserted into the source buffer at each source insertion point (which are
            the Start points of the <paramref name="sourceReplacementSpans"/>).
            </summary>
            <remarks>
            This call is made while an edit is in progress, so any attempt to change the projection buffer or its sources during
            this call will fail.
            </remarks>
            <param name="projectionReplacementSpan">The span of text that is to be replaced in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="sourceReplacementSpans">The spans of text that are to be replaced in the source buffers (of length two or more).</param>
            <param name="insertionText">The text to be split among the replacement spans.</param>
            <param name="insertionSizes">Filled in by the callee; the number of characters in the <paramref name="insertionText"/> to 
            be inserted into the corresponding source replacement span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver.GetTypicalInsertionPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Text.SnapshotPoint})">
            <summary>
            When a position in the projection buffer lies on a source buffer seam, determine which source insertion
            point would receive a typical insertion.
            </summary>
            <param name="projectionInsertionPoint">The insertion point in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="sourceInsertionPoints">The list of insertion points in the source buffers (of length two or more).</param>
            <returns>An integer between 0 and <paramref name="sourceInsertionPoints"/>.Length - 1.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions">
            <summary>
            Represents the options that apply to <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions.None">
            <summary>
            No special treatment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions.PermissiveEdgeInclusiveSourceSpans">
            <summary>
            Do not perform certain consistency checks on edge-inclusive source spans. 
            </summary>
            <remarks>
            See <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> for details.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions.WritableLiteralSpans">
            <summary>
            Allow source spans that are string literals to be edited.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs">
            <summary>
            Provides information for an edit transaction on a <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> in which the set of source <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs">
            <summary>
            Provides information for an edit transaction on a <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> in which the set of source <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects has changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.Int32,Microsoft.VisualStudio.Text.EditOptions,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs"/>.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> immediately after the change occurred.</param>
            <param name="insertedSpans">Zero or more source spans that were inserted into the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="deletedSpans">Zero or more source spans that were deleted from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="spanPosition">The position at which the span changes occurred.</param>
            <param name="options">The edit options that were applied to this change.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException">One of the parameters: <paramref name="beforeSnapshot"/>, <paramref name="afterSnapshot"/>,
            <paramref name="insertedSpans"/>, or <paramref name="deletedSpans"/>is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.SpanPosition">
            <summary>
            The position in the list of source spans at which the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.InsertedSpans">
            <summary>
            The set of source spans that were inserted into the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> by this edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.DeletedSpans">
            <summary>
            The set of source spans that were deleted from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> by this edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.Before">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> before the change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs.After">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/> after the change occurred.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.Int32,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer},Microsoft.VisualStudio.Text.EditOptions,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs"/> object.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> before the change occurred.</param>
            <param name="afterSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot"/> immediately after the change occurred.</param>
            <param name="insertedSpans">Zero or more source spans that were inserted into the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="deletedSpans">Zero or more source spans that were deleted from the <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>.</param>
            <param name="spanPosition">The position in the list of source spans at which the buffer changes occurred.</param>
            <param name="addedBuffers">The list of added source <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects.</param>
            <param name="removedBuffers">The list of removed source <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects.</param>
            <param name="options">The edit options that were applied to this change.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="insertedSpans"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="deletedSpans"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="addedBuffers"/> or <paramref name="removedBuffers"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs.AddedBuffers">
            <summary>
            The source buffers that were added to the projection buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs.RemovedBuffers">
            <summary>
            The source buffers that were removed and no longer contribute spans to the projection buffer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.DynamicReadOnlyRegionQuery">
            <summary>
            The callback delegate for notifying read only regions of edits.
            </summary>
            <param name="isEdit">True if an edit is being attempted. False if the read-only check should be side-effect free.</param>
            <returns>Whether the read-only region is in effect.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.SnapshotPoint">
            <summary>
            An immutable text position in a particular text snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> with respect to a particular snapshot and position.
            </summary>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"> that contains the new point.</see></param>
            <param name="position">The position of the point.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Implicit(Microsoft.VisualStudio.Text.SnapshotPoint)~System.Int32">
            <summary>
            Implicitly converts the snapshot point to an integer equal to the position of the snapshot point in the snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.GetContainingLine">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> containing this snapshot point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.GetChar">
            <summary>
            Gets the character at the position of this snapshot point.
            </summary>
            <returns>The character at the position of this snapshot point.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the position of this point is equal to the length of the snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Translates this snapshot Point to a different snapshot of the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="targetSnapshot">The snapshot to which to translate.</param>
            <param name="trackingMode">The <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/> to use in the translation.</param>
            <returns>A new snapshot point that has been mapped to the requested snapshot.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetSnapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetSnapshot"/> does not refer to the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> as this snapshot point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.ToString">
            <summary>
            Converts this snapshot point to a string, or to the string "uninit" if the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> is null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.Equals(System.Object)">
            <summary>
            Determines whether this snapshot point is the same as a second snapshot point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.Add(System.Int32)">
            <summary>
            Creates a new snapshot point at the specified offset from this point.
            </summary>
            <param name="offset">The offset of the new point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new point is less than zero or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.Subtract(System.Int32)">
            <summary>
            Creates a new snapshot point at the specified negative offset from this point.
            </summary>
            <param name="offset">The offset of the new point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new point is less than zero or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.Difference(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Computes the offset between this snapshot point and another snapshot point.
            </summary>
            <param name="other">The point from which to compute the offset.</param>
            <exception cref="T:System.ArgumentException">The two points do not belong to the same
            snapshot.</exception>
            <returns>The offset between the two points, equivalent to other.Position -
            this.Position.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Subtraction(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32)">
            <summary>
            Decrements the position of a snapshot point.
            </summary>
            <param name="point">The point from which to calculate the new position.</param>
            <param name="offset">The offset of the new point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new point is less than zero
            or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Subtraction(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Computes the offset between two <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> objects.
            </summary>
            <param name="start">The starting point.</param>
            <param name="other">The point from which to compute the offset.</param>
            <exception cref="T:System.ArgumentException">The two points do not belong to the same
            snapshot.</exception>
            <returns>The offset between the two points, equivalent to start.Position -
            other.Position.</returns>
            <remarks>The following should always be true:
            start == other + (start - other).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Equality(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether this snapshot point is the same as a second snapshot point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Inequality(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether this snapshot point is different from a second snapshot point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_Addition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32)">
            <summary>
            Increments the position of a snapshot point.
            </summary>
            <param name="point">The point from which to calculate the new position.</param>
            <param name="offset">The offset of the new point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new point is less than zero
            or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_GreaterThan(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether the position of one snapshot point is greater than the position of a second snapshot point.
            </summary>
            <returns><c>true</c> if the first position is greater than the second position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The two points do not belong to the same snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.op_LessThan(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determine if the position of the left point is less than the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is greater than right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The two points do not belong to the same snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotPoint.CompareTo(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether this snapshot is the same as a second snapshot point.
            </summary>
            <param name="other">The snapshot point to which to compare.</param>
            <returns>A negative integer if the position of this snapshot point occurs before the second snapshot point, 
            a positive integer if the position of this snapshot point occurs before the second snapshot point, and 
            zero if the positions are the same.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotPoint.Position">
            <summary>
            Gets the position of the point.
            </summary>
            <value>A non-negative integer less than or equal to the length of the snapshot.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotPoint.Snapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to which this snapshot point refers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.SnapshotSpan">
            <summary>
            An immutable text span in a particular text snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> with the specified snapshot and span.
            </summary>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> on which to base the snapshot span.</param>
            <param name="span">The span of the snapshot span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="span"/>.End is greater than <paramref name="snapshot"/>.Length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> with the specified snapshot, start point, and length.
            </summary>
            <param name="snapshot">The text snapshot on which to base the snapshot span.</param>
            <param name="start">The starting point of the snapshot span.</param>
            <param name="length">The length of the snapshot span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is negative or greater than <paramref name="snapshot"/>.Length, or
            <paramref name="length"/> is negative or <paramref name="start"/> + <paramref name="length"/> is greater than
            <paramref name="snapshot"/>.Length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> from two <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> objects.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point, which must be from the same <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>
            as the start point.</param>
            <exception cref="T:System.ArgumentException">The snapshot points belong to different 
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> objects.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end point comes before the start
            point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> from an existing <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> and a specified length.
            </summary>
            <param name="start">The starting snapshot point.</param>
            <param name="length">The length of the span.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is negative or 
            <paramref name="start"/> + <paramref name="length"/> is greater than the length of the snapshot.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.op_Implicit(Microsoft.VisualStudio.Text.SnapshotSpan)~Microsoft.VisualStudio.Text.Span">
            <summary>
            Implicitly converts a snapshot span to a span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.GetText">
            <summary>
            The text contained by this snapshot span.
            </summary>
            <returns>A non-null string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Translates this snapshot span to a different snapshot of the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="targetSnapshot">The snapshot to which to translate.</param>
            <param name="spanTrackingMode">The <see cref="T:Microsoft.VisualStudio.Text.SpanTrackingMode"/> to use in the translation.</param>
            <returns>A new snapshot span.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetSnapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetSnapshot"/> does not refer to the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> as this snapshot span.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Contains(System.Int32)">
            <summary>
            Determines whether the position lies within the span.
            </summary>
            <param name="position">
            The position to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to parameter span.Start and strictly less than parameter span.End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Contains(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether a given <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> lies within the span.
            </summary>
            <param name="point">
            The point to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to parameter span.Start and strictly less than parameter span.End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Contains(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="simpleSpan"/> falls completely within this span.
            </summary>
            <param name="simpleSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Contains(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether <paramref name="snapshotSpan"/> falls completely within this span.
            </summary>
            <param name="snapshotSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.OverlapsWith(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="simpleSpan"/> overlaps this span. Two spans are considered to overlap if they have positions in common and are not empty. 
            Empty spans do not overlap with any other span.
            </summary>
            <param name="simpleSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans overlap, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.OverlapsWith(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether <paramref name="snapshotSpan"/> overlaps this span. 
            Two spans are considered to overlap if they have positions in common and are not empty. Empty spans do not overlap with any other span.
            </summary>
            <param name="snapshotSpan">
            The span to check for overlap.
            </param>
            <returns>
            <c>true</c> if the spans overlap, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Overlap(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Returns the overlap with the given span, or null if there is no overlap.
            </summary>
            <param name="simpleSpan">The span to check.</param>
            <returns>The overlap of the spans, or null if the overlap is empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Overlap(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Returns the overlap with the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>, or null if there is no overlap.
            </summary>
            <param name="snapshotSpan">The span to check.</param>
            <exception cref="T:System.ArgumentException"><paramref name="snapshotSpan"/> does not refer to the same
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> as this snapshot span.</exception>
            <returns>The overlap of the spans, or null if the overlap is empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.IntersectsWith(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="simpleSpan"/> intersects this span. Two spans are considered to 
            intersect if they have positions in common, or if the end of one span 
            coincides with the start of the other span, and neither is empty.
            </summary>
            <param name="simpleSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans intersect, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.IntersectsWith(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether <paramref name="snapshotSpan"/> intersects this span. Two spans are considered to 
            intersect if they have positions in common, or the end of one span 
            coincides with the start of the other span, and neither is empty.
            </summary>
            <param name="snapshotSpan">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans intersect, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Intersection(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Computes the intersection with the given span, or null if there is no intersection.
            </summary>
            <param name="simpleSpan">
            The span to check.
            </param>
            <returns>
            The intersection of the spans, or null if the intersection is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Intersection(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Computes the intersection with the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>, or null if there is no intersection.
            </summary>
            <param name="snapshotSpan">
            The span to check.
            </param>
            <exception cref="T:System.ArgumentException"><paramref name="snapshotSpan"/> does not refer to the same snapshot. </exception>
            <returns>
            The intersection of the spans, or null if the intersection is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.ToString">
            <summary>
            Converts this snapshot span to a string, or to the string "uninit" if the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> is null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.Equals(System.Object)">
            <summary>
            Determines whether two snapshot spans are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.op_Equality(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether two snapshot spans are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpan.op_Inequality(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether two snapshot spans are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.Snapshot">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to which this snapshot span refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.Span">
            <summary>
            Gets the span covered by the snapshot span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.Start">
            <summary>
            Gets the starting index of the snapshot span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.End">
            <summary>
            Gets the end of the snapshot span. The span is open-ended on the right side, which is to say
            that Start + Length = End.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.Length">
            <summary>
            Gets the length of the span, which is always non-negative.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpan.IsEmpty">
            <summary>
            Determines whether or not this span is empty.
            </summary>
            <value><c>true</c> if the length of the span is zero, otherwise <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.SnapshotSpanEventArgs">
            <summary>
            Provides information for events that report changes affecting a span of text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SnapshotSpanEventArgs.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpanEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.SnapshotSpanEventArgs.Span">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Span">
            <summary>
            An immutable integer interval that describes a range of values from <see cref="P:Microsoft.VisualStudio.Text.Span.Start"/> to <see cref="P:Microsoft.VisualStudio.Text.Span.End"/> that is closed on 
            the left and open on the right: [Start .. End). A zpan is usually applied to an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to denote a span of text,
            but it is independent of any particular text buffer or snapshot. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Span"/> with the given start point and length.
            </summary>
            <param name="start">
            The starting point of the span.
            </param>
            <param name="length">
            The length of the span.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="length"/> is less than zero, or
            start + length is greater than the length of the text snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.FromBounds(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Span"/> with the given start and end positions.
            </summary>
            <param name="start">The start position of the new span.</param>
            <param name="end">The end position of the new Span.</param>
            <returns>The new span.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is less than zero, or
            <paramref name="end"/> is less than <paramref name="start"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Contains(System.Int32)">
            <summary>
            Determines whether the position lies within the span.
            </summary>
            <param name="position">
            The position to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to Start and strictly less 
            than End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Contains(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="span"/> falls completely within this span.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.OverlapsWith(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="span"/> overlaps this span. Two spans are considered to overlap 
            if they have positions in common and neither is empty. Empty spans do not overlap with any 
            other span.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans overlap, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Overlap(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Returns the overlap with the given span, or null if there is no overlap.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            The overlap of the spans, or null if the overlap is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.IntersectsWith(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether <paramref name="span"/> intersects this span. Two spans are considered to 
            intersect if they have positions in common or the end of one span 
            coincides with the start of the other span.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            <c>true</c> if the spans intersect, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Intersection(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Returns the intersection with the given span, or null if there is no intersection.
            </summary>
            <param name="span">
            The span to check.
            </param>
            <returns>
            The intersection of the spans, or null if the intersection is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.ToString">
            <summary>
            Provides a string representation of the span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.GetHashCode">
            <summary>
            Provides a hash function for the type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.Equals(System.Object)">
            <summary>
            Determines whether two spans are the same.
            </summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.op_Equality(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether two spans are the same
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Span.op_Inequality(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Determines whether two spans are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Span.Start">
            <summary>
            The starting index of the span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Span.End">
            <summary>
            The end of the span.  The span is open-ended on the right side, which is to say
            that Start + Length = End.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Span.Length">
            <summary>
            The length of the span, which is always non-negative.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Span.IsEmpty">
            <summary>
            Determines whether or not this span is empty.
            </summary>
            <value><c>true</c> if the length of the span is zero, otherwise <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.SpanTrackingMode">
            <summary>
            Represents tracking modes for <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeExclusive">
            <summary>
            The leading edge of the span is positive tracking (insertions push the current position towards the end) 
            and the trailing edge is negative tracking (insertions push the current position towards the start).
            The span will not expand when text changes occur at the span boundaries. For example,
            if an EdgeExclusive Span has Start position 3, and a single character is inserted at position 3,
            the Span will then have Start position 4 and its length will be unchanged.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeInclusive">
            <summary>
            The leading edge of the span is negative tracking (insertions push he current position toward the start) 
            and the trailing edge is positive tracking (insertions push the current position toward the end).
            The span will expand when text changes occur at the span boundaries. For example,
            if an EdgeInclusive Span has Start position 3, and a single character is inserted at position 3,
            the Span will then have Start position 3 and its length will be increased by one.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgePositive">
            <summary>
            Both edges of the span are positive tracking (insertions push the current position toward the start).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeNegative">
            <summary>
            Both edges of the span are negative tracking (insertions push the current position toward the end).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom">
            <summary>
            Custom client-determined tracking behavior.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextBufferCreatedEventArgs">
            <summary>
            Provides information about a newly created <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferCreatedEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.TextBufferCreatedEventArgs"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> which was created.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextBufferCreatedEventArgs.TextBuffer">
            <summary>
            The newly created <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextContentChangingEventArgs">
            <summary>
            Provides information about an upcoming edit transaction on a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Object,System.Action{Microsoft.VisualStudio.Text.TextContentChangingEventArgs})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.TextContentChangingEventArgs"/> to be passed during a Changing event.
            </summary>
            <param name="beforeSnapshot">The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change.</param>
            <param name="editTag">An arbitrary object associated with this change.</param>
            <param name="cancelAction">The action to execute when <see cref="M:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Cancel"/> is called. Invoked at most once.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="beforeSnapshot"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Cancel">
            <summary>
            Cancels the edit transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Canceled">
            <summary>
            Determines whether the edit transaction has been canceled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Before">
            <summary>
            The most recent <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.EditTag">
            <summary>
            Gets an arbitrary object provided by the initiator of the changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.BeforeVersion">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextVersion"/> associated with <see cref="P:Microsoft.VisualStudio.Text.TextContentChangingEventArgs.Before"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextSnapshotToTextReader">
            <summary>
            Provides a <see cref="T:System.IO.TextReader"/> facade over a text snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Close">
            <summary>
            Closes the reader and releases any associated system resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the reader.
            </summary>
            <param name="disposing">Whether to release managed resources.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Peek">
            <summary>
            Returns the next character without changing the state of the reader or the
            character source.
            </summary>
            <returns>The next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Read">
            <summary>
            Reads the next character from the input stream and advances the character
            position by one character.
            </summary>
            <returns>The next character from the input stream, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of characters from the current stream and writes the
            data to the buffer, beginning at the specified location.
            </summary>
            <param name="buffer">When this method returns, contains the specified character array from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>The number of characters that have been read. The number will be less than
            or equal to <paramref name="count"/>, depending on whether the data is available within the
            stream. This method returns zero if called when no more characters are left to read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative, or
            the buffer length minus index is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of <paramref name="count"/> characters from the current stream and writes the
            data to buffer, beginning at index.
            </summary>
            <param name="buffer">When this method returns, contains the specified character array from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>The number of characters that have been read. The number will be less than
            or equal to <paramref name="count"/>, depending on whether the data is available within the
            stream. This method returns zero if called when no more characters are left to read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative, or
            the buffer length minus index is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.ReadLine">
            <summary>Reads a line of characters from the current stream and returns the data as a string.</summary>
            <returns>The next line from the input stream, or null if all characters have been read.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"/> is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.ReadToEnd">
            <summary>Reads all the characters from the current position to the end of the reader and returns them as a string.</summary>
            <returns>A string containing all the characters from the current position to the end of the reader.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"/> is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotToTextReader.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.TextSnapshotToTextReader"/> with the specified text snapshot.
            </summary>
            <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to expose as a reader.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textSnapshot"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TrackingFidelityMode">
            <summary>
            Represents special tracking behaviors for <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> and <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.TrackingFidelityMode.Forward">
            <summary>
            When moving back to a previous version (either by explicitly 
            moving to that version or by undo or redo operations), the result may be different from the result
            that was originally given for that version. This mode is suitable for most purposes, 
            and is the most space-efficient mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.TrackingFidelityMode.Backward">
            <summary>
            When mapping back to a previous version, the result is the same as the result from 
            mapping forward from the origin version. This mode should be used only 
            for short-lived points and spans.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.TrackingFidelityMode.UndoRedo">
            <summary>
            When mapping to a version that is the result of undo 
            or redo operations, the result will be the same as the result from mapping forward to the 
            version of which the undo or redo is a reiteration. This mode is more 
            expensive than <see cref="F:Microsoft.VisualStudio.Text.TrackingFidelityMode.Forward"/> in both space and time and should be used only
            if necessary.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.ArrayRankNotOne">
            <summary>
              Looks up a localized string similar to The array is not one-dimensional..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.CircularityInBufferVersion">
            <summary>
              Looks up a localized string similar to Circularity detected in text buffer version..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.InvalidSnapshot">
            <summary>
              Looks up a localized string similar to The specified ITextSnapshot doesn&apos;t belong to the correct TextBuffer..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.InvalidSnapshotPoint">
            <summary>
              Looks up a localized string similar to The specified SnapshotPoint is on a different ITextSnapshot than this SnapshotPoint..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.InvalidSnapshotSpan">
            <summary>
              Looks up a localized string similar to The specified SnapshotPoint or SnapshotSpan  is on a different ITextSnapshot than this SnapshotSpan..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.MismatchedSnapshotPoints">
            <summary>
              Looks up a localized string similar to The specified SnapshotPoints belong to different ITextSnapshots..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.MismatchedSnapshots">
            <summary>
              Looks up a localized string similar to The collections refer to different snapshots..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.MismatchedVersions">
            <summary>
              Looks up a localized string similar to The TextVersions do not belong to the same TextBuffer..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.SpansBeyondEnd">
            <summary>
              Looks up a localized string similar to The specified NormalizedSnapshotSpanCollection extends beyond the end of the TextSnapshot..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.UninitializedSnapshotPoint">
            <summary>
              Looks up a localized string similar to The SnapshotPoint is not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.UninitializedSnapshotSpan">
            <summary>
              Looks up a localized string similar to The SnapshotSpan is not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Strings.VersionDoesNotBelongToBuffer">
            <summary>
              Looks up a localized string similar to The specified TextVersion does not belong to the specified TextBuffer..
            </summary>
        </member>
    </members>
</doc>
