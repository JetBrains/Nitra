<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.UI.Wpf</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition">
            <summary>
            Provides information for an IAdornmentLayer export.  
            </summary>
            <remarks> 
            Because you cannot subclass this type, you can use the [Export] attribute with no type.
            </remarks>
            <example>
            internal sealed class Components
            {
               [Export]
               [Name("ExampleAdornmentLayer")]
               [Order(After = "Selection", Before = "Text")]
               internal AdornmentLayerDefinition viewLayerDefinition;
               
               { other components }
            }
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior">
            <summary>
            Defines the positioning of adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.OwnerControlled">
            <summary>
            The adornment is not moved automatically.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.ViewportRelative">
            <summary>
            The adornment is positioned relative to the top left corner of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.TextRelative">
            <summary>
            The adornment is positioned relative to the text in the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback">
            <summary>
            Defines the behavior when a <see cref="T:System.Windows.UIElement"/> is removed from an <see cref="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer"/>.
            </summary>
            <param name="tag">The tag associated with <paramref name="element"/>.</param>
            <param name="element">The <see cref="T:System.Windows.UIElement"/> removed from the view.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer">
            <summary>
            Represents an adornment layer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.AddAdornment(Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior,System.Nullable{Microsoft.VisualStudio.Text.SnapshotSpan},System.Object,System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
            <summary>
            Adds a <see cref="T:System.Windows.UIElement"/> to the layer.
            </summary>
            <param name="behavior">The positioning behavior of <paramref name="adornment"/>.</param>
            <param name="visualSpan">The span with which <paramref name="adornment"/> is associated.</param>
            <param name="tag">The tag associated with <paramref name="adornment"/>.</param>
            <param name="adornment">The <see cref="T:System.Windows.UIElement"/> to add to the view.</param>
            <param name="removedCallback">The delegate to call when <paramref name="adornment"/>
            is removed from the view.</param>
            <returns><c>true</c> if <paramref name="adornment"/> was added to the layer, otherwise <c>false</c>. 
            <paramref name="visualSpan"/> does not intersect the text that is visible in the view.</returns>
            <remarks>
            <para>If <paramref name="visualSpan"/> is specified, then the adornment will be removed whenever any line that crosses <paramref name="visualSpan"/> is formatted.</para>
            <para>If <paramref name="visualSpan"/> has a length of zero, then it will be invalidated when the line that contains the following character is invalidated
            (or the last line, if the visual span is at the end of the buffer).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.AddAdornment(Microsoft.VisualStudio.Text.SnapshotSpan,System.Object,System.Windows.UIElement)">
            <summary>
            Adds a AdornmentPositioningBehavior.TextRelative <see cref="T:System.Windows.UIElement"/> to the layer.
            </summary>
            <param name="visualSpan">The span with which <paramref name="adornment"/> is associated.</param>
            <param name="tag">The tag associated with <paramref name="adornment"/>.</param>
            <param name="adornment">The <see cref="T:System.Windows.UIElement"/> to add to the view.</param>
            <returns><c>true</c> if <paramref name="adornment"/> was added to the layer, otherwise <c>false</c>. 
            <paramref name="visualSpan"/> does not intersect the text that is visible in the view.</returns>
            <remarks>This is equivalent to calling AddElement(AdornmentPositioningBehavior.TextRelative,
            visualSpan, tag, adornment, null);</remarks>
            <remarks>
            <para>The adornment is removed when any line that crosses <paramref name="visualSpan"/> is formatted.</para>
            <para>If <paramref name="visualSpan"/> has a length of zero, then it will be invalidated when the line that contains the following character is invalidated
            (or the last line, if the visualSpan is at the end of the buffer).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAdornment(System.Windows.UIElement)">
            <summary>
            Removes a specific <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="adornment"><see cref="T:System.Windows.UIElement"/> to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAdornmentsByTag(System.Object)">
            <summary>
            Removes all <see cref="T:System.Windows.UIElement"/> objects associated with a particular tag.
            </summary>
            <param name="tag">The tag to use to remove <see cref="T:System.Windows.UIElement"/>s.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAdornmentsByVisualSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Removes all adornments with visual spans that overlap the given visual span.
            Any adornments without specified visual spans are ignored.
            </summary>
            <param name="visualSpan">The visual span to check for overlap with adornments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveMatchingAdornments(System.Predicate{Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement})">
            <summary>
            Removes all adornments for which the given predicate returns <c>true</c>.
            </summary>
            <param name="match">The predicate that will be called for each adornment</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveMatchingAdornments(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement})">
            <summary>
            Removes all adornments with visual spans for which the given predicate returns <c>true</c>.
            Any adornments without specified visual spans and tag are ignored.
            </summary>
            <param name="visualSpan">The visual span to check for overlap with adornments.</param>
            <param name="match">The predicate that will be called for each adornment</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAllAdornments">
            <summary>
            Removes all <see cref="T:System.Windows.UIElement"/> objects in the layer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> to which this layer is attached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.IsEmpty">
            <summary>
            Determines whether this layer is empty, that is, it does not contain any adornments.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.Opacity">
            <summary>
            Gets or sets the opacity factor applied to the entire adornment layer when it is rendered in the user interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.Elements">
            <summary>
            Gets a collection of the adornments and their associated data in the layer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement">
            <summary>
            Defines an element in an adornment layer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.VisualSpan">
            <summary>
            Gets the snapshot span that is associated with the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.Behavior">
            <summary>
            Gets the positioning behavior of the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.Adornment">
            <summary>
            Gets the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.Tag">
            <summary>
            Gets the tag associated with the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.RemovedCallback">
            <summary>
            Defines the behavior when an adornment has been removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers">
            <summary>
            This static class defines the names of the adornment layers
            predefined by the editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Outlining">
            <summary>
            The outlining layer contains the collapse hint adornment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Squiggle">
            <summary>
            The squiggle layer contains the squiggle adornment used to indicate errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Selection">
            <summary>
            The selection layer hosts the selection and provisional highlight text caret for IME input mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Caret">
            <summary>
            The caret layer contains the text caret.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Text">
            <summary>
            The text layer contains the textual content of the editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.TextMarker">
            <summary>
            The text marker layer contains the text markers provided by the <see cref="T:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory"/> classes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition">
            <summary>
            Provides classification format information for a particular classification type.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported as:
            [Export(typeof(EditorFormatDefinition))]</para>
            <para>
            Exporters must provide the attributes ClassificationTypeAttribute and NameAttribute. The attributes OrderAttribute, 
            DisplayNameAttribute and UserVisibleAttribute may be provided optionally.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition">
            <summary>
            Provides format information for a particular item.
            </summary>
            <remarks>
            <para>
            This is a MEF component part, and should be exported as:
            [Export(typeof(EditorFormatDefinition))]
            </para>
            <para>
            Exporters must provide the attribute <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/>. The attributes <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/>, 
            <see cref="T:Microsoft.VisualStudio.Utilities.DisplayNameAttribute"/> and <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute"/> may be provided optionally.
            </para>
            <para>
            Consumers of this attribute may optionally ignore the foreground formatting information, the background information,
            or both.
            </para>
            <para>
            It's recommended that exporters of this class prefix the <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> with a unique string (e.g.
            their package name) to reduce the chance of conflict with another similarly named export.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundBrushId">
            <summary>
            Defines the string used to look up the background brush value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundBrushId">
            <summary>
            Defines the string used to look up the foreground brush value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundColorId">
            <summary>
            Defines the string used to look up the background color value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundColorId">
            <summary>
            Defines the string used to look up the foreground color value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.CreateResourceDictionary">
            <summary>
            Creates a <see cref="T:System.Windows.ResourceDictionary"/> from this definition.
            </summary>
            <returns>A <see cref="T:System.Windows.ResourceDictionary"/> with the values from this definition.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.CreateResourceDictionaryFromDefinition">
            <summary>
            Creates a <see cref="T:System.Windows.ResourceDictionary"/> from this definition.
            </summary>
            <returns>A <see cref="T:System.Windows.ResourceDictionary"/> with the values from this definition.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundColor">
            <summary>
            Gets or sets the foreground color for this item.
            </summary>
            <remarks>
            If the foreground brush is set, this color will be ignored.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundColor">
            <summary>
            Gets or sets the background color for this item.
            </summary>
            <remarks>
            If the background brush is set, this color will be ignored.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundBrush">
            <summary>
            Gets or sets the background brush for this item.
            </summary>
            <remarks>
            This brush will override any background color that is set.  
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundBrush">
            <summary>
            Gets or sets the foreground brush for this item.
            </summary>
            <remarks>
            This brush will override any foreground color that is set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundCustomizable">
            <summary>
            Determines whether the foreground of this format is customizable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundCustomizable">
            <summary>
            Determines whether the background of this format is customizable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.DisplayName">
            <summary>
            Defines the string used when displaying this format definition to the user. This property is only used
            if the <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute"/> is set to true on this object's export.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsBoldId">
            <summary>
            Defines the string used to look up the bold value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsItalicId">
            <summary>
            Defines the string used to look up the italic value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontHintingSizeId">
            <summary>
            Defines the string used to look up the font hinting size value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontRenderingSizeId">
            <summary>
            Defines the string used to look up the font rendering size value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextEffectsId">
            <summary>
            Defines the string used look up the text effects value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextDecorationsId">
            <summary>
            Defines the string used to look up the text decorations value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TypefaceId">
            <summary>
            Defines the string used o look up the typeface value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.ForegroundOpacityId">
            <summary>
            Defines the string used o look up the foreground opacity value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.BackgroundOpacityId">
            <summary>
            Defines the string used to look up the background opacity value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.DefaultBackgroundOpacity">
            <summary>
            Defines the default opacity used for the background color/brush if no <see cref="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.BackgroundOpacityId"/> entities are defined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfoId">
            <summary>
            Defines the string used to look up the <see cref="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfo"/> value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CreateResourceDictionaryFromDefinition">
            <summary>
            Creates a <see cref="T:System.Windows.ResourceDictionary"/> using this definition.
            </summary>
            <returns>A <see cref="T:System.Windows.ResourceDictionary"/> with the values from this definition.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.AddOverridableProperties(System.Windows.ResourceDictionary)">
            <summary>
            Adds properties to a resource dictionary from a <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition"/> that can be overridden by other properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfo">
            <summary>
            Gets or sets the <see cref="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfo"/> for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontHintingSize">
            <summary>
            Gets or sets the the font hinting size for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontRenderingSize">
            <summary>
            Gets or sets the the font rendering size for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextEffects">
            <summary>
            Gets or sets the the <see cref="T:System.Windows.Media.TextEffectCollection"/> for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextDecorations">
            <summary>
            Gets or sets the <see cref="T:System.Windows.TextDecorationCollection"/> for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontTypeface">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Typeface"/> for this classification format.
            </summary>
            <remarks>
            Certain values (bold, italic) in this typeface can be overridden by
            other format definitions that have a higher priority.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.ForegroundOpacity">
            <summary>
            Gets or sets the opacity of the foreground.
            </summary>
            <remarks>
            This value overrides the opacity settings in the 
            ForegroundBrush property if this classification format has a higher priority.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.BackgroundOpacity">
            <summary>
            Gets or sets the opacity of the background.
            </summary>
            <remarks>
            This value will override the opacity settings in the 
            BackgroundBrush property if this classification format has a higher priority.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsBold">
            <summary>
            Determines whether the text should be bold.
            </summary>
            <remarks>
            This value overrides the bold settings in the 
            <see cref="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontTypeface"/> property if this classification format has a higher priority.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsItalic">
            <summary>
            Determines whether the text should be italic.
            </summary>
            <remarks>
            This value will override the italic settings in the 
            <see cref="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontTypeface"/> property if this classification format has a higher priority.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService">
            <summary>
            Looks up a format map for a given view role.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IEditorFormatMapService formatMap = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService.GetEditorFormatMap(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> appropriate for a given text view. This object is likely
            to be shared among several text views.
            </summary>
            <param name="view">The view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> for the text view.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService.GetEditorFormatMap(System.String)">
            <summary>
            Get a <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> for a given appearance category.
            </summary>
            <param name="category">The appearance category.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> for the category.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap">
            <summary>
            Maps from arbitrary keys to a <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.GetProperties(System.String)">
            <summary>
            Gets a <see cref="T:System.Windows.ResourceDictionary"/> for the specified key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Windows.ResourceDictionary"/> object that represents the set of property
            contributions from the provided <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is empty or null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.AddProperties(System.String,System.Windows.ResourceDictionary)">
            <summary>
            Adds a <see cref="T:System.Windows.ResourceDictionary"/> for a new key.
            </summary>
            <param name="key">The key.</param>
            <param name="properties">The new properties.</param>
            <remarks>
            <para>
            Adding properties will cause the FormatMappingChanged event to be raised.
            </para>
            <para>If <paramref name="key"/> already exists in the map, then this is equivalent to <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.SetProperties(System.String,System.Windows.ResourceDictionary)"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.SetProperties(System.String,System.Windows.ResourceDictionary)">
            <summary>
            Sets the <see cref="T:System.Windows.ResourceDictionary"/> of a key.
            </summary>
            <param name="key">The key.</param>
            <param name="properties">The new <see cref="T:System.Windows.ResourceDictionary"/> of properties.</param>
            <remarks>
            <para>
            Setting properties will cause the FormatMappingChanged event to be raised.
            </para>
            <para>
            If the <see cref="T:System.Windows.ResourceDictionary"/> set does not contain the expected properties, the consumer
            of the properties may throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate">
            <summary>
            Begins a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/>. Events
            will not be raised until <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/> is called.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate"/> was called for a second time 
            without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/>.</exception>
            <remarks>You must call <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/> in order to re-enable FormatMappingChanged events.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate">
            <summary>
            Ends a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> and raises an event if any changes were made during
            the batch update.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/> was called without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate"/> first.</exception>
            <remarks>You must call <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/> in order to re-enable FormatMappingChanged events if <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate"/> was called.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.IsInBatchUpdate">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> is in the middle of a batch update.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.FormatMappingChanged">
            <summary>
            Occurs when this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap">
            <summary>
            Maps from a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> to an <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.GetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Gets the effective <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> for a given text classification type including the
            properties of <paramref name="classificationType"/> and any properties that it might inherit.
            </summary>
            <param name="classificationType">
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> whose merged text properties should be returned.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object that represents the merged set of text properties
            from the specified classification type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="classificationType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.GetExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Gets the explicit <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> for <paramref name="classificationType"/>.
            </summary>
            <param name="classificationType">
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> whose text properties should be returned.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object that represents the properties of the <paramref name="classificationType"/>.
            These properties will include only properties defined for <paramref name="classificationType"/> excluding properties that might
            be inherited.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.GetEditorFormatMapKey(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Gets the key used to store the associated properties of <paramref name="classificationType"/> in the 
            underlying <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/>.
            </summary>
            <param name="classificationType">
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> whose key is returned.</param>
            <returns>
            The key that's used to store the properties of <paramref name="classificationType"/> in the underlying <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.AddExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Adds a <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> to a new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.</param>
            <param name="properties">The new properties.</param>
            <remarks>
            <para>Adding the text properties will cause the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be sent.</para>
            <para><paramref name="classificationType"/> has the highest priority.</para>
            <para>If <paramref name="classificationType"/> already exists in the map, then this is equivalent to <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)"/>(classificationType, properties).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="classificationType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.AddExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Adds a <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> to a new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.</param>
            <param name="properties">The new properties.</param>
            <param name="priority">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> that defines the relative prority of <paramref name="classificationType"/>.</param>
            <remarks>
            <para>Adding the text properties will cause the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be sent.</para>
            <para>The priority of <paramref name="classificationType"/> will be lower than that of <paramref name="priority"/>.</para>
            <para>If <paramref name="classificationType"/> already exists in the map, then this is equivalent to <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)"/>(classificationType, properties).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="classificationType"/>, <paramref name="properties"/> or
            <paramref name="priority"/> is null.</exception>   
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="priority"/> does not exist in <see cref="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.CurrentPriorityOrder"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Sets the merged <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> of an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.</param>
            <param name="properties">The new properties.</param>
            <remarks>
            <para>
            Setting the text properties will cause the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be sent.
            </para>
            <para>
            Only parts of the <paramref name="properties"/> that are different than the inherited values of <paramref name="classificationType"/>'s
            properties are stored. If you wish to override all properties of <paramref name="classificationType"/> explicity, please use
            <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Sets the explicit <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> of an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.</param>
            <param name="properties">The new properties.</param>
            <remarks>
            <para>
            Setting the text properties will cause the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be sent.
            </para>
            <para>
            Provided values in <paramref name="properties"/> will be set for the provided <paramref name="classificationType"/> and override
            any inhertied values. If you wish to keep the inheritance structure and only override the set of varying properties, please use
            <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SwapPriorities(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Switches the priorities of two <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> objects.
            </summary>
            <param name="firstType">The first type.</param>
            <param name="secondType">The second type.</param>
            <remarks>
            Changing the priority of an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> causes the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be raised.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate">
            <summary>
            Begins a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/>. Events
            will not be raised until <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/> is called.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate"/> was called for a second time without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/>.</exception>
            <remarks>You must call <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/> in order to re-enable <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> events.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate">
            <summary>
            Ends a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> and raises an event if any changes were made during
            the batch update.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/> was called without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate"/>.</exception>
            <remarks>You must call<see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/> in order to re-enable <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> events if <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate"/> was called.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.CurrentPriorityOrder">
            <summary>
            Gets a read-only list of the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> objects supported by this format map, sorted by priority.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.DefaultTextProperties">
            <summary>
            Gets or sets the default properties that are applied to all classification types. The default properties contain the set
            of minimal properties required to render text properly.
            </summary>
            <remarks>
            <para>
            The default text properties have the lowest priority. Properties associated with a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>
            will only inherit properties of the <see cref="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.DefaultTextProperties"/> if they don't provide the core necessary 
            properties such as <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Typeface"/>.
            </para>
            <para>
            The <see cref="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.DefaultTextProperties"/> are guaranteed to contain a <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Typeface"/>, 
            <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrush"/> and <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontRenderingEmSize"/>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.IsInBatchUpdate">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> is in the middle of a batch update.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged">
            <summary>
            Occurs when this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService">
            <summary>
            Looks up a classification format map for a given view.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IClassificationFormatMapService formatMap = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService.GetClassificationFormatMap(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> appropriate for the specified text view. This object is
            likely to be shared among multiple text views.
            </summary>
            <param name="textView">The view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> for the view.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService.GetClassificationFormatMap(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> for the specified appearance category.
            </summary>
            <param name="category">The appearance category.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> for the category.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs">
            <summary>
            Provides information for the TagsChanged event.
            Returns the span of changed tags as a mapping span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs"/>.
            </summary>
            <param name="items">A collection of the items that have changed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs.ChangedItems">
            <summary>
            Gets the formatting items that have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition">
            <summary>
            Provides coloring information for text markers.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported as:
            [Export(typeof(EditorFormatDefinition))]</para>
            <para>
            Exporters must provide the attribute NameAttribute.
            </para>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> is consumed by the default visual manager for the <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag"/>. The <see cref="P:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.Type"/> property
            should correspond to the <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> of this export so that the desired color can be correctly loaded for the text marker.
            </para>
            <para>
            If you wish your <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> to interact with Visual Studio, then set the <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute"/> on your export to true
            and make sure you set <see cref="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundColor"/> and <see cref="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundColor"/>. The foreground brush will
            be used to draw the border and the background brush will be used to draw the fill.
            </para>
            <example>
            [Export(typeof(EditorFormatDefinition))]
            [Name("MarkerFormatDefinition/RedMarker")]
            [UserVisible(true)]
            private VisualStudioRedMarker : MarkerFormatDefinition
            {
                VisualStudioRedMarker() 
                {
                    this.BackgroundColor = Colors.Red;
                    this.ForegroundColor = Colors.Blue;
                    this.DisplayName = "Red Marker"; //this value should be localized
                    this.ZOrder = 5;
                }
            }
            </example>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.ZOrderId">
            <summary>
            Defines the string used to lookup the z-order value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.FillId">
            <summary>
            Defines the string used to lookup the fill brush value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.BorderId">
            <summary>
            Defines the string used to look up the border pen value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.CreateResourceDictionaryFromDefinition">
            <summary>
            Creates a <see cref="T:System.Windows.ResourceDictionary"/> using this definition.
            </summary>
            <returns>A <see cref="T:System.Windows.ResourceDictionary"/> with the values from this definition.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.ZOrder">
            <summary>
            The Z-Order is used as the Z-Order of the marker when it's drawn on the text marker adornment layer. This property can be used to specify
            in which order multiple markers should be drawn when they all overlap the same span of text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.Fill">
            <summary>
            The brush is used to paint the inner body of the text marker.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.Border">
            <summary>
            The pen is used to draw the border of the text marker.
            </summary>
            <remarks>
            This property is optional and can be null, in which case no pen will be used for the border of the text marker adornment.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute">
            <summary>
            Determining if an export should be visible to the user.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute"/>.
            </summary>
            <param name="userVisible"><c>true</c> if the extension is visible to the user, otherwise <c>false</c>.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute.UserVisible">
            <summary>
            Determines whether the extension is visible to the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.Priority">
            <summary>
            Represents the built-in priorities for a classification format.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.Priority.Default">
            <summary>
            The default priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.Priority.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.Priority.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo">
            <summary>
            Provides information about an ongoing drag and drop operation. 
            It is passed to <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> objects when the state
            of the drag and drop operation changes. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.#ctor(System.Windows.Point,System.Windows.DragDropKeyStates,System.Windows.IDataObject,System.Boolean,System.Object,System.Windows.DragDropEffects,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> with the specified settings.
            </summary>
            <param name="location">The location of the cursor relative to the left top corner of the text view.</param>
            <param name="keyStates">The state of the keyboard during the operation.</param>
            <param name="data">The <see cref="T:System.Windows.IDataObject"/> of the drag and drop operation.</param>
            <param name="isInternal"><c>true</c> if the drag has been initiated from within the editor, otherwise <c>false</c>.</param>
            <param name="source">The object that initiated the drag and drop operation.</param>
            <param name="allowedEffects">The drag and drop effects allowed by the source.</param>
            <param name="bufferPosition">The buffer position of the cursor during the drag and drop operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> objects have the same settings.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if the two objects have the same settings, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.op_Equality(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> objects have the same settings.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns><c>true</c> if the two objects have the same settings, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.op_Inequality(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> objects have different settings.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns><c>true</c> if the two objects have different settings, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Location">
            <summary>
            Gets the location of the cursor relative to the left top corner of the text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.KeyStates">
            <summary>
            Gets the state of the keyboard during the operation. This field can be queried to check
            whether certain keys have been pressed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Data">
            <summary>
            Represents the <see cref="T:System.Windows.IDataObject"/> of the drag and drop operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.IsInternal">
            <summary>
            Determines whether the drag and drop operation has been initiated from within the editor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Source">
            <summary>
            Gets the object that initiated the drag and drop operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.VirtualBufferPosition">
            <summary>
            Gets the buffer position of the cursor during the drag and drop operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.AllowedEffects">
            <summary>
            Gets the drag and drop effects allowed by the source. 
            </summary>
            <remarks>As part of the contract between the source and the target, 
            the target must honor the effects allowed by the source. For example,
            if the source does not permit a DragDropEffects.Move, then the target should not execute a move.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects">
            <summary>
            Specifies the effects of a drag/drop operation.
            </summary>
            <remarks>
            This enumeration has the <see cref="T:System.FlagsAttribute"/> hence allowing bitwise combination of its member variables.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.None">
            <summary>
            None signals that the drag/drop operation is not allowed. The mouse icon will be changed to the "not allowed" icon and no tracker will be shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Copy">
            <summary>
            Copy signals that the drag/drop operation will result in data copy. The mouse icon will be changed to the copy icon.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Link">
            <summary>
            Link signals that a shortcut/link will be created as the result of the drag/drop operation. The mouse icon will be changed to the shortcut creation icon.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Move">
            <summary>
            Move signals that the data will be moved from the drag source to the drop target. The mouse icon will be changed to the move icon.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Scroll">
            <summary>
            Scroll indicates that the drop operation is causing scrolling in the drop target.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Track">
            <summary>
            Track indicates that a tracker hinting the drop location on the editor will be shown to the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.All">
            <summary>
            All specifies all possible effects together.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute">
            <summary>
            Specifies the format that an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> handles.
            </summary>
            <remarks>
            You can specify multiple instances of this attribute in order to handle multiple <see cref="T:System.Windows.DataFormats"/>.
            This attribute should be used on an export of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider"/>.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute._dropFormat">
            <summary>
            Stores the format specified in this <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute"/> with the specified drop format.
            </summary>
            <param name="dropFormat">The drop format.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute.DropFormats">
            <summary>
            Gets the drop format.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler">
            <summary>
            Handles drag and drop operations for different data formats.
            </summary>
            <remarks>
            Any object that implements this interface can act as a drop handler. 
            Drop handlers are created via <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider"/>.
            To learn more about data formats and their association with
            <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>s, please see <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates the start of a drag and drop operation.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects"/> object for the current operation. For example, this can be used to
            indicate a copy operation when the CTRL key is down.
            </returns>
            <remarks>
            This method is called once a drop operation is in progress and the <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>
            is the handler for the data format of the drop operation.
            It will not be called for dropping data formats not supported by this <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>.
            A call to <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)"/> is always followed by a call to either <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragCanceled"/> or <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDraggingOver(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates that the drag and drop operation is in progress.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects"/> for the current operation. For example, this can be used to
            indicate a copy operation when the CTRL key is down.
            </returns>
            <remarks>This method is called continuously while the user is dragging the mouse over the text editor during
            a drag and drop operation. It can be used to
            draw additional information next to the mouse cursor as a preview of the text after the drop operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates that the drag and drop operation has completed, and that the final tasks, if any, should be performed now.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            The drag and drop effects of this drop operation. For example, if the drop operation has moved data,
            DragDropPointerEffects.Move should be returned.
            </returns>
            <remarks>This method is called when the user drops the data onto the editor. 
            This marks the end of a drag and drop operation. 
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> is expected to perform the final tasks of the operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.IsDropEnabled(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines whether the handler can accept data for a drag and drop operation.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation.
            </param>
            <returns><c>true</c> if the handler can accept data now, otherwise <c>false</c>.</returns>
            <remarks>
            <para>This method is used by the editor to check whether the drop handler can accept data 
            after it has been designated to handle a drag and drop operation. For example,
            the drop handler may be able to handle data only if the view is not read-only. 
            The implementation of this method would check the read-only status of the view.</para>
            <para>If one drop handler returns <c>false</c>, 
            another drop handler might be used to handle the drop operation, even if 
            the ordering of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> objects dictates otherwise.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragCanceled">
            <summary>
            Indicates that a drag and drop operation has been canceled.
            </summary>
            <remarks>This method allows the drop handler to update its state after cancellation.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> for a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <remarks>
            <para>This is a MEF component part, and must be exported with the [Export(typeof(IDropHandlerProvider))] attribute. 
            It must also have one or more [DropFormat("FormatKind")] attributes. For example,
            if the provided <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> handles both text and RTF formats, two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute"/> annotations
            are necessary:
            </para>
            <para>[Export(typeof(IDropHandlerProvider))]</para>
            <para>[DropFormat("Rich Text Format")]</para>
            <para>[DropFormat("Text")]</para>
            <para><see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> objects are used to handle drag and drop operations for various data formats
            and act as extension points for customizing drop operations.</para>
            <para>If you provide a <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>, you must
            export a factory service in order to instantiate the <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> with the required context.
            At runtime the editor looks for these exports, and calls the GetAssociatedDropHandler method to activate the 
            <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> associated with the factory service. The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> will then be notified
            when a drag and drop operation of the corresponding data format has been requested. All other tasks, 
            such as capturing mouse events, scrolling the view, etc., are handled by the editor.
            </para>
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute"/> objects specify
            the data formats that the associated <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> can handle. These formats are specified by string
            keys and correspond to the standard data formats defined by the <see cref="T:System.Windows.IDataObject"/> interface. For
            example, to handle RTF content you must specify [DropFormat("Rich Text Format")], as defined in the 
            <see cref="T:System.Windows.IDataObject"/> interface.
            </para>
            <para>
            A single <see cref="T:System.Windows.IDataObject"/> can contain multiple data formats, so that multiple drop handlers
            might be available to handle the formats. In this case, the data is delegated to the drop handlers according to a predefined set of priorities.
            The format priorities are as follows, from the highest to the lowest priority:
            </para>
            <para>
            Any custom format
            </para>
            <para>
            FileDrop
            </para>
            <para>
            EnhancedMetafile
            </para>
            <para>
            WaveAudio
            </para>
            <para>
            Riff
            </para>
            <para>
            Dif
            </para>
            <para>
            Locale
            </para>
            <para>
            Palette
            </para>
            <para>
            PenData
            </para>
            <para>
            Serializable
            </para>
            <para>
            SymbolicLink
            </para>
            <para>
            Xaml
            </para>
            <para>
            XamlPackage
            </para>
            <para>
            Tiff
            </para>
            <para>
            Bitmap
            </para>
            <para>
            Dib
            </para>
            <para>
            MetafilePicture
            </para>
            <para>
            CommaSeparatedValue
            </para>
            <para>
            StringFormat
            </para>
            <para>
            Html
            </para>
            <para>
            Rtf
            </para>
            <para>
            UnicodeText
            </para>
            <para>
            OemText
            </para>
            <para>
            Text
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider.GetAssociatedDropHandler(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> for a specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>. 
            </summary>
            <param name="wpfTextView">The text view for which to get the drop handler.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>.</returns>
            <remarks>This method is expected to return non-null values.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase">
            <summary>
            This class provides the basic functionality necessary to process drop of data on to the editor. It's provided
            as a convenience class to easily allow extenders to provide their own custom drop handlers by extending this class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase._wpfTextView">
            <summary>
            Keeps a reference for the text view for which drap and drop is being implemented
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase._editorOperations">
            <summary>
            Keeps a reference to the <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> used to handle tasks such as text insertion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.#ctor(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Operations.IEditorOperations)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase"/>.
            </summary>
            <param name="wpfTextView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> over which this drop handler operates on.</param>
            <param name="editorOperations">The <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> used to insert text into the editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates the start of a drag and drop operation.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects"/> object for the current operation. For example, this can be used to
            indicate a copy operation when the CTRL key is down.
            </returns>
            <remarks>
            This method is called once a drop operation is in progress and the <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>
            is the handler for the data format of the drop operation.
            It will not be called for dropping data formats not supported by this <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>.
            A call to <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)"/> is always followed by a call to either <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragCanceled"/> or <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDraggingOver(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates that the drag and drop operation is in progress.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects"/> for the current operation. For example, this can be used to
            indicate a copy operation when the CTRL key is down.
            </returns>
            <remarks>This method is called continuously while the user is dragging the mouse over the text editor during
            a drag and drop operation. It can be used to
            draw additional information next to the mouse cursor as a preview of the text after the drop operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates that the drag and drop operation has completed, and that the final tasks, if any, should be performed now.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            The drag and drop effects of this drop operation. For example, if the drop operation has moved data,
            DragDropPointerEffects.Move should be returned.
            </returns>
            <remarks>This method is called when the user drops the data onto the editor. 
            This marks the end of a drag and drop operation. 
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> is expected to perform the final tasks of the operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragCanceled">
            <summary>
            Indicates that a drag and drop operation has been Canceled. 
            </summary>
            <remarks>This method allows the drop handler to update its state after cancellation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.IsDropEnabled(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines whether the handler can accept data for a drag and drop operation.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation.
            </param>
            <returns><c>true</c> if the handler can accept data now, otherwise <c>false</c>.</returns>
            <remarks>
            <para>This method is used by the editor to check whether the drop handler can accept data 
            after it has been designated to handle a drag and drop operation. For example,
            the drop handler may be able to handle data only if the view is not read-only. 
            The implementation of this method would check the read-only status of the view.</para>
            <para>If one drop handler returns <c>false</c>, 
            another drop handler might be used to handle the drop operation, even if 
            the ordering of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> objects dictates otherwise.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.ExtractText(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            This method extracts the text of an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.PerformPreEditActions(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            This method is called before edits are made to the buffer to perform any necessary pre edit actions.
            </summary>
            <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> holding information about the currently ongoing drag/drop operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.PerformPostEditActions(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,System.Boolean)">
            <summary>
            This method is called after the edits are made to the buffer to perform any necessary post edit actions.
            </summary>
            <param name="successfulEdit">If true, the edits performed on the buffer were successful, otherwise, the edits failed.</param>
            <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> holding information about the currently ongoing drag/drop operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.SelectText(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32,Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,System.Boolean)">
            <summary>
            This method selects the text at the end of the drop operation.
            </summary>
            <remarks>
            This method will only be called if the drop of data resulted in an <see cref="T:System.Windows.DragDropEffects"/> other than DragDropEffects.None.
            </remarks>
            <param name="insertionPoint">The position at which data was inserted.</param>
            <param name="dataLength">The length of the data inserted in the buffer.</param>
            <param name="virtualSpaceLength">The length of whitespace inserted in the buffer to fill the gap between the closest buffer position
             and the position at which data was dropped. This value will be non-zero only if data was dropped into virtual space.</param>
            <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> class containing information about the drop.</param>
            <param name="reverse">True if the existing selection prior to the drop was reversed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.GetDragDropEffect(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines what drag &amp; drop effect should be displayed to the user based on the state of the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.InsertText(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,System.String)">
            <summary>
            Inserts some textual data at the given position.
            </summary>
            <param name="position">Position at which the data is to be inserted</param>
            <param name="data">Text to be inserted</param>
            
            <returns>True if data insertion was successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.MoveText(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.String)">
            <summary>
            Moves the data from one location to another in the buffer by deleting the selection contents and inserting toInsert in insertionPoint.
            </summary>
            <param name="data">Text to be inserted</param>
            <param name="position">Position at which the data is to be inserted</param>
            <param name="selectionSpans">A list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> tracking the selection of the user before the drop operation. This span collection should be deleted from the buffer</param>
            <returns>True if data insertion and removal was successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.DeleteSpans(System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan})">
            <summary>
            Given a list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>s, deletes them from the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> over which this drop handler operates on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.EditorOperations">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> used to handle tasks such as text insertion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs">
            <summary>
            Provides information for a BackgroundBrushChanged event in the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs.#ctor(System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs"/>.
            </summary>
            <param name="newBackgroundBrush">The new <see cref="T:System.Windows.Media.Brush"/> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newBackgroundBrush"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs.NewBackgroundBrush">
            <summary>
            Gets the new <see cref="T:System.Windows.Media.Brush"/> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute">
            <summary>
            This class associates a grid cell size with a MEF export.
            </summary>
            <remarks>
            <para>
            The value of this attribute will be used by the consumers to decide rendering behavior for the exported
            object. The rendering behavior will match the behavior defined in WPF classes (e.g. <see cref="T:System.Windows.Controls.Grid"/>)
            that interact with <see cref="T:System.Windows.GridLength"/>.
            </para>
            <para>
            This class is used in combination with <see cref="T:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute"/> to create a <see cref="T:System.Windows.GridLength"/> for a cell
            in a <see cref="T:System.Windows.Controls.Grid"/>.
            </para>
            </remarks>
            <example>
            [Export(typeof(IWpfTextViewMarginProvider))]
            [Name(PredefinedMarginNames.VerticalScrollBar)]
            [MarginContainer(PredefinedMarginNames.VerticalScrollBarContainerMargin)]
            [ContentType("text")]
            [TextViewRole(PredefinedTextViewRoles.Interactive)]
            [GridUnitType(GridUnitType.Pixel)] //this size is expressed as a pixel using the GridCellLength attribute
            [GridCellLength(15)] //15 pixels wide
            internal sealed class VerticalScrollBarMarginProvider : IWpfTextViewMarginProvider { */ implementation /* }
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute.#ctor(System.Double)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute"/>.
            </summary>
            <param name="cellLength">The length of the grid cell.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute.GridCellLength">
            <summary>
            Gets the grid cell length.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute">
            <summary>
            This class associates a <see cref="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType"/> value with a MEF export.
            </summary>
            <remarks>
            The value of this attribute will be used by the consumers to decide rendering behavior for the exported
            object. The rendering behavior will match the behavior defined in WPF classes (e.g. <see cref="T:System.Windows.Controls.Grid"/>)
            that interact with <see cref="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType"/>.
            </remarks>
            <example>
            [Export(typeof(IWpfTextViewMarginProvider))]
            [Name(PredefinedMarginNames.VerticalScrollBar)]
            [MarginContainer(PredefinedMarginNames.VerticalScrollBarContainerMargin)]
            [ContentType("text")]
            [TextViewRole(PredefinedTextViewRoles.Interactive)]
            [GridUnitType(GridUnitType.Star)] //this size is determined as a weighted proportion of available space
            internal sealed class VerticalScrollBarMarginProvider : IWpfTextViewMarginProvider { */ implementation /* }
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.#ctor(System.Windows.GridUnitType)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute"/>.
            </summary>
            <param name="gridUnitType">The <see cref="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType"/>.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningCollapsedAdornmentControl">
            <summary>
            Represents collapsed text in the text view.
            </summary>
            <remarks>
            By default, this is a gray rectangle with gray text.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl">
            <summary>
            Allows collapsing and expanding an outlining region.
            </summary>
            <remarks>
            By default, this is a gray sqaure with a plus or minus.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines whether this control collapses or expands
            the outlining regions that it controls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.SetIsExpanded(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl,System.Boolean)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.GetIsExpanded(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines whether this control should be currently displaying its mouse-hover highlight.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.SetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl,System.Boolean)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.GetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpanded">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlighted">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl">
            <summary>
            Indicates the vertical extent of an expanded outlining region
            and allows the user to collapse it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines whether this control should be currently displaying its mouse-hover highlight.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.SetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl,System.Boolean)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.GetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.OnIsHighlightedChanged(System.Boolean)">
            <summary>
            The event handler called when <see cref="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlighted"/> is changed.
            </summary>
            <param name="newValue">The new value of <see cref="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlighted"/>.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffsetProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that indicates the vertical offset that the bracket control should use to render itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.SetFirstLineOffset(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl,System.Double)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffsetProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.GetFirstLineOffset(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffsetProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlighted">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffset">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffsetProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl">
            <summary>
            Highlights an outlining region in the text view when the mouse hovers over this region in the outlining margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines whether this control should be currently displaying its mouse-hover highlight.
            </summary>
            <remarks>
            This control should display nothing at all when this property is false.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.SetIsHighlighted(Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl,System.Boolean)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.GetIsHighlighted(Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlighted">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginControl">
            <summary>
            Represents the outlining margin.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ConnectionReason">
            <summary>
            Defines the reasons for connecting or disconnecting a text buffer and a text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.TextViewLifetime">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> has been opened or closed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.ContentTypeChange">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the subject buffer has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.BufferGraphChange">
            <summary>
            A buffer has been added to or removed from <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ImeTextComposition">
            <summary>
            Represents a text composition generated by the IME processing of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> does its own handling and raises the appropriate
            TextComposition events. The TextCompositionEventArgs.TextComposition property
            of all events raised by the IME handling can be cast
            to <see cref="T:Microsoft.VisualStudio.Text.Editor.ImeTextComposition"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ImeTextComposition.#ctor(System.Windows.Input.InputManager,System.Windows.IInputElement,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ImeTextComposition"/>.
            </summary>
            <param name="inputManager">The <see cref="T:System.Windows.Input.InputManager"/>.</param>
            <param name="source">The input element.</param>
            <param name="resultText">The text.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment">
            <summary>
            Support for theming intra-text adornments that are provided via <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment.IsSelected">
            <summary>
            Represents the IsSelected property of these adornments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment.SetIsSelected(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets the IsSelected value on the specified <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="isSelected">The IsSelected value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment.GetIsSelected(System.Windows.UIElement)">
            <summary>
            Gets the IsSelected value on the specified <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The element.</param>
            <returns><c>true</c> if the element is selected, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag">
            <summary>
            Represents a tag that provides adornments to be displayed as interspersed with text.
            </summary>
            <remarks>
            <para>
            The tag's span will be elided from the view and that text will be replaced by the adornment provided by this tag.
            </para>
            <para>
            The aggregator for these tags is created on a per-view basis and handles the
            production of <see cref="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag"/> objects, text hiding, and
            the positioning of adornments on the adornment layer.
            </para>
            <para>
            This will only work for views that have the
            <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured"/> view role.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{Microsoft.VisualStudio.Text.PositionAffinity})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag"/>.
            </summary>
            <param name="adornment">The adornment to be displayed at tag's position. Must not be null.</param>
            <param name="removalCallback">Called when adornment is removed from the view. May be null.</param>
            <param name="topSpace">The amount of space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="baseline">The baseline of the space-negotiating adornment.</param>
            <param name="textHeight">The height of the text portion of the space-negotiating adornment.</param>
            <param name="bottomSpace">The amount of space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="affinity">The affinity of the adornment. Should be null iff the adornment has a zero-length span at the view's text buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback,System.Nullable{Microsoft.VisualStudio.Text.PositionAffinity})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag"/>.
            </summary>
            <param name="adornment">The adornment to be displayed at tag's position. Must not be null.</param>
            <param name="removalCallback">Called when adornment is removed from the view. May be null.</param>
            <param name="affinity">The affinity of the adornment. Should be null iff the adornment has a zero-length span at the view's text buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag"/>.
            </summary>
            <param name="adornment">The adornment to be displayed at tag's position. Must not be null.</param>
            <param name="removalCallback">Called when adornment is removed from the view. May be null.</param>
            <remarks>This constructor should only be used for adornments that replace text in the view's text buffer.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.Adornment">
            <summary>
            Gets the adornment to be displayed at the position of the tag. It must not be null.
            </summary>
            <remarks>
            This adornment will be added to the view. Note that WPF elements can only be parented in a single
            place in the visual tree. Therefore these adornment instances should not be added to any other WPF UI.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.RemovalCallback">
            <summary>
            Called when adornment is removed from the view. It may be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.TopSpace">
            <summary>
            Gets the amount of space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.Baseline">
            <summary>
            Gets the baseline of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.TextHeight">
            <summary>
            Gets the height of the text portion of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.BottomSpace">
            <summary>
            Gets the amount of space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.Affinity">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the space-negotiating adornment.
            </summary>
            <remarks>
            Should be non-null for tags with zero length spans (at the edit buffer level of the view's buffer graph) and only for those tags.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent">
            <summary>
            Handles the display of space reservation adornments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.PositionAndDisplay(System.Windows.Media.Geometry)">
            <summary>
            Positions and displays the contents of the the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/>.
            </summary>
            <param name="reservedSpace">Currently reserved space.</param>
            <returns>The space. If null is returned, the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager"/> will remove the agent.</returns>
            <remarks>If an agent does not want to be removed, but also does not wish to request any additional space, it can return a non-null but empty Geometry.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.Hide">
            <summary>
            Called whenever the content of the space reservation agent should be hidden.
            </summary>
            <remarks>This method is called by the manager to hide the content of the space reservation agent.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.IsMouseOver">
            <summary>
            Determines whether the mouse is over this agent or anything it contains.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.HasFocus">
            <summary>
            Determines whether the adornment created by the space reservation agent has keyboard focus.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.LostFocus">
            <summary>
            Occurs when the adornment created by the ISpaceReservationAgent loses focus.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.GotFocus">
            <summary>
            Occurs when the adornment created by the ISpaceReservationAgent gets focus.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager">
            <summary>
            Manages space reservation adornments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.CreatePopupAgent(Microsoft.VisualStudio.Text.ITrackingSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)">
            <summary>
            Creates a default implementation of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> that displays <paramref name="content"/> in a popup window.
            </summary>
            <param name="visualSpan">The span of text associated with the tip.</param>
            <param name="style">The style options for displaying the tip.</param>
            <param name="content">The UI element to be displayed in the tip.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> that will display the desired content in a popup window.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.UpdatePopupAgent(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent,Microsoft.VisualStudio.Text.ITrackingSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Updates <paramref name="agent"/> with the <paramref name="visualSpan"/>.
            This only works for PopupAgents and returns for other agents.
            </summary>
            <param name="agent">The agent to add.</param>
            <param name="visualSpan">The agent's new visual span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.AddAgent(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent)">
            <summary>
            Adds <paramref name="agent"/> to the list of agents managed by this manager.
            </summary>
            <param name="agent">The agent to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.RemoveAgent(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent)">
            <summary>
            Removes <paramref name="agent"/> from the list of agents managed by this manager.
            </summary>
            <param name="agent">The agent to remove.</param>
            <returns><c>true</c> if the agent was in the list of agents to remove.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.Agents">
            <summary>
            Gets the list of agents managed by this manager.
            </summary>
            <remarks>Any implementation of aa <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> can be used for this method.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.AgentChanged">
            <summary>
            Occurs when the agent is changed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.IsMouseOver">
            <summary>
            Determines whether the mouse is over an agent managed by this manager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.HasAggregateFocus">
            <summary>
            Determines whether the adornment created by the space reservation agent has keyboard focus.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.LostAggregateFocus">
            <summary>
            Occurs when keyboard focus is lost by any of the managed adornments.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.GotAggregateFocus">
            <summary>
            Occurs when any of the managed adornments gets keyboard focus.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService">
            <summary>
            Creates editor views.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextEditorFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.Editor.ITextViewModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="viewModel"/>.
            </summary>
            <param name="viewModel">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> that provides the text buffers for the view.</param>
            <param name="roles">The set of roles filled by the view.</param>
            <param name="parentOptions">The options environment for the text view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewModel"/> or <paramref name="roles"/> or <paramref name="parentOptions"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="dataModel"/>.
            </summary>
            <param name="dataModel">The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> that provides the text buffers over which an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/>
            will be built for the view.</param>
            <param name="roles">The set of roles filled by the view.</param>
            <param name="parentOptions">The options environment for the text view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> can be displayed in multiple views. An <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> will be constructed based on 
            the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <paramref name="dataModel"/> and the <paramref name="roles"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataModel"/> or <paramref name="roles"/> or <paramref name="parentOptions"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="textBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that provides the text for the view.</param>
            <param name="roles">The set of roles filled by the view.</param>
            <param name="parentOptions">The options environment for the text view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> can be displayed in multiple views. A trivial <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> will be constructed and
            an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> will be constructed based on 
            the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <paramref name="textBuffer"/> and the <paramref name="roles"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> or <paramref name="roles"/> or <paramref name="parentOptions"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="textBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that provides the text for the view.</param>
            <param name="roles">The set of roles filled by the view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> can be displayed in multiple views. A trivial <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> will be constructed and
            an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> will be constructed based on 
            the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <paramref name="textBuffer"/> and the <paramref name="roles"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> or <paramref name="roles"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="textBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that provides the text for the view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> having the default set of text view roles.</returns>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> can be displayed in multiple views. A trivial <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> will be constructed and
            an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> will be constructed based on 
            the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <paramref name="textBuffer"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> on a newly created <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> having
            content type <code>Text</code>.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewHost(Microsoft.VisualStudio.Text.Editor.IWpfTextView,System.Boolean)">
            <summary>
            Creates a host for the text view.
            </summary>
            <param name="wpfTextView">The text view to host.</param>
            <param name="setFocus"><c>true</c> if the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> should take focus after it is initialized, <c>false</c> otherwise.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="wpfTextView"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewRoleSet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet"/> containing the given roles.
            </summary>
            <param name="roles">The roles of interest.</param>
            <returns>The text view role set.</returns>
            <exception cref="T:System.ArgumentNullException"> roles is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewRoleSet(System.String[])">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet"/> containing the given roles.
            </summary>
            <param name="roles">The roles of interest.</param>
            <returns>The text view role set.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.NoRoles">
            <summary>
            The empty ITextViewRoleSet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.AllPredefinedRoles">
            <summary>
            The set of all predefined text view roles.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.DefaultRoles">
            <summary>
            The set of roles that are used when creating a text view without specifying text view roles.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.TextViewCreated">
            <summary>
            Raised when any <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.  
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IWpfTextViewMarginProvider))]
            Exporters must supply an TextViewMarginPlacementAttribute, ContentTypeAttribute,
            OrderAttribute, and NameAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider.CreateMargin(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.
            </summary>d\
            <param name="wpfTextViewHost">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/>.</param>
            <param name="marginContainer">The margin that will contain the newly-created margin.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/>.  
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider"/> does not participate for this context.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView">
            <summary>
            Represents a Visual Studio <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for the WPF platform.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetAdornmentLayer(System.String)">
            <summary>
            Gets a named <see cref="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer"/>.
            </summary>
            <param name="name">The name of the layer.</param>
            <returns>An instance of the layer in this view.</returns>
            <remarks>
            Layer names must be defined as <see cref="T:Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition"/> component parts.
            The following layer names: "Text", "Caret", "Selection", and "ProvisionalHighlight" are reserved and cannot
            be requested using this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetSpaceReservationManager(System.String)">
            <summary>
            Gets a named <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager"/>.
            </summary>
            <param name="name">The name of the manager.</param>
            <returns>An instance of the manager in this view. Not null.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is not registered via an <see cref="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition"/>.</exception>
            <remarks>
            <para>Managers must be exported using <see cref="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition"/> component parts.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> that contains the specified buffer position.
            </returns>
            <remarks>
            <para>This method returns an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> if it exists in the view.</para>
            <para>If the line does not exist in the cache of formatted lines, it will be formatted and added to the cache.</para>
            <para>The returned <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> could be invalidated by either a layout by the view or by subsequent calls to this method.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> is not a valid buffer position.</exception>
            <exception cref="T:System.InvalidOperationException"> if the view has not completed initialization.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.VisualElement">
            <summary>
            Gets the FrameworkElement that renders the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.Background">
            <summary>
            Gets or sets the background for the visual element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.TextViewLines">
            <summary>
            Gets the text view lines as an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection"/>.
            </summary>
            <remarks>
            <para>This property will be null during the view's initialization.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IWpfTextView.BackgroundBrushChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.Background"/> is set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.FormattedLineSource">
            <summary>
            Gets the text formatter used by the view.
            </summary>
            <remarks>
            <para>This property will be null during the view's initialization.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.LineTransformSource">
            <summary>
            Gets the line transformer used by the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevel">
            <summary>
            Gets or sets the Zoom level for the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> between 20% to 400%
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevelChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevel"/> is set.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener">
            <summary>
            Listens to text buffers of a particular content type to find out when they are opened or closed
            in the text editor.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IWpfTextViewConnectionListener))]
            [ContentType("...")]
            [TextViewRole("...")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener.SubjectBuffersConnected(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.ConnectionReason,System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Called when one or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects of the appropriate <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> are connected to a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            A connection can occur at one of three times: (1) when the view is first created; (2) when the buffer becomes a member of the 
            <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> for the view; or (3) when the 
            <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the buffer changes.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> to which the subject buffers are being connected.</param>
            <param name="reason">The cause of the connection.</param>
            <param name="subjectBuffers">The non-empty list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects with matching
            content types.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener.SubjectBuffersDisconnected(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.ConnectionReason,System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Called when one or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects no longer satisfy the conditions for being included in the subject buffers.
            </summary>
            <remarks>
            Text buffers can be disconnected when they are removed as source buffers of some projection buffer, 
            or when their content type changes, or when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is closed.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> from which the subject buffers are being disconnected.</param>
            <param name="reason">The cause of the disconnection.</param>
            <param name="subjectBuffers">The non-empty list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewCreationListener">
            <summary>
            Listens for when <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>s are created.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IWpfTextViewCreationListener))]
            [ContentType("...")]
            [TextViewRole("...")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewCreationListener.TextViewCreated(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Called when a text view having matchine roles is created over a text data model having a matching content type.
            </summary>
            <param name="textView">The newly created text view.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost">
            <summary>
            Contains an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> and the margins that surround it,
            such as a scrollbar or line number gutter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.Close">
            <summary>
            Closes the text view host and its underlying text view.
            </summary>
            <exception cref="T:System.InvalidOperationException">The text view host is already closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.GetTextViewMargin(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/> with the given <paramref name="marginName"/> that is attached to an edge of this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <param name="marginName">The name of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/> with a name that matches <paramref name="marginName"/>.</returns>
            <remarks>Callers of this method should only utilize the method after the <see cref="E:System.Windows.FrameworkElement.Loaded"/> event is raised.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="marginName"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.IsClosed">
            <summary>
            Determines whether this text view has been closed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.Closed">
            <summary>
            Occurs immediately after closing the text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that is contained within this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.HostControl">
            <summary>
            Gets the WPF control for this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.
            </summary>
            <remarks> Use this property to display the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> WPF control.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection">
            <summary>
            <para>Allows the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> to access the view's collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects. The
            TextViewLines property on the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is used to get an instance of the
            ITextViewLineCollection interface.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> disposes its ITextViewLineCollection 
            and all the ITextViewLines it contains every time it generates a new layout.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate
            the outline path of the text regions.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in the span. It is null if the
            span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
            <remarks>
            <para>The returned geometry may contain several disjoint regions if the span
            contains a mix of conventional and bi-directional text.</para>
            <para>This method uses the height of the rendered text glyphs (<see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextHeight"/>) to calculate the height of the geometry on each line.</para>
            <para>This method adds a 1-pixel padding to bottom of the geometries.</para>
            <para>The returned geometry is not clipped to the boundaries of the viewport.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a valid 
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> on the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)">
            <summary>
            Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate
            the outline path of the text regions.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <param name="clipToViewport">
            If true, the created geometry will be clipped to the viewport.
            </param>
            <param name="padding">
            A padding that's applied to the elements on a per line basis.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in the span. It is null if the
            span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
            <remarks>
            <para>The returned geometry may contain several disjoint regions if the span
            contains a mix of conventional and bi-directional text.</para>
            <para>This method uses the height of the rendered text glyphs (<see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextHeight"/>) to calculate the height of the geometry on each line.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a valid 
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> on the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate
            the outline path of the text regions.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in the span. It is null if the
            span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
            <remarks>
            <para>The returned geometry may contain several disjoint regions if the span
            contains a mix of conventional and bi-directional text.</para>
            <para>This method uses the height of the rendered line (<see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Height"/>) to calculate the height of the geometry on each line.</para>
            <para>The returned geometry is not clipped to the boundaries of the viewport.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a valid 
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> on the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)">
            <summary>
            Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate
            the outline path of the text regions.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <param name="padding">
            A padding that's applied to the elements on a per line basis.
            </param>
            <param name="clipToViewport">
            If true, the created geometry will be clipped to the viewport.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in the span. It is null if the
            span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
            <remarks>
            <para>The returned geometry may contain several disjoint regions if the span
            contains a mix of conventional and bi-directional text.</para>
            <para>This method uses the height of the rendered line (<see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Height"/>) to calculate the height of the geometry on each line.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a valid 
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> on the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)">
            <summary>
            Creates a marker geometry for the provided <paramref name="bufferSpan"/>. If the provided <paramref name="bufferSpan"/>
            extends beyond one line, then <see cref="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)"/> is used to calculate the marker geometry, otherwise
            this method uses <see cref="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)"/> to construct the geometry.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <param name="padding">
            A padding that's applied to the elements on a per line basis.
            </param>
            <param name="clipToViewport">
            If true, the created geometry will be clipped to the viewport.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in <paramref name="bufferSpan"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Creates a marker geometry for the provided <paramref name="bufferSpan"/>. If the provided <paramref name="bufferSpan"/>
            extends beyond one line, then <see cref="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)"/> is used to calculate the marker geometry, otherwise
            this method uses <see cref="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)"/> to construct the geometry.
            </summary>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in <paramref name="bufferSpan"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> that contains the position, or null if none exist.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> is not a valid buffer position.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.WpfTextViewLines">
            <summary>
            Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.Item(System.Int32)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> at <paramref name="index"/>.
            </summary>
            <param name="index">The zero based index of the item</param>
            <returns>
            Returns the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> at the <paramref name="index"/>th position.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.FirstVisibleLine">
            <summary>
            Gets the first line that is not completely hidden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.LastVisibleLine">
            <summary>
            Gets the last line that is not completely hidden.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin">
            <summary>
            Represents margins that are attached to an edge of an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin.VisualElement">
            <summary>
            Gets the <see cref="T:System.Windows.FrameworkElement"/> that renders the margin.
            </summary>
            <exception cref="T:System.ObjectDisposedException"> if the margin is disposed.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs">
            <summary>
            Provides information when an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> is changed in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent,Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs"/>.
            </summary>
            <param name="oldAgent">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> associated with the previous value.</param>
            <param name="newAgent">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> associated with the new value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs.OldAgent">
            <summary>
            Gets the old agent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs.NewAgent">
            <summary>
            Gets the new agent.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition">
            <summary>
            Represents metadata for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager"/>.  
            </summary>
            <remarks> 
            Because you cannot subclass this type, you can simply use the [Export] attribute.
            </remarks>
            <example>
            internal sealed class Components
            {
               [Export]
               [Name("SampleSpaceReservationManager")]
               [Order(After = "Selection", Before = "Text")]
               internal SpaceReservationManagerDefinition sampleManagerDefinition;
               
                { other components }
            }
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WpfTextViewKeyboardFilterName">
            <summary>
            Represents the KeyboardFilter ordering name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WpfTextViewKeyboardFilterName.KeyboardFilterOrderingName">
            <summary>
            The value of the Name attribute on the IKeyboardFilterProvider production.
            </summary>
            <remarks>
            You can use this name to order other keyboard filters relative to the keyboard 
            filter that performs command keybinding dispatching.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WpfViewOptionDefinition`1">
            <summary>
            Defines an editor option specific to an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with:
            [Export(typeof(EditorOptionDefinition))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.WpfViewOptionDefinition`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Determines whether this definition is applicable only to text views.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions">
            <summary>
             Provides extension methods for options related to an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.IsHighlightCurrentLineEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option to highlight the current line is enabled.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns><c>true</c> if the highlight option was enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.IsSimpleGraphicsEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option to draw a gradient selection is enabled.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns><c>true</c> if the draw selection gradient option was enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.IsMouseWheelZoomEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
             Determines whether to allow mouse wheel zooming
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the mouse wheel zooming is enabled, otherwise <c>false</c>.</returns>
            <remarks>Disabling the mouse wheel zooming does NOT turn off Zooming (it disables zooming using mouse wheel)</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.AppearanceCategory(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Specifies the appearance category.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns>The appearance category, which determines where to look up font properties and colors.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions">
            <summary>
            Represents common <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableHighlightCurrentLineId">
            <summary>
            Determines whether to enable the highlight current line adornment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableSimpleGraphicsId">
            <summary>
            Determines whether to enable the highlight current line adornment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableMouseWheelZoomId">
            <summary>
            Determines whether to enable mouse wheel zooming
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.AppearanceCategory">
            <summary>
            Determines the appearance category of a view, which selects a ClassificationFormatMap and EditorFormatMap.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption">
            <summary>
            Represents the option to highlight the current line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption.Default">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption.Key">
            <summary>
            Gets the key for the highlight current line option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption">
            <summary>
            Represents the option to draw a selection gradient as opposed to a solid color selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption.Default">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption.Key">
            <summary>
            Gets the key for the highlight current line option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled">
            <summary>
            Defines the option to enable the mouse wheel zoom
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled.Key">
            <summary>
            Gets the wpf text view  value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption">
            <summary>
            Defines the appearance category.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption.Default">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption.Key">
            <summary>
            Gets the key for the highlight current line option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs">
            <summary>
            Provides information for a ZoomLevelChangedEvent event in the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs.#ctor(System.Double,System.Windows.Media.Transform)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs"/>.
            </summary>
            <param name="newZoomLevel">The new zoom level for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</param>
            <param name="transform">The zoom transform used for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs.NewZoomLevel">
            <summary>
            Gets the new zoom level for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs.ZoomTransform">
            <summary>
            Gets the zoom tranform to apply 
            </summary>
            <remarks>Wpf UI elements wishing to be reflect the view's zoom level can set their 
            LayoutTransform property to the value of ZoomTransform. 
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLine">
            <summary>
            Represents a line of formatted text in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine">
            <summary>
            Represents a line of rendered text in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            <para>Only those <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> objects of which parts are visible in the viewport will be formatted.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine.GetCharacterFormatting(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the formatting for a particular character in the line.
            </summary>
            <param name="bufferPosition">The buffer position of the desired character.</param>
            <returns>The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> used to format that character.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
            <exception cref="T:System.ObjectDisposedException">this <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine.VisibleArea">
            <summary>
            Gets the visible area in which this text line will be rendered.
            </summary>
            <exception cref="T:System.ObjectDisposedException">this <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine.TextLines">
            <summary>
            Gets a list of WPF text lines that make up the formatted text line.
            </summary>
            <exception cref="T:System.ObjectDisposedException">this <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed of.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetSnapshot(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Sets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>s upon which this formatted text line is based.
            </summary>
            <param name="visualSnapshot">the new snapshot for the line in the view model's visual buffer.</param>
            <param name="editSnapshot">the new snapshot for the line in the view model's edit buffer.</param>
            <remarks>The length of this text line is not allowed to change as a result of changing the snapshot.</remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetLineTransform(Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Sets the line transform used to format the text in this formatted text line.
            </summary>
            <param name="transform">The line transform for this formatted text line.</param>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetTop(System.Double)">
            <summary>
            Sets the position used to format the text in this formatted text line.
            </summary>
            <param name="top">The position for the top of the formatted text line.</param>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetDeltaY(System.Double)">
            <summary>
            Sets the change in the position of the top of this formatted text line in the current
            view layout and the previous view layour.
            </summary>
            <param name="deltaY">The new deltaY value for the formatted text line.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetChange(Microsoft.VisualStudio.Text.Formatting.TextViewLineChange)">
            <summary>
            Sets the Change property for this text line.
            </summary>
            <param name="change">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange"/>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetVisibleArea(System.Windows.Rect)">
            <summary>
            Sets the visible area in which this text line will be formatted.
            </summary>
            <param name="visibleArea">The bounds of the visible area on the drawing surface upon which this text line will be formatted.</param>
            <remarks>The VisibilityState of this text line is determined strictly by the top and bottom of <paramref name="visibleArea"/>.</remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.GetOrCreateVisual">
            <summary>
            Gets the WPF <see cref="T:System.Windows.Media.Visual"/> that can be used to add this formatted text line to a <see cref="T:System.Windows.Media.VisualCollection"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.RemoveVisual">
            <summary>
            Remove the Wpf <see cref="T:System.Windows.Media.Visual"/> that represents the rendered text of the line.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource">
            <summary>
            Generates formatted line from text snapshots.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.FormatLineInVisualBuffer(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Formats the text and adornments in a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <param name="visualLine">The line to format.</param>
            <returns>The formatted text for that line.</returns>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLine"/> objects are <see cref="T:System.IDisposable"/> and must be disposed explicitly.
            </para>
            <para>
            The supplied <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> must belong to the snapshot of the visual buffer, since visuals 
            live on that buffer.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TopTextSnapshot">
            <summary>
            Gets the top text snapshot for which this source will provide formatted text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.SourceTextSnapshot">
            <summary>
            Gets the source text snapshot for which this source will provide formatted text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TextAndAdornmentSequencer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/> used by this source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TabSize">
            <summary>
            Gets the number of spaces between each tab stop.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.ColumnWidth">
            <summary>
            Gets the width of a column in pixels.
            </summary>
            <remarks>This is used to determine the location of tab stops.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.LineHeight">
            <summary>
            Gets the nominal height of a line.
            </summary>
            <remarks>
            This will not, in general, be the same as TextHeightAboveBaseline + TextHeightBelowBaseline since there is might be some padding between
            lines.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TextHeightAboveBaseline">
            <summary>
            Gets the nominal height of the text above the baseline.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TextHeightBelowBaseline">
            <summary>
            Gets the nominal height of the text below the baseline.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.BaseIndentation">
            <summary>
            Gets the base indentation (in logical pixels) for all lines generated by this source.
            </summary>
            <remarks>
            This is generally a small value like 2.0, so that some characters (such as an italic slash) will not be clipped
            by the left edge of the view.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.WordWrapWidth">
            <summary>
            Gets the width (in logical pixels) where the formatted text will be broken into multiple lines. 
            </summary>
            <remarks>The value 0.0 means that lines should never be broken.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.MaxAutoIndent">
            <summary>
            Gets the maximum auto-indent for wrapped lines.
            </summary>
            <remarks>
            If a long line is word-wrapped, then all the line fragments after the first will be indented by 
            the amount of leading white space on the first line, or MaxAutoIndent, whichever is smaller.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.UseDisplayMode">
            <summary>
            True if the formatter uses WPF Display TextFormattingMode, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.DefaultTextProperties">
            <summary>
            Gets the <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> used to render unclassified text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService">
            <summary>
            Creates formatted text sources.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IFormattedTextSourceFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService.Create(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Double,System.Double,System.Double,System.Boolean,Microsoft.VisualStudio.Text.Classification.IClassifier,Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource"/> for the given view configuration.
            </summary>
            <param name="sourceTextSnapshot">The text snapshot for the source buffer.</param>
            <param name="visualBufferSnapshot">The text snapshot for the visual buffer.</param>
            <param name="tabSize">The number of spaces between each tab stop.</param>
            <param name="baseIndent">The base indentation for all lines.</param>
            <param name="wordWrapWidth">The word wrap width in logical pixels.</param>
            <param name="maxAutoIndent">The maximum amount to auto-indent wrapped lines.</param>
            <param name="useDisplayMode">Use WPF Display TextFormattingMode for formatting text.</param>
            <param name="aggregateClassifier">The aggregate of all classifiers on the view.</param>
            <param name="sequencer">The text and adornment sequencer for the view. If null, there are no space negotiating adornments.</param>
            <param name="classificationFormatMap">The classification format map to use while formatting text.</param>
            <returns>A new text formatting source for that snapshot.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService.Create(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Double,System.Double,System.Double,System.Boolean,Microsoft.VisualStudio.Text.Classification.IClassifier,Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap,System.Boolean)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource"/> for the given view configuration.
            </summary>
            <param name="sourceTextSnapshot">The text snapshot for the source buffer.</param>
            <param name="visualBufferSnapshot">The text snapshot for the visual buffer.</param>
            <param name="tabSize">The number of spaces between each tab stop.</param>
            <param name="baseIndent">The base indentation for all lines.</param>
            <param name="wordWrapWidth">The word wrap width in logical pixels.</param>
            <param name="maxAutoIndent">The maximum amount to auto-indent wrapped lines.</param>
            <param name="useDisplayMode">Use WPF Display TextFormattingMode for formatting text.</param>
            <param name="aggregateClassifier">The aggregate of all classifiers on the view.</param>
            <param name="sequencer">The text and adornment sequencer for the view. If null, there are no space negotiating adornments.</param>
            <param name="classificationFormatMap">The classification format map to use while formatting text.</param>
            <param name="isViewWrapEnabled">Whether word wrap glyphs are enabled for wrapped lines.</param>
            <returns>A new text formatting source for that snapshot.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService.Create(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Double,System.Double,System.Double,System.Boolean,Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource"/> for the given view configuration.
            </summary>
            <param name="sourceTextSnapshot">The text snapshot for the source buffer.</param>
            <param name="visualBufferSnapshot">The text snapshot for the visual buffer.</param>
            <param name="tabSize">The number of spaces between each tab stop.</param>
            <param name="baseIndent">The base indentation for all lines.</param>
            <param name="wordWrapWidth">The word wrap width in logical pixels.</param>
            <param name="maxAutoIndent">The maximum amount to auto-indent wrapped lines.</param>
            <param name="useDisplayMode">Use WPF Display TextFormattingMode for formatting text.</param>
            <param name="sequencer">The text and adornment sequencer for the view. If null, there are no space negotiating adornments.</param>
            <param name="classificationFormatMap">The classification format map to use while formatting text.</param>
            <returns>A new text formatting source for that snapshot.</returns>
            <remarks>This method is equivalent to calling the Create(...) method above with an aggregate classifier that
            never classifies any text.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource">
            <summary>
            Provides the line transform for a line of formatted text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource.GetLineTransform(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
            <summary>
            Computes the line transform for a given line of formatted text.
            </summary>
            <param name="line">The line for which to compute the line transform.</param>
            <param name="yPosition">The y-coordinate of the line.</param>
            <param name="placement">The placement of the line with respect to <paramref name="yPosition"/>.</param>
            <returns>The line transform for that line.</returns>
            <remarks>If <paramref name="placement"/> is ViewRelativePosition.Top, then the top of the line
            will be located at <paramref name="yPosition"/>. Otherwise the bottom of the line will be located at
            <paramref name="yPosition"/>.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/> objects.  
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ILineTransformSourceProvider))]
            Exporters must supply a ContentTypeAttribute and TextViewRoleAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider.Create(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/> for the given <paramref name="textView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> on which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/> will format.</param>
            <returns>The new <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/>.  
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider"/> decides not to participate.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextParagraphPropertiesFactoryService">
            <summary>
            Creates <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties"/> classes to be used when lines on the view are being formatted.
            </summary>
            <remarks>
            <para>
            This is a MEF component part, and should be imported as follows:
            [Import]
            ITextFormattingParagraphPropertiesFactoryService factory = null;
            </para>
            <para>
            This component is content type specific and should be annotated with one or more <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute"/>s.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextParagraphPropertiesFactoryService.Create(Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,Microsoft.VisualStudio.Text.IMappingSpan,Microsoft.VisualStudio.Text.IMappingPoint,System.Int32)">
            <summary>
            Creates a <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties"/> for the provided configuration.
            </summary>
            <param name="formattedLineSource">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource"/> that's performing the formatting of the line. You can access useful properties about the ongoing formatting operation from this object.</param>
            <param name="textProperties">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> of the line for which <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties"/> are to be provided. This paramter can be used to obtain formatting information about the textual contents of the line.</param>
            <param name="line">The <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> corresponding to the line that's being formatted/rendered.</param>
            <param name="lineStart">The <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> corresponding to the beginning of the line segment that's being formatted. This paramter is relevant for word-wrap scenarios where a single <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> results in multiple formatted/rendered lines on the view.</param>
            <param name="lineSegment">The segment number of the line segment that's been currently formatted. This is a zero-based index and is applicable to word-wrapped lines. If a line is word-wrapped into 4 segments, you will receive 4 calls for the line with lineSegments of 0, 1, 2, and 3.</param>
            <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties"/> to be used when the line is being formatted.</returns>
            <remarks>Please note that you can return a <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties"/> which has a convenient set of basic properties defined.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties">
            <summary>
            Provides text formatting properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.#ctor(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties"/>.
            </summary>
            <param name="defaultTextRunProperties">The default properties for the paragraph.</param>
            <remarks>This sets the tab size to 4 * the FontRenderingEmSize.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="defaultTextRunProperties"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.#ctor(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties"/>.
            </summary>
            <param name="defaultTextRunProperties">The default properties for the paragraph.</param>
            <param name="defaultTabSize">The tab size in pixels.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="defaultTextRunProperties"/> or <paramref name="defaultTabSize"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.DefaultIncrementalTab">
            <summary>
            Gets the default incremental tab.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.DefaultTextRunProperties">
            <summary>
            Gets the default text run properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.FirstLineInParagraph">
            <summary>
            Determines whether this is the first line in a paragraph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.FlowDirection">
            <summary>
            Gets the flow direction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.TextAlignment">
            <summary>
            Gets the text alignment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.Indent">
            <summary>
            Gets the size of the indent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.LineHeight">
            <summary>
            Gets the line height.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.TextMarkerProperties">
            <summary>
            Gets the text marker properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.TextWrapping">
            <summary>
            Gets the text wrapping.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties">
            <summary>
            Holds text formatting property information. This class derives from the abstract WPF <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> class. 
            </summary>
            <remarks>
            <para>
            This class is used to hold all information about the text formatting properties. Once created,
            it is immutable and all operations return different objects. For each unique set of
            TextFormattingRunProperties there exists exactly one object instance. If a TextFormattingRunProperties
            has reference equality to another, their properties are identical. Conversely, if a TextFormattingRunProperties
            object has reference inequality, the properties are distinct.
            </para>
            <para>
            Checking reference equality is the only way to determine whether two TextFormattingRunProperties are distinct.
            Checking the equality of each property of the object may indicate the two are identical, but that may or may
            not be the case.
            </para>
            <para>
            TextFormattingRunProperties may have empty properties. An empty property 
            inherits the empty properties from some additional text. The TextFormattingRunProperties object can
            determine whether a property is empty or not: [PropertyName]Empty property. TextFormattingRunProperties
            also contains a facility for emptying a property: Clear[PropertyName]().
            </para>
            <para>
            All freezable fields of the TextFormattingRunProperties object are frozen on creation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#cctor">
            <summary>
            Static constructor to freeze static empty collections.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#ctor">
            <summary>
            Initializes a new, empty instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/>.
            </summary>
            <remarks>The properties return the default values, but the
            internal structure is not altered.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> for deserialization.
            </summary>
            <param name="info">The serialization information provided by the deserialization mechanism.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#ctor(System.Windows.Media.Brush,System.Windows.Media.Brush,System.Windows.Media.Typeface,System.Nullable{System.Double},System.Nullable{System.Double},System.Windows.TextDecorationCollection,System.Windows.Media.TextEffectCollection,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/>.
            </summary>
            <param name="foreground">The foreground brush.</param>
            <param name="background">The background brush.</param>
            <param name="typeface">The typeface.</param>
            <param name="size">The size.</param>
            <param name="hintingSize">The hinting size.</param>
            <param name="textDecorations">The text decorations.</param>
            <param name="textEffects">The text effects.</param>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#ctor(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> from a second instance.
            </summary>
            <param name="toCopy">The TextFormattingRunProperties to copy.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CreateTextFormattingRunProperties">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/>.
            </summary>
            <returns>The default TextFormattingRunProperties for the system.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CreateTextFormattingRunProperties(System.Windows.Media.Typeface,System.Double,System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the specified options.
            </summary>
            <param name="typeface">The typeface of the text.</param>
            <param name="size">The size of the text.</param>
            <param name="foreground">The foreground color of the text.</param>
            <returns>A TextFormattingRunProperties that has the requested properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CreateTextFormattingRunProperties(System.Windows.Media.Brush,System.Windows.Media.Brush,System.Windows.Media.Typeface,System.Nullable{System.Double},System.Nullable{System.Double},System.Windows.TextDecorationCollection,System.Windows.Media.TextEffectCollection,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the specified options.
            </summary>
            <param name="foreground">The foreground brush of the text.</param>
            <param name="background">The background brush of the text.</param>
            <param name="typeface">The typeface of the text.</param>
            <param name="size">The size of the text.</param>
            <param name="hintingSize">The hinting size of the text.</param>
            <param name="textDecorations">The text decorations on the text.</param>
            <param name="textEffects">The text effects on the text.</param>
            <param name="cultureInfo">The culture info.</param>
            <returns>A TextFormattingRunProperties object that has the requested properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearBold">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Bold"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearItalic">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearForegroundOpacity">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacity"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearBackgroundOpacity">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacity"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearBackgroundBrush">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the background brush.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearCultureInfo">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> ith all properties the same except for the culture info.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearFontHintingEmSize">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the font hinting size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearFontRenderingEmSize">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the rendering size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearForegroundBrush">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the foreground brush.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearTextDecorations">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the text decorations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearTextEffects">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the text effects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearTypeface">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the typeface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBackgroundBrush(System.Windows.Media.Brush)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but 
            with the background brush set to <paramref name="brush"/>.
            </summary>
            <param name="brush">The new background brush.</param>
            <remarks>
            The brush is frozen by this method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="brush"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBackground(System.Windows.Media.Color)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the background set to <paramref name="background"/>.
            </summary>
            <param name="background">The new background color.</param>
            <remarks>
            The background brush is changed by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetCultureInfo(System.Globalization.CultureInfo)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the culture set to <paramref name="cultureInfo"/>.
            </summary>
            <param name="cultureInfo">The new culture information.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetFontHintingEmSize(System.Double)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the font hinting size set to <paramref name="hintingSize"/>.
            </summary>
            <param name="hintingSize">The new font hinting size.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetFontRenderingEmSize(System.Double)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the font rendering size set to <paramref name="renderingSize"/>.
            </summary>
            <param name="renderingSize">The new rendering size.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetForegroundBrush(System.Windows.Media.Brush)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one 
            but with the new foreground <see cref="T:System.Windows.Media.Brush"/> set to <paramref name="brush"/>.
            </summary>
            <param name="brush">The new foreground brush.</param>
            <remarks>
            The brush is frozen by this method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="brush"/>is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetForeground(System.Windows.Media.Color)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the foreground set to <paramref name="foreground"/>.
            </summary>
            <param name="foreground">The new foreground color.</param>
            <remarks>
            The foreground brush is changed by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetTextDecorations(System.Windows.TextDecorationCollection)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the text decorations set to <paramref name="textDecorations"/>.
            </summary>
            <param name="textDecorations">The new text decoration collection.</param>
            <remarks>
            The <paramref name="textDecorations"/> is frozen by this method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textDecorations"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetTextEffects(System.Windows.Media.TextEffectCollection)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the text effects set to <paramref name="textEffects"/>.
            </summary>
            <param name="textEffects">The new text effect collection.</param>
            <remarks>
            The <paramref name="textEffects"/> is frozen by this method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textEffects"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetTypeface(System.Windows.Media.Typeface)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the typeface set to <paramref name="typeface"/>.
            </summary>
            <param name="typeface">The new typeface.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeface"/> is null.</exception>
            <remarks>
            If you wish to only make the formatting either italic or bold, instead of setting a typeface, please use the 
            <see cref="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBold(System.Boolean)"/> and <see cref="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetItalic(System.Boolean)"/> methods.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetForegroundOpacity(System.Double)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacity"/> property set to <paramref name="opacity"/>.
            </summary>
            <param name="opacity">The foreground opacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="opacity"/> is less than zero or bigger than 1</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBackgroundOpacity(System.Double)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacity"/> property set to <paramref name="opacity"/>.
            </summary>
            <param name="opacity">The background opacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="opacity"/> is less than zero or bigger than 1</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBold(System.Boolean)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Bold"/> property set to <paramref name="isBold"/>.
            </summary>
            <param name="isBold">Should be set to true if text formatting is to be bold.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetItalic(System.Boolean)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic"/> property set to <paramref name="isItalic"/>.
            </summary>
            <param name="isItalic">Should be set to true if text formatting is to be italic.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrushSame(System.Windows.Media.Brush)">
            <summary>
            Determines whether the foreground brush for this <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> is the same as <paramref name="brush"/>.
            </summary>
            <param name="brush">The other <see cref="T:System.Windows.Media.Brush"/>.</param>
            <returns><c>true</c> if the foreground brushes are the same, <c>false</c> if they are not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrushSame(System.Windows.Media.Brush)">
            <summary>
            Determines whether the background brush for this <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> is the same as <paramref name="brush"/>.
            </summary>
            <param name="brush">The other <see cref="T:System.Windows.Media.Brush"/>.</param>
            <returns><c>true</c> if the background brushes are the same, <c>false</c> if they are not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SameSize(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Determines whether font sizes for two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> are the same.
            </summary>
            <param name="other">The other <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/>.</param>
            <returns><c>true</c> if the sizes are the same, <c>false</c> if they are not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BrushesEqual(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            Determine whether two brushes are equal.
            </summary>
            <param name="brush">The first brush.</param>
            <param name="other">The second brush.</param>
            <returns><c>true</c> if the two are equal, <c>false</c> otherwise.</returns>
            <remarks>internal for testability</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FindOrCreateProperties(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Return either the existing TextFormattingRunProperties that matches the requested
            properties, or add the new one to our list of existing properties and return it.
            </summary>
            <param name="properties">The properties to find the unique instance of.</param>
            <returns>The unique instance satisfying the properties passed in.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.IsEqual(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Determine whether two TextFormattingRunProperties have the same formatting effects.
            </summary>
            <param name="other">The other set of properties to check against.</param>
            <returns>true if the two TextFormattingRunProperties have the same formatting effects, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeBackgroundBrush">
            <summary>
            Freeze the background brush.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeEverything">
            <summary>
            Freeze all available freezable members.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeForegroundBrush">
            <summary>
            Freeze the foreground brush.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeTextDecorations">
            <summary>
            Freeze the text decorations object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeTextEffects">
            <summary>
            Freeze the text effects object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object using a XamlWriter.
            </summary>
            <param name="info">The SerializationInfo used for serialization.</param>
            <param name="context">The serialization context.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.GetObjectFromSerializationInfo(System.String,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Deserializes an object from the SerializationInfo struct using a XamlReader.
            </summary>
            <param name="name">The name of the object to deserialize.</param>
            <param name="info">The SerializationInfo used to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the interned <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object.
            </summary>
            <param name="context">The deserialization context.</param>
            <returns>The interned <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrush">
            <summary>
            Gets the background brush.
            </summary>
            <remarks>
            This property gets a transparent brush if the background brush is not currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CultureInfo">
            <summary>
            Gets the culture information.
            </summary>
            <remarks>
            Returns the current culture if no culture is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontHintingEmSize">
            <summary>
            Gets the font hinting size.
            </summary>
            <remarks>
            Returns zero if no hinting size is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontRenderingEmSize">
            <summary>
            Gets the font rendering size.
            </summary>
            <remarks>
            Returns zero if no rendering size is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrush">
            <summary>
            Gets the foreground brush.
            </summary>
            <remarks>
            Returns a transparent brush if the foreground brush is not currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic">
            <summary>
            Returns true if the formatting is made explicitly italic.
            </summary>
            <remarks>
            Returns false if <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ItalicEmpty"/> is true.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Bold">
            <summary>
            Returns true if the formatting is made explicitly bold.
            </summary>
            <remarks>
            Returns false if <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BoldEmpty"/> returns true.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacity">
            <summary>
            Returns the opacity of the foreground.
            </summary>
            <remarks>
            Returns 1.0 if <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacityEmpty"/> is true.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacity">
            <summary>
            Returns the opacity of the background.
            </summary>
            <remarks>
            Returns 1.0 if <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacityEmpty"/> is true.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextDecorations">
            <summary>
            Gets the decorations for the text.
            </summary>
            <remarks>
            Returns an empty <see cref="T:System.Windows.TextDecorationCollection"/> if no collection is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextEffects">
            <summary>
            Gets the text effects for the text.
            </summary>
            <remarks>
            Returns an empty TextEffectCollection if no collection is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Typeface">
            <summary>
            Gets the Typeface for the text.
            </summary>
            <remarks>
            Returns the system default Typeface if no typeface is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrushEmpty">
            <summary>
            Determines whether the background brush is empty.
            </summary>
            <returns><c>true</c> if the background brush is empty, <c>false</c>otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacityEmpty">
            <summary>
            Determines whether any custom opacity is explicitly set for the background.
            </summary>
            <returns><c>true</c> if the there is no custom opacity set, <c>false</c>otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacityEmpty">
            <summary>
            Determines whether any custom opacity is explicitly set for the foreground.
            </summary>
            <returns><c>true</c> if the there is no custom opacity set, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BoldEmpty">
            <summary>
            Determines whether the bold property is set.
            </summary>
            <returns><c>true</c> if the bold property is not set, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ItalicEmpty">
            <summary>
            Determines whether the italic property is set.
            </summary>
            <returns><c>true</c> if the italic property is not set, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CultureInfoEmpty">
            <summary>
            Determines whether the culture info is empty.
            </summary>
            <returns><c>true</c> if the culture info is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontHintingEmSizeEmpty">
            <summary>
            Determines whether the font hinting size is empty.
            </summary>
            <returns><c>true</c> if the font hinting is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontRenderingEmSizeEmpty">
            <summary>
            Determines whether the size is empty.
            </summary>
            <returns><c>true</c> if the size is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrushEmpty">
            <summary>
            Determines whether the foreground brush is empty.
            </summary>
            <returns><c>true</c> if the foreground brush is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextDecorationsEmpty">
            <summary>
            Determines whether the text decorations collection is empty.
            </summary>
            <returns><c>true</c> if the text decorations collection is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextEffectsEmpty">
            <summary>
            Determines whether the text effects collection is empty.
            </summary>
            <returns><c>true</c> if the text effects collection is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TypefaceEmpty">
            <summary>
            Determines whether the typeface is empty.
            </summary>
            <returns><c>true</c> if the typeface is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphTag">
            <summary>
            Represents a glyph tag, which is consumed by the glyph margin
            to place glyph visuals.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory">
            <summary>
            Provides a visual for a specific glyph type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphFactory.GenerateGlyph(Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine,Microsoft.VisualStudio.Text.Editor.IGlyphTag)">
            <summary>
            Generates a new glyph visual for the given line.
            </summary>
            <param name="line">The line that this glyph will be placed on.</param>
            <param name="tag">Information about the glyph for which the visual is being generated.</param>
            <returns>The visual element for the given tag.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider">
            <summary>
            Provides a mouse binding for the glyph margin.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IGlyphMouseProcessorProvider))]
            Exporters must supply a NameAttribute, OrderAttribute, 
            and at least one ContentTypeAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider.GetAssociatedMouseProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/> for the glyph margin, given a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> and a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="wpfTextViewHost">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> associated with the glyph margin.</param>
            <param name="margin">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/> for the glyph margin.  
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider"/> does not participate.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider">
            <summary>
            Provides an <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory"/>.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IGlyphVisualProvider))]
            Exporters must supply a NameAttribute, OrderAttribute, 
            at least one ContentTypeAttribute, and at least one TagTypeAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider.GetGlyphFactory(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory"/> for the given text view and margin.
            </summary>
            <param name="view">The view for which the factory is being created.</param>
            <param name="margin">The margin for which the factory will create glyphs.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory"/> for the given view and margin.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>. 
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IKeyProcessorProvider))]
            Exporters must supply a NameAttribute, a ContentTypeAttribute, at least one TextViewRoleAttribute, and optionally an OrderAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider.GetAssociatedProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <param name="wpfTextView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/>.</param>
            <returns>The created <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/>.
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider"/> does not wish to participate in the current context.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor">
            <summary>
            Provides extensions for mouse bindings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button down event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button down event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button down event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button down event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button up event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button up event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button up event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button up event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse up event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse up event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse down event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse down event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse move event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse move event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles a mouse wheel event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles a mouse wheel event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse enter event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse enter event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse leave event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse leave event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag leave event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag leave event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag over event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag over event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag enter event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag enter event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Handles a drop event before the default handler.
            </summary>
            <param name="e">
            <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Handles a drop event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles a QueryContinueDrag event before the default handler. 
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles a QueryContinueDrag event after the default handler. 
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles a GiveFeedback event before the default handler. 
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles a GiveFeedback event after the default handler. 
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/> for a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IMouseProcessorProvider))]
            Exporters must supply a NameAttribute, a ContentTypeAttribute, at least one TextViewRoleAttribute, and optionally an OrderAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider.GetAssociatedProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/> for a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <param name="wpfTextView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/>.</param>
            <returns>The created <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/>.
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider"/> does not wish to participate in the current context.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor">
            <summary>
            Processes the keyboard input of the editor.
            </summary>
            <remarks>
            Export this functionality by using the <see cref="T:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the PreviewKeyDown event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.KeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyDown event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the PreviewKeyUp event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.KeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyUp event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewTextInputStart(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the PreviewTextInputStart event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.TextInputStart(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the TextInputStart event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the PreviewTextInput event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.TextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the TextInput event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewTextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the PreviewTextInputUpdate event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.TextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the TextInputUpdate event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.KeyProcessor.IsInterestedInHandledEvents">
            <summary>
            Determines whether this processor should be called for events that have been handled by earlier <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/> objects.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase">
            <summary>
            Provides a base implementation for mouse bindings, so that clients can
            override only the the methods they need.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button down event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button down event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse right button down event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse right button down event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button up event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button up event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse right button up event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse right button up event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse up event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse up event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse down event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse down event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse move event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse move event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the mouse wheel event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the mouse wheel event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse enter event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse enter event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse leave event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse leave event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag leave event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag leave event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag over event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag over event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag enter event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag enter event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Handles the drop event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Handles the drop event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles the query continue drag event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles the query continue drag event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles the feedback event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles the feedback event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService">
            <summary>
            Generates RTF-formatted text from a collection of snapshot spans.
            </summary>
            <remarks>
            This is a MEF component part and should be imported using the following attribute:
            [Import(typeof(IRtfBuilderService))] 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.String)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans. A new line "\par" rtf keyword will be placed between the provided
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.String)">
            <summary>
            Gets an RTF string that contains the formatted text of the spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans, 
            with the characteristics and formatting properties of <paramref name="textView"/>.
            All the snapshot spans must belong to <paramref name="textView"/>.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that contains the snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an RTF string that contains the formatted text of the spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans, 
            with the characteristics and formatting properties of <paramref name="textView"/>.
            All the snapshot spans must belong to <paramref name="textView"/>. A new line "\par" rtf keyword will be 
            placed between the provided <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that contains the snapshot spans.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomControl">
            <summary>
            Represents zoom control in the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevelProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines the selected zoom level property of the control
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomControl.SetSelectedZoomLevel(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevelProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomControl.GetSelectedZoomLevel(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevelProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevel">
            <summary>
            Gets or Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevelProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter">
            <summary>
            Value converter that allows convertion between <see cref="T:System.String"/> and <see cref="T:System.Double"/> representations 
            of the zoom level.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value from <see cref="T:System.Double"/> to its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">The zoom level as <see cref="T:System.Double"/></param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The <see cref="T:System.String"/> representation of the zoom level. Returns <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion fails.</returns>
            <remarks>
            The zoom level is represented as a number %. This converter takes in a double value and formats it with a % symbol.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value from its <see cref="T:System.String"/> representation to its <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The zoom level as <see cref="T:System.String"/>.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The <see cref="T:System.Double"/> value of the zoom level. Returns <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion fails. </returns>
            <remarks>
            The zoom level is represented as a number %. This converter takes in the string representation and converts it 
            to its double value.
            </remarks>
        </member>
    </members>
</doc>
