<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Data.Framework</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject">
      <summary>Represents a clipboard object for the purpose of data transfer. This object interoperates between <see cref="T:System.Windows.Forms.DataObject" />, <see cref="T:System.Runtime.InteropServices.Comtypes.IDataObject" />, and <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject" /> class based on the standard <see cref="T:System.Windows.Forms.DataObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject" /> class containing the specified data, or wraps an existing instance of the class.</summary>
      <param name="data">The data to be contained in a new clipboard object, or an existing clipboard object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject" /> class containing the specified data in the specified format.</summary>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetData(System.String)">
      <summary>Retrieves the data stored in the clipboard object in the specified format.</summary>
      <returns>The data stored in the clipboard object in the specified format.</returns>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetData(System.String,System.Boolean)">
      <summary>Retrieves the data stored in the clipboard object in the specified format, using an automated conversion parameter to determine whether to convert the data to the format.</summary>
      <returns>The data stored in the clipboard object in the specified format.</returns>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
      <param name="autoConvert">Specifies whether to convert the data to the specified format (true) or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetData(System.Type)">
      <summary>Retrieves the data stored in the clipboard object in the specified format.</summary>
      <returns>The data stored in the clipboard object in the specified format.</returns>
      <param name="format">The class type associated with the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetDataPresent(System.String)">
      <summary>Indicates whether data stored in the clipboard object can be converted to or is associated with the specified format.</summary>
      <returns>true if the data can be converted to or is associated with the specified format; otherwise, false.</returns>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetDataPresent(System.String,System.Boolean)">
      <summary>Indicates whether data stored in the clipboard object can be converted to or is associated with the specified format, using an automatic conversion parameter to determine whether to convert the data to the format.</summary>
      <returns>true if the data can be converted to or is associated with the specified format; otherwise, false.</returns>
      <param name="format">The class type associated with the data. See <see cref="T:System.Windows.Forms.DataFormats" /> for the predefined formats. </param>
      <param name="autoConvert">Specifies whether to check whether the data can be converted to the specified format (true), or check whether the data is in the specified format (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetDataPresent(System.Type)">
      <summary>Indicates whether data stored in the clipboard object can be converted to or is associated with the specified format.</summary>
      <returns>true if the data can be converted to or is associated with the specified format; otherwise, false.</returns>
      <param name="format">The class type associated with the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetFormats">
      <summary>Retrieves a list of all formats that are supported for the data stored in the clipboard object.</summary>
      <returns>An array of string values representing all formats that are supported for the data stored in the clipboard object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.GetFormats(System.Boolean)">
      <summary>Retrieves a list of all formats that are supported for the data stored in the clipboard object, using an automatic conversion parameter to determine whether to retrieve only native data formats or all formats that the data can be converted to.</summary>
      <returns>An array of string values representing all formats that are supported for the data stored in the clipboard object.</returns>
      <param name="autoConvert">Specifies whether to retrieve all formats that the data can be converted to or is associated with (true), or to retrieve only the native data formats (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)">
      <summary>Creates a connection between the clipboard object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the advisory connection was created, E_NOTIMPL if the clipboard object does not wrap an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> object (from the Microsoft.VisualStudio.OLE.Interop namespace), or an error code.</returns>
      <param name="pFormatetc">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
      <param name="ADVF">A value from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ADVF" /> enumeration that specifies a group of flags for controlling the advisory connection.</param>
      <param name="pAdvSink">An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IAdviseSink" /> object pointing to the advisory sink that will receive the change notification.</param>
      <param name="pdwConnection">Out parameter. When this method returns, this parameter contains a token that identifies this connection. You can use this token later to delete the advisory connection by passing it to <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DUnadvise(System.UInt32)" />. If this value is zero, the connection was not established. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DUnadvise(System.UInt32)">
      <summary>Removes a notification connection that has been established.</summary>
      <param name="dwConnection">A token that specifies the connection to remove. Use the value returned by <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)" /> when the connection was originally established.</param>
      <exception cref="T:System.NotImplementedException">The current clipboard object does not wrap an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> (from the Microsoft.VisualStudio.OLE.Interop namespace).</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#EnumDAdvise(Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA@)">
      <summary>Creates an object that can be used to enumerate the current advisory connections.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the enumerator object is successfully instantiated or there are no connections, OLE_E_ADVISENOTSUPPORTED error if the clipboard object does not wrap an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> (from the Microsoft.VisualStudio.OLE.Interop namespace), or an error code.</returns>
      <param name="ppenumAdvise">Out parameter. When this method returns, contains a value from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA" /> enumeration that receives the interface reference to the new enumerator object. If the implementation sets <paramref name="ppenumAdvise" /> to null, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#EnumFormatEtc(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC@)">
      <summary>Creates an object for enumerating the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structures for a data object. These structures are used in calls to <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" /> or <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)" />.</summary>
      <returns>This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe enumerator object was successfully created.E_NOTIMPLThe direction specified by <paramref name="dwDirection" /> is not supported.OLE_S_USEREGRequests that OLE enumerate the formats from the registry.</returns>
      <param name="dwDirection">A value from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.DATADIR" /> enumeration that specifies the direction of the data.</param>
      <param name="ppenumFormatEtc">Out parameter. When this method returns, contains a reference to an enumerator object used to enumerate <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structures for a data object.</param>
      <exception cref="T:System.NotImplementedException">The current clipboard object does not wrap an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> (from the Microsoft.VisualStudio.OLE.Interop namespace), and the call through the System.Runtime.InteropServices.ComTypes.IDataObject interface failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetCanonicalFormatEtc(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
      <summary>Provides a standard <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that is logically equivalent to a more complex structure. Use this method to determine whether two different <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structures return the same data, removing the need for duplicate rendering.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_FAIL, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe returned FORMATETC structure is different from the one that was passed.DATA_S_SAMEFORMATETCThe FORMATETC structures are the same and a null reference is returned in the <paramref name="pformatetcOut" /> parameter.DV_E_LINDEXThere is an invalid value for <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="pformatectIn" /> parameter.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="pformatectIn">A reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call, such as <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" />. The <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.tymed" /> member is not significant in this case and should be ignored.</param>
      <param name="pformatetcOut">When this method returns, contains a pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <paramref name="pformatectIn" />. The caller must allocate this structure and the GetCanonicalFormatEtc method must fill in the data. To retrieve data in a subsequent call, such as <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" />, the caller uses the supplied value of <paramref name="pformatetcOut" />, unless the value supplied is null. This value is null if the method returns DATA_S_SAMEFORMATETC. The <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.tymed" /> member is not significant in this case and should be ignored. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <summary>Obtains data from a source data object. This method is called by a data consumer. It renders the data described in the specified <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure and transfers it through the specified <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure. The caller then assumes responsibility for releasing the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure.</summary>
      <param name="pformatetcIn">A reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</param>
      <param name="pRemoteMedium">When this method returns, contains a reference to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure that indicates the storage medium containing the returned data through its <see cref="F:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM.tymed" /> member, and the responsibility for releasing the medium through the value of its <see cref="F:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM.pUnkForRelease" /> member. If <see cref="F:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM.pUnkForRelease" /> is null, the receiver of the medium is responsible for releasing it; otherwise, pUnkForRelease points to the IUnknown interface on the appropriate object so its Release method can be called. The medium must be allocated and filled in by this method. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the <paramref name="pformatetcIn" /> and/or <paramref name="pRemoteMedium" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the length of the <paramref name="pformatetcIn" /> and/or <paramref name="pRemoteMedium" /> structures are zero.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <summary>Obtains data from a source data object. This method, which is called by a data consumer, differs from the <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" /> method in that the caller must allocate and free the specified storage medium.</summary>
      <param name="pFormatetc">A reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.tymed" />, and only the following <see cref="T:Microsoft.VisualStudio.OLE.Interop.TYMED" /> values are valid: TYMED_ISTORAGE, TYMED_ISTREAM, TYMED_HGLOBAL, and TYMED_FILE.</param>
      <param name="pRemoteMedium">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" />, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by this method. The caller must also free the medium. The implementation of this method must always supply a value of null for the pUnkForRelease member of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure that this parameter points to.</param>
      <exception cref="T:System.ArgumentNullException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the <paramref name="pFormatetc" /> and/or <paramref name="pRemoteMedium" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the length of the <paramref name="pFormatetc" /> and/or <paramref name="pRemoteMedium" /> structures are zero.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#QueryGetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
      <summary>Determines whether the data object is capable of rendering the data described in the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure. Objects attempting a paste or drop operation can call this method before calling <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" /> to get an indication of whether the operation will be successful.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKA subsequent call to GetData will probably be successful.DV_E_LINDEXThere is an invalid value for <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="pFormatetc" /> parameter.DV_E_TYMEDThere is an invalid <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.tymed" /> value.DV_E_DVASPECTThere is an invalid <see cref="F:Microsoft.VisualStudio.OLE.Interop.FORMATETC.dwAspect" /> value.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="pFormatetc">A reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use for the query.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)">
      <summary>Transfers data to the object that implements this method. This method is called by an object that contains a data source.</summary>
      <param name="pFormatetc">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" />  structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
      <param name="pmedium">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure, passed by reference, that defines the storage medium in which the data is being passed.</param>
      <param name="fRelease">true to specify that the data object called, which implements SetData, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and that the data object called uses the storage medium for the duration of the call only.</param>
      <exception cref="T:System.ArgumentNullException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the <paramref name="pFormatetc" /> and/or <paramref name="pmedium" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The clipboard object is not a wrapped Microsoft.VisualStudio.OLE.Interop.IDataObject and the length of the <paramref name="pFormatetc" /> and/or <paramref name="pmedium" /> structure is zero.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.SetData(System.Object)">
      <summary>Adds data to the clipboard object.</summary>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.SetData(System.String,System.Boolean,System.Object)">
      <summary>Adds data to the clipboard object.</summary>
      <param name="format">The format of the data to set. See <see cref="T:System.Windows.Forms.DataFormats" /> for predefined formats.</param>
      <param name="autoConvert">true to allow the data to be converted to another format; otherwise, false.</param>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.SetData(System.String,System.Object)">
      <summary>Adds data to the clipboard object in the specified format.</summary>
      <param name="format">The format of the data to set. See <see cref="T:System.Windows.Forms.DataFormats" /> for predefined formats.</param>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.SetData(System.Type,System.Object)">
      <summary>Adds data to the clipboard object, using the specified type as the format.</summary>
      <param name="format">The format of the data to set. See <see cref="T:System.Windows.Forms.DataFormats" /> for predefined formats.</param>
      <param name="data">The data to store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>Creates a connection between the clipboard object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following: ValueDescriptionS_OKThe advisory connection was created.E_NOTIMPLThis method is not implemented on the data object.DV_E_LINDEXThere is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="pFormatetc" /> parameter.OLE_E_ADVISENOTSUPPORTEDThe data object does not support change notification.</returns>
      <param name="pFormatetc">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
      <param name="advf">A value from the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> enumeration that specifies a group of flags for controlling the advisory connection.</param>
      <param name="adviseSink">An <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> object pointing to the advisory sink that will receive the change notification.</param>
      <param name="connection">Out parameter. When this method returns, this parameter contains a token that identifies this connection. You can use this token later to delete the advisory connection by passing it to <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#DUnadvise(System.Int32)" />. If this value is zero, the connection was not established. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#DUnadvise(System.Int32)">
      <summary>Removes a notification connection that had been previously established.</summary>
      <param name="connection">A token that specifies the connection to remove. Use the value returned by <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)" /> when the connection was originally established.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates an object that can be used to enumerate the current advisory connections.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the enumerator object is successfully instantiated or there are no connections, OLE_E_ADVISENOTSUPPORTED error if the clipboard object does not support advisory notifications, or E_OUTOFMEMROY.</returns>
      <param name="enumAdvise">Out parameter. When this method returns, this parameter contains a value from the <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> enumeration that receives the interface reference to the new enumerator object. If the implementation sets <paramref name="enumAdvise" /> to null, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>Creates an object for enumerating the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures for a data object. These structures are used in calls to <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> or <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
      <returns>This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following: ValueDescriptionS_OKThe enumerator object was successfully created.E_NOTIMPLThe direction specified by the <paramref name="direction" /> parameter is not supported.OLE_S_USEREGRequests that OLE enumerate the formats from the registry.</returns>
      <param name="direction">A value from the <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> enumeration that specifies the direction of the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Provides a standard <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that is logically equivalent to a more complex structure. Use this method to determine whether two different <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures return the same data, removing the need for duplicate rendering.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe returned FORMATETC structure is different from the one that was passed.DATA_S_SAMEFORMATETCThe FORMATETC structures are the same and a null reference is returned in the <paramref name="formatOut" /> parameter.DV_E_LINDEXThere is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="formatIn" /> parameter.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="formatIn">A reference to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call, such as <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. The <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> member is not significant in this case and should be ignored.</param>
      <param name="formatOut">When this method returns, this parameter contains a pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <paramref name="pformatectIn" />. The caller must allocate this structure, and the GetCanonicalFormatEtc method must fill in the data. To retrieve data in a subsequent call, such as <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, the caller uses the supplied value of <paramref name="pformatetcOut" />, unless the value supplied is null. This value is null if the method returns DATA_S_SAMEFORMATETC. The <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> member is not significant in this case and should be ignored. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. This method is called by a data consumer. It renders the data described in the specified <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure and transfers it through the specified <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure. The caller then assumes responsibility for releasing the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure.</summary>
      <param name="format">A reference to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</param>
      <param name="medium">When this method returns, this parameter contains a reference to the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that indicates the storage medium containing the returned data through its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> member, and the responsibility for releasing the medium through the value of its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> is null, the receiver of the medium is responsible for releasing it; otherwise, pUnkForRelease points to the IUnknown interface on the appropriate object so that its Release method can be called. The medium must be allocated and filled in by this method. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. This method, which is called by a data consumer, differs from the <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> method in that the caller must allocate and free the specified storage medium.</summary>
      <param name="format">A reference to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, and only the following <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> values are valid: TYMED_ISTORAGE, TYMED_ISTREAM, TYMED_HGLOBAL, or TYMED_FILE.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by this method. The caller must also free the medium. The implementation of this method must always supply a value of null for the pUnkForRelease member of the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that this parameter points to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Determines whether the data object is capable of rendering the data described in the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure. Objects attempting a paste or drop operation can call this method before calling <see cref="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> to get an indication of whether the operation will be successful.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKA subsequent call to GetData will probably be successful.DV_E_LINDEXThere is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="format" /> parameter.DV_E_TYMEDThere is an invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> value.DV_E_DVASPECTThere is an invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> value.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="format">A reference to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use for the query.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ClipboardObject.System#Runtime#InteropServices#ComTypes#IDataObject#SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>Transfers data to the object that implements this method. This method is called by an object that contains a data source.</summary>
      <param name="formatIn">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
      <param name="medium">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure, passed by reference, that defines the storage medium in which the data is being passed.</param>
      <param name="release">true to specify that the data object called, which implements SetData, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and that the data object called uses the storage medium for the duration of the call only.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand">
      <summary>Enables executing data commands in an asynchronous manner.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand" /> class. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand" /> object with an <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object that is set on the inherited <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1" /> object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object that is set on the inherited <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1" />  object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.CancelAsync(System.Object)">
      <summary>Cancels the asynchronous call, returning immediately.</summary>
      <param name="userState">A unique operation ID for the operation to cancel. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveParametersAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32,System.Object)">
      <summary>Derives, in an asynchronous manner, a set of parameters for use with a specified command.</summary>
      <param name="command">Command for which the parameters are derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">A unique identifier for the asynchronous process.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> or the <paramref name="userState" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveParametersCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveParametersAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveSchemaAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>Derives, in an asynchronous manner, the schema of the specified command.</summary>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> or <paramref name="userState" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveSchemaCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.DeriveSchemaAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>Executes a command in an asynchronous manner.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> or the <paramref name="userState" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteWithoutResultsAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>Executes, in an asynchronous manner, a command that does not return any results beyond an integer value indicating status.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> or the <paramref name="userState" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteWithoutResultsCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.ExecuteWithoutResultsAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnCancel(System.Object)">
      <summary>Dispatches the asynchronous cancel operation to the appropriate synchronous method.</summary>
      <param name="userState">The unique identifier of an asynchronous operation to cancel.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnDeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)">
      <summary>Dispatches the asynchronous derive parameters operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method call.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter that is derived from the command.</returns>
      <param name="command">Command for which the parameters are derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnDeriveParametersCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[]})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveParametersCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnDeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Dispatches the asynchronous derive schema operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method call.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnDeriveSchemaCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.DeriveSchemaCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnExecute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Dispatches the asynchronous execute operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method call.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnExecuteCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Dispatches the asynchronous execute-without-results operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnExecuteWithoutResultsCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{System.Int32})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.ExecuteWithoutResultsCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs`1" />  object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnPrepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Dispatches the asynchronous prepare operation to the synchronous <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method call.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> methods by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.OnPrepareCompleted(Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs{System.String})">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.PrepareCompleted" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataAsyncCommandCompletedEventArgs`1" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.PrepareAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)">
      <summary>Prepares, in an asynchronous manner, the specified command to be executed against the data source; the command may then be executed multiple times, with varying parameters.</summary>
      <param name="command">The command to be prepared.</param>
      <param name="commandType">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration representing the command type for the indicated command. The value specifies how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects as command parameters.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="userState">The object on which this method calls back as the command progresses.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.PrepareCompleted">
      <summary>Occurs when the <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand.PrepareAsync(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32,System.Object)" /> command is completed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataClientObject`1">
      <summary>Represents a client wrapper object that interacts with an underlying provider object.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataClientObject`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.Create(System.IServiceProvider,`0)">
      <summary>Creates a new data client object.</summary>
      <returns>The data client object of the specified generic type.</returns>
      <param name="serviceProvider">The service provider.</param>
      <param name="providerObj">The underlying provider object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.GetInstanceOfType(System.Type)">
      <summary>Retrieves an instance of the specified support entity.</summary>
      <returns>An instance of the specified support entity.</returns>
      <param name="type">The type of the support entity to get an instance of.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.Microsoft#VisualStudio#Data#Core#IVsDataClientObject{T}#Initialize(`0)">
      <summary>Initializes the data client object with the specified provider.</summary>
      <param name="providerObj">The provider to initialize the data client with.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.ProviderObject">
      <summary>Gets the underlying provider object.</summary>
      <returns>The underlying provider object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataClientObject`1.System#IServiceProvider#GetService(System.Type)">
      <summary>Retrieves the service corresponding to the service type specified.</summary>
      <returns>A service object that corresponds to the service type specified.</returns>
      <param name="serviceType">The type of service to return.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataCommand">
      <summary>Provides the ability to build and execute data commands of various types against data sources, and to retrieve read-only results or a command status code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataCommand" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataCommand" /> class together with a data connection object.</summary>
      <param name="connection">A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> connection object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.CreateParameter">
      <summary>Creates a parameter object that can be passed into the <see cref="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />, <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />, <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />, or <see cref="M:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])" /> methods on a <see cref="T:Microsoft.VisualStudio.Data.Framework.DataCommand" /> instance.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> object instance.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String)">
      <summary>Derives the parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter that is derived from the command.</returns>
      <param name="command">A command from which to derive parameters specific to a data source. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Derives the parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter derived from the command.</returns>
      <param name="command">A command from which to derive parameters specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)">
      <summary>Derives the parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects. Each object represents a parameter derived from the command.</returns>
      <param name="command">A command from which to derive parameters specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the parameter derivation and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String)">
      <summary>Derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema that is specific to a data source. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Derives the schema returned from a specified command. The schema indicates the layout of items and blocks in a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema specific to a data source. </param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String)">
      <summary>Executes a specified command and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Executes a specified command and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Executes a specified command, optionally with parameters, and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters, and returns read-only results.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String)">
      <summary>Executes a command but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Executes a command but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>A DDEX provider–specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String)">
      <summary>Prepares the specified command on the data source to be executed; the command can then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> method by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Prepares the specified command on the data source to be executed; the command can then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> method by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Prepares the specified command on the data source to be executed; the command can then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> method by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Prepares the specified command on the data source to be executed; the command can then be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Framework.DataParameter[],System.Int32)" /> method by using the command type <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The type of the command that specifies how to interpret the contents of the <paramref name="command" /> parameter. The command type could either be a value from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration or a custom command type defined by a provider, which can be passed in by forcing a cast from an integer to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> enumeration.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects representing the command parameters for the specified command type.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite time-out; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="commandTimeout" /> parameter is less than -1.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1">
      <summary>Represents a base implementation of the <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataClientObject`1" /> interface for data connection services.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1.Connection">
      <summary>Gets the current data connection associated with the data client service.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the connection to the data source.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1.Create(`0,Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Creates an instance of the specified type for the given provider and data connection.</summary>
      <returns>An instance of the client object of the specified type.</returns>
      <param name="providerObj">The data provider associated with the client object.</param>
      <param name="connection">The data connection associated with the client object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionClientService`1.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the site.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the site.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer">
      <summary>Provides the ability to compare data connection properties for equivalence.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer.AreEquivalent(Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties)">
      <summary>Compares the specified connection property objects to determine whether they are equivalent and hence provide the same design-time experience.</summary>
      <returns>true if both connection objects are equivalent; otherwise, false.</returns>
      <param name="connectionProperties1">The first <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties" /> object containing the connection properties to compare.</param>
      <param name="connectionProperties2">The second <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties" /> object containing the connection properties to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer.AreEquivalent(System.String,System.String)">
      <summary>Compares the specified connection strings to determine whether they are equivalent and hence provide the same design-time experience.</summary>
      <returns>true if both connection strings are equivalent; otherwise, false.</returns>
      <param name="connectionString1">The first connection string to compare.</param>
      <param name="connectionString2">The second connection string to compare.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString1" /> or the <paramref name="connectionString2" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionEquivalencyComparer.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the data source.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSource" /> object representing the data source.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog">
      <summary>Represents a dialog box that can prompt the user for information when a data connection is being opened.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.ConnectionSupport">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> object on which the data provider should update the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ConnectionString" /> property.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> object instance on which the DDEX provider should update the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ConnectionString" /> property.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.ConnectionUIProperties">
      <summary>Gets the current <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties" /> object instance used in this class.</summary>
      <returns>The current <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties" /> object instance used in this class.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.CreateConnectionUIProperties">
      <summary>Creates a new <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties" /> object instance.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionUIProperties" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.LoadProperties">
      <summary>Loads properties from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> current object instance used in this class into the dialog box controls.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the current instance of the service provider object used in this class.</summary>
      <returns>The current instance of the service provider object used in this class.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
      <summary>Handles specific actions that occur when the dialog box is closed, such as saving properties from the dialog box controls, saving the new connection string, and opening the connection if the OK button of the dialog box is clicked.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.FormClosingEventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.OnLoad(System.EventArgs)">
      <summary>Loads properties from the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> current object instance used in this class into the dialog box controls.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> object containing the load event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.SaveProperties">
      <summary>Saves properties from the prompt dialog box to the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> current object instance used in this class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.ServiceProvider">
      <summary>Gets the current instance of the service provider object used in this class.</summary>
      <returns>The current instance of the service provider object used in this class.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog.ShowDialog(Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport)">
      <summary>Displays the prompt dialog box, given a specific <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> instance.</summary>
      <returns>A string that is the new value of the connection string containing the completed information that was entered by the user.</returns>
      <param name="connectionSupport">An instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> class that contains an existing, incomplete connection string that should be updated by this dialog box.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionSupport" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties">
      <summary>Provides support for the parsing and formatting of connection strings containing data connection properties, as well as for strongly typed property storage, custom attributes, and synonyms.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.#ctor">
      <summary>Initializes a non-parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> class that provides the ability to compare property names.</summary>
      <param name="keyComparer">A comparer of property names.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Char,System.Char)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> class that provides the ability to compare property names.</summary>
      <param name="keyComparer">A comparer of property names.</param>
      <param name="keyValueSeparator">A character designating the separation between a key and a value.</param>
      <param name="entrySeparator">A character designating the separation between the key/value pairs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Add(System.String,System.Object)">
      <summary>Adds a new property to the current connection properties collection.</summary>
      <param name="key">Name of the property being added.</param>
      <param name="value">Value of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The data connection properties are not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Add(System.String,System.Type,System.Object)">
      <summary>Adds a new property to the current connection properties collection.</summary>
      <param name="key">Name of the property being added.</param>
      <param name="type">A <see cref="T:System.Type" /> object representing the type of the property.</param>
      <param name="value">Value of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The data connection properties are not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.AddProperty(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Dynamically adds a new property to the collection of properties natively recognized by the current instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> class.</summary>
      <returns>The descriptor of the newly added property.</returns>
      <param name="descriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object that provides a description of this property and its characteristics.</param>
      <param name="attributes">A set of attributes to apply to the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="descriptor" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.AddProperty(System.String,System.Type,System.Attribute[])">
      <summary>Dynamically adds a new property to the collection of properties natively recognized by this data connection properties instance.</summary>
      <returns>The descriptor of the newly added property.</returns>
      <param name="name">The property name.</param>
      <param name="type">The data type of the property.</param>
      <param name="attributes">A set of attributes to attach to the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> and/or <paramref name="type" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The specified property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Tests whether a specified property and its values are present in the current set of connection properties.</summary>
      <returns>true if the specified property and its value are found in the current connection properties collection; otherwise, false.</returns>
      <param name="item">A key/value pair containing the key and value whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ContainsKey(System.String)">
      <summary>Tests whether a specified property is a member of the current set of connection properties.</summary>
      <returns>true if the specified property is a member of the connection properties collection; otherwise, false.</returns>
      <param name="key">Name of the property whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the current set of connection properties and their values to the specified array, starting at the specified array index.</summary>
      <param name="array">Array into which the connection property's key/value pairs are copied.</param>
      <param name="arrayIndex">The index in the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Count">
      <summary>Gets the number of existing data connection properties.</summary>
      <returns>The number of existing data connection properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetKeyAsString(System.String)">
      <summary>Formats a property key for placement in a connection string.</summary>
      <returns>The value of the specified property key in a string format suitable for placement in a connection string.</returns>
      <param name="key">The key value to format.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetProperties">
      <summary>Retrieves the collection of descriptors of all currently known properties.</summary>
      <returns>The collection of descriptors of all currently known properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetProperties(System.Attribute[])">
      <summary>Retrieves the collection of descriptors of currently known properties that match a specified set of attributes.</summary>
      <returns>A collection of descriptors of currently known properties that match a specified set of attributes.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter to define which properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetProperty(System.String)">
      <summary>Retrieves the descriptor of a property with the specified property name.</summary>
      <returns>A descriptor of a property with the specified property name, or null if no property with the specified name is found.</returns>
      <param name="name">The name of a property for which to retrieve the descriptor.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetSynonyms(System.String)">
      <summary>Retrieves an array list of synonyms for a specified property.</summary>
      <returns>A list of synonyms for a specified property.</returns>
      <param name="key">The name of a property for which to retrieve the list of synonyms.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.GetValueAsString(System.String)">
      <summary>Formats a property value for placement in a connection string.</summary>
      <returns>The value of the specified property in a string format suitable for placement in a connection string.</returns>
      <param name="key">The name of a property to be formatted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance to its default state, and then sets each property in the specified dictionary.</summary>
      <param name="properties">A dictionary of property name/value pairs with which the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance is configured. This parameter may be null, in which case no properties are configured.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.InitializeProperties">
      <summary>Initializes the set of natively recognized properties for the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.InitializeSynonyms">
      <summary>Initializes the set of synonyms available for each natively recognized property in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.InitializeValue(System.String,System.Object)">
      <summary>Initializes the value of a specified connection property.</summary>
      <param name="key">The name of a property being initialized.</param>
      <param name="value">The value to which the property is initialized.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.InitializeValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes values for a specified set of properties, using a dictionary of name/value pairs.</summary>
      <param name="values">A dictionary of property name/value pairs.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.IsComplete">
      <summary>Gets a Boolean value indicating whether a given connection string is complete.</summary>
      <returns>true if the connection string is complete; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.IsExtensible">
      <summary>Gets or sets a Boolean value indicating whether the DDEX provider connection properties are extensible.</summary>
      <returns>true if the connection properties are extensible; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.IsSensitive(System.String)">
      <summary>Indicates whether a property contains sensitive information.</summary>
      <returns>true if the property contains sensitive information; otherwise, false.</returns>
      <param name="key">The name of the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Item(System.String)">
      <summary>Gets or sets a value for a specified property of the DDEX provider.</summary>
      <returns>The value associated with the specified property name: DBNull.Value if the property is known but is not set (and has no default), or null if the property is not known.</returns>
      <param name="key">The name of a connection property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">The specified value of a property value cannot be converted to the property type.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Keys">
      <summary>Gets a collection of the current property key names.</summary>
      <returns>A collection of the current property key names.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ModifyProperty(System.String,System.Attribute[])">
      <summary>Modifies an existing property of which the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance is natively aware.</summary>
      <param name="name">The name of a property.</param>
      <param name="attributes">A set of attributes that should be added or modified.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.PropertyChanged" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnection.PropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.OrderedProperties">
      <summary>Gets a collection of property names specifying a reasonable (or necessary) order for the properties when represented in string form.</summary>
      <returns>A collection of property names indicating a reasonable (or necessary) order for the properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Parse(System.String)">
      <summary>Disassembles the components of a connection string into a set of properties in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</summary>
      <param name="connectionString">A connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.PropertyChanged">
      <summary>Occurs on the occurrence of a change to a connection property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ReadKeyFromString(System.String,System.Int32@)">
      <summary>Reads a property key name from a connection string starting at a specified index, and then updates the index to point to a position immediately following the property key name.</summary>
      <returns>The substring of the <paramref name="connectionString" /> parameter that represents the property key name, between the input starting index and the end of the property key name.</returns>
      <param name="connectionString">A connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties" /> instance.</param>
      <param name="index">An index in this connection string indicating where to start reading the property name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is less than zero or greater than the length of the connection string.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ReadValueFromString(System.String,System.String,System.Int32@)">
      <summary>Reads a property value from a connection string starting at a specified index, converts it to the correct type, and updates the index to point to a position following the property name.</summary>
      <returns>A substring of the <paramref name="connectionString" /> parameter representing the property value between the input starting index and the end of the property name, converted to the correct type.</returns>
      <param name="key">The name of the property key for which a value is being read.</param>
      <param name="connectionString">The connection string from which the value should be read.</param>
      <param name="index">Index in the connection string from which to start reading the value.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> and/or <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.OutOfRangeException">The <paramref name="index" /> parameter is less than zero or greater than the length of the connection string.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Remove(System.String)">
      <summary>Removes a property from the current connection property collection.</summary>
      <returns>true if property is removed; false if the property is not found.</returns>
      <param name="key">Name of the property to be removed from the current set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The data connection properties are not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property cannot be removed because it was not found in the list of extended properties.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.RemoveProperty(System.String)">
      <summary>Removes a natively recognized property from the current collection of properties.</summary>
      <param name="name">The name of a property to be removed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Reset">
      <summary>Resets the values of connection properties to an initial state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Reset(System.String)">
      <summary>Removes the specified property from the current set of data connection properties.</summary>
      <returns>true if the property was removed; false if the property is not found.</returns>
      <param name="key">The name of the property key for the property to be reset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ResolveProperty(System.String,System.Boolean)">
      <summary>Looks up the specified property in the list of synonyms and optionally makes this property the primary name for the synonyms collection, if it is not already so.</summary>
      <returns>The specified property as a <see cref="T:System.ComponentModel.PropertyDescriptor" /> object, if it is found in the synonyms list; otherwise, null.</returns>
      <param name="name">The property name of the property to resolve.</param>
      <param name="setAsBaseName">A Boolean value indicating whether to make this property the primary name used as a key into the synonyms collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.SetPropertySynonyms(System.String,System.String[])">
      <summary>Sets or clears the synonyms for the specified property.</summary>
      <param name="baseName">The primary property name used as a key into the synonyms collection.</param>
      <param name="synonyms">Array containing the synonyms corresponding to the primary property name, or null to clear the synonyms for the given property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ShouldPersistProperty(System.String)">
      <summary>Indicates whether a property should be persisted when building a connection string.</summary>
      <returns>false if the specified property is not recognized, is not set, or if it is set to the default value; otherwise, true.</returns>
      <param name="name">The name of a property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds an element as a key/value pair to the current set of connection properties.</summary>
      <param name="item">The key/value pair to add to the dictionary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all elements from the current set of connection properties.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a Boolean value indicating whether the current <see cref="T:System.Collections.Generic.ICollection`1" /> instance is read-only.</summary>
      <returns>true if the current <see cref="T:System.Collections.Generic.ICollection`1" /> instance is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the specified property from the current set of connection properties.</summary>
      <returns>true if property is removed successfully; false if the property is not found.</returns>
      <param name="item">The key for the element to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.Generic.KeyValuePair{System.String,System.Object}" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.Generic.KeyValuePair{System.String,System.Object}" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an <see cref="T:System.Collections.IEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Retrieves a collection of custom attributes for the specified object.</summary>
      <returns>An AttributeCollection instance containing the attributes for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Retrieves the class name of the specified object.</summary>
      <returns>The class name of the object, or null if the class does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Retrieves the name of the specified object.</summary>
      <returns>The name of the object, or null if the object does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Retrieves a type converter for the specified object.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> appropriate for the specified object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Retrieves the default event for the specified object.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptor" /> representing the default event for the specified object, or null if this object does not have events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Retrieves the default property for the specified object.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the default property for this object, or null if this object does not have properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Retrieves an editor of the specified type for this object.</summary>
      <returns>An object of the specified type that is the editor for this object, or null if the editor cannot be found.</returns>
      <param name="editorBaseType">A managed <see cref="T:System.Type" /> representing the editor for this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Retrieves the events for the specified instance of a component.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> object representing the events for the specified component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Retrieves the events for this instance of a component, using the specified attribute array as a filter.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection representing the filtered events for the specified component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Retrieves the properties for the specified instance of a component.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection representing the properties for this component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Retrieves the properties for the specified instance of a component, using the attribute array as a filter.</summary>
      <returns>A collection of descriptors of currently known properties that match a specified set of attributes.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter to define which properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retrieves an object that contains the property described by the specified property descriptor.</summary>
      <returns>An <see cref="T:System.Object" /> representing the owner of the specified property.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the property whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ToDisplayString">
      <summary>Retrieves a string representation of the current set of data connection properties that are suitable for on-screen display.</summary>
      <returns>A string representation of the current set of data connection properties that are suitable for on-screen display.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ToSafeString">
      <summary>Retrieves a string representation of the current set of data connection properties that excludes sensitive properties or properties that should not be persisted.</summary>
      <returns>A string representation of the current set of data connection properties that excludes sensitive properties or properties that should not be persisted.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.ToString">
      <summary>Retrieves the default string representation of the current connection properties.</summary>
      <returns>A default string representation of the current connection properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.TryGetValue(System.String,System.Object@)">
      <summary>Retrieves the value of the specified property.</summary>
      <returns>true if the property is found; otherwise, false.</returns>
      <param name="key">The property name to retrieve the value for.</param>
      <param name="value">When this method returns, contains the value that corresponds to the specified property. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionProperties.Values">
      <summary>Retrieves a collection of the current property values.</summary>
      <returns>A collection of the current property values.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport">
      <summary>Provides properties and methods that enable you to work directly with connections to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Close">
      <summary>Closes the specified connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ConnectionString">
      <summary>Gets or sets a string representation of information required to establish a specified data source connection.</summary>
      <returns>A string representation of the data source connection information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ConnectionTimeout">
      <summary>Gets or sets the amount of time to wait when establishing a connection before terminating the attempt and generating a timeout error.</summary>
      <returns>An integer representation of the allowable timeout period.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.CreateService(System.ComponentModel.Design.IServiceContainer,System.Type)">
      <summary>Creates a new service object, specifying the interface service type.</summary>
      <returns>A new service object for the specified type.</returns>
      <param name="container">A service provider object to contain the service.</param>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service to create.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Dispose">
      <summary>Releases all resources held by the data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Dispose(System.Boolean)">
      <summary>Releases all resources held by the data connection.</summary>
      <param name="disposing">Indication of whether both managed and unmanaged resources are to be released (true), or unmanaged resources only (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Finalize">
      <summary>Releases all resources held by the data connection when the data connection support object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Initialize(System.Object)">
      <summary>Initializes the specified connection, optionally from an existing data provider object.</summary>
      <param name="providerObj">An existing data provider object, or null if a new object needs to be created.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.MessageReceived">
      <summary>Occurs when a message is received from the data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.OnMessageReceived(Microsoft.VisualStudio.Data.Services.DataConnectionMessageReceivedEventArgs)">
      <summary>Handles the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.MessageReceived" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.OnStateChanged(Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs)">
      <summary>Handles the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.StateChanged" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.Open(System.Boolean)">
      <summary>Opens the specified data connection.</summary>
      <returns>true if the connection opened successfully and does not require a prompt; false if the connection is missing required connection information and a prompt should be displayed to obtain the missing information from the user. You should return false only when a provider has implemented the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionPromptDialog" /> interface.</returns>
      <param name="doPromptCheck">Indicates whether the call to this method should return false for specific errors that relate to missing connection information, as opposed to simply throwing an error in all cases of failure. Data providers that do not implement a prompt dialog box (or have their own prompting mechanism) should ignore this parameter and always assume a value of false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ProviderObject">
      <summary>Gets the underlying data provider, which supports the current data connection.</summary>
      <returns>The underlying data provider object for the current data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.ServiceProvider">
      <summary>Gets the global Visual Studio service provider.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the global Visual Studio service provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.State">
      <summary>Gets the state of the data connection.</summary>
      <returns>The state of the data connection, based on the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionState" /> enumeration.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataConnectionSupport.StateChanged">
      <summary>Occurs when the state of the data connection has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector">
      <summary>Provides the ability to customize the behavior of opening a connection when in the context of a connection UI (for example, the data connection dialog box).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector.Connect(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Opens the data connection in the context of a connection UI (for example, the data connection dialog box).</summary>
      <param name="connection">A data connection object representing the connection to the data source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connection" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the site.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the site.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIConnector.ServiceProvider">
      <summary>Gets the service provider.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the service provider.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl">
      <summary>Enables a custom UI control for editing connection properties in the Data Connection dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.#ctor">
      <summary>Initializers a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.Control">
      <summary>Gets the current user control as a <see cref="T:System.Windows.Forms.UserControl" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.UserControl" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.LoadProperties">
      <summary>Loads the properties of controls on the Data Connection dialog box, such as the data source, user ID, password, and initial catalog.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets or sets the service provider on this <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1" /> object.</summary>
      <returns>A service provider <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.ServiceProvider">
      <summary>Gets the current instance of the <see cref="T:System.IServiceProvider" /> object.</summary>
      <returns>The current instance of the <see cref="T:System.IServiceProvider" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.Site">
      <summary>Gets or sets the connection UI properties.</summary>
      <returns>The connection UI properties.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataConnectionUIControl.SiteChanged">
      <summary>Occurs when the site, that is, the connection UI properties, has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataDefaultObject">
      <summary>Provides a way to create default instances of provider objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataDefaultObject.Create``1(System.IServiceProvider)">
      <summary>Creates a data provider.</summary>
      <returns>The data provider of the specified generic type.</returns>
      <param name="serviceProvider">The service provider.</param>
      <typeparam name="T">The type of the parameter.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataMappedObject">
      <summary>Represents a well-known concept for use by a generic designer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMappedObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.ComputeBaseObject">
      <summary>Computes the base object.</summary>
      <returns>The base object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.GetProperty``1(System.String)">
      <summary>Retrieves the value of the specified property associated with the current generic concept.</summary>
      <returns>The property value of the generic type corresponding to the given property name.</returns>
      <param name="name">The name of the property to retrieve.</param>
      <typeparam name="T">The parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.GetProperty``1(System.String,``0)">
      <summary>Retrieves the value of the specified property associated with the current generic concept.</summary>
      <returns>The property value of the generic type corresponding to the given property name.</returns>
      <param name="name">The name of the property to retrieve.</param>
      <param name="defaultValue">The default value of the property to retrieve.</param>
      <typeparam name="T">The parameter.</typeparam>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Identifier">
      <summary>Gets the list of identifiers that uniquely identify the current generic data concept.</summary>
      <returns>The list of identifiers that uniquely identify the current generic data concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.IsDeleted">
      <summary>Gets a value indicating whether the current generic data concept is deleted.</summary>
      <returns>true if the concept is deleted; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.IsRefreshedObject">
      <summary>Gets a value indicating whether the current generic data object is refreshed, and thus has updated information.</summary>
      <returns>true if the current generic data object is refreshed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the site.</summary>
      <returns>The site.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Name">
      <summary>Gets the name of the generic concept.</summary>
      <returns>The name of the generic concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Properties">
      <summary>Gets name/value pairs containing the property names and values associated with the current generic concept.</summary>
      <returns>A collection of name/value pairs containing the property names and values associated with the current generic concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Selector">
      <summary>Gets a selector object that allows the retrieval of data source–specific metadata from the data object support XML file.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector" /> object that allows the retrieval of data source–specific metadata from the data object support XML file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObject.ToString">
      <summary>Gets a string representing the current generic concept.</summary>
      <returns>A string representation of the current generic concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.Type">
      <summary>Gets the type name as a string of the current generic concept.</summary>
      <returns>The type name as a string of the current generic concept.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMappedObject.UnderlyingObject">
      <summary>Gets the underlying object that is contained by the current generic concept.</summary>
      <returns>The underlying object that is contained by the current generic concept.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter">
      <summary>Provides the ability to convert restrictions passed to the mapped object selector into underlying restrictions to pass to the data source–specific type selector, thus allowing mapped selection. Also allows conversion of members of an underlying data object to members of a mapped object, resulting in mapped representations of data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter" /> class, along with a data connection.</summary>
      <param name="connection">A connection object representing the communication to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.ConvertToMappedMember(System.String,System.String,System.Object[])">
      <summary>Converts the specified member of an underlying data object to its corresponding mapped member.</summary>
      <returns>The value of the mapped member converted from the underlying values.</returns>
      <param name="typeName">The name of the underlying type.</param>
      <param name="mappedMemberName">The name of the mapped member to convert to that belongs to the mapped type.</param>
      <param name="underlyingValues">An array containing the values stored for the data source–specific members that are to be converted to a mapped member value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.ConvertToMappedMember(System.String,System.String,System.Object[],System.Object[])">
      <summary>Converts the specified member of an underlying data object to its corresponding mapped member.</summary>
      <returns>The value of the mapped member converted from the underlying values.</returns>
      <param name="typeName">The name of the underlying type.</param>
      <param name="mappedMemberName">The name of the mapped member to convert to that belongs to the mapped type.</param>
      <param name="underlyingValues">An array containing the values stored for the data source–specific members that are to be converted to a mapped member value.</param>
      <param name="parameters">An array containing the parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.ConvertToUnderlyingRestriction(System.String,System.Int32,System.Object[])">
      <summary>Converts the specified mapped restrictions into underlying restrictions that are data source specific.</summary>
      <returns>The underlying restriction that is converted from the mapped restriction.</returns>
      <param name="mappedTypeName">The name of the mapped type.</param>
      <param name="substitutionValueIndex">Index into the array of substitution values.</param>
      <param name="mappedRestrictions">An array containing the mapped restrictions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.ConvertToUnderlyingRestriction(System.String,System.Int32,System.Object[],System.Object[])">
      <summary>Converts the specified mapped restrictions into underlying restrictions that are data source specific.</summary>
      <returns>The underlying restriction that is converted from the mapped restriction.</returns>
      <param name="mappedTypeName">The name of the mapped type.</param>
      <param name="substitutionValueIndex">Index into the array of substitution values.</param>
      <param name="mappedRestrictions">An array containing the mapped restrictions.</param>
      <param name="parameters">An array containing the parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter.Microsoft#VisualStudio#Data#Core#IVsDataSupportObject{T}#Invoke(System.String,System.Object[],System.Object[])">
      <summary>Invokes the specified method on the <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSupportObject`1" /> interface.</summary>
      <returns>The object returned by the invoked method.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="args">An array of arguments to be passed to the invoked method.</param>
      <param name="parameters">An array of parameters to be passed to the invoked method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One of the following conditions is true: The <paramref name="args" /> parameter is null; the specified method name in the <paramref name="name" /> parameter is equal to one of the following values: "GetSupportedRestrictions", "GetRequiredRestrictions", "GetExpensiveProperties", or "GetOrdering" and the number of arguments in the <paramref name="args" /> array is less than one; the method name is equal to "SelectObjects" and the number of arguments in the <paramref name="args" /> array is less than three; the method name is not valid.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand">
      <summary>Represents an extended <see cref="T:System.ComponentModel.Design.MenuCommand" /> class to support status updates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.#ctor(System.ComponentModel.Design.CommandID)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the command identifier.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.#ctor(System.ComponentModel.Design.CommandID,System.EventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the command identifier and event.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.#ctor(System.ComponentModel.Design.CommandID,System.EventHandler,System.EventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the command identifier and events.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
      <param name="statusHandler">The event to raise to convey status updates.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.Invoke">
      <summary>Invokes the menu command.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.Invoke(System.Object)">
      <summary>Invokes the menu command with the given parameter.</summary>
      <param name="arg">An optional argument for use by the command.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.Text">
      <summary>Retrieves the Text property of the menu command.</summary>
      <returns>Retrieves a <see cref="T:System.String" /> value containing the Text property of the menu command.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataMenuCommand.UpdateStatus">
      <summary>Updates the status of the command and raises the appropriate event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter">
      <summary>Provides the ability to convert data source–specific object identifiers from strings to identifier parts, and from identifier parts to strings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter" /> class, specifying a data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.BuildString(System.String,System.String[],Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>Builds a string version of an identifier.</summary>
      <returns>A string version of an identifier.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierParts">An array of identifier parts in the expected format.</param>
      <param name="format">A value from the enumeration <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" />  indicating the format of the string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.ConvertToArray(System.String,System.String)">
      <summary>Converts a formatted string identifier into its equivalent set of identifier parts.</summary>
      <returns>An array containing the separated, unformatted identifier parts as derived from the input identifier.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A data source object identifier.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.ConvertToString(System.String,System.Object[])">
      <summary>Converts a set of identifier parts into a formatted string identifier.</summary>
      <returns>A string representation made up from the identifier parts and formatted according to the default formatting option.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">An array containing a set of identifier parts for a specified object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.ConvertToString(System.String,System.Object[],Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>Converts a set of identifier parts into a formatted string identifier, using the specified formatting option.</summary>
      <returns>A string representation made up from the identifier parts and formatted as indicated by the specified formatting option.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">An array containing a set of identifier parts for a specified object.</param>
      <param name="format">A value from the enumeration <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" />  indicating the format of the string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.FormatPart(System.String,System.Object,Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>Formats a specified identifier part.</summary>
      <returns>The specified identifier part as a formatted string.</returns>
      <param name="typeName">The name of the data object type.</param>
      <param name="identifierPart">The unformatted value of an identifier part.</param>
      <param name="format">A value from the enumeration <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" />  indicating the format of the string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.SplitIntoParts(System.String,System.String)">
      <summary>Divides a string version of an identifier into a set of identifier parts converted into the expected format.</summary>
      <returns>An array of formatted identifier parts.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A data source object identifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierConverter.UnformatPart(System.String,System.String)">
      <summary>Removes formatting applied to a given identifier part.</summary>
      <returns>The unformatted equivalent of the formatted identifier part.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierPart">A formatted identifier part.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver">
      <summary>Provides the ability to expand and contract an identifier for a specified data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver" /> class, specifying the data connection object.</summary>
      <param name="connection">A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the data connection string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver.ContractIdentifier(System.String,System.Object[])">
      <summary>Contracts an identifier for a data object with the specified type and complete identifier.</summary>
      <returns>The partial, contracted unique identifier for a data object.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="fullIdentifier">A full identifier of a data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectIdentifierResolver.ExpandIdentifier(System.String,System.Object[])">
      <summary>Expands an identifier for a data object with the specified type and partial identifier.</summary>
      <returns>The complete, expanded identifier of the data object that matches the partial identifier passed in, or null if the identifier could not be expanded.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="partialIdentifier">A partial identifier of a data object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer">
      <summary>Allows you to compare two data object identifier parts or properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer" /> class with the data connection object.</summary>
      <param name="connection">A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the connection string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer.Compare(System.String,System.Object[],System.Int32,System.Object)">
      <summary>Compares one object identifier part with another specified object identifier part.</summary>
      <returns>A value less than zero if the identifier part is less than the specified value; zero if the identifier part is equal to the specified value; a value greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of the identifier type.</param>
      <param name="identifier">An array of data source object identifier parts.</param>
      <param name="identifierPart">The zero-based index into the identifier array indicating which part of the identifier to compare.</param>
      <param name="value">A value to compare the identifier part against.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="identifier" /> parameter is less than zero or greater than or equal to the number of elements in the identifier array.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer.Compare(System.String,System.String,System.Object,System.Object)">
      <summary>Compares a property of a data object with another data object property.</summary>
      <returns>A value less than zero if the identifier part is less than the specified value; zero if the identifier part is equal to the specified value; a value greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="propertyName">The name of a property to compare.</param>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectSelector">
      <summary>Enables getting data source–specific metadata about objects from the object store. The source of the object store is the data object support XML file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectSelector" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectSelector" /> class with the data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the connection to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetExpensiveProperties(System.String)">
      <summary>Retrieves a list of expensive properties from the object store.</summary>
      <returns>A list of expensive properties for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to retrieve expensive properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetExpensiveProperties(System.String,System.Object[])">
      <summary>Retrieves a list of expensive properties from the object store.</summary>
      <returns>A list of expensive properties for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to retrieve expensive properties.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One or more values in <paramref name="parameters" /> are not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetMappings(System.Object[])">
      <summary>Returns key/value pairs of mapped property names and their corresponding data source–specific property names.</summary>
      <returns>A collection of key/value pairs of mapped property names and their corresponding data source–specific property names.</returns>
      <param name="mappingParameters">An array of key/value pairs containing the mappings between the mapped property names and their corresponding parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="mappingParameters" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetOrdering(System.String)">
      <summary>Returns the ordering for the specified type as a string of comma-delimited data object names, which specifies the sort order of the data objects returned when objects are selected.</summary>
      <returns>A string of comma-delimited data object names, which specifies the sort order of the data objects returned when objects are selected for the specified type.</returns>
      <param name="typeName">The data source–specific type name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetOrdering(System.String,System.Object[])">
      <summary>Returns the ordering for the specified type as a string of comma-delimited data object names, which specifies the sort order of the data objects returned when objects are selected.</summary>
      <returns>A string of comma-delimited data object names, which specifies the sort order of the data objects returned when objects are selected for the specified type.</returns>
      <param name="typeName">The data source–specific type name.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetRequiredRestrictions(System.String)">
      <summary>Retrieves a list of the restrictions that are required when data objects are selected for the specified type.</summary>
      <returns>A list of the restrictions that are required when retrieving data objects for the current type.</returns>
      <param name="typeName">The data source–specific type name for which to get the required restrictions.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetRequiredRestrictions(System.String,System.Object[])">
      <summary>Retrieves a list of the restrictions that are required when data objects are selected for the specified type.</summary>
      <returns>A list of the restrictions that are required when retrieving data objects for the current type.</returns>
      <param name="typeName">The data source–specific type name for which to get the required restrictions.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One or more values in <paramref name="parameters" /> are not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetSupportedRestrictions(System.String)">
      <summary>Retrieves all the restrictions that are supported when data objects are selected for the specified type.</summary>
      <returns>A list of the restrictions that are supported when retrieving data objects for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to get the supported restrictions.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.GetSupportedRestrictions(System.String,System.Object[])">
      <summary>Retrieves all the restrictions that are supported when data objects are selected for the specified type.</summary>
      <returns>A list of the restrictions that are supported when retrieving data objects for the specified type.</returns>
      <param name="typeName">The data source–specific type name for which to get the supported restrictions.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One or more values in <paramref name="parameters" /> are not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.Microsoft#VisualStudio#Data#Core#IVsDataSupportObject{T}#Invoke(System.String,System.Object[],System.Object[])">
      <summary>Invokes the specified method.</summary>
      <returns>The object returned by the invoked method.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="args">The arguments to pass for the method being invoked.</param>
      <param name="parameters">An array containing parameters to pass to the specified method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">One of the following conditions is true: The <paramref name="args" /> parameter is null; the specified method name in the <paramref name="name" /> parameter is equal to "ConvertToUnderlyingRestriction" or "ConvertToMappedMember" and the number of arguments in the <paramref name="args" /> array is less than three; the method name is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.SelectObjects(System.String,System.Object[],System.String[])">
      <summary>Returns a data reader for the data objects retrieved from the object store, which are filtered by the specified restrictions and properties.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object representing a data reader for the selected data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specify null because this is not used. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSelector.SelectObjects(System.String,System.Object[],System.String[],System.Object[])">
      <summary>Returns a data reader for the data objects retrieved from the object store, which are filtered by the specified restrictions, properties, and parameters.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object representing a data reader for the selected data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specify null because this is not used. </param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataObjectSupport">
      <summary>Enables you to retrieve an XML stream that describes a set of data object types on a data source, which you can then interpret and manipulate programmatically.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectSupport" /> class with an XML resource stored in a managed assembly.</summary>
      <param name="resourceName">The name of the managed resource.</param>
      <param name="assembly">The managed assembly that contains the resource.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataObjectSupport.#ctor(System.String,System.String)">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectSupport" /> class with an XML resource that is stored as a file at a specific file path on disk.</summary>
      <param name="fileName">The unqualified name of the file.</param>
      <param name="path">The path to the file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataParameter">
      <summary>Represents a data parameter that is derived from a data source command, or that is passed with a command to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataParameter" /> class, specifying whether the instance was derived using the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</summary>
      <param name="isDerived">Indicates whether this data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.DefaultSize">
      <summary>Gets an integer value specifying the default size for the current parameter type.</summary>
      <returns>The default size for the current parameter type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Descriptor">
      <summary>Gets information that describes the data parameter.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor" /> object describing the data parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Direction">
      <summary>Gets or sets a <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> object specifying the direction of the parameter.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> object specifying the direction of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetDirectionCore">
      <summary>Retrieves the parameter direction.</summary>
      <returns>The parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetIsNullableCore">
      <summary>Retrieves a Boolean value indicating whether the current parameter can be null.</summary>
      <returns>true if the current parameter can have a null value; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetIsOptionalCore">
      <summary>Retrieves a Boolean value indicating whether the parameter is optional.</summary>
      <returns>true if the parameter is optional; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetNameCore">
      <summary>Retrieves the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetSizeCore">
      <summary>Retrieves an integer value specifying the size of the parameter.</summary>
      <returns>The size of the parameter as an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetTypeCore">
      <summary>Retrieves the data source–specific type of the parameter.</summary>
      <returns>The data source–specific type of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetTypeFrom(System.Object)">
      <summary>Infers the data source–specific parameter type from a parameter value.</summary>
      <returns>The data source–specific type, or null if the value type is not supported.</returns>
      <param name="value">A candidate parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.GetValueCore">
      <summary>Retrieves the value of a specified parameter.</summary>
      <returns>The value of the specified parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Descriptor" /> property.</summary>
      <returns>true if the data parameter has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.IsDerived">
      <summary>Gets a Boolean value that indicates whether the current parameter was derived from the data source.</summary>
      <returns>true if the specified parameter was derived from the data source; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.IsFixedSize">
      <summary>Gets a Boolean value indicating whether the size for the current parameter type is fixed.</summary>
      <returns>true if the size is fixed for the current parameter type; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.IsNullable">
      <summary>Gets a Boolean value indicating whether the current parameter can have a null value provided that it is derived.</summary>
      <returns>true if this parameter can have a null value; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">This parameter is not derived.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.IsOptional">
      <summary>Gets a Boolean value indicating whether the current parameter is optional, provided that it is derived.</summary>
      <returns>true if this parameter is optional; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The parameter is not derived.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.IsSupportedDirection(Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection)">
      <summary>Retrieves a Boolean value indicating whether the specified parameter direction is supported.</summary>
      <returns>true if the specified parameter direction is supported; otherwise, false.</returns>
      <param name="direction">A parameter direction, as defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.IsValidType(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified data source–specific type is a valid type.</summary>
      <returns>true if the specified data source–specific type is a valid type; otherwise, false.</returns>
      <param name="type">A data source–specific data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Name">
      <summary>Gets or sets the string literal name of the current parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataParameter.NullSize">
      <summary>A public size constant holding the value of zero.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnDirectionChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Direction" /> property is changed to signal a change in the parameter direction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnDirectionChanging(Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Direction" /> property is about to change.</summary>
      <param name="value">The value that the property <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Direction" /> will be set to, from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</param>
      <exception cref="T:System.ArgumentException">The parameter direction is Unknown or is not supported.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnNameChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Name" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnNameChanging(System.String)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Name" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Name" /> property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnSizeChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Size" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnSizeChanging(System.Int32)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Size" /> property is about to change.</summary>
      <param name="value">The value to which the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Size" /> property will be set.</param>
      <exception cref="T:System.InvalidOperationException">The parameter direction is In or the parameter size is fixed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameter size is less than zero.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnTypeChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Type" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnTypeChanging(System.String)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Type" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Type" /> property will be set to.</param>
      <exception cref="T:System.ArgumentException">The parameter type is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnValueChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Value" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.OnValueChanging(System.Object)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Value" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Value" /> property will be set to.</param>
      <exception cref="T:System.InvalidOperationException">The parameter direction is Out or ReturnValue while the <paramref name="value" /> parameter is not null.</exception>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="value" /> parameter is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.Parse(System.String)">
      <summary>Disassembles a parameter value in a string format and converts the value to the correct type.</summary>
      <param name="value">A string representation of a parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetDirectionCore(Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection)">
      <summary>Sets the direction of the parameter by using the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</summary>
      <param name="value">A specific data parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetNameCore(System.String)">
      <summary>Sets the name of the parameter.</summary>
      <param name="value">The string literal parameter name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetSizeCore(System.Int32)">
      <summary>Sets an integer value specifying the size of the current parameter.</summary>
      <param name="value">An integer specifying size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetTypeCore(System.String)">
      <summary>Sets the data type of the current parameter.</summary>
      <param name="value">A parameter data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.SetValueCore(System.Object)">
      <summary>Sets the value of the parameter.</summary>
      <param name="value">An object value to which the parameter is set.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Size">
      <summary>Gets or sets an integer value specifying the size of the parameter.</summary>
      <returns>The size of the parameter as an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.ToString">
      <summary>Retrieves a string representation of the value of the current parameter.</summary>
      <returns>A string representation of the value of the current parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataParameter.TryConvertValue(System.Object,System.String)">
      <summary>Attempts to convert the specified value to the specified type.</summary>
      <returns>The converted value, or null if no conversion is possible.</returns>
      <param name="value">A potential parameter value.</param>
      <param name="type">The name of a parameter type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Type">
      <summary>Gets or sets the data source–specific type of the parameter.</summary>
      <returns>Returns the data source–specific type of the parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataParameter.Value">
      <summary>Gets or sets the value of the parameter.</summary>
      <returns>The parameter value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory">
      <summary>Provides the ability to create DDEX provider implementations of support entities.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory.CreateObject(System.Type)">
      <summary>Creates an instance of the specified DDEX support entity implemented by the DDEX provider.</summary>
      <returns>An instance of the specified DDEX support entity implemented by the DDEX provider, if the DDEX provider supports it; otherwise, null.</returns>
      <param name="objType">A type of DDEX support entity.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory.GetAssembly(System.String)">
      <summary>Resolves a provider-specific assembly string to its corresponding <see cref="T:System.Reflection.Assembly" /> representation.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object representing the assembly resolved from the specified assembly string, if found; otherwise, null.</returns>
      <param name="assemblyString">A provider-specific assembly string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyString" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataProviderObjectFactory.GetType(System.String)">
      <summary>Resolves a provider-specific type name to its corresponding <see cref="T:System.Type" /> representation.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type resolved from the specified type name, if found; otherwise, null.</returns>
      <param name="typeName">A provider-specific type name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataReader">
      <summary>Provides the ability to expose data from any data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Close">
      <summary>Closes the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> instance.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.Descriptor">
      <summary>Gets information that describes the data from a data source.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> object describing the data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Dispose">
      <summary>Releases managed resources held for the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Dispose(System.Boolean)">
      <summary>Cleans up resources associated with the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> instance, both when the public <see cref="M:Microsoft.VisualStudio.Data.Framework.DataReader.Dispose" /> method is called and when the object is finalized with a call to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataReader.Finalize" /> method.</summary>
      <param name="disposing">Indicates whether this method was called from the public <see cref="M:Microsoft.VisualStudio.Data.Framework.DataReader.Dispose" />  method (as opposed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataReader.Finalize" /> method.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Finalize">
      <summary>Finalizes the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of raw binary data.</summary>
      <returns>An integer value indicating the number of bytes read into the buffer.</returns>
      <param name="index">Index in the current block of data for the item to retrieve.</param>
      <param name="buffer">An array into which specified data, as a byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">The index of the starting point in the byte array specified in the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified in the <paramref name="buffer" /> parameter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" />, <paramref name="bufferIndex" />, and/or <paramref name="length" /> parameters are invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetBytes(System.String,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of raw binary data.</summary>
      <returns>An integer value indicating the number of bytes read into the buffer.</returns>
      <param name="name">The name of the item for which to retrieve raw binary data.</param>
      <param name="buffer">An array into which specified data, as a byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">The index of the starting point in the byte array specified in the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified in the <paramref name="buffer" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItem(System.Int32)">
      <summary>Retrieves the value of the item at the specified index in the current block of data.</summary>
      <returns>Returns an integer value from the specified index in the current block of data.</returns>
      <param name="index">Index in the current block of the data item at which to retrieve the integer value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItem(System.String)">
      <summary>Retrieves the value of a data item with the specified name in the current block of data.</summary>
      <returns>The string value of the item with the specified name.</returns>
      <param name="name">The name of the data item in the current block to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemIndex(System.String)">
      <summary>Returns the index corresponding to the specified item name in the block of data.</summary>
      <returns>An integer value representing the item index.</returns>
      <param name="name">The name of the item to get the index for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves the maximum length, in characters, of data items at the specified index.</summary>
      <returns>The maximum length, in number of characters, of the data item at the specified index; or, returns -1 if the maximum length is unavailable or is not sensible.</returns>
      <param name="index">The index of the data item being examined for length.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemName(System.Int32)">
      <summary>Retrieves the name assigned to the data item at the specified index, if any.</summary>
      <returns>The name assigned to the data item at the index specified by the <paramref name="index" /> parameter, or null if no name exists.</returns>
      <param name="index">The index of the data item for which to retrieve the name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemType(System.Int32)">
      <summary>Retrieves the data type of a data item, or items, at the specified index for the default format <see cref="F:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat.Default" />.</summary>
      <returns>The data type of items at the specified index for the default format.</returns>
      <param name="index">Index of the data item for which to return data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)">
      <summary>Retrieves the data type of a data item, or items, at the specified index in a specified format.</summary>
      <returns>The data type of items at the specified index in the specified format.</returns>
      <param name="index">Index of the data item for which to return a data type.</param>
      <param name="itemTypeFormat">The format in which to return the data type information.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.HasDescriptor">
      <summary>Gets a value indicating whether the data reader exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataReader.Descriptor" /> property.</summary>
      <returns>true if the data reader has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.IsClosed">
      <summary>Gets a Boolean value that indicates whether the specified reader has been closed.</summary>
      <returns>true if the specified data reader is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.IsNullItem(System.Int32)">
      <summary>Indicates whether the data item at the specified index is unspecified, that is, null.</summary>
      <returns>true if the item is null, that is, unspecified; otherwise, false.</returns>
      <param name="index">Index of the data item to examine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.IsNullItem(System.String)">
      <summary>Indicates whether the value of the given data item is unspecified, that is, null.</summary>
      <returns>true if the item is null, that is, unspecified; otherwise, false.</returns>
      <param name="name">The name of the data item to examine.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.ItemCount">
      <summary>Gets the number of items in the current block of data.</summary>
      <returns>An integer value indicating the number of items in the current block of data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.NextResult">
      <summary>Advances the data reader to the next result set in cases where the reader contains multiple result sets.</summary>
      <returns>true if more results remain to be read and the reader was advanced to the next result; false if no more results were found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Read">
      <summary>Advances the reader to the next block of data in cases where the reader contains more than one block of data.</summary>
      <returns>true if there are more blocks of data to read.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataReader.Status">
      <summary>Gets a numerical status code returned by the method currently providing data to the data reader.</summary>
      <returns>An integer value status code from the method currently providing data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataReader.Terminate">
      <summary>Terminates the data reader immediately, without necessarily returning all of the data or setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1">
      <summary>Provides a simplified way to support communication between an object and its site in the container.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1" /> class, specifying a site generic type parameter.</summary>
      <param name="site">A generic type representing the site.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.Site">
      <summary>Gets or sets the object site.</summary>
      <returns>Returns an object instance of the site.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.Site" /> property is changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1">
      <summary>Combines the functionality of an <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1" /> object and a <see cref="T:Microsoft.VisualStudio.Data.Framework.ServiceProvider" /> object. This implementation of the <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataSiteableObject`1" /> and <see cref="T:System.IServiceProvider" /> interfaces allows access to services while supporting communication to a site.</summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1" /> class with a site.</summary>
      <param name="site">An instance of the site of the generic type T.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.Site">
      <summary>Gets or sets the site.</summary>
      <returns>The site.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataSiteableServiceProvider`1.SiteChanged">
      <summary>Occurs when the site has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSourceInformation">
      <summary>Allows you to retrieve well-defined information about a specified data source in the form of properties constructed as name/value pairs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class that provides the data connection.</summary>
      <param name="connection">The data connection to use for retrieving data source properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.AddProperty(System.String)">
      <summary>Adds a property to the list of supported properties.</summary>
      <param name="propertyName">The name of a data source information property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.AddProperty(System.String,System.Object)">
      <summary>Adds a property and its value to the list of supported properties.</summary>
      <param name="propertyName">The name of a data source information property.</param>
      <param name="value">The value for the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters that are not valid, that is, that may not appear in a generic catalog name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose use at the start of a generic catalog name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogIsSuffixed">
      <summary>Specifies the data source information property that indicates whether a catalog name is suffixed on a multi-part object identifier, as opposed to being a prefix.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a catalog name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogSeparator">
      <summary>Specifies the data source information property that indicates the character separating a catalog name from the other parts in an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogSupported">
      <summary>Specifies the data source information property that indicates whether a catalog name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CatalogSupportedInDml">
      <summary>Specifies the data source information property that indicates whether a catalog name is supported in object identifiers that appear in SQL DML clauses.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnAliasInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a column alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnAliasInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a column alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnAliasMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a column alias.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnAliasSupported">
      <summary>Specifies the data source information property that indicates whether a column alias is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a column name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a column name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a column name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ColumnSupported">
      <summary>Specifies the data source information property that indicates whether a column name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandDeriveParametersSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandDeriveSchemaSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveSchema(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandExecuteSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> and <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandParameterSupport">
      <summary>Specifies which parameter directions are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.CommandPrepareSupport">
      <summary>Specifies which types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Prepare(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.Contains(System.String)">
      <summary>Retrieves a Boolean value indicating whether a specified property is contained in this data source information instance.</summary>
      <returns>true if the specified property is contained in this data source information instance; otherwise, false.</returns>
      <param name="propertyName">The name of the property being tested.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DataSourceCulture">
      <summary>Specifies the geographical culture of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DataSourceName">
      <summary>Specifies the name of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DataSourceProduct">
      <summary>Specifies the name of the product of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DataSourceVersion">
      <summary>Specifies the version of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DateLiteralPrefix">
      <summary>Specifies the data source information property that provides the character or characters that prefix a date/time literal.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DateLiteralSuffix">
      <summary>Specifies the data source information property that provides the character or characters that suffix a date/time literal.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DefaultCatalog">
      <summary>Specifies the data source information property that provides the name of the default catalog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.DefaultSchema">
      <summary>Specifies the data source information property that provides the name of the default schema.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.GetType(System.String)">
      <summary>Retrieves the <see cref="T:System.Type" /> value indicating the type of a specified property, thus enabling appropriate conversion of a retrieved value to the correct type.</summary>
      <returns>A <see cref="T:System.Type" /> value indicating the type of a specified property.</returns>
      <param name="propertyName">The name of the property for which to get the type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IdentifierCloseQuote">
      <summary>Specifies the data source information property that provides the character used to close an identifier part that needs to be enclosed in quotation marks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IdentifierOpenQuote">
      <summary>Specifies the data source information property that provides the character used to open an identifier part that needs to be enclosed in quotation marks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IdentifierPartsCaseSensitive">
      <summary>Specifies the data source information property that indicates whether identifier parts are treated as case sensitive.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IdentifierPartsStorageCase">
      <summary>Specifies the data source information property that indicates the case of identifier parts that are stored in the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IndexInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance as an index name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IndexInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of an index name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IndexMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of an index name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.IndexSupported">
      <summary>Specifies the data source information property that indicates whether an index name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.Item(System.String)">
      <summary>Gets a data source information property with the specified name.</summary>
      <returns>The data source information property with the specified name.</returns>
      <param name="propertyName">The name of the data source information property to retrieve.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClausePercent">
      <summary>Specifies the data source information property that indicates the wildcard character used to capture zero or more characters within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClausePercentEscape">
      <summary>Specifies the data source information property that indicates the character used to escape the LikeClausePercent character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClauseUnderscore">
      <summary>Specifies the data source information property that indicates the wildcard character used to capture a single character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClauseUnderscoreEscape">
      <summary>Specifies the data source information property that indicates the character used to escape the <see cref="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.LikeClauseUnderscore" /> character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ParameterPrefix">
      <summary>Specifies the data source information property that provides the character used to prefix a parameter name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ParameterPrefixInName">
      <summary>Specifies the data source information property that indicates whether the parameter prefix should appear in the value set for the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ProcedureInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a procedure name is not valid. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ProcedureInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a procedure name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ProcedureMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a procedure name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ProcedureSupported">
      <summary>Specifies the data source information property that indicates whether a procedure name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.QuotedIdentifierPartsCaseSensitive">
      <summary>Specifies the data source information property that indicates whether identifier parts enclosed in quotation marks are treated as case sensitive.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.QuotedIdentifierPartsStorageCase">
      <summary>Specifies the data source information property that indicates the case of identifier parts enclosed in quotation marks that are stored in the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ReservedWords">
      <summary>Specifies the data source information property that provides the set of reserved words on the data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.RetrieveValue(System.String)">
      <summary>Retrieves a value for a specified data source information property.</summary>
      <returns>The value of the data source information property, or null if the property is not supported.</returns>
      <param name="propertyName">The name of the property whose value is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a schema name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a schema name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a schema name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaSeparator">
      <summary>Specifies the data source information property that indicates the character separating a schema name from the other parts of an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaSupported">
      <summary>Specifies the data source information property that indicates whether a schema name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SchemaSupportedInDml">
      <summary>Specifies the data source information property that indicates whether a schema name is supported in object identifiers that appear in SQL DML clauses.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ServerSeparator">
      <summary>Specifies the data source information property that indicates the character separating a server name from the other parts of an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsAnsi92Sql">
      <summary>Specifies the data source information property that indicates whether the data source supports the ANSI92 SQL standard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsCommandTimeout">
      <summary>Specifies the data source information property that indicates whether command timeouts are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsNestedTransactions">
      <summary>Specifies the data source information property that indicates whether transactions can be started, committed, or rolled back inside other transactions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsQuotedIdentifierParts">
      <summary>Specifies the data source information property that indicates whether identifier parts enclosed in quotation marks are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.SupportsVerifySql">
      <summary>Specifies the data source information property that indicates whether SQL verification is supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableAliasInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a table alias is not valid. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableAliasInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a table alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableAliasMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a table alias.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableAliasSupported">
      <summary>Specifies the data source information property that indicates whether a table alias is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a table name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a table name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a table name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.TableSupported">
      <summary>Specifies the data source information property that indicates whether a table name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.UserInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a user name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.UserInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a user name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.UserMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a user name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.UserSupported">
      <summary>Specifies the data source information property that indicates whether a user name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ViewInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a view name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ViewInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a view name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ViewMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a view name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Framework.DataSourceInformation.ViewSupported">
      <summary>Specifies the data source information property that indicates whether a view name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer">
      <summary>Provides the ability to specialize the behavior of a DDEX provider, depending on the data source to which it is connected.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.CreateObject(System.Guid,System.Type)">
      <summary>Creates a DDEX provider–implemented object of the given type that is specialized for the specified data source.</summary>
      <returns>A specialized object of the specified type.</returns>
      <param name="source">GUID of the data source for which the provider is specialized.</param>
      <param name="objType">Data type of the provider object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.DeriveSource(System.String)">
      <summary>Determines which data source supported by the provider is represented by the given connection string.</summary>
      <returns>Returns a GUID object instance specifying the derived data source for the connection string provided, or <see cref="F:System.Guid.Empty" /> if no data source could be determined.</returns>
      <param name="connectionString">Connection string understood by the DDEX provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.GetAssembly(System.Guid,System.String)">
      <summary>Locates an assembly, given an assembly string and a data source GUID.</summary>
      <returns>An assembly.</returns>
      <param name="source">DDEX data source GUID.</param>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.GetType(System.Guid,System.String)">
      <summary>Retrieves a type definition, given a type name and a data source GUID.</summary>
      <returns>A type definition.</returns>
      <param name="source">DDEX data source GUID.</param>
      <param name="typeName">Name of the assembly to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the current instance of the service provider as a <see cref="T:System.IServiceProvider" /> object.</summary>
      <returns>The current instance of the service provider, as a <see cref="T:System.IServiceProvider" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceSpecializer.ServiceProvider">
      <summary>Retrieves the current instance of the service provider as a <see cref="T:System.IServiceProvider" /> object.</summary>
      <returns>The current instance of the service provider, as a <see cref="T:System.IServiceProvider" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer">
      <summary>Provides the means to compare two data-source-specific version strings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.#ctor(System.Collections.Generic.IComparer{System.String})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer" /> class.</summary>
      <param name="comparer">An object instance of <see cref="T:System.Collections.Generic.IComparer`1" />  to initialize this class with.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="comparer" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.Comparer">
      <summary>Gets or sets the <see cref="T:System.Collections.Generic.IComparer`1" /> object with which to perform a comparison.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IComparer`1" /> object instance.</returns>
      <exception cref="T:System.ArgumentNullException">The value to be set is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.CompareTo(System.String)">
      <summary>Compares the current data-source version in this class with the specified data-source version.</summary>
      <returns>Returns one of three integer values:Less than zero: SourceVersion is less than <paramref name="other" />.Equal to zero: SourceVersion is equal to <paramref name="other" />.Greater than zero: SourceVersion is greater than <paramref name="other" />.</returns>
      <param name="other">The version number to compare.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSourceVersionComparer.SourceVersion">
      <summary>Gets the data source version from the sited connection, if any.</summary>
      <returns>A <see cref="T:System.String" /> value representing the data source version, or null if no source version can be obtained.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier">
      <summary>Represents a utility class that provides the ability to parse and resolve data specifiers.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Alignment">
      <summary>Gets the portion of the data specifier string that represents the alignment component.</summary>
      <returns>The alignment component of the data specifier string, if any; otherwise, null.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSpecifier.FormatString">
      <summary>Gets the portion of the data specifier string that represents the formatString component.</summary>
      <returns>The formatString component of the data specifier string, if any; otherwise, null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Parse(System.String)">
      <summary>Parses a data specifier string into its components and returns a <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance containing the parsed components.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance containing the parsed components.</returns>
      <param name="specifier">A string containing the components of the data specifier to parse.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Parse(System.String,System.Int32@)">
      <summary>Parses a data specifier string, starting at the specified index, into its components and then returns a <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance containing the parsed components.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance containing the parsed components.</returns>
      <param name="s">A string containing the components of the data specifier to parse.</param>
      <param name="index">The index in the data specifier string at which to start the parsing. This parameter is passed by reference, and, therefore, when this method returns to the caller, it will retain its new value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Qualifier">
      <summary>Gets the portion of the data specifier string that represents the qualifier component.</summary>
      <returns>The qualifier component of the data specifier string, if any; otherwise, null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolve(System.String,Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolver)">
      <summary>Converts the data specifier string into its textual representation by using the specified delegate resolver method.</summary>
      <returns>The textual representation of the data specifier.</returns>
      <param name="specifier">The data specifier string to convert.</param>
      <param name="resolver">A delegate to the method that carries out the conversion of the data specifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolve(System.String,System.Int32@,Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolver)">
      <summary>Converts the data specifier string, starting at the specified index, into its textual representation by using the specified delegate resolver method.</summary>
      <returns>The textual representation of the data specifier.</returns>
      <param name="input">The data specifier string to convert.</param>
      <param name="index">The start location in the data specifier string that delimits the substring to resolve. This parameter is passed by reference, and, therefore, when this method returns to the caller, it will retain its new value.</param>
      <param name="resolver">A delegate to the method that carries out the conversion of the data specifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.ResolveAll(System.String,Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolver)">
      <summary>Converts a string of one or more data specifiers into its textual representation by using the specified delegate resolver method.</summary>
      <returns>The textual representation of all the data specifiers delimited by the original delimiter character.</returns>
      <param name="input">A string of one or more data specifiers separated by a delimiter character.</param>
      <param name="resolver">A delegate to the method that carries out the conversion of the data specifier.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Specifier">
      <summary>Gets the portion of the data specifier string that represents the specifier component.</summary>
      <returns>The specifier component of the data specifier string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSpecifier.ToString">
      <summary>Returns a string representation consisting of all the components of the specified <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object.</summary>
      <returns>A string representation consisting of all the components of the specified <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier.Resolver">
      <summary>Provides a mechanism to dispatch the call for resolving the data specifier to the appropriate method.</summary>
      <returns>An object representing the method for resolving the data specifier.</returns>
      <param name="specifier">The <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSpecifier" /> object instance on which this delegate is called.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataSupport">
      <summary>Represents the base class for all classes that provide data support XML.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSupport" /> class with an XML resource stored in a managed assembly.</summary>
      <param name="resourceName">The name of the managed resource.</param>
      <param name="assembly">The managed assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="resourceName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSupport.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataSupport" /> class with an XML resource that is stored as a file at a specific file path on disk.</summary>
      <param name="fileName">The unqualified name of the file.</param>
      <param name="path">The path to the file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileName" /> and/or <paramref name="path" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSupport.OpenSupportStream">
      <summary>Opens a stream of bytes representing the XML content.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataSupport.OpenSupportStream(System.Globalization.CultureInfo)">
      <summary>Opens a stream of bytes representing the XML content for a specified culture.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object for the specified culture.</returns>
      <param name="culture">The geographical culture (as <see cref="T:System.Globalization.CultureInfo" /> object) for which to retrieve the Stream object instance.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataTransaction">
      <summary>Enables transaction-processing, which allows you to commit or roll back a series of related operations as a batch.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataTransaction" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataTransaction" /> class, specifying a data connection.</summary>
      <param name="connection">The data connection used for communicating with the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.BeginTransaction">
      <summary>Initiates a transaction and returns the new current transaction level.</summary>
      <returns>An integer value indicating the new current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.CommitTransaction">
      <summary>Commits a transaction and returns the new current transaction level.</summary>
      <returns>An integer value indicating the new current transaction level.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataTransaction.CurrentTransactionLevel">
      <summary>Gets a numeric value indicating the current transaction level.</summary>
      <returns>An integer value specifying the current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataTransaction.RollbackTransaction">
      <summary>Rolls back, or voids, a transaction and returns the new current transaction level.</summary>
      <returns>An integer value indicating the new current transaction level.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject">
      <summary>Represents a dynamic browse object for a node in a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.#ctor">
      <summary>Initializes a new instance of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject" /> object with the base browse object.</summary>
      <param name="baseBrowseObj">An instance of browse object upon which this browse object should be based.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.BaseBrowseObject">
      <summary>Gets the base browse object upon which this browse object is based.</summary>
      <returns>The base browse object upon which this browse object is based.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetAttributes">
      <summary>Returns a collection of attributes for the current browse object.</summary>
      <returns>Returns a collection of attributes for the current browse object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetClassName">
      <summary>Retrieves the name of the class for the current browse object.</summary>
      <returns>Returns the name of the class for the current browse object, or an empty string if no class name can be found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetComponentName">
      <summary>Retrieves the component name of the current browse object.</summary>
      <returns>Returns the component name of the current browse object, or an empty string if no component name can be found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetConverter">
      <summary>Retrieves a type converter for the current browse object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.TypeConverter" /> for the current browse object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetDefaultEvent">
      <summary>Retrieves the default event for the current browse object.</summary>
      <returns>Returns the default event for the current browse object, or null if there are no events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetDefaultProperty">
      <summary>Retrieves the default property for the current browse object.</summary>
      <returns>Returns the default property for the current browse object, or null if there are no properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetEditor(System.Type)">
      <summary>Retrieves an editor for the specified base type and for the current browse object.</summary>
      <returns>An instance of the editor that can be cast to the specified editor type, or null if no editor of the requested type can be found.</returns>
      <param name="editorBaseType">A <see cref="T:System.Type" /> representing the base type of the editor to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetEvents">
      <summary>Retrieves a <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection of events for the current browse object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection containing the events for the current browse object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetEvents(System.Attribute[])">
      <summary>Retrieves a <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection of events that match the specified attributes for the current browse object.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> collection containing the events that match the specified attributes for the current browse object.</returns>
      <param name="attributes">An array of <see cref="T:System.Attribute" /> objects as a filter for the events to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetProperties">
      <summary>Retrieves a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection of properties for the current browse object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection containing the properties for the current browse object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetProperties(System.Attribute[])">
      <summary>Retrieves a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection of properties that match the specified attributes for the current browse object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> collection containing the properties that match the specified attributes for the current browse object.</returns>
      <param name="attributes">An array of <see cref="T:System.Attribute" /> objects as a filter for the properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns an object that contains the property described by the specified property descriptor.</summary>
      <returns>Returns an object that contains the property described by the specified property descriptor.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.RemoveAttributes(System.Object[])">
      <summary>Removes the attributes specified by their type identifiers.</summary>
      <param name="typeIds">An array containing unique identifiers for the types of the attributes to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.RemoveProperties(System.String[])">
      <summary>Removes all the specified properties from the current browse object.</summary>
      <param name="names">An array of property names for the properties to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetAttributes(System.Attribute[])">
      <summary>Sets the attributes for the current browse object.</summary>
      <param name="attributes">An array of <see cref="T:System.Attribute" /> objects to set or remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetClassName(System.String)">
      <summary>Sets the class name for the current browse object.</summary>
      <param name="value">The class name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetComponentName(System.String)">
      <summary>Sets the component name for the current browse object.</summary>
      <param name="value">The component name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetConverter(System.ComponentModel.TypeConverter)">
      <summary>Sets the type converter for the current browse object.</summary>
      <param name="value">A <see cref="T:System.ComponentModel.TypeConverter" /> object to set as the type converter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetDefaultEvent(System.ComponentModel.EventDescriptor)">
      <summary>Sets the default event for the current browse object.</summary>
      <param name="value">An <see cref="T:System.ComponentModel.EventDescriptor" /> object to set as the default event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetDefaultProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>Sets the default property for the current browse object.</summary>
      <param name="value">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object to set as the default property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetEditor(System.Type,System.Object)">
      <summary>Sets or removes the editor for the current browse object.</summary>
      <param name="editorBaseType">A <see cref="T:System.Type" /> representing the base type of the editor.</param>
      <param name="value">The editor to set, or null to remove the editor based on its type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetEvents(System.ComponentModel.EventDescriptor[])">
      <summary>Sets the specified events for the current browse object.</summary>
      <param name="events">An array of <see cref="T:System.ComponentModel.EventDescriptor" /> event objects to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.SetProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>Sets the specified properties for the current browse object.</summary>
      <param name="properties">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> property objects to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves the field that matches the specified binding constraints for the type of the current instance.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified binding constraints for the type of the current instance, if found; otherwise returns null.</returns>
      <param name="name">The name of the data field to get</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetFields(System.Reflection.BindingFlags)">
      <summary>Retrieves all the fields defined for the type of the current instance that match the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the type of the current instance that match the specified binding constraints, if found; otherwise returns null.</returns>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves the specified public members that match the specified binding constraints for the type of the current instance.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The name of the members to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMembers(System.Reflection.BindingFlags)">
      <summary>Retrieves all the members that match the specified binding constraints for the type of the current instance.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the type of the current instance that match the specified binding constraints. If no members are defined for the current type, or if none of the defined members match the binding constraints, returns an empty array of type <see cref="T:System.Reflection.MemberInfo" />.</returns>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves the specified method that matches the specified binding constraints for the type of the current instance.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified binding constraints for the type of the current instance, if found; otherwise, null.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints for the type of the current instance.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified binding constraints for the type of the current instance, if found; otherwise, null.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection; or null to use the <see cref="T:System.Type.DefaultBinder" />.</param>
      <param name="types">An array of <see cref="T:System." /><see cref="Type" /> objects representing the number, order, and type of the parameters for the method to get, or an empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="T:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the types array. To be used only when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetMethods(System.Reflection.BindingFlags)">
      <summary>Retrieves all the methods defined for the type of the current instance, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the methods defined for the type of the current instance that match the specified binding constraints. If no methods are defined for the type of the current instance, or if none of the defined methods match the binding constraints, returns an empty array of type <see cref="T:System.Reflection.MethodInfo" />.</returns>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetProperties(System.Reflection.BindingFlags)">
      <summary>Retrieves all the properties for the type of the current instance, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all the properties for the type of the current instance that match the specified binding constraints. If the type of the current instance does not have properties, or if none of the properties match the binding constraints, returns an empty array of type <see cref="T:System.Reflection.PropertyInfo" />.</returns>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves the specified property for the type of the current instance, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all the properties for the type of the current instance that match the specified binding constraints. If the type of the current instance does not have properties, or if none of the properties match the binding constraints, returns an empty array of type <see cref="T:System.Reflection.PropertyInfo" />.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves the specified public property whose parameters match the specified argument types and modifiers for the type of the current instance, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the specified property for the type of the current instance that matches the specified requirements, if found; otherwise, returns null.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted, or zero to return an empty array.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection; or null to use the <see cref="T:System.Type.DefaultBinder" />.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get, or an empty <see cref="T:System.Type" /> array to get a property that is not indexed.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the types array. The default binder does not process this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member using the specified binding constraints and matching the specified argument list, modifiers, and culture.</summary>
      <returns>An Object representing the return value of the invoked member.</returns>
      <param name="name">The name of the constructor, method, property, or field member to invoke, or an empty string to invoke the default member. For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitmask made up of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags, such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance |BindingFlags.Static are used.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection; or a null reference to use the <see cref="T:System.Type.DefaultBinder" />. Note that explicitly defining a Binder object may be required for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the args array.A parameter's associated attributes are stored in the member's signature. The default binder processes this parameter only when calling a COM component.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double; or null to use the current thread's CultureInfo.</param>
      <param name="namedParameters">An array containing the names of the parameters to which the values in the args array are passed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObject.System#Reflection#IReflect#UnderlyingSystemType">
      <summary>Gets the underlying type of the current browse object.</summary>
      <returns>The underlying type of the current browse object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider">
      <summary>Allows you to retrieve a specialized browse object for a specified node in a given data view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider" /> class.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.BrowseObjectChanged">
      <summary>Occurs when the browse object is changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.CreateBrowseObject(System.Int32,System.Object)">
      <summary>Retrieves a browse object for a data view node, given the specified node's item ID.</summary>
      <returns>An object representing the browse object for the specified node.</returns>
      <param name="itemId">An item ID specifying a node for which to create a custom browse object.</param>
      <param name="autoBrowseObj">A browse object automatically generated with information in the data view support XML, or null if the XML indicates that no such browse object should be generated. This allows an implementation of this method to specify most settings in XML and then provide only minor modification to the set of properties, rather than necessitating building the object from the beginning.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.OnBrowseObjectChanged(Microsoft.VisualStudio.Data.Services.SupportEntities.DataViewNodeEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataViewBrowseObjectProvider.BrowseObjectChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider">
      <summary>Provides the ability to implement commands, specifically custom commands, for nodes in a data view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.CreateCommand(System.Int32,System.ComponentModel.Design.CommandID)">
      <summary>Creates a menu command for a Server Explorer menu item.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a menu command item.</returns>
      <param name="itemId">The identifier of the item in the data view hierarchy on which this command should be invoked.</param>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.CreateCommand(System.Int32,System.ComponentModel.Design.CommandID,System.Object[])">
      <summary>Creates a menu command for a Server Explorer menu item containing the specified parameters.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a menu command item.</returns>
      <param name="itemId">The identifier of the item in the data view hierarchy on which this command should be invoked.</param>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
      <param name="parameters">An array of parameters for use with this command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.CreateSelectionCommand(System.ComponentModel.Design.CommandID)">
      <summary>Creates a selection menu command for multiple nodes in Server Explorer.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a selection menu command item.</returns>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.CreateSelectionCommand(System.ComponentModel.Design.CommandID,System.Object[])">
      <summary>Creates a selection menu command for multiple nodes in Server Explorer.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing a selection menu command item.</returns>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object instance uniquely identifying the command associated with the specified item in the data view hierarchy.</param>
      <param name="parameters">An array of parameters for use with this command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.Microsoft#VisualStudio#Data#Core#IVsDataSupportObject{T}#Invoke(System.String,System.Object[],System.Object[])">
      <summary>Invokes the specified command.</summary>
      <returns>The return value of the invoked command.</returns>
      <param name="name">The name of the command to be invoked.</param>
      <param name="args">An array of arguments to pass to the invoked command. </param>
      <param name="parameters">An array of parameters for use with this command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.UpdateCommandStatus(System.ComponentModel.Design.MenuCommand)">
      <summary>Updates the status of the specified menu command.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing the command to update.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewCommandProvider.UpdateCommandStatus(System.ComponentModel.Design.MenuCommand,System.Object[])">
      <summary>Updates the status of the specified menu command.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object representing the command to update.</param>
      <param name="parameters">An array of parameters for use with this command.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider">
      <summary>Provides the ability to open a document, get a document moniker, and perform other actions pertaining to a document in the Visual Studio Sever Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.CanOpen(System.Int32,System.Guid)">
      <summary>Indicates whether a document can be opened for the specified node in the data view and for the given logical view.</summary>
      <returns>true if a document can be opened; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node.</param>
      <param name="logicalView">A unique identifier of a logical view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.FindNode(System.String,System.Boolean)">
      <summary>Searches for a node in the data view that corresponds to the specified document moniker. Optionally, searches child nodes that have not been expanded yet.</summary>
      <returns>An integer value that identifies the specified node in the data view, or -1 if node is not found.</returns>
      <param name="documentMoniker">A document moniker.</param>
      <param name="searchUnpopulatedChildren">Specifies whether to search child nodes that have not been expanded yet (true), or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.GetContext(System.Int32)">
      <summary>Retrieves the service provider representing the context of the current document in the data view.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object representing the context of the current document in the data view.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.GetMoniker(System.Int32)">
      <summary>Retrieves the document moniker for the specified node in the data view.</summary>
      <returns>The document moniker.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.GetPriority(System.Int32)">
      <summary>Gets the priority level of the specified document within the data view hierarchy.</summary>
      <returns>A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY" /> enumeration specifying the priority level of the specified document within the data view hierarchy.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.GetSaveName(System.Int32)">
      <summary>Gets the name of the specified document for use when saving the document.</summary>
      <returns>A string representing the document name for use when saving the document, or null if there is no such name.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.IsSupported(System.Int32)">
      <summary>Indicates whether a document is supported for the specified node in the data view.</summary>
      <returns>true if the document is supported; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.Open(System.Int32,System.Guid,System.Object,System.Boolean)">
      <summary>Opens the specified document in the given logical view. The document may be populated with existing data and may be hidden.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object representing the open document window.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
      <param name="logicalView">A unique identifier of a logical view.</param>
      <param name="existingDocumentData">Any existing data to be included in the document.</param>
      <param name="doNotShowWindow">A Boolean value specifying whether to hide the document window (true) or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewDocumentProvider.ShowMoniker(System.Int32)">
      <summary>Indicates whether the document moniker is to be displayed on the specified document.</summary>
      <returns>true if the moniker is to be displayed; otherwise, false.</returns>
      <param name="itemId">A numerical identifier for the node in the data view.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand">
      <summary>Represents a base implementation for menu commands offered by high-level or shortcut menus as part of a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand.#ctor(System.Int32,System.ComponentModel.Design.CommandID)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand" /> class, specifying the item ID and command identifier.</summary>
      <param name="itemId">A numerical value that uniquely identifies a node in the data view hierarchy.</param>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand.#ctor(System.Int32,System.ComponentModel.Design.CommandID,System.EventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the item ID, command identifier, and event.</summary>
      <param name="itemId">A numerical value that uniquely identifies a node in the data view hierarchy.</param>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand.#ctor(System.Int32,System.ComponentModel.Design.CommandID,System.EventHandler,System.EventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMenuCommand" /> class, specifying the item ID, command identifier, and events.</summary>
      <param name="itemId">A numerical value that uniquely identifies a node in the data view hierarchy.</param>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing the unique command ID that links this menu command to the environment's menu.</param>
      <param name="statusHandler">The event to raise to convey status updates.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewMenuCommand.ItemId">
      <summary>Gets the item ID.</summary>
      <returns>Returns an integer value representing the item ID.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor">
      <summary>Represents a dynamic property for a node in a data view hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property descriptor object.</summary>
      <param name="baseDescriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object representing a base descriptor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property descriptor object and an array of attributes.</summary>
      <param name="baseDescriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object representing a base descriptor.</param>
      <param name="newAttributes">An array of property attributes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name.</summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name and an array of attributes.</summary>
      <param name="name">The property name.</param>
      <param name="attributes">An array containing the property attributes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name and a property display name.</summary>
      <param name="name">The property name.</param>
      <param name="displayName">A display name for the property. This parameter is used to add a <see cref="T:System.ComponentModel.DisplayNameAttribute" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name, the property display name, and a category name.</summary>
      <param name="name">The property name.</param>
      <param name="displayName">A display name for the property. This parameter is used to create a <see cref="T:System.ComponentModel.DisplayNameAttribute" />.</param>
      <param name="category">The name of the category in which to group the property (in the property grid). This parameter is used to create a <see cref="T:System.ComponentModel.CategoryAttribute" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name, another version of the property name for display purposes, a category name, and a description.</summary>
      <param name="name">The property name.</param>
      <param name="displayName">A display name for the property. This parameter is used to create a <see cref="T:System.ComponentModel.DisplayNameAttribute" />.</param>
      <param name="category">The name of the category in which to group the property (in the property grid). This parameter is used to create a <see cref="T:System.ComponentModel.CategoryAttribute" />.</param>
      <param name="description">The description of the property. This property is used to create a <see cref="T:System.ComponentModel.DescriptionAttribute" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor" /> class with the property name, another version of the property name for display purposes, a category name, and a description.</summary>
      <param name="name">The property name.</param>
      <param name="displayName">A display name for the property. This property is used to create a <see cref="T:System.ComponentModel.DisplayNameAttribute" />.</param>
      <param name="category">The name of the category in which to group the property (in the property grid). This parameter is used to create a <see cref="T:System.ComponentModel.CategoryAttribute" />.</param>
      <param name="description">The description of the property. This property is used to create a <see cref="T:System.ComponentModel.DescriptionAttribute" />.</param>
      <param name="isReadOnly">A Boolean value indicating whether the property is read-only. If this value is different from ReadOnlyAttribute.Default.IsReadOnly, it is used to create a <see cref="T:System.ComponentModel.ReadOnlyAttribute" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Attributes">
      <summary>Gets the collection of attributes associated with the current property descriptor.</summary>
      <returns>An <see cref="T:System.ComponentModel.AttributeCollection" /> object containing the attributes associated with the current property descriptor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.CanResetValue(System.Object)">
      <summary>Indicates whether the value of the property can be reset for the specified component.</summary>
      <returns>true if the value can be reset; otherwise false.</returns>
      <param name="component">The component for which to check whether the value can be reset.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Category">
      <summary>Gets the category from the <see cref="T:System.ComponentModel.CategoryAttribute" /> of the current property descriptor.</summary>
      <returns>A string value representing the category of the current property descriptor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.ComponentType">
      <summary>Gets the type of the component the property is bound to.</summary>
      <returns>A <see cref="T:System.Type" /> object containing the type of the component the property is bound to, or typeof(DataViewBrowseObject) if the component type has not been set for this property descriptor and there is no base property descriptor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Converter">
      <summary>Gets the type converter for the current property descriptor.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> object used to convert the <see cref="T:System.Type" /> of the current property descriptor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Description">
      <summary>Gets the description from the <see cref="T:System.ComponentModel.DescriptionAttribute" /> of the current property descriptor.</summary>
      <returns>A string value representing the description of the current property descriptor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> for a given component, using a specified array of attributes as a filter.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that match the specified attributes for the specified component.</returns>
      <param name="instance">A component to get the properties for.</param>
      <param name="filter">An array of <see cref="T:System.Attribute" /> objects to use as a filter. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.GetValue(System.Object)">
      <summary>Gets the current property value for the specified component.</summary>
      <returns>The current property value for the specified component.</returns>
      <param name="component">The component for which to retrieve the property value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.IsReadOnly">
      <summary>Gets a value indicating whether the current property descriptor is read-only.</summary>
      <returns>A Boolean value indicating whether the current property descriptor is read-only.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.Name">
      <summary>Gets the property name.</summary>
      <returns>A string value representing the property name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.NameHashCode">
      <summary>Gets the hash code of the property name.</summary>
      <returns>An integer value representing the hash code of the property name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.PropertyType">
      <summary>Gets the type of the property.</summary>
      <returns>A <see cref="T:System.Type" /> representing the type of the property.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.ResetValue(System.Object)">
      <summary>Resets the property value of the specified component to the default value.</summary>
      <param name="component">The component with the property value that is to be reset to the default value. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetAttribute(System.Attribute)">
      <summary>Adds the specified attribute to this property's attributes list.</summary>
      <param name="value">The attribute to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetAttributes(System.Attribute[])">
      <summary>Adds the specified attributes to this property's attributes list.</summary>
      <param name="values">An array of <see cref="T:System.Attribute" /> objects to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetCategory(System.String)">
      <summary>Sets the category attribute, using the specified category value.</summary>
      <param name="value">The category value used to create and add the <see cref="T:System.ComponentModel.CategoryAttribute" />. Specify null to use the default category attribute value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetComponentType(System.Type)">
      <summary>Sets the component type to the specified type.</summary>
      <param name="value">The new component type to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetConverterType(System.String)">
      <summary>Adds a <see cref="T:System.ComponentModel.TypeConverterAttribute" />, using the specified type name as the data converter for the property descriptor.</summary>
      <param name="value">The fully qualified name of the class to use for data conversion for this property descriptor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetConverterType(System.Type)">
      <summary>Adds a <see cref="T:System.ComponentModel.TypeConverterAttribute" />, using the specified type as the data converter for the property descriptor.</summary>
      <param name="value">A <see cref="T:System.Type" /> that represents the type of the converter class to use for data conversion for this property descriptor </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetDescription(System.String)">
      <summary>Sets the description attribute, using the specified description value.</summary>
      <param name="value">The description value used to create and add the <see cref="T:System.ComponentModel.DescriptionAttribute" />. Specify null to use the default description attribute value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetDisplayName(System.String)">
      <summary>Sets the display name attribute, using the specified display name value.</summary>
      <param name="value">The display name value used to create and add the <see cref="T:System.ComponentModel.DisplayNameAttribute" />. Specify null to use the default display name attribute value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetIsBrowsable(System.Boolean)">
      <summary>Adds a <see cref="T:System.ComponentModel.BrowsableAttribute" /> corresponding to the specified Boolean value that indicates whether the property can be modified at design time in a Properties window.</summary>
      <param name="value">A Boolean value that is converted to <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" /> or <see cref="F:System.ComponentModel.BrowsableAttribute.No" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetIsLocalizable(System.Boolean)">
      <summary>Adds a <see cref="T:System.ComponentModel.LocalizableAttribute" /> corresponding to the specified Boolean value that indicates whether the property should be localized.</summary>
      <param name="value">A Boolean value that is converted to <see cref="F:System.ComponentModel.LocalizableAttribute.Yes" /> or <see cref="F:System.ComponentModel.LocalizableAttribute.No" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetIsReadOnly(System.Boolean)">
      <summary>Adds a <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> corresponding to the specified Boolean value that indicates whether the property is read-only.</summary>
      <param name="value">A Boolean value that is converted to <see cref="F:System.ComponentModel.ReadOnlyAttribute.Yes" /> or <see cref="F:System.ComponentModel.ReadOnlyAttribute.No" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetName(System.String)">
      <summary>Sets the property name.</summary>
      <param name="value">The property name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetPropertyType(System.Type)">
      <summary>Sets the property type to the specified type.</summary>
      <param name="value">A <see cref="T:System.Type" /> specifying the property type to set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Sets the property value for the specified component to a new value.</summary>
      <param name="component">The component to set the property value for.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Indicates whether the property value of the specified component should be serialized.</summary>
      <returns>true if the property should be persisted; otherwise, false.</returns>
      <param name="component">The component with the property to be examined for persistence.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand">
      <summary>Provides the ability to determine the status of a shortcut menu command when multiple nodes are selected in Server Explorer for a specific data connection, and to invoke the command.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.#ctor(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand" /> class with the command and the view hierarchy.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> that uniquely identifies the command.</param>
      <param name="viewHierarchy">An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> containing the collection of selected nodes for one data connection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.#ctor(System.ComponentModel.Design.CommandID,System.EventHandler,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand" /> class with the command, an event, and the view hierarchy.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> that uniquely identifies the command.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
      <param name="viewHierarchy">An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> containing the collection of selected nodes for one data connection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.#ctor(System.ComponentModel.Design.CommandID,System.EventHandler,System.EventHandler,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand" /> class with the command, events, and the view hierarchy.</summary>
      <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID" /> that uniquely identifies the command.</param>
      <param name="statusHandler">The event to raise to convey status updates.</param>
      <param name="handler">The event to raise when the user selects the menu item.</param>
      <param name="viewHierarchy">An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> containing the collection of selected nodes for one data connection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.Invoke(System.Object)">
      <summary>Invokes the command with the specified arguments for each node in the selection corresponding to one data connection.</summary>
      <param name="arg">Arguments for the command to be invoked.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSelectionMenuCommand.UpdateStatus">
      <summary>Updates the status of this command based on the common set of status values extracted from all the nodes in the node selection for a data connection.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DataViewSupport">
      <summary>Enables retrieving an XML stream that provides a description of one or more data views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataViewSupport" /> class with the resource base name and the assembly in which the resource is located.</summary>
      <param name="resourceName">The base name of the resource in the assembly.</param>
      <param name="assembly">The assembly that contains the resource.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> class with the base name of the XML file and the path to this file.</summary>
      <param name="fileName">The base name of the resource XML file.</param>
      <param name="path">The directory path to the XML file that contains the resource.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.Close">
      <summary>Closes the data view support object, allowing the provider to clean up resources when the data view hierarchy is closed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewSupport.Connection">
      <summary>Gets the connection associated with the data view hierarchy.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the connection associated with the data view hierarchy.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.CreateService(System.Type)">
      <summary>Creates a service for the specified type.</summary>
      <returns>A new service object for the specified type.</returns>
      <param name="serviceType">The type of service object to create.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.GetService(System.Type)">
      <summary>Retrieves the service object for the specified type.</summary>
      <returns>A service object for the specified type.</returns>
      <param name="serviceType">The type of service object to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.Initialize">
      <summary>Initializes the data view support object, allowing the provider to initialize resources when the data view hierarchy is created.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewSupport.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets or sets the site - the current instance of the view hierarchy object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> object representing the current instance of the view hierarchy.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DataViewSupport.OpenSupportStream">
      <summary>Opens a stream of bytes representing the data view support XML.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object representing the data view support XML.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.DataViewSupport.ViewHierarchy">
      <summary>Gets the current instance of the view hierarchy object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataViewHierarchy" /> object representing the current instance of the view hierarchy.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DSRefBuilder">
      <summary>Allows you to create a Data Source Reference (DSRef) object that identifies one or more data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefBuilder" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefBuilder" /> class with the data connection.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the data connection to initialize the class with.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[])">
      <summary>Appends information about a data object with the specified type and identifier to a specified existing DSRef object.</summary>
      <param name="dsRef">The existing DSRef object to which information is appended.</param>
      <param name="typeName">The name of the object type.</param>
      <param name="identifier">An array containing the identifier parts of the object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[],System.Object[])">
      <summary>Appends information about a data object with the specified type and identifier to a specified existing DSRef object.</summary>
      <param name="dsRef">The existing DSRef object to which information is appended.</param>
      <param name="typeName">The name of the type of object.</param>
      <param name="identifier">An array containing the identifier parts of the object.</param>
      <param name="parameters">An array whose contents are specified by the Data Object Support XML.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dsRef" />, <paramref name="typeName" /> and/or <paramref name="identifier" /> parameters is null.</exception>
      <exception cref="T:System.InvalidOperationException">The site is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.Microsoft#VisualStudio#Data#Core#IVsDataSupportObject{T}#Invoke(System.String,System.Object[],System.Object[])">
      <summary>Invokes the method specified by the method name and passes it the specified arguments.</summary>
      <returns>Returns a null reference.</returns>
      <param name="name">The method name to invoke. For example, can be equal to "AppendToDSRef".</param>
      <param name="args">An array of objects containing the first three arguments to pass to the <see cref="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[],System.Object[])" /> method.</param>
      <param name="parameters">The parameters array to pass to <see cref="M:Microsoft.VisualStudio.Data.Framework.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[],System.Object[])" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="args" /> parameter is null or has a length different than 3, or the <paramref name="name" /> parameter is not equal to the "AppendToDSRef" string literal.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject">
      <summary>Provides the ability to create and read a clipboard object used for drag-and-drop operations between Server Explorer and the data designer. The DSRefClipboardObject object contains identifying information about the underlying object that is transferred.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" /> class, specifying a DSRef object.</summary>
      <param name="data">The DSRef object to be wrapped by the <see cref="T:Microsoft.VisualStudio.Data.Framework.ClipboardObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.ContainsDSRef">
      <summary>Indicates whether the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" /> contains a DSRef object.</summary>
      <returns>true if the current <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" /> contains a DSRef object; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.GetDSRef(System.IServiceProvider)">
      <summary>Extracts the DSRef object from the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" />.</summary>
      <returns>An object representing the extracted DSRef object.</returns>
      <param name="serviceProvider">A global Visual Studio service provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject.SetDSRef(System.Object)">
      <summary>Adds the DSRef object to the <see cref="T:Microsoft.VisualStudio.Data.Framework.DSRefClipboardObject" />.</summary>
      <param name="dsRef">The DSRef object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dsRef" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dsRef" /> parameter is invalid.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.NameAttribute">
      <summary>Specifies the string literal name of a given connection property when specified in a connection string.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.NameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Data.Framework.NameAttribute" />, specifying the connection property name.</summary>
      <param name="name">The string literal name of a specified connection property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.NameAttribute.Name">
      <summary>Gets the string literal name of a given connection property.</summary>
      <returns>The string literal connection property name.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.ServiceProvider">
      <summary>Provides an object that can proffer services by using both the managed and unmanaged IServiceProvider interfaces. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.#ctor">
      <summary>Initializes a new instance of a managed or unmanaged IServiceProvider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Wraps an unmanaged IServiceProvider interface that is accessible through the managed <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</summary>
      <param name="serviceProvider">An unmanaged IServiceProvider interface object to wrap.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of an unmanaged IServiceProvider interface.</summary>
      <param name="parentProvider">An unmanaged IServiceProvider interface object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Adds the specified service to the internal collection of services.</summary>
      <param name="serviceType">The type of the service to add.</param>
      <param name="callback">A callback object that is used to create the service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Adds the specified service to the internal collection of services or to the parent service container.</summary>
      <param name="serviceType">The type of the service to add.</param>
      <param name="callback">A callback object that is used to create the service.</param>
      <param name="promote">A <see cref="T:System.Boolean" /> value indicating whether to add the service to the parent container.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.AddService(System.Type,System.Object)">
      <summary>Adds the specified service to the internal collection of services.</summary>
      <param name="serviceType">The type of the service to add.</param>
      <param name="serviceInstance">The service object instance to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Adds the specified service to the collection of service objects or to the parent service container.</summary>
      <param name="serviceType">The type of the service to add.</param>
      <param name="serviceInstance">The service object to add.</param>
      <param name="promote">A <see cref="T:System.Boolean" /> value indicating whether to add the service to the parent container.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.GetService(System.Guid)">
      <summary>Retrieves a service with a specified service GUID.</summary>
      <returns>The service with the specified service GUID, or null if no service is found.</returns>
      <param name="serviceGuid">The GUID of a service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.GetService(System.Type)">
      <summary>Retrieves a service of the specified type.</summary>
      <returns>Returns the service of the specified type, or returns null if no service is found.</returns>
      <param name="serviceType">The service type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IServiceProvider#QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
      <summary>Performs as a factory for services that are exposed through an implementation of IServiceProvider.</summary>
      <returns>An integer specifying the address of the interface for the requested service.</returns>
      <param name="guidService">A unique identifier of the requested service.</param>
      <param name="riid">A unique identifier of the interface that the caller wants to receive for the service.</param>
      <param name="ppvObject">The address of the interface specified by the <paramref name="riid" /> parameter.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.ServiceProvider.ParentProvider">
      <summary>Gets the current instance of the parent service provider.</summary>
      <returns>The current instance of the parent service provider object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.RemoveService(System.Type)">
      <summary>Removes the specified service from the internal services collection </summary>
      <param name="serviceType">The type of the service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.ServiceProvider.RemoveService(System.Type,System.Boolean)">
      <summary>Removes the specified service from the internal services collection or from the parent service container.</summary>
      <param name="serviceType">The type of the service.</param>
      <param name="promote">A <see cref="T:System.Boolean" /> value indicating whether to remove the service from the parent container.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.SynonymsAttribute">
      <summary>Provides a comma-delimited list of connection property names that are synonymous with a primary connection property name.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.SynonymsAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.SynonymsAttribute" /> class.</summary>
      <param name="synonyms">A comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.SynonymsAttribute.Synonyms">
      <summary>Gets a comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</summary>
      <returns>A comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionProperties" /> class using the ADO.NET connection string builder base class (<see cref="T:System.Data.Common.DbConnectionStringBuilder" />).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Add(System.String,System.Object)">
      <summary>Adds a new property to the current connection properties collection. Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
      <param name="key">Name of the property being added.</param>
      <param name="value">Value of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The connection string is not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Add(System.String,System.Type,System.Object)">
      <summary>Adds a new property to the current connection properties collection. </summary>
      <param name="key">Name of the property being added.</param>
      <param name="type">Type of the property being added.</param>
      <param name="value">Value of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The connection string is not extensible.</exception>
      <exception cref="T:System.ArgumentException">The property already exists.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ConnectionStringBuilder">
      <summary>Gets the underlying ADO.NET connection string builder object for the current connection properties instance.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> object representing a valid data connection string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Tests whether a specified property name and value pair is a member of the current set of connection properties.</summary>
      <returns>true if the specified property is a member of the connection properties collection; otherwise false.</returns>
      <param name="item">The property and value whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ContainsKey(System.String)">
      <summary>Tests whether the specified property name is a member of the current set of connection properties.</summary>
      <returns>true if key was found, otherwise false.</returns>
      <param name="key">The property name whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the set of connection properties to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the connection properties are copied.</param>
      <param name="arrayIndex">The index in the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Count">
      <summary>Gets the number of connection properties.</summary>
      <returns>The number of connection properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.GetSynonyms(System.String)">
      <summary>Retrieves an array list of synonyms for a specified data connection property. </summary>
      <returns>A list of synonyms for a specified property. </returns>
      <param name="key">Name of the property for which synonyms are retrieved.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.IsComplete">
      <summary>Gets a value indicating whether sufficient connection properties have been set for the connection string.</summary>
      <returns>true if the connection string is complete; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.IsExtensible">
      <summary>Gets a value indicating whether the DDEX provider connection properties are extensible.</summary>
      <returns>true if the DDEX provider connection properties are extensible; otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.IsSensitive(System.String)">
      <summary>Returns a Boolean value indicating whether a specified property contains sensitive information.</summary>
      <returns>true if the property contains sensitive information; otherwise false.</returns>
      <param name="key">Name of the property for which the indication of sensitive information is provided.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Item(System.String)">
      <summary>Gets or sets a value for a specified property on the DDEX provider. Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event if the property is set.</summary>
      <returns>The value for the property with the specified name.</returns>
      <param name="key">Name of the property for which a value is retrieved or set.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Keys">
      <summary>Gets all the properties that are part of the data connection string.</summary>
      <returns>A collection of data connection properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.PropertyChanged" /> event when a property changes in the data connection string.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.OnSiteChanged(System.EventArgs)">
      <summary>Raises an event if the Site has changed.</summary>
      <param name="e">Event to be raised.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Parse(System.String)">
      <summary>Disassembles the components of a connection string into a set of connection properties as set in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties" /> class instance. Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
      <param name="connectionString">The connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties" /> instance.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.PropertyChanged">
      <summary>Occurs on the occurrence of a change to a connection property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Remove(System.String)">
      <summary>Removes a property from the current connection property collection. </summary>
      <returns>true if the property is successfully removed; false if the property does not exist.</returns>
      <param name="key">Name of the property to be removed from the current set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Reset">
      <summary>Resets a connection property to its initial value and raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Reset(System.String)">
      <summary>Removes the given property from the connection string and raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
      <returns>true if the property is successfully removed; false if the property does not exist.</returns>
      <param name="key">The property name that is to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds a new property to the current connection properties collection. Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.AdoDotNet.PropertyChanged" /> event.</summary>
      <param name="item">The property to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all elements from the specified <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> instance is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> instance is read-only; otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Tests whether a specified property name and value pair is a member of the current set of connection properties.</summary>
      <returns>true if the specified property is a member of the connection properties collection; otherwise false.</returns>
      <param name="item">The property and value whose presence is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an enumerator that enumerates over all of the known connection properties and their values, if any.</summary>
      <returns>A data connection properties enumerator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that enumerates over all of the known connection properties and their values, if any.</summary>
      <returns>A data connection properties enumerator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Retrieves a collection of custom attributes for the specified object.</summary>
      <returns>An AttributeCollection object instance that contains the attributes for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Retrieves the class name of the specified object.</summary>
      <returns>Returns the class name of the object, or null if the class does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Retrieves the name of the specified object.</summary>
      <returns>The name of the object, or null if the object does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Retrieves a type converter for the specified object.</summary>
      <returns>A TypeConverter instance appropriate for the specified object, or null if there is no TypeConverter for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Retrieves the default event for the specified object.</summary>
      <returns>An EventDescriptor representing the default event for the specified object, or null if this object does not have events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Retrieves the default property for the specified object.</summary>
      <returns>A PropertyDescriptor representing the default property for this object, or null if this object does not have properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Retrieves an editor of the specified type for this object.</summary>
      <returns>An object of the specified type that is the editor for this object, or null if the editor cannot be found.</returns>
      <param name="editorBaseType">A managed Type representing the editor for this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents" />.</summary>
      <returns>Returns the events for this instance of a component.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents" />.</summary>
      <returns>Returns the events for this instance of a component.</returns>
      <param name="attributes">An array of attributes to use as a filter. This can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties" />.</summary>
      <returns>Returns the properties for this instance of a component.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties" />.</summary>
      <returns>Returns the properties for this instance of a component.</returns>
      <param name="attributes">An array of attributes to use as a filter. This can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <returns>Returns an object that contains the property described by the specified property descriptor.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ToDisplayString">
      <summary>Retrieves a string representation of the current set of data connection properties that are suitable for on-screen display.</summary>
      <returns>A string representation of the current set of data connection properties that are suitable for on-screen display.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ToSafeString">
      <summary>Returns a string representation of the current set of data connection properties, excluding the sensitive properties that should be serialized.</summary>
      <returns>A string representation of the current set of data connection properties, excluding the sensitive properties that should be serialized.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.ToString">
      <summary>Returns a string representation of the current set of data connection properties.</summary>
      <returns>The data connection string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.TryGetValue(System.String,System.Object@)">
      <summary>Retrieves a value corresponding to the supplied key by calling this method on the .NET Framework connection string builder base class (<see cref="T:System.Data.Common.DbConnectionStringBuilder" />).</summary>
      <returns>true if the property is found; otherwise, false.</returns>
      <param name="key">The property name to be retrieved.</param>
      <param name="value">Output parameter. Contains the value of the property, if the property exists.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionProperties.Values">
      <summary>Gets the values of the connection string.</summary>
      <returns>An object that implements the interface <see cref="I:System.Collections.Generic.ICollection" />, such as an array.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataConnectionSupport" /> interface, and an indirect implementation of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataCommand" />, <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataAsyncCommand" />, and <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataTransaction" /> interfaces, by using appropriate ADO.NET objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.#ctor">
      <summary>Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.BeginTransactionCore">
      <summary>Initiates a transaction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Close">
      <summary>Closes the current data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CommitTransactionCore">
      <summary>Commits a transaction.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Connection">
      <summary>Gets the <see cref="T:System.Data.Common.DbConnection" /> object being used by the current connection support instance.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnection" /> object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ConnectionString">
      <summary>Gets or sets a string representation of information required to establish a specified data source connection.</summary>
      <returns>A string representation of the data source connection information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ConnectionTimeout">
      <summary>Gets or sets the amount of time, in seconds, to wait to establish a connection before terminating the attempt and generating a time-out error.</summary>
      <returns>An integer representation of the allowable time-out period, in seconds.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support connection time-out.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CreateParameterCore">
      <summary>Creates a new data parameter with interface <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" />.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CreateParameterFrom(System.Data.Common.DbParameter)">
      <summary>Creates a new data parameter with interface <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" />, using a copy of the specified data parameter.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" /> object instance.</returns>
      <param name="parameter">A <see cref="T:System.Data.Common.DbParameter" /> data parameter from which to create the new parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CreateService(System.ComponentModel.Design.IServiceContainer,System.Type)">
      <summary>Creates a new service object based on the specified interface service type.</summary>
      <returns>The service object.</returns>
      <param name="container">A service provider object to contain the service.</param>
      <param name="serviceType">A <see cref="T:System.Type" /> of the service to create.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CurrentCommand">
      <summary>Gets the <see cref="T:System.Data.Common.DbCommand" /> object currently being used by the current connection support instance.</summary>
      <returns>A <see cref="T:System.Data.Common.DbCommand" /> object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.CurrentTransaction">
      <summary>Gets the <see cref="T:System.Data.Common.DbTransaction" /> object currently being used by the current connection support instance.</summary>
      <returns>A <see cref="T:System.Data.Common.DbTransaction" /> object instance, or null if not currently in a transaction.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.DeriveParametersCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)">
      <summary>Derives parameters that can be specified for a given command.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects, each one representing a parameter derived from the command.</returns>
      <param name="command">A data source–specific command from which to derive parameters.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the parameter derivation and returning to the caller. A value of zero indicates infinite time-out; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.DeriveParametersOn(System.Data.Common.DbCommand)">
      <summary>Override to derive parameters from the given command.</summary>
      <param name="command">The data command to derive the parameters from.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.DeriveSchemaCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Derives the schema returned from a specified command, indicating the layout of items and blocks in a given data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object instance representing the command schema.</returns>
      <param name="command">Data source–specific command for which to derive the schema.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> objects for the specified command type. </param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Dispose(System.Boolean)">
      <summary>Releases all resources held by the data connection.</summary>
      <param name="disposing">Indicates whether both managed and unmanaged resources are to be released (true), or unmanaged resources only (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ExecuteCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters, and returns results as an <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">Command to execute that is specific to the data source.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameter" /> objects for the specified command type.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ExecuteWithoutResultsCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters. Does not return any query results.</summary>
      <returns>The number of rows affected.</returns>
      <param name="command">Command to execute that is specific to the data source.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameter" /> objects for the specified command type.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.GetCommand(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Constructs a <see cref="T:System.Data.Common.DbCommand" /> object from the given command string.</summary>
      <returns>A <see cref="T:System.Data.Common.DbCommand" /> object instance.</returns>
      <param name="command">Command to execute that is specific to the data source.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects for the specified command type.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.GetCommandType(Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType)">
      <summary>Converts an enumeration value from <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType" /> to its corresponding value in the <see cref="T:System.Data.CommandType" /> enumeration.</summary>
      <returns>A <see cref="T:System.Data.CommandType" /> enumeration value.</returns>
      <param name="commandType">The data command type to be converted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.InAsyncMode">
      <summary>Gets a value indicating whether the connection is in an asynchronous mode.</summary>
      <returns>true if in asynchronous mode is on; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Initialize(System.Object)">
      <summary>Initializes the specified ADO.NET connection, using a specified provider.</summary>
      <param name="providerObj">Data provider object, or null if a new object needs to be created.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Microsoft#VisualStudio#Data#Core#IVsDataSiteableObject{T}#Site">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" /> object currently being used by the current connection support instance.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Core.IVsDataProvider" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.Open(System.Boolean)">
      <summary>Opens the specified data connection.</summary>
      <returns>true if the connection opened successfully and does not require a prompt, false if the connection is missing required connection information and a prompt should be displayed to obtain the missing information form the user. You should return false only when a provider has implemented the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataConnectionPromptDialog" /> class.</returns>
      <param name="doPromptCheck">Indicates whether the call to the Open method should return false for specified errors that relate to missing connection information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.PrepareCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)">
      <summary>Prepares the specified command on the data source to be executed; the command can be executed multiple times, with varying parameters.</summary>
      <returns>An identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ExecuteCore(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ExecuteWithoutResults(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[],System.Int32)" /> method.</returns>
      <param name="command">Command to prepare for execution.</param>
      <param name="commandType">Command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameters.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects for the specified command type.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite time-out; a value of -1 indicates a provider default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.ProviderObject">
      <summary>Gets the underlying provider object for the specified connection.</summary>
      <returns>The ADO.NET data provider's object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.RollbackTransactionCore">
      <summary>Rolls back, or voids, a transaction and returns the new current transaction level.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.SetParameters(System.Data.Common.DbCommand,Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter[])">
      <summary>Adds new parameters to the given <see cref="T:System.Data.Common.DbCommand" /> command from the specified array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> parameters.</summary>
      <param name="command">Command to add parameters to.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameter" /> objects for the specified command type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport.State">
      <summary>Gets the state of the data connection.</summary>
      <returns>The state of the connection, as enumerated by the <see cref="T:Microsoft.VisualStudio.Data.Core.DataConnectionState" /> class.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataMappedObjectConverter" /> class using the ADO.NET <see cref="T:System.Data.Common.DbMetaDataCollectionNames.DataTypes" /> metadata collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter" /> class with the data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the connection properties to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.ConvertToMappedMember(System.String,System.String,System.Object[],System.Object[])">
      <summary>Maps one or more data source–specific values to a specified generic mapped type: an ADO.NET data type, an ADO.NET DbType, or a .NET Framework Type value.</summary>
      <returns>An object representing the value of the generic, mapped type.</returns>
      <param name="typeName">The name of the data object type requesting this mapping.</param>
      <param name="mappedMemberName">The name of the generic concept.</param>
      <param name="underlyingValues">One or more data source–specific values to map into the concept specified by <paramref name="mappedMemberName" />.</param>
      <param name="parameters">Optional command parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="mappedMemberName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="values" /> array does not contain the expected type of data.</exception>
      <exception cref="T:System.NotImplementedException">This method does not support mapping of the specified type for the specified <paramref name="mappedMemberName" />.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.DataTypes">
      <summary>Gets data types as <see cref="T:System.Data.DataTable" /> object instances.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> object instance representing the data types.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.GetDbTypeFromNativeType(System.String)">
      <summary>Converts the specified native type to a <see cref="T:System.Data.DbType" /> type that is used by an ADO.NET data provider.</summary>
      <returns>A <see cref="T:System.Data.DbType" /> type, or a DbType.Object if the native type is not found.</returns>
      <param name="nativeType">A string containing the name of the native type to convert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.GetFrameworkTypeFromNativeType(System.String)">
      <summary>Converts the native type to a <see cref="T:System.Type" /> type </summary>
      <returns>A <see cref="T:System.Type" /> type, or a typeof(object) if the type cannot be converted.</returns>
      <param name="nativeType">A string containing the name of the native type to convert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.GetProviderTypeFromNativeType(System.String)">
      <summary>Converts the native type to the provider's specific type.</summary>
      <returns>The provider's specific type value, or 0 if the type cannot be converted.</returns>
      <param name="nativeType">A string containing the name of the native type to convert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetMappedObjectConverter.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter">
      <summary>Provides the ability to convert identifiers from strings to identifier parts and vice versa, and the ability to format identifiers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter" /> class with the specified data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the connection properties to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.BuildString(System.String,System.String[],Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>Concatenates identifier parts into a string and inserts the separator character in between. </summary>
      <returns>The concatenated string containing all identifiers in the given order.</returns>
      <param name="typeName">The type of the database object.</param>
      <param name="identifierParts">An array of formatted identifier parts.</param>
      <param name="format">A value of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" /> enumeration. This value is used to check whether the string is used for display purposes only. If so, the format of the string is changed. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.CompositeIdentifierSeparator">
      <summary>Gets the identifier separator. By default, it is set to the dot character.</summary>
      <returns>The separator character.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.FormatPart(System.String,System.Object,Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>By default, adds quotation marks to the identifier part if the format parameter reveals that quotation marks are required. Override to customize the formatting that is added to the identifier part.</summary>
      <returns>The formatted identifier part.</returns>
      <param name="typeName">A database object type.</param>
      <param name="identifierPart">The name of the identifier part.</param>
      <param name="format">A value of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" /> enumeration. This value can be used to check whether the string is used for display purposes or requires quotation marks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.OnSiteChanged(System.EventArgs)">
      <summary>Handles the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.RequiresQuoting(System.String)">
      <summary>Indicates whether the specified identifier part requires quotation marks.</summary>
      <returns>A Boolean value indicating whether the identifier part requires quotation marks.</returns>
      <param name="identifierPart">The name of the identifier part</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.SplitIntoParts(System.String,System.String)">
      <summary>Divides the specified string version of an identifier into a set of formatted identifier parts by using the identifier separator character.</summary>
      <returns>An array of string values representing each an identifier extracted from the input string.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="identifier">The identifier to split into parts.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectIdentifierConverter.UnformatPart(System.String,System.String)">
      <summary>Removes formatting of identifier parts, such as trimming leading and trailing spaces and removing quotation marks.</summary>
      <returns>The new identifier part, without its formatting.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierPart">A formatted identifier part.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataObjectMemberComparer" /> class that uses the ADO.NET <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> metadata collection to determine how to compare identifier parts.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer" /> class with the data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object containing the connection properties to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.Compare(System.String,System.Object[],System.Int32,System.Object)">
      <summary>Compares one object identifier part with another specified object identifier part.</summary>
      <returns>An integer value less than zero if the identifier part is less than the specified value, zero if the identifier part is equal to the specified value, or greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="identifier">The identifier of an object of the type specified by the <paramref name="typeName" /> parameter, represented as an array of identifier parts.</param>
      <param name="identifierPart">The zero-based index in the identifier array indicating which part of the identifier to compare.</param>
      <param name="value">A value to compare the identifier part against.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectMemberComparer.RequiresQuoting(System.String)">
      <summary>Indicates whether an identifier part requires quotation marks.</summary>
      <returns>true if the identifier part requires quotation marks; otherwise, false.</returns>
      <param name="identifierPart">A string representing a portion of the identifier of a database object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector" /> interface using the ADO.NET <see cref="M:System.Data.Common.DbConnection.GetSchema" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector" /> class with the data connection object.</summary>
      <param name="connection">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the communication to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector.ApplyMappings(System.Data.DataTable,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Applies the selector mappings.</summary>
      <param name="dataTable">The schema returned by the call to the <see cref="M:System.Data.Common.DbConnection.GetSchema" /> method.</param>
      <param name="mappings">Key/value pairs containing the selector mappings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schema" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetObjectSelector.SelectObjects(System.String,System.Object[],System.String[],System.Object[])">
      <summary>Returns a data reader for the data objects retrieved from the object store, which are filtered by the specified restrictions, properties, and parameters.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object representing a data reader for the selected data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specifies the property values of the requested data objects. This is not supported in the current version of DDEX.</param>
      <param name="parameters">An array containing the parameters for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> parameter is not valid. Either it is null, or the number of elements contained in it is not 1 or 2, or the first element is not a string.</exception>
      <exception cref="T:System.InvalidOperationException">The site is null.</exception>
      <exception cref="T:System.NotImplementedException">The provider cannot be obtained.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter">
      <summary>Represents a data parameter that is derived from a data source command, or that is passed with a command to a data source whose underlying technology is ADO.NET.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.#ctor(System.Data.Common.DbParameter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> class with a parameter object.</summary>
      <param name="parameter">A <see cref="T:System.Data.Common.DbParameter" /> object containing a command parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.#ctor(System.Data.Common.DbParameter,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> class with a parameter object and an indication of whether the parameter is derived using the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</summary>
      <param name="parameter">A <see cref="T:System.Data.Common.DbParameter" /> object containing a command parameter.</param>
      <param name="isDerived">Indicates whether the data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> class with a parameter string value.</summary>
      <param name="providerInvariantName">The invariant name of the data provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter" /> class with the name of the data provider and an indication of whether the parameter is derived using the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</summary>
      <param name="providerInvariantName">The name of the data provider.</param>
      <param name="isDerived">Indicates whether the data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.Framework.DataCommand.DeriveParameters(System.String,Microsoft.VisualStudio.Data.Services.SupportEntities.DataCommandType,System.Int32)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetDirectionCore">
      <summary>Retrieves the parameter direction.</summary>
      <returns>The parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetIsNullableCore">
      <summary>Retrieves a Boolean value indicating whether this parameter can be null.</summary>
      <returns>true if this parameter can have a null value; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetNameCore">
      <summary>Retrieves the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetSizeCore">
      <summary>Retrieves an integer value specifying the size of the parameter.</summary>
      <returns>The size of the parameter as an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetTypeCore">
      <summary>Retrieves the data source–specific type of the parameter.</summary>
      <returns>The data source–specific type of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetTypeFrom(System.Object)">
      <summary>Maps the value type to a <see cref="T:System.Data.DbType" /> value and returns the string equivalent.</summary>
      <returns>The corresponding <see cref="T:System.Data.DbType" /> string value, or <see cref="F:System.Data.DbType.AnsiString" /> for a null or DBNull value.</returns>
      <param name="value">A candidate parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.GetValueCore">
      <summary>Retrieves the value of a specified parameter.</summary>
      <returns>The value of the specified parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataParameterDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.DataParameter.Descriptor" /> property.</summary>
      <returns>true if the data parameter has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.IsFixedSize">
      <summary>Gets a value indicating whether the size for the current parameter type is fixed.</summary>
      <returns>true if the type is not one of the following <see cref="T:System.Data.DbType" /> values: AnsiString, Binary, Object, String, or VarNumeric; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.IsValidType(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified data source–specific type is a valid type.</summary>
      <returns>true if the method successfully calls <see cref="M:System.Enum.Parse(System.Type,System.String)" /> on the input string; otherwise, false.</returns>
      <param name="type">A data source–specific data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.Parameter">
      <summary>Gets the <see cref="T:System.Data.Common.DbParameter" /> object representing the command parameter.</summary>
      <returns>A <see cref="T:System.Data.Common.DbParameter" /> object representing the command parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.Parse(System.String)">
      <summary>Gets the <see cref="T:System.Data.DbType" /> and attempts to parse the input string value into the correct type by using primitive type conversions (like Byte.Parse and Int32.Parse).</summary>
      <param name="value">A string representation of a parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetDirectionCore(Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection)">
      <summary>Sets the direction of the parameter by using the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</summary>
      <param name="value">A specific data parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetNameCore(System.String)">
      <summary>Sets the name of the parameter.</summary>
      <param name="value">The string literal parameter name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetSizeCore(System.Int32)">
      <summary>Sets an integer value specifying the size of this parameter.</summary>
      <param name="value">An integer specifying size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetTypeCore(System.String)">
      <summary>Attempts to parse the string type into a <see cref="T:System.Data.DbType" /> enumeration value by using Enum.Parse. If this fails, the method assumes DbType.Object as the correct <see cref="T:System.Data.DbType" />.</summary>
      <param name="value">A parameter data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetParameter.SetValueCore(System.Object)">
      <summary>Sets the value of the parameter.</summary>
      <param name="value">An object value to which the parameter is set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> class based on the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> and <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> interfaces. This implementation uses the ADO.NET DbDataReader object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.#ctor(System.Data.Common.DbDataReader)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader" /> class with an ADO.NET data reader object.</summary>
      <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> object with which the class is initialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.#ctor(System.Data.Common.DbDataReader,System.Data.Common.DbCommand)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader" /> class with an ADO.NET data reader object and a command object.</summary>
      <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> object with which the class is initialized.</param>
      <param name="command">A <see cref="T:System.Data.Common.DbCommand" /> object with which the class is initialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Close">
      <summary>Closes the current <see cref="T:System.Data.Common.DbDataReader" /> object instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of binary data.</summary>
      <returns>A numerical value indicating the number of bytes read into the buffer.</returns>
      <param name="index">Index in the current block of data for the item to retrieve.</param>
      <param name="buffer">An array into which specified data, as byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">Index of the starting point in the byte array specified by the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified by the <paramref name="buffer" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItem(System.Int32)">
      <summary>Retrieves an object instance representing the retrievable item, as determined by an index in the current block of data.</summary>
      <returns>An object representing the item at the specified index.</returns>
      <param name="index">Index in the current block of the data item at which to retrieve the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItem(System.String)">
      <summary>Retrieves an object instance representing the retrievable item as specified by name.</summary>
      <returns>An object specified by name.</returns>
      <param name="name">The name of the data item in the current block to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItemIndex(System.String)">
      <summary>Retrieves the index of the item for the given item name, such as the index of a column for a given column name.</summary>
      <returns>The index of the data item.</returns>
      <param name="name">The name of the data item for which to retrieve the index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves the maximum length, in characters, of data items at the specified index.</summary>
      <returns>The maximum length, in number of characters, of the data item at the specified index, or -1 if the method could not obtain the maximum length.</returns>
      <param name="index">The index of the data item being examined for length.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItemName(System.Int32)">
      <summary>Retrieves the name assigned to the data item at the specified index, if any.</summary>
      <returns>The name assigned to the data item at the index specified by the <paramref name="index" /> parameter, or null if no name exists.</returns>
      <param name="index">The index of the data item for which to retrieve the name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)">
      <summary>Retrieves the data type of a data item, or items, at the specified index in a specified format.</summary>
      <returns>The data type of the item or items at the specified index in the specified format.</returns>
      <param name="index">Index of the data item for which to return the data type.</param>
      <param name="itemTypeFormat">The format in which to return the data type information, as enumerated in <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Descriptor" /> property.</summary>
      <returns>true if the data parameter has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.IsClosed">
      <summary>Gets a value indicating whether the specified data reader instance is closed.</summary>
      <returns>true if the specified data reader instance is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.IsNullItem(System.Int32)">
      <summary>Indicates whether the value of the data item at the specified index is unspecified, that is, null.</summary>
      <returns>true if the item is null, that is, unspecified; otherwise false.</returns>
      <param name="index">Index of the data item to examine.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.ItemCount">
      <summary>Gets the number of items in the current block of data.</summary>
      <returns>An integer value indicating the number of items in the current block of data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.NextResult">
      <summary>Advances the data reader to the next result if the reader contains multiple results.</summary>
      <returns>true if more results remain to be read and the reader was advanced to the next result; false if no more results were found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Read">
      <summary>Advances the reader to the next block of data if the reader contains more than one block.</summary>
      <returns>true if there are more blocks of data to read; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Status">
      <summary>Gets a numerical status code returned by the method currently providing data to the data reader.</summary>
      <returns>A numerical status code from the method currently providing data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.Terminate">
      <summary>Terminates the data reader immediately, without necessarily returning all of the data or setting output parameters.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetReader.UnderlyingReader">
      <summary>Gets the underlying <see cref="T:System.Data.Common.DbDataReader" /> object instance that is used by this class.</summary>
      <returns>The underlying <see cref="T:System.Data.Common.DbDataReader" /> object instance that is used by this class.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector">
      <summary>Enables getting root object properties, namely data source connection properties and some ADO.NET <see cref="T:System.Data.Common.DbConnection" /> properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector.ApplyMappings(System.Data.DataTable,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Applies mapping using the specified data table.</summary>
      <param name="dataTable">The data table.</param>
      <param name="mappings">The mappings.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetRootObjectSelector.SelectObjects(System.String,System.Object[],System.String[],System.Object[])">
      <summary>Returns root object properties, such as the non-sensitive connection properties and some <see cref="T:System.Data.Common.DbConnection" /> properties, through a data reader.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReader" /> object representing a data reader for the returned properties.</returns>
      <param name="typeName">The name of the mapped type.</param>
      <param name="restrictions">An array containing the restrictions used to filter object selection.</param>
      <param name="properties">An array containing the properties. The current version of DDEX does not support properties.</param>
      <param name="parameters">An array containing the parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The length of the <paramref name="typeName" /> parameter is not greater than zero.</exception>
      <exception cref="T:System.ArgumentException">The<paramref name=" restrictions" /> parameter is null, or its length is not greater than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The site is null.</exception>
      <exception cref="T:System.NotImplementedException">The provider could not be obtained.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader">
      <summary>Provides a means for obtaining the schema of the <see cref="T:System.Data.Common.DbDataReader" /> object that encapsulates the result set.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.#ctor(System.Data.Common.DbDataReader)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> class with a data reader object.</summary>
      <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> object containing the result set and the schema.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.#ctor(System.Data.Common.DbDataReader,System.Data.Common.DbCommand)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> class with a data reader object and a data command object.</summary>
      <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> object containing the result set and the schema.</param>
      <param name="command">A <see cref="T:System.Data.Common.DbCommand" /> object encapsulating the command executed against the data source, which allows the implementation of the <see cref="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Terminate" /> method to call <see cref="M:Microsoft.VisualStudio.Data.Framework.DataAsyncCommand.CancelAsync(System.Object)" /> on the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Close">
      <summary>Closes the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes into the buffer as an array, starting at a specified offset.</summary>
      <returns>A byte stream array.</returns>
      <param name="index">Index in the data field from which to begin the read operation.</param>
      <param name="buffer">The byte array to be read.</param>
      <param name="bufferIndex">Index in the buffer at which to start placing the data.</param>
      <param name="length">Length of the byte stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItem(System.Int32)">
      <summary>Retrieves a data item at a specified index.</summary>
      <returns>An integer specifying the index at which to retrieve the data item.</returns>
      <param name="index">Index into the field specifying the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItem(System.String)">
      <summary>Retrieves a data item with a specified name.</summary>
      <returns>The string literal name by which to retrieve the data item.</returns>
      <param name="name">The name of the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItemIndex(System.String)">
      <summary>Retrieves the index of the item for the given item name, such as the index of a column for a given column name.</summary>
      <returns>The index of the data item.</returns>
      <param name="name">The name of the data item for which to retrieve the index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves an integer value specifying the maximum length of the data item at the specified index.</summary>
      <returns>An integer value specifying the maximum length of the data item.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the maximum length value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItemName(System.Int32)">
      <summary>Retrieves the string literal name of the data item at the specified index.</summary>
      <returns>The name of the data item at the specified index.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the item name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)">
      <summary>Retrieves the data type for a data item at a specified index and with a specified item type format.</summary>
      <returns>The data type for the specified data item.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the item type format.</param>
      <param name="itemTypeFormat">The <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat" /> object instance specifying the data type format for the data item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Descriptor" /> property.</summary>
      <returns>true if the schema reader has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.IsClosed">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> is closed.</summary>
      <returns>true if the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> object is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.IsNullItem(System.Int32)">
      <summary>Retrieves a Boolean value indicating whether the data item at the specified index is null.</summary>
      <returns>true if the data item is null; otherwise, false.</returns>
      <param name="index">Index in the field specifying the data item for which to test for null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.IsNullItem(System.String)">
      <summary>Retrieves a Boolean value indicating whether the data item value for the specified data item name is null.</summary>
      <returns>true if the data item is null; otherwise, false.</returns>
      <param name="name">The data item name for which to test for a null value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.ItemCount">
      <summary>Gets an integer value specifying the number of data items contained in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> instance.</summary>
      <returns>An integer specifying data items in the current <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.NextResult">
      <summary>Tests whether there is another result set and, if true, advances the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" />.</summary>
      <returns>true if another result exists; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Read">
      <summary>Tests whether there is another data record and, if true, advances the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" /> to the next record.</summary>
      <returns>true if there is another record (row) to read; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.SchemaTable">
      <summary>Gets the DataTable object that represents the schema of the <see cref="T:System.Data.Common.DbDataReader" /> passed into the constructor of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader" />.</summary>
      <returns>Returns a DataTable object instance representing the schema table.</returns>
      <exception cref="T:System.InvalidOperationException">The data reader is closed, or the current row index value is not valid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Status">
      <summary>Gets a numerical status code returned by the method currently providing data to the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> object.</summary>
      <returns>An integer value specifying a status code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSchemaReader.Terminate">
      <summary>Terminates the <see cref="T:Microsoft.VisualStudio.Data.Framework.DataReader" /> object immediately, without necessarily returning all of the data or setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation">
      <summary>Provides information about an ADO.NET data source in the form of properties passed as name/value pairs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataSourceInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataSourceInformation" /> class with a data connection object.</summary>
      <param name="connection">A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object used in the class.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.Connection">
      <summary>Gets the underlying <see cref="T:System.Data.Common.DbConnection" /> object instance used in the class.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnection" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.Microsoft#VisualStudio#Data#Services#SupportEntities#IVsDataSourceInformation#Contains(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified property is contained in the data source information instance.</summary>
      <returns>true if the specified property is contained in the data source information instance; otherwise, false.</returns>
      <param name="propertyName">The name of a data source information property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.Microsoft#VisualStudio#Data#Services#SupportEntities#IVsDataSourceInformation#Item(System.String)">
      <summary>Gets a data source information property with the specified name.</summary>
      <returns>The data source information property with the specified name.</returns>
      <param name="propertyName">The name of the data source information property to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.Framework.DataSiteableObject`1.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object containing the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.RetrieveValue(System.String)">
      <summary>Retrieves a value for a specified data source information property.</summary>
      <returns>The value of the data source information property, or null if the property is not supported.</returns>
      <param name="propertyName">The name of a data source information property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetSourceInformation.SourceInformation">
      <summary>Gets in-memory data source information provided by an implementation of the <see cref="T:System.Data.DataTable" /> class to represent a table of in-memory data.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader">
      <summary>Retrieves the contents of one or more <see cref="T:System.Data.DataTable" /> objects in the form of one or more read-only, forward-only result sets.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.#ctor(System.Data.DataTable)">
      <summary>Initializes a parameterized instance of the T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataTableReader class along with a <see cref="T:System.Data.DataTable" /> instance.</summary>
      <param name="table">Contents, or result set, of the specified <see cref="T:System.Data.DataTable" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.#ctor(System.Data.DataTable,System.Int32)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataTableReader" /> class along with a <see cref="T:System.Data.DataTable" /> instance and a status value.</summary>
      <param name="table">Contents, or result set, of the specified <see cref="T:System.Data.DataTable" /> object.</param>
      <param name="status">The status integer value to initialize this class with.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.Close">
      <summary>Closes the current <see cref="T:System.Data.DataTable" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes into the buffer as an array, starting at a specified offset.</summary>
      <returns>An integer value specifying the offset at which to begin reading in the byte stream.</returns>
      <param name="index">Index in the data field from which to begin the read operation.</param>
      <param name="buffer">The byte array to be read.</param>
      <param name="bufferIndex">Index in the buffer at which to start placing the data.</param>
      <param name="length">Length of the byte stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItem(System.Int32)">
      <summary>Retrieves a data item at a specified index.</summary>
      <returns>Returns an object representing the item at the specified index.</returns>
      <param name="index">Index in the field specifying the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItem(System.String)">
      <summary>Retrieves a data item with a specified name.</summary>
      <returns>The data item with the specified name.</returns>
      <param name="name">Name of the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItemIndex(System.String)">
      <summary>Retrieves the index of the data item for the specified data item name.</summary>
      <returns>The index of the data item.</returns>
      <param name="name">The name of the data item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves an integer value specifying the maximum length of the data item at the specified index.</summary>
      <returns>An integer value specifying the maximum length of the data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the maximum length value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItemName(System.Int32)">
      <summary>Retrieves the string literal name of the data item at the specified index.</summary>
      <returns>The name of the data item at the specified index.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the item name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat)">
      <summary>Retrieves the data type for a data item at a specified index and with a specified item type format.</summary>
      <returns>The data type for the specified data item.</returns>
      <param name="index">Index in the field specifying the data item for which to retrieve the item type format.The <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat" /> object specifying the data type format for the data item.</param>
      <param name="itemTypeFormat">Index in the field specifying the data item for which to retrieve the item type format.The <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.DataItemTypeFormat" /> object specifying the data type format for the data item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.HasDescriptor">
      <summary>Gets a value indicating whether the data parameter exposes its <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataReaderDescriptor" /> implementation through the <see cref="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.Descriptor" /> property.</summary>
      <returns>true if the data parameter has the descriptor information; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.IsClosed">
      <summary>Gets a value indicating whether the <see cref="T:System.Data.DataTable" /> is closed.</summary>
      <returns>true if the <see cref="T:System.Data.DataTable" /> object is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.IsNullItem(System.Int32)">
      <summary>Retrieves a Boolean value indicating whether the data item at the specified index is null.</summary>
      <returns>true if the data item is null; otherwise, false.</returns>
      <param name="index">Index in the field specifying the data item for which to test for null.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.ItemCount">
      <summary>Gets an integer value specifying the number of data items contained in the current <see cref="T:System.Data.DataTable" /> instance.</summary>
      <returns>An integer specifying data items in the current <see cref="T:System.Data.DataTable" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.NextResult">
      <summary>Tests whether there is another result set and, if true, advances the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataTableReader" />.</summary>
      <returns>true if another result exists; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.Read">
      <summary>Tests whether there is another data record and, if true, advances the <see cref="T:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetDataTableReader" /> to the next record.</summary>
      <returns>true if there is another record (row) to read; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.Status">
      <summary>Gets an integer value representing the status of the data table; however, invariably returns zero.</summary>
      <returns>An integer representing status.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetTableReader.UnderlyingTable">
      <summary>Gets the underlying <see cref="T:System.Data.DataTable" /> object instance used in this class.</summary>
      <returns>The underlying <see cref="T:System.Data.DataTable" /> object instance used in this class.</returns>
    </member>
  </members>
</doc>