<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Data</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Data.BasicPropertyAttribute">
      <summary>Provides a means for indicating whether or not a given connection property is among those most commonly used.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.BasicPropertyAttribute.#ctor(System.Boolean)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.BasicPropertyAttribute" /> class with a Boolean indication of whether the instance is "basic."</summary>
      <param name="isBasicProperty">Boolean value specifying whether the specified property is "basic."</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.BasicPropertyAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether the current instance is equal to a specified value. Overrides <see cref="M:System.Boolean.Equals(System.Boolean)" />.</summary>
      <returns>Returns true if the <paramref name="value" /> parameter equals the type and value of the current instance; otherwise returns false.</returns>
      <param name="obj">Object containing the value against which the equality test is performed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.BasicPropertyAttribute.GetHashCode">
      <summary>Returns the hash code for the current instance. Overrides <see cref="M:System.Int32.GetHashCode" />.</summary>
      <returns>Returns a 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.BasicPropertyAttribute.IsBasicProperty">
      <summary>Retrieves a Boolean indicating whether the property is "basic".</summary>
      <returns>Returns true if the property is "basic"; otherwise returns false. The default is false.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.BasicPropertyAttribute.No">
      <summary>Specifies that the property is not "basic".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.BasicPropertyAttribute.Yes">
      <summary>Specifies that the property is considered "basic".</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommand">
      <summary>Enables executing data commands in an asynchronous manner.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommand" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncDeriveParameters(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Derives, in an asynchronous manner, a set of parameters for use with a specified command.</summary>
      <param name="command">Command for which the parameters are derived.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncDeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Derives, in an asynchronous manner, the schema of the specified command.</summary>
      <param name="command">The command for which the schema is derived.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncExecute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Executes a command in an asynchronous manner.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Executes, in an asynchronous manner, a command that does not return any results beyond an integer value indicating status.</summary>
      <param name="command">The command to be executed.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="parameters">A list of parameters to pass with the command.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.AsyncPrepare(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.Data.DataAsyncCommandEvents)">
      <summary>Prepares, in an asynchronous manner, the specified command to be executed against the data source; the command may then be executed multiple times, with varying parameters.</summary>
      <param name="command">The command to be prepared.</param>
      <param name="commandType">Format of the command string.</param>
      <param name="commandTimeout">Amount of time, in seconds, before which the command times out.</param>
      <param name="asyncCommandEvents">The object on which this method calls back as the command progresses.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.Cancel">
      <summary>Cancels the asynchronous call, returning immediately.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommand.Cancel(System.Boolean)">
      <summary>Cancels the asynchronous call, returning either immediately (asynchronously) or after waiting for the call to be fully cancelled (synchronously).</summary>
      <param name="waitForEnd">Boolean flag indicating whether or not to wait for the call to be fully cancelled before returning.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandCancelEventHandler">
      <summary>Represents the method that is called when an asynchronous command is canceled.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandEndEventHandler">
      <summary>Represents the method that is called when an asynchronous command ends.</summary>
      <param name="result">The value returned by the command.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandEvents">
      <summary>Represents a set of delegates that are called by methods on the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommand" /> class to notify clients of command progress.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommandEvents" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.#ctor(Microsoft.VisualStudio.Data.DataAsyncCommandStartEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandFailureEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandCancelEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandEndEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommandEvents" /> class with the specified delegates.</summary>
      <param name="commandStart">The delegate to call when a command is starting.</param>
      <param name="commandFailure">The delegate to call when there is a command failure.</param>
      <param name="commandCancel">The delegate to call when a command is canceled.</param>
      <param name="commandEnd">The delegate to call when a command has ended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.#ctor(Microsoft.VisualStudio.Data.DataAsyncCommandStartEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandFailureEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandFetchEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandFetchEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandCancelEventHandler,Microsoft.VisualStudio.Data.DataAsyncCommandEndEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommandEvents" /> class with the specified delegates.</summary>
      <param name="commandStart">The delegate to call when a command is starting.</param>
      <param name="commandFailure">The delegate to call when there is a command failure.</param>
      <param name="commandNextResult">The delegate to call when a command has one or more result sets available.</param>
      <param name="commandRead">The delegate to call when a command has one or more blocks of data available to read from a result set.</param>
      <param name="commandCancel">The delegate to call when a command is canceled.</param>
      <param name="commandEnd">The delegate to call when a command has ended.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandCancel">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command is canceled.</summary>
      <returns>Returns a delegate for the CommandCancel event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandEnd">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command has ended.</summary>
      <returns>Returns a delegate for the CommandEnd event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandFailure">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command has a failure.</summary>
      <returns>Returns a delegate for the CommandFailure event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandNextResult">
      <summary>Gets or sets the delegate that is called when an asynchronous command has one or more result sets available.</summary>
      <returns>Returns a delegate for the CommandNextResult event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandRead">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command has one or more blocks of data available to read in a result set.</summary>
      <returns>Returns a delegate for the CommandRead event handler.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandStart">
      <summary>Retrieves or sets the delegate that is called when an asynchronous command starts.</summary>
      <returns>Returns a delegate for the CommandStart event handler.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandFailureEventHandler">
      <summary>Represents the method that is called when an asynchronous command fails.</summary>
      <param name="e">The exception that occurs to cause the command failure.</param>
      <param name="nonFatal">An indication if the failure is non-fatal; that is, that the command continues to run after this method returns.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandFetchEventHandler">
      <summary>Represents the method that is called when an asynchronous command has results available for fetching.</summary>
      <returns>Returns a value indicating how the command should proceed on return of this method.</returns>
      <param name="dataReader">The data reader object that provides the results.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandRequest">
      <summary>Enumeration specifying the manner in which an asynchronous command should continue after a call to the <see cref="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandNextResult" /> or <see cref="P:Microsoft.VisualStudio.Data.DataAsyncCommandEvents.CommandRead" /> methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataAsyncCommandRequest.None">
      <summary>There is no command request.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataAsyncCommandRequest.EndResultSet">
      <summary>The command should stop retrieving data in the current result set and proceed to the next result set, if any.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataAsyncCommandRequest.EndCommand">
      <summary>The command should stop retrieving data and end.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataAsyncCommandStartEventHandler">
      <summary>Represents the method that is called when an asynchronous command starts.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataCommand">
      <summary>Provides the ability to build and execute data commands of various types against data sources, and to retrieve read-only results or a command status code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataCommand" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.CreateParameter">
      <summary>Creates a parameter object that can be passed into the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />, <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" />methods on a <see cref="T:Microsoft.VisualStudio.Data.DataCommand" />class instance.</summary>
      <returns>Returns a new DataParameter object instance.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)">
      <summary>Derives the parameters that can be specified for a given command.</summary>
      <returns>Returns an array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects. Each object represents a parameter derived from the command.</returns>
      <param name="command">A command from which to derive parameters specific to a data source. </param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the parameter derivation and returning to the caller. A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Derives the schema returned from a specified command, indicating the layout of items and blocks in a data reader.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object. This object provides a forward-only, read-only data stream that describes the layout of items and blocks, that is, the schema, for the reader object returned upon executing the specified command.</returns>
      <param name="command">A command for which to derive the schema specific to a data source. </param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects for the specified command type. While this is an input parameter, the DDEX provider is still able to set properties on individual out and return value parameters. However, these will not be populated when deriving schema.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters, and returns read-only results.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects for the specified command type. While this is an input parameter, the DDEX provider is still able to set properties on individual out and return value parameters.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>Returns a DDEX provider specific integer status code.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">An array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects for the specified command type. While this is an input parameter, the provider is still able to set properties on individual out and return value parameters. </param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. . A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataCommand.Prepare(System.String,System.Int32,System.Int32)">
      <summary>Prepares the specified command on the data source to be executed; the command may then be executed multiple times, with varying parameters.</summary>
      <returns>Returns an identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> methods using the command type <see cref="F:Microsoft.VisualStudio.Data.DataCommandType.Prepared" />.</returns>
      <param name="command">A command to execute that is specific to a data source.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the execution and returning to the caller. A value of 0 indicates infinite timeout; a value of -1 indicates a provider default.</param>
      <exception cref="T:System.ArgumentNullException">The command or asyncCommandEvents are null.</exception>
      <exception cref="T:System.ArgumentException">The commandType specifies an invalid type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The commandTimeout is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The provider does not support this method.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataCommandType">
      <summary>Represents a set of predefined data command types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.Prepared">
      <summary>Indicates a prepared command type, where the command text is an identifier previously returned by a call to the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Prepare(System.String,System.Int32,System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.Procedure">
      <summary>Indicates a procedure command type, where the command text is the name of the procedure to be executed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.ScalarFunction">
      <summary>Indicates a scalar function command type, where the command text is the identifier of a function to be executed that returns a scalar value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.Table">
      <summary>Indicates a table command type, where the command text is the identifier of a table from which all results should be retrieved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.TabularFunction">
      <summary>Indicates a tabular function command type, where the command text is the identifier of a function to execute that returns a result set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataCommandType.Text">
      <summary>Indicates a text command type, where the command text should be native code understood by the DDEX provider, for example, SQL.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnection">
      <summary>Supports a connection to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.AsyncCommand">
      <summary>Retrieves an object that can perform asynchronous derivation and execution of commands on the data source.</summary>
      <returns>Returns an object instance of the <see cref="T:Microsoft.VisualStudio.Data.DataAsyncCommand" /> class, which can perform asynchronous derivation and execution of commands on the data source.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Clone">
      <summary>Creates a cloned instance of this data connection, which retains the same connection properties and state as the original.</summary>
      <returns>Returns a cloned instance of the current <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance, with the same connection properties and state as the original.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Close">
      <summary>Closes the current data connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.Command">
      <summary>Retrieves an object that can perform derivation and execution of commands on the data source.</summary>
      <returns>Returns an object instance of the <see cref="T:Microsoft.VisualStudio.Data.DataCommand" /> class, which can perform derivation and execution of commands on the data source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ConnectionSupport">
      <summary>Retrieves the underlying data provider connection support object that is being used to support the current data connection instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> object instance, which functions as the underlying DDEX provider connection support object supporting the current data connection instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ConnectionTimeout">
      <summary>Retrieves or sets the amount of time, in seconds, before a command to open a connection times out.</summary>
      <returns>Returns an integer value specifying the amount of time, in seconds, until a command to open a connection times out.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.DisplayConnectionString">
      <summary>Retrieves or sets unencrypted connection information in the form of a DDEX-provider-specific string. </summary>
      <returns>Returns unencrypted connection information in the form of a provider-specific string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Dispose">
      <summary>Disposes of the current data connection and all its associated resources. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Dispose(System.Boolean)">
      <summary>Supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="disposing">Indicates whether the connection object is being disposed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.EncryptedConnectionString">
      <summary>Retrieves or sets encrypted connection information in the form of a DPAPI-encrypted, provider-specific string.</summary>
      <returns>Returns encrypted connection information in the form of a DPAPI_encrypted, provider-specific string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.EquivalentTo(System.Guid,System.String,System.Boolean)">
      <summary>Retrieves a Boolean value indicating whether or not information about the current connection is equivalent, in a design time sense, to the specified connection information.</summary>
      <returns>Returns true if the current connection's information is equivalent to connection information for the specified connection; otherwise returns false.</returns>
      <param name="provider">The unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted provider-specific connection string.</param>
      <param name="encryptedString">Indication whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted. Provides true if encrypted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Finalize">
      <summary>Finalizes the connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.GetExclusiveAccessProxy(System.Int32)">
      <summary>Retrieves a proxy instance that allows the caller exclusive access to the data connection.</summary>
      <returns>Returns a proxy <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance that allows the caller exclusive access to the connection, or returns null if the lock timeout was reached and the connection could not be locked.</returns>
      <param name="lockTimeout">The amount of time, in seconds, to wait on locking the connection before returning.</param>
      <exception cref="T:System.InvalidOperationException">This object is an exclusive access proxy that no longer has exclusive access.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.GetLockedProviderObject">
      <summary>Retrieves the underlying data provider object, if any, which supports the current data connection.</summary>
      <returns>Returns a <see cref="M:Microsoft.VisualStudio.Data.DataConnection.GetLockedProviderObject(System.Int32)" /> object instance, if any, which supports the current data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.GetLockedProviderObject(System.Int32)">
      <summary>Retrieves the underlying data provider object, if any, which supports the current data connection.</summary>
      <returns>Returns a GetLockedProviderObject object instance, if any, that supports the current data connection, or returns null if the lock timeout was reached and the provider object could not be locked.</returns>
      <param name="lockTimeout">The amount of time, in seconds, to wait on locking the connection before returning.</param>
      <exception cref="T:System.InvalidOperationException">This object is an exclusive access proxy that no longer has exclusive access.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.IsLockedForExclusiveAccess">
      <summary>Retrieves a Boolean value indicating whether the current connection is locked by a client for exclusive access.</summary>
      <returns>Returns true if the specified connection is locked for exclusive access; otherwise returns false.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived">
      <summary>Event that is raised when a message is received from the data source.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectChangeEvents">
      <summary>Retrieves an object that provides a set of events raised when data objects on the data source are added, changed, or removed.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeEvents" /> object instance, which provides a set of events raised when data objects on the data source are added, changed or removed.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectIdentifierConverter">
      <summary>Retrieves an object that can convert data object identifiers from formatted strings to unformatted parts and vice versa.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> object instance, which can convert data object identifiers from formatted strings to unformatted parts and vice versa.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectIdentifierResolver">
      <summary>Retrieves an object that can resolve data object identifiers through both expansion and contraction.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver" /> object instance, which can resolve data object identifiers using expansion, defined as completion of identifier parts, and contraction, reducing the identifier to its minimal representation.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectItemComparer">
      <summary>Retrieves an object that can compare identifier parts and properties on data objects.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> object instance, which compares identifier parts and properties on data objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ObjectSupport">
      <summary>Retrieves an object that provides an XML stream defining the various DDEX data object types supported by the current data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectSupport" /> object instance, which provides an XML stream with definitions for the DDEX data object types supported by the current data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.OnMessageReceived(Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived" /> event.</summary>
      <param name="e">Event arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.OnStateChanged(Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event.</summary>
      <param name="e">Event arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.Open">
      <summary>Opens this data connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.Provider">
      <summary>Retrieves the unique identifier of the DDEX Provider for the current data connection.</summary>
      <returns>Returns the global unique identifier (GUID) of the DDEX provider for this data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ProviderObjectIsLocked">
      <summary>Retrieves a Boolean value indicating whether the underlying DDEX Provider object is locked for use by a client.</summary>
      <returns>Returns true if the underlying DDEX Provider object is locked for use by a client; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.ReleaseExclusiveAccessProxy">
      <summary>Releases an existing exclusive access proxy, as provided with a call to the <see cref="M:Microsoft.VisualStudio.Data.DataConnection.GetExclusiveAccessProxy(System.Int32)" /> method.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Access to this connection is not currently exclusive, or this thread is not the owner of the current exclusive access, or this object is not the current exclusive access proxy being used to access the connection.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.Source">
      <summary>Retrieves the globally unique identifier (GUID) of the data source for the current data connection, if any.</summary>
      <returns>Returns a GUID object instance representing the data source for the current data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.SourceInformation">
      <summary>Retrieves an object that provides a set of well known name/value pairs describing the characteristics of the data source.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> object instance, which provides a set of name/value pairs that describe characteristics of the data source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.SourceVersionComparer">
      <summary>Retrieves an object that allows you to compare data-source-specific version numbers.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer" /> object instance, which enables comparing data source version numbers.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.State">
      <summary>Retrieves the current state of this data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> object instance that indicates the state of the current data connection.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged">
      <summary>Event that is raised when the state of the data connection has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.System#ICloneable#Clone">
      <summary>Creates a new connection object instance that is a copy of the current instance.</summary>
      <returns>Returns a connection object instance that is a copy of the current instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.Transaction">
      <summary>Retrieves an object that enables transaction processing; that is, allows you to begin, commit, and rollback transactions on the data source.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataTransaction" /> object instance, which provides the ability to begin, commit, and rollback transactions on the data source.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnection.UnlockProviderObject">
      <summary>Unlocks a DDEX Provider object that has been locked using a call to the <see cref="M:Microsoft.VisualStudio.Data.DataConnection.GetLockedProviderObject(System.Int32)" />method.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Access to this connection is not currently exclusive, or this thread is not the owner of the current exclusive access, or this object is not the current exclusive access proxy being used to access the connection.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnection.ViewSupport">
      <summary>Retrieves an object that provides an XML stream defining the various data views supported by the current data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> object instance, which contains an XML stream that provides definitions of the various data views supported by the current data connection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionDialog">
      <summary>Provides access to the Data Connection dialog box with which to obtain data connection information from users.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.#ctor">
      <summary>Class constructor. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.AcceptButtonText">
      <summary>Retrieves or sets the text displayed on the button the user clicks to accept the contents of the Data Connection dialog box, then returns from the <see cref="M:Microsoft.VisualStudio.Data.DataConnectionDialog.ShowDialog" /> method.</summary>
      <returns>Returns the string value displayed on the button the user clicks to accept the contents of the dialog.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.AddAllSources">
      <summary>Adds all registered data sources for display on the Data Source dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.AddSources(Microsoft.VisualStudio.Data.DataConnectionDialogFilterCallback)">
      <summary>Enumerates all registered data sources and their associated data providers, and conditionally adds source/provider combinations to the Data Connection dialog box based on logic in the supplied callback.</summary>
      <param name="filterer">A delegate called for each data source/provider combination to determine if the combination should be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.AddSources(System.Guid)">
      <summary>Enumerates through all registered data sources and associated data providers, and adds those that have a matching provider technology.</summary>
      <param name="providerTechnology">A guid specifying a data provider technology.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.AvailableProviders">
      <summary>Retrieves a collection of unique identifiers for DDEX providers that are currently available for selection in the Data Connection dialog box.</summary>
      <returns>Returns an <see cref="T:System.Collections.ICollection" /> object instance that contains a collection of unique identifiers for the current set of available DDEX providers.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.AvailableSources">
      <summary>A collection of GUIDs representing DDEX data sources that should be available for display in the Data Connection dialog box.</summary>
      <returns>Returns an ICollection object instance containing available GUIDs.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChangeDataSourceHeaderLabel">
      <summary>Retrieves or sets a summary description appearing on the Data Source dialog box header when the user clicks on the Change... button.</summary>
      <returns>Returns a string literal value represented on the dialog box header.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChangeDataSourceTitle">
      <summary>Retrieves or sets the title of the Data Source dialog box, which can be shown when the user clicks the Change… button.</summary>
      <returns>Returns the string literal value for the dialog box title.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChooseDataSourceAcceptText">
      <summary>Retrieves or sets text that shows on the Data Source dialog box Accept button when it appears before the Data Connection dialog box.</summary>
      <returns>Returns the string literal value of the Accept button text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChooseDataSourceHeaderLabel">
      <summary>Retrieves or sets text of the description that appears on the header of the Data Source dialog box when it appears before the Data Connection dialog box.</summary>
      <returns>Returns the string literal value of the header text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.ChooseDataSourceTitle">
      <summary>Retrieves or sets the title of the Data Source dialog box when it appears before the Data Connection dialog box.</summary>
      <returns>Returns the string literal text value</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.DisplayConnectionString">
      <summary>Retrieves or sets unencrypted connection information for display on the Data Connection dialog box for the specified data provider.</summary>
      <returns>Returns string representing unencrypted connection information for the connection dialog box.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.Dispose">
      <summary>Disposes of the current instance of the data connection dialog and releases managed resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.Dispose(System.Boolean)">
      <summary>Disposes of the current instance of the data connection dialog and releases managed resources.</summary>
      <param name="disposing">Boolean flag.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.EncryptedConnectionString">
      <summary>Retrieves or sets encrypted connection information for the dialog box for the specified data provider.</summary>
      <returns>Returns encrypted connection information represented by the dialog for the selected provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the DataConnectionDialog object is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.HeaderLabel">
      <summary>Retrieves or sets a summary description that appears at the head of the Data Connection dialog box.</summary>
      <returns>Returns the string literal value of the dialog box header label, or returns null if no value is set.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.LoadExistingConfiguration(System.Guid,System.String,System.Boolean)">
      <summary>Configures the Data Connection dialog box with the specified existing DDEX provider and connection string, deriving the correct data source where possible.</summary>
      <param name="provider">GUID specifying a DDEX provider.</param>
      <param name="connectionString">A connection string recognized by the data provider.</param>
      <param name="encryptedString">Boolean indication whether the connection string parameter is encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The provider is an empty GUID and/or connectionString is null.</exception>
      <exception cref="T:System.ArgumentException">The specified provider is unknown to the dialog.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.LoadProviderSelections">
      <summary>Loads information about which DDEX provider is selected by default for each data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.LoadSourceSelection">
      <summary>Loads information about which data source is currently selected.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.OnVerifySettings(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataConnectionDialog.VerifySettings" /> event.</summary>
      <param name="e">A System.EventArgs that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.SaveProviderSelections">
      <summary>Saves information about which DDEX provider is selected by default for each data source.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.SaveSelection">
      <summary>Retrieves or sets a value indicating whether the caller of the dialog box should persist the currently selected data source and DDEX provider combination.</summary>
      <returns>Returns true if the dialog box should persist the currently selected data source and DDEX provider combination; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.SaveSourceSelection">
      <summary>Saves information about which data source is currently selected.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.SelectedProvider">
      <summary>Retrieves or sets the data provider currently selected in the connection dialog box, using the data provider's GUID.</summary>
      <returns>Returns the GUID of the data provider currently selected in the dialog box.</returns>
      <exception cref="T:System.InvalidOperationException">When setting the selected provider, the value of SelectedSource is an empty GUID and the specified GUID is not empty.</exception>
      <exception cref="T:System.ArgumentException">When setting the selected provider, the specified GUID is not a registered DDEX provider.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.SelectedSource">
      <summary>Retrieves or sets a GUID value indicating the current selected data source.</summary>
      <returns>Returns a GUID object instance reflecting the current data source.</returns>
      <exception cref="T:System.ArgumentException">When setting the selected provider, the specified GUID is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.ShowDialog">
      <summary>Shows the Data Connection dialog box with the selected data provider and connection string settings pre-populated.</summary>
      <returns>Returns true if the user exited the dialog by clicking the accept button; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialog.ShowDialog(System.Boolean)">
      <summary>Shows the Data Connection dialog box pre-populated with the data provider and connection string settings and returns an open connection based on the connection string settings.</summary>
      <returns>Returns true if the dialog box should attempt to open the connection; otherwise returns false.</returns>
      <param name="connect">Boolean value indicating whether the dialog box should attempt to open the connection before returning.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionDialog.Title">
      <summary>Retrieves or sets the string representing text shown on the connection dialog box title bar.</summary>
      <returns>Returns the string representing the text shown in the title bar of the dialog box.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataConnectionDialog.UnspecifiedSource">
      <summary>Represents an unspecified data source.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnectionDialog.VerifySettings">
      <summary>The event raised when a user attempts to accept the connection settings in the Data Connection dialog box.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionDialogFactory">
      <summary>Provides the ability to create an instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionDialog" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialogFactory.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionDialogFactory.CreateConnectionDialog">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionDialogFactory" /> class.</summary>
      <returns>Returns a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionDialogFactory" /> class.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionDialogFilterCallback">
      <summary>Represents the method that is called when a Data Connection dialog box callback occurs while adding DDEX providers and data sources.</summary>
      <returns>Returns true if the data source and data provider GUIDs are an acceptable combination for including in the dialog; otherwise returns false.</returns>
      <param name="source">GUID of a DDEX data source.</param>
      <param name="provider">GUID of a DDEX provider.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionFactory">
      <summary>Provides the ability to create stand-alone instances of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.CreateDataConnection(System.Guid,System.String,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class with the specified connection information.</summary>
      <returns>Returns a specified <see cref="T:Microsoft.VisualStudio.Data.DataConnection" />object instance.</returns>
      <param name="provider">The unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted. Specifies true if encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cconnectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="provider" /> is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.CreateDataConnectionImpl(System.Guid,System.String,System.Boolean)">
      <summary>This member supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
      <param name="provider">The unique identifier of a data provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted. Specifies true if encrypted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.MakeDataConnectionFrom(System.Guid,System.Object)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class for the specified provider from an existing underlying provider object.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
      <param name="provider">The unique identifier of a DDEX provider.</param>
      <param name="providerObj">An existing underlying provider object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="providerObj" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="provider" /> is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionFactory.MakeDataConnectionFromImpl(System.Guid,System.Object)">
      <summary>This member supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
      <param name="provider">The unique identifier of a data provider.</param>
      <param name="providerObj">An existing underlying provider object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionManager">
      <summary>Represents a shared set of data connection objects that are created on demand and managed by Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.CopyTo(Microsoft.VisualStudio.Data.DataConnection[],System.Int32)">
      <summary>Copies the set of currently managed data connections to an array, starting at the specified array index.</summary>
      <param name="array">An array into which the data connections should be copied.</param>
      <param name="arrayIndex">The index in the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionManager.Count">
      <summary>Retrieves a count of the number of data connections currently being managed.</summary>
      <returns>Returns an integer representing the current number of data connections.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.CreateDataConnection(System.Guid,System.String,System.Boolean)">
      <summary>Initializes a data connection. This method should not be called by client code.</summary>
      <returns>This method is part of the DDEX infrastructure and is not intended to be called from your code.To obtain an existing or create a new connection, use the <see cref="M:Microsoft.VisualStudio.Data.DataConnectionManager.GetDataConnection(System.Guid,System.String,System.Boolean)" /> method.</returns>
      <param name="provider">DDEX provider GUID.</param>
      <param name="connectionString">DDEX provider connection string.</param>
      <param name="encryptedString">Indication whether the connection string information is encrypted (true if encrypted.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.GetDataConnection(System.Guid,System.String,System.Boolean)">
      <summary>Retrieves a data connection that is equivalent to the specified connection information.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance representing the requested connection.</returns>
      <param name="provider">DDEX provider GUID.</param>
      <param name="connectionString">DDEX provider connection string.</param>
      <param name="encryptedString">Indication whether the connection string information is encrypted (true if encrypted.)</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="provider" /> is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.GetDataConnection(System.Guid,System.String,System.Boolean,System.Boolean)">
      <summary>Retrieves a data connection that is equivalent to the specified connection information, with an indication whether the connection information is updated.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance representing the requested connection.</returns>
      <param name="provider">A DDEX data provider GUID.</param>
      <param name="connectionString">A connection string recognized by the data provider.</param>
      <param name="encryptedString">Indicates whether the connection string parameter is encrypted (true if encrypted).</param>
      <param name="update">Indicates whether the connection information is updated</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.InvalidateDataConnection(System.Guid,System.String,System.Boolean)">
      <summary>Invalidates a currently managed data connection that matches the specified connection information, if any.</summary>
      <param name="provider">A DDEX data provider GUID.</param>
      <param name="connectionString">A connection string recognized by the data provider.</param>
      <param name="encryptedString">Indicates whether the connection string parameter is encrypted (true if encrypted).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#Add(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Adds a data source to the DDEX data connection collection.</summary>
      <param name="item">DDEX data connection</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Clears the DDEX data connection collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#Contains(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Tests whether the DDEX data connection collection contains a specified connection.</summary>
      <returns>Returns true if the collection contains the specified data connection; otherwise returns false.</returns>
      <param name="item">DDEX data connection</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Tests whether the data connection collection is read only.</summary>
      <returns>Returns true if the collection is read only; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#ICollection{T}#Remove(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Removes a data connection from the DDEX data connection collection.</summary>
      <returns>Returns true if the data connection was found and successfully removed; otherwise returns false.</returns>
      <param name="item">DDEX data connection</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an enumerator for iterating the DDEX data connection collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an IEnumerator object with which to iterate through the collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs">
      <summary>Provides event data for the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs" /> class, providing the event message.</summary>
      <param name="message">The message, as string, received from the data source.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs.Message">
      <summary>Retrieves the message supplied by data source.</summary>
      <returns>Returns the string literal message from the data source.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived" /> event of a data connection.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">
        <see cref="T:Microsoft.VisualStudio.Data.DataConnectionMessageReceivedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException">
      <summary>Provides the exception that is thrown when a method call to open a data connection causes user intervention and the user is able to cancel the open call.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException" /> class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException.#ctor(System.String,System.Exception)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionOpenCanceledException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionPromptDialog">
      <summary>Represents a dialog box that can prompt the user for information when a data connection is being opened.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPromptDialog" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.ConnectionSupport">
      <summary>Retrieves the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> object on which the data provider should update the <see cref="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ConnectionString" /> property.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> object instance on which the DDEX provider must update the <see cref="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ConnectionString" /> property.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
      <summary>Event handler for the <see cref="T:System.Windows.Forms.FormClosingEventArgs" /> event.</summary>
      <param name="e">Argument on the <see cref="M:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)" /> event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionPromptDialog.ShowDialog(Microsoft.VisualStudio.Data.DataConnectionSupport)">
      <summary>Displays the prompt dialog box, given a specific <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> instance.</summary>
      <returns>Returns a string that is the new value of the connection string containing the completed information that was entered by the user.</returns>
      <param name="connectionSupport">An instance of <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> class that contains an existing, incomplete connection string that should be updated by this dialog.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionSupport" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionProperties">
      <summary>Provides support for the parsing and formatting of connection strings containing these properties, as well as for strongly typed property storage, custom attributes, and synonyms.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.#ctor">
      <summary>Class constructor. Instantiates a non-parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.#ctor(System.Collections.IComparer)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class that provides the ability to compare property names.</summary>
      <param name="propertyNameComparer">A comparer of property names.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.#ctor(System.Collections.IComparer,System.Char,System.Char)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class that provides the ability to compare property names.</summary>
      <param name="propertyNameComparer">A comparer of property names.</param>
      <param name="propertyNameValueSeparator">The character placed between the property name and property value in the connection string (for example, "=").</param>
      <param name="propertyEntrySeparator">The character placed between two property name/value pairs (for example, ";").</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Add(System.String)">
      <summary>Adds a new property to the current connection properties collection.</summary>
      <param name="propertyName">Name of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The connection properties are not extensible.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.AddProperty(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Dynamically adds a new property to the collection of properties natively recognized by the current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class.</summary>
      <returns>Returns the descriptor of the newly added property.</returns>
      <param name="descriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> object that provides a description of this property and its characteristics.</param>
      <param name="attributes">A set of attributes to apply to the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="descriptor" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.AddProperty(System.String,System.Type,System.Attribute[])">
      <summary>Dynamically adds a new property to the collection of properties natively recognized by this data connection properties instance.</summary>
      <returns>The descriptor of the newly added property.</returns>
      <param name="name">The property name.</param>
      <param name="type">The data type of the property.</param>
      <param name="attributes">A set of attributes to attach to the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> and/or <paramref name="type" /> parameters are null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified property already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Contains(System.String)">
      <summary>Tests whether a specified property is a member of the current set of connection properties.</summary>
      <returns>Returns true if the specified property is a member of the connection properties collection; otherwise returns false.</returns>
      <param name="propertyName">Name of the property whose presence is being tested.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.EquivalentTo(Microsoft.VisualStudio.Data.DataConnectionProperties)">
      <summary>Retrieves a Boolean value indicating whether the current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> class is equivalent to another <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
      <returns>Returns true if the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance is equivalent to another instance of the class; otherwise returns false.</returns>
      <param name="connectionProperties">The data connection properties instance to compare against.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionProperties" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetBasicProperties">
      <summary>Retrieves an array of property names representing the set of "basic" properties known by the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
      <returns>Returns the set of "basic" properties associated with the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetEnumerator">
      <summary>Retrieves an enumerator that enumerates over all the known connection properties and their values, if any.</summary>
      <returns>Returns a data connection properties enumerator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetNameAsString(System.String)">
      <summary>Formats a property name for placement in a connection string.</summary>
      <returns>Returns the formatted name of the input property name for placement in a connection string.</returns>
      <param name="propertyName">Name of the property for which the name is provided.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetProperties">
      <summary>Retrieves the collection of descriptors of all currently known properties.</summary>
      <returns>Returns the collection of descriptors of all currently known properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetProperties(System.Attribute[])">
      <summary>Retrieves the collection of descriptors of currently known properties that match a specified set of attributes.</summary>
      <returns>Returns a collection of descriptors of currently known properties that match a specified set of attributes.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter to define which properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetProperty(System.String)">
      <summary>Retrieves the descriptor of a property with the specified property name.</summary>
      <returns>Returns a descriptor of a property with the specified property name, or returns null if no property with the specified name is found.</returns>
      <param name="name">The name of a property for which to retrieve the descriptor.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetSynonyms(System.String)">
      <summary>Retrieves an array list of synonyms for a specified property.</summary>
      <returns>Returns a list of synonyms for a specified property.</returns>
      <param name="propertyName">The name of a property for which to retrieve the list of synonyms.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.GetValueAsString(System.String)">
      <summary>Formats a property value for placement in a connection string.</summary>
      <returns>Returns the value of the specified property in a string format suitable for placement in a connection string.</returns>
      <param name="propertyName">The name of a property to be formatted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The property does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Initialize(System.Collections.IDictionary)">
      <summary>Initializes the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance to its default state, then sets each property in the specified dictionary.</summary>
      <param name="properties">A dictionary of property name/value pairs with which the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance is configured. This parameter may be null, in which case no properties are configured.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.InitializeProperties">
      <summary>Initializes the set of natively recognized properties for the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.InitializeSynonyms">
      <summary>Initializes the set of synonyms available for each natively recognized property in the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.InitializeValue(System.String,System.Object)">
      <summary>Initializes the value of a specified connection property.</summary>
      <param name="propertyName">The name of a property being initialized.</param>
      <param name="value">The value to which the property is initialized.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">The specified value cannot be converted to the property type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.InitializeValues(System.Collections.IDictionary)">
      <summary>Initializes values for a specified set of properties using a dictionary of name/value pairs.</summary>
      <param name="values">A dictionary of property name/value pairs.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.IsComplete">
      <summary>Retrieves a Boolean value indicating whether a given connection string is complete.</summary>
      <returns>Returns true if the connection string is complete; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.IsExtensible">
      <summary>Retrieves or sets a Boolean value indicating whether the DDEX Provider connection properties are extensible.</summary>
      <returns>Returns true if the connection properties are extensible. Returns false otherwise.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.IsSensitive(System.String)">
      <summary>Indicates whether a property contains sensitive information.</summary>
      <returns>Returns true if the property contains sensitive information; otherwise, returns false.</returns>
      <param name="propertyName">The name of the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The property does not exist.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.Item(System.String)">
      <summary>Retrieves or sets a value for a specified property on the DDEX Provider.</summary>
      <returns>Returns the value associated with the specified property name. Alternatively, returns DBNull.Value if the property is known but is not set (and has no default), or returns null if the property is not known.</returns>
      <param name="propertyName">The name of a connection property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">When setting a property value, the specified value cannot be converted to the property type.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnectionProperties.Microsoft#Data#ConnectionUI#IDataConnectionProperties#PropertyChanged">
      <summary>Event that fires on the occurrence of a change to a connection property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ModifyProperty(System.String,System.Attribute[])">
      <summary>Modifies an existing property of which the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance is natively aware.</summary>
      <param name="name">The name of a property.</param>
      <param name="attributes">A set of attributes that should be added or modified.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.OnPropertyChanged(Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataConnectionProperties.PropertyChanged" /> event.</summary>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.OrderedProperties">
      <summary>Retrieves a collection of property names specifying a reasonable (or necessary) order for the properties when represented in string form.</summary>
      <returns>A collection of property names indicating a reasonable (or necessary) order to the properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Parse(System.String)">
      <summary>Disassembles the components of a connection string into a set of properties in the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
      <param name="s">A connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</param>
      <exception cref="T:System.FormatException">The format of <paramref name="s" /> was invalid.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataConnectionProperties.PropertyChanged">
      <summary>Event that fires on the occurrence of a change to a connection property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ReadNameFromString(System.String,System.Int32@)">
      <summary>Reads a property name from a connection string starting at a specified index, then updates the index to point to a position immediately following the property name.</summary>
      <returns>Returns the substring of the <paramref name="connectionString" /> parameter that represents the property name, between the input starting index and the end of the property name.</returns>
      <param name="connectionString">A connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</param>
      <param name="index">An index into this connection string indicating where to start reading the property name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ReadValueFromString(System.String,System.String,System.Int32@)">
      <summary>Reads a property value from a connection string starting at a specified index, converts it to the correct type, and updates the index to point to a position following the property name.</summary>
      <returns>Returns a substring of the <paramref name="connectionString" /> parameter representing the property value between the input starting index and the end of the property name, converted to the correct type.</returns>
      <param name="propertyName">The name of the property for which a value is being read.</param>
      <param name="connectionString">The connection string from which the value should be read.</param>
      <param name="index">Index into the connection string from which to start reading the value.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> and/or <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.FormatException">The format of the connection string is invalid.</exception>
      <exception cref="T:System.InvalidCastException">The read string value cannot be converted to the property type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Remove(System.String)">
      <summary>Removes a property from the current connection property collection.</summary>
      <param name="propertyName">Name of the property to be removed from the current set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.RemoveProperty(System.String)">
      <summary>Removes a natively recognized property.</summary>
      <param name="name">The name of a property to be removed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Reset">
      <summary>Resets the values of connection properties to an initial state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Reset(System.String)">
      <summary>Resets the value of a specified connection property to its initial state.</summary>
      <param name="propertyName">Name of the property to reset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ResolveSynonym(System.String,System.Boolean)">
      <summary>Attempts to resolves a synonym for the <see cref="T:System.ComponentModel.PropertyDescriptor" /> associated with a base property by returning the base property descriptor.</summary>
      <returns>Returns the descriptor of the base property located for the specified synonym.</returns>
      <param name="name">The name of a synonym.</param>
      <param name="setAsBaseName">Indicates whether this name should be set as the base name for the property, if found.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.SetSynonyms(System.String,System.String[])">
      <summary>Sets a list of strings as synonyms of a specified base property name.</summary>
      <param name="baseName">Name of the base property with which the specified synonyms are associated.</param>
      <param name="synonyms">An array of strings representing names that are synonymous with the base property name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="synonyms" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ShouldPersistProperty(System.String)">
      <summary>Indicates whether a property should be persisted when building a connection string.</summary>
      <returns>Returns false if the specified property is not recognized, is not set, or if it is set to the default value; otherwise, it returns true.</returns>
      <param name="propertyName">The name of a property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="Name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the set of connection properties to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the connection properties are copied.</param>
      <param name="index">The index into the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#ICollection#Count">
      <summary>Retrieves the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Returns the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#ICollection#IsSynchronized">
      <summary>Retrieves a value that indicates whether access to the connection properties collection is synchronized (thread safe).</summary>
      <returns>Returns true if access to the connection properties collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#ICollection#SyncRoot">
      <summary>Retrieves an object that can be used to synchronize access to the connection properties collection.</summary>
      <returns>Returns a synchronization object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds an element as a key/value pair to the specified <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">The object to use as the key of the element to add to the dictionary.</param>
      <param name="value">The object to use as the value of the element to add to the dictionary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Clear">
      <summary>Removes all elements from the specified <see cref="T:System.Collections.IDictionary" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key; otherwise returns false.</returns>
      <param name="key">The key on which to locate an element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#GetEnumerator">
      <summary>Retrieves an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#IsFixedSize">
      <summary>Retrieves a Boolean value indicating whether the specified <see cref="T:System.Collections.IDictionary" /> has a fixed size.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#IsReadOnly">
      <summary>Retrieves a Boolean indicating whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Item(System.Object)">
      <summary>Retrieves an item, or element, with the specified key.</summary>
      <returns>Returns the element with the specified key.</returns>
      <param name="key">The key on which to locate an item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Keys">
      <summary>Retrieves an <see cref="T:System.Collections.ICollection" /> containing the keys for the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Returns an <see cref="T:System.Collections.ICollection" /> containing the keys for the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">The key for the element to be removed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IDictionary#Values">
      <summary>Retrieves an <see cref="T:System.Collections.ICollection" /> containing the values in the specified <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Returns an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that is able to iterate through the connection properties collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Retrieves a collection of custom attributes for the specified object.</summary>
      <returns>Returns an AttributeCollection instance containing the attributes for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Retrieves the class name of the specified object.</summary>
      <returns>Returns the class name of the object, or null if the class does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Retrieves the name of the specified object.</summary>
      <returns>Returns the name of the object, or null if the object does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Retrieves a type converter for the specified object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.TypeConverter" /> appropriate for the specified object, or returns null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Retrieves the default event for the specified object.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptor" /> representing the default event for the specified object, or returns null if this object does not have events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Retrieves the default property for the specified object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the default property for this object, or returns null if this object does not have properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Retrieves an editor of the specified type for this object.</summary>
      <returns>Returns an object of the specified type that is the editor for this object, or returns null if the editor cannot be found.</returns>
      <param name="editorBaseType">A managed <see cref="T:System.Type" /> representing the editor for this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Retrieves the events for the specified instance of a component.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> object representing the events for the specified component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Retrieves the events for this instance of a component using the specified attribute array as a filter.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> representing the filtered events for the specified component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Retrieves the properties for the specified instance of a component.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> representing the properties for this component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Retrieves the properties for the specified instance of a component using the attribute array as a filter.</summary>
      <returns>Returns an array of type <see cref="T:System.Attribute" /> that represents the filtered properties for this component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retrieves an object that contains the property described by the specified property descriptor.</summary>
      <returns>Returns an <see cref="T:System.Object" /> representing the owner of the specified property.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the property whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.Test">
      <summary>Tests to assure that the current set of connection properties will successfully open a connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ToDisplayString">
      <summary>Retrieves a string representation of the current set of data connection properties that are suitable for on-screen display.</summary>
      <returns>Returns a string representation of the current set of data connection properties that are suitable for on-screen display.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ToFullString">
      <summary>Retrieves a string representation of the current set of data connection properties for this instance.</summary>
      <returns>Returns a string representation of the current set of data connection properties for this instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionProperties.ToString">
      <summary>Retrieves a full string representation of the current connection properties.</summary>
      <returns>The connection properties.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs">
      <summary>Provides event data for the <see cref="E:Microsoft.VisualStudio.Data.DataConnectionProperties.PropertyChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs" /> class, providing the property name.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs.PropertyName">
      <summary>Retrieves the name of the property that has changed.</summary>
      <returns>Returns the string literal name of the property that has changed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:Microsoft.VisualStudio.Data.DataConnectionProperties.PropertyChanged" /> event on the current <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPropertyChangedEventArgs" /> object instance that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionState">
      <summary>Specifies the state of a specified data connection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataConnectionState.Closed">
      <summary>The data connection is closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataConnectionState.Open">
      <summary>The data connection is open.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataConnectionState.Broken">
      <summary>The data connection was previously open, but has been broken for unknown reasons.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs">
      <summary>Provides event data for the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event on a data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs.#ctor(Microsoft.VisualStudio.Data.DataConnectionState,Microsoft.VisualStudio.Data.DataConnectionState)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs" /> class and provides the old and new states.</summary>
      <param name="oldState">The state of the data connection prior to change.</param>
      <param name="newState">The state of the data connection subsequent to change.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs.NewState">
      <summary>Retrieves the state of the data connection subsequent to change.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> object instance indicating the new state of the data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs.OldState">
      <summary>Retrieves the old state of the data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> object instance indicating the old state of the data connection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event of a specified data connection.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.DataConnectionStateChangedEventArgs" />object instance that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionSupport">
      <summary>Provides properties and methods that enable you to work directly with connections to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Close">
      <summary>Closes the specified connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ConnectionString">
      <summary>Retrieves or sets a string representation of information required to establish a given data source connection.</summary>
      <returns>Returns a string representation of the data source connection information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ConnectionTimeout">
      <summary>Retrieves or sets the amount of time, in seconds, to wait to establish a connection before terminating the attempt and generating a timeout error.</summary>
      <returns>Returns an integer representation of the allowable timeout period, in seconds.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support connection timeout.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Dispose">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Dispose(System.Boolean)">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
      <param name="disposing">true if this method was called by the public <see cref="M:System.IDisposable.Dispose" /> method, false if it was called by the class finalizer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Finalize">
      <summary>Finalizes the connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.GetServiceImpl(System.Type)">
      <summary>Allows you to obtain implementation services.</summary>
      <returns>The service implementation.</returns>
      <param name="serviceType">Data type of the service to be implemented.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Initialize(System.Object)">
      <summary>Initializes the specified connection, optionally from an existing data provider object.</summary>
      <param name="providerObj">An existing DDEX Provider object to be wrapped, or null if a new provider object should be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.Open(System.Boolean)">
      <summary>Opens the specified connection.</summary>
      <returns>Returns true if the connection was opened successfully and does not require a prompt.Returns false if the connection is missing required connection information and a prompt should be displayed to obtain the missing information from the user. You should return this value only when a data provider has also implemented the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPromptDialog" /> class.</returns>
      <param name="doPromptCheck">Indicates whether the call to the Open method should return false for specific errors that relate to missing connection information, as opposed to simply throwing an error in all cases of failure. Data providers that do not implement a prompt dialog (or have their own prompting mechanism) should ignore this parameter, and always assume a value of false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionSupport.ProviderObject">
      <summary>Retrieves the underlying data provider object for the specified connection.</summary>
      <returns>Returns a provider object for the specified connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.RaiseMessageReceived(System.String)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.MessageReceived" />event on the enclosing <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> instance.</summary>
      <param name="message">The message received from the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionSupport.RaiseStateChanged(Microsoft.VisualStudio.Data.DataConnectionState,Microsoft.VisualStudio.Data.DataConnectionState)">
      <summary>Raises the state changed event on the enclosing <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> instance.</summary>
      <param name="oldState">The state of the connection prior to raising the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event.</param>
      <param name="newState">The state of the connection subsequent to raising the <see cref="E:Microsoft.VisualStudio.Data.DataConnection.StateChanged" /> event.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionSupport.State">
      <summary>Retrieves the state of the data connection.</summary>
      <returns>Returns the state of the connection, as enumerated by the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> class.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataConnectionUIControl">
      <summary>Enables a custom user interface (UI) control for editing connection properties on the Data Connection dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionUIControl.#ctor">
      <summary>Class constructor. Instantiates an instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionUIControl" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataConnectionUIControl.ConnectionProperties">
      <summary>Retrieves a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> object for populating and persisting the contents of a connection-related user interface (UI) control.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> object instance for populating a UI control.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionUIControl.Initialize(Microsoft.VisualStudio.Data.DataConnectionProperties)">
      <summary>Initializes connection UI control by providing a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance to be used for persisting the properties.</summary>
      <param name="connectionProperties">Connection property to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionProperties" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connectionProperties" /> parameter is not a valid implementation of DataConnectionProperties understood by this connection UI control.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionUIControl.LoadProperties">
      <summary>Loads the properties of controls on the Data Connection dialog box. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataConnectionUIControl.Microsoft#Data#ConnectionUI#IDataConnectionUIControl#Initialize(Microsoft.Data.ConnectionUI.IDataConnectionProperties)">
      <summary>Initializes connection UI control by providing a <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> instance to be used for persisting the properties.</summary>
      <param name="connectionProperties">Connection property to initialize.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataExplorerConnection">
      <summary>Represents a connection that exists in the Visual Studio Server Explorer or Data Explorer window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnection.#ctor">
      <summary>Class constructor. This constructor supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.DisplayName">
      <summary>Retrieves or sets the display name of the root node for this data connection.</summary>
      <returns>Returns the string literal display name of the root node for this connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.EncryptedConnectionString">
      <summary>Retrieves an encrypted string containing information about this data connection.</summary>
      <returns>Returns an encrypted string containing information about this connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnection.Equals(System.Object)">
      <summary>Evaluates whether a specified object is equivalent to the current Explorer connection object instance.</summary>
      <returns>Returns true if the specified object is equivalent to the current connection; otherwise returns false.</returns>
      <param name="obj">Object against which the equivalency test is performed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnection.GetHashCode">
      <summary>Retrieves an integer value representing the hash code for the current Explorer connection instance.</summary>
      <returns>Returns an integer value representing the hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.Hierarchy">
      <summary>Gets the underlying <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object that represents this Explorer connection in the tree view. </summary>
      <returns>Returns the underlying <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object that represents this connection in the tree view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.HierarchyObject">
      <summary>This member supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
      <returns>The hierarchy object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnection.Provider">
      <summary>Retrieves the unique identifier of the DDEX Provider for this Explorer connection.</summary>
      <returns>Returns the unique identifier of the DDEX Provider for this connection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataExplorerConnectionManager">
      <summary>Provides methods and properties that enable programmatic interaction with data connections exposed in the Server Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.#ctor">
      <summary>Class constructor. This member supports the DDEX infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.AddConnection(System.String,System.Guid,System.String,System.Boolean)">
      <summary>Adds a new connection to the Server Explorer window with the specified connection settings.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance with specified setting, representing a new connection (or existing connection if a connection with equivalent settings already exists).</returns>
      <param name="connectionName">The initial name to use for the root connection node. If null, a generated name is used.</param>
      <param name="provider">The unique identifier of a data provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">An indication whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.CopyTo(Microsoft.VisualStudio.Data.DataExplorerConnection[],System.Int32)">
      <summary>Copies all <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instances into an array, starting at a specified index.</summary>
      <param name="array">The array that is the destination of the data explorer connections.</param>
      <param name="index">The zero-based index into the array at which copying begins.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.Count">
      <summary>Retrieves an integer value specifying the number of current data connections visible in the Server Explorer.</summary>
      <returns>Returns an integer value specifying the number of current data connections visible in the Server Explorer.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.FindConnection(System.Guid,System.String,System.Boolean)">
      <summary>Locates a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance with specified connection settings.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance representing the specified connection, or returns null if no such connection is found.</returns>
      <param name="provider">The global unique identifier (guid) of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">A Boolean flag indicating whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.FindConnection(System.String)">
      <summary>Locates a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance with a specified display name.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance representing the specified connection, or returns null if no such connection could be found.</returns>
      <param name="connectionName">The display name of an existing connection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.GetConnections">
      <summary>Retrieves an array containing all the current <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> instances.</summary>
      <returns>Returns an array containing all of the current <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instances.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.PromptAndAddConnection">
      <summary>Prompts the user for, and adds, a new <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance representing a new data connection (or existing connection if a connection with equivalent settings already exists).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.RemoveConnection(Microsoft.VisualStudio.Data.DataExplorerConnection)">
      <summary>Removes an existing <see cref="T:Microsoft.VisualStudio.Data.DataExplorerConnection" /> object instance from the set of current connections.</summary>
      <param name="explorerConnection">The data explorer connection to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="explorerConnection" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.SelectConnection(Microsoft.VisualStudio.Data.DataExplorerConnection)">
      <summary>Selects a specific data connection in the Server Explorer tree view.</summary>
      <param name="explorerConnection">The data explorer connection to select.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="explorerConnection" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the set of connections exposed in the Visual Studio Server Explorer to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the connections are copied.</param>
      <param name="index">The index into the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.System#Collections#ICollection#IsSynchronized">
      <summary>Retrieves a value that indicates whether access to the connections collection is synchronized (thread safe).</summary>
      <returns>Returns true if access to the connections collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.System#Collections#ICollection#SyncRoot">
      <summary>Retrieves an object that can be used to synchronize access to the connections collection.</summary>
      <returns>Returns a synchronization object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataExplorerConnectionManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that is able to iterate through the connections collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataItemTypeFormat">
      <summary>Specifies the format of a data item type returned by the <see cref="M:Microsoft.VisualStudio.Data.DataReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataItemTypeFormat.Unknown">
      <summary>Item type is unknown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataItemTypeFormat.VarType">
      <summary>The item type format is an integer representing a VARENUM value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataItemTypeFormat.NativeType">
      <summary>The item type format is a string representing the native type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataItemTypeFormat.ManagedType">
      <summary>The item type format is an instance of <see cref="T:System.Type" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs">
      <summary>Encapsulates event data for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded" />, <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" />, and <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved" /> events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.#ctor(Microsoft.VisualStudio.Data.DataObjectChangeType,System.String,System.Object[])">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs" /> class with object change data.</summary>
      <param name="changeType">The type of change that has occurred, from among values defined by the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeType" /> enumeration.</param>
      <param name="typeName">The name of the object type involved in the change.</param>
      <param name="identifier">The identifier of the object involved in the change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.#ctor(Microsoft.VisualStudio.Data.DataObjectChangeType,System.String,System.Object[],System.Object[])">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs" /> class when the identifier of the changed object is modified.</summary>
      <param name="changeType">The type of change that has occurred, from among values defined by the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeType" /> enumeration.</param>
      <param name="typeName">The name of the object type involved in the change.</param>
      <param name="identifier">The identifier of the object involved in the change.</param>
      <param name="newIdentifier">The new identifier of the object after the change.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.ChangeType">
      <summary>Retrieves the type of data object change that occurred, from among those obtained from the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeType" /> enumeration.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeType" /> value representing the type of data object change that occurred.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.Identifier">
      <summary>Retrieves the identifier of the data object involved in the change.</summary>
      <returns>Returns the identifier for the data object instance involved in the change.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.NewIdentifier">
      <summary>Retrieves the new identifier of the data object after the change.</summary>
      <returns>Returns the new identifier of the data object after the change, or returns null if the new identifier does not make sense in the context of the data object change type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs.TypeName">
      <summary>Retrieves the name of the data object type involved in the change.</summary>
      <returns>Returns the string literal name of the data object type involved in the change.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event on the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeEvents" /> class.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectChangeEvents">
      <summary>Provides a set of events which a DDEX provider can raise when changes to data objects are made, and provides the means by which a provider can connect to them.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectChangeEvents" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EndEventGroup(System.Int32)">
      <summary>Terminates an event group that was initiated by calling the <see cref="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.StartEventGroup(System.Int32)" /> method.</summary>
      <param name="groupId">An ID number for the specified event group.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EventGroupEnded">
      <summary>Event raised when an event group has completed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EventGroupStarted">
      <summary>Event raised when an event group has started.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded">
      <summary>Event raised when a data object has been added.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged">
      <summary>Event raised when a data object has been changed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved">
      <summary>Event raised when a data object has been removed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnEventGroupEnded(System.EventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EventGroupEnded" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnEventGroupStarted(System.EventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.EventGroupStarted" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnObjectAdded(Microsoft.VisualStudio.Data.DataObjectChangedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnObjectChanged(Microsoft.VisualStudio.Data.DataObjectChangedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.OnObjectRemoved(Microsoft.VisualStudio.Data.DataObjectChangedEventArgs)">
      <summary>Handler for the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved" /> event.</summary>
      <param name="e">Arguments for the specified event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectAdded(System.Int32,System.String,System.Object[])">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded" /> event within a specific event group.</summary>
      <param name="groupId">The ID of the event group in which the event should be raised, or zero to indicate no group.</param>
      <param name="typeName">The name of the type of object that was added.</param>
      <param name="identifier">The identifier of the object that was added.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectAdded(System.String,System.Object[])">
      <summary>Raises a standalone <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectAdded" /> event, specifying the object type and identifier.</summary>
      <param name="typeName">The name of the type of object that was added.</param>
      <param name="identifier">The identifier of the object that was added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectChanged(System.Int32,System.String,System.Object[])">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event within a specified event group.</summary>
      <param name="groupId">The ID of the event group in which the event should be raised, or zero to indicate no group.</param>
      <param name="typeName">The name of the type of object that was changed.</param>
      <param name="identifier">The identifier of the object that was changed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectChanged(System.Int32,System.String,System.Object[],System.Object[])">
      <summary>Raises an <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event within a specific event group for an object whose identifier was modified during the change.</summary>
      <param name="groupId">The ID of a group in which the event should be raised, or zero to indicate no group.</param>
      <param name="typeName">The name of the type of object that was changed.</param>
      <param name="identifier">The identifier of the object that was changed.</param>
      <param name="newIdentifier">The new identifier of the object after it was changed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectChanged(System.String,System.Object[])">
      <summary>Raises a standalone <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event, specifying the type name and identifier.</summary>
      <param name="typeName">The name of the type of object that was changed.</param>
      <param name="identifier">The identifier of the object that was changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectChanged(System.String,System.Object[],System.Object[])">
      <summary>Raises a standalone <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectChanged" /> event for an object whose identifier was modified during the change.</summary>
      <param name="typeName">The name of the type of object that was changed.</param>
      <param name="identifier">The identifier of the object that was changed.</param>
      <param name="newIdentifier">The new identifier of the object after it was changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectRemoved(System.Int32,System.String,System.Object[])">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved" /> event within a specified event group.</summary>
      <param name="groupId">The ID of a group in which the event should be raised, or zero to indicate no group.</param>
      <param name="typeName">The name of the type of object that was removed.</param>
      <param name="identifier">The identifier of the object that was removed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RaiseObjectRemoved(System.String,System.Object[])">
      <summary>Raises a standalone <see cref="E:Microsoft.VisualStudio.Data.DataObjectChangeEvents.ObjectRemoved" /> event, specifying type name and object identifier.</summary>
      <param name="typeName">The name of the type of object that was removed.</param>
      <param name="identifier">The identifier of the object that was removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.RollbackEventGroup(System.Int32)">
      <summary>Ends an event group by removing the queued event set from the group.</summary>
      <param name="groupId">Identifier of the event group being rolled back.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectChangeEvents.StartEventGroup(System.Int32)">
      <summary>Starts a group of events initiated by a call to the StartEventGroup method.</summary>
      <returns>Returns the group ID of the parent group.</returns>
      <param name="groupId">The parent group ID, if any; otherwise zero.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than or equal to zero or is greater than the current number of allocated groups.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="groupId" /> parameter is invalid.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectChangeType">
      <summary>Specifies the type of data object change that has occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectChangeType.Add">
      <summary>A new data object has been added.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectChangeType.Change">
      <summary>An existing data object has been changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectChangeType.Remove">
      <summary>An existing data object has been removed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectConceptMapper">
      <summary>Enables providing a customized mapper of data-source-specific metadata into well known concepts for use by a generic designer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectConceptMapper.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectConceptMapper" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectConceptMapper.Connection">
      <summary>Retrieves the active <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance to be used for any code that relies on connection-specific information.</summary>
      <returns>Returns the active <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectConceptMapper.MapValuesToConcept(System.String,System.String,System.Object[])">
      <summary>Maps one or more data-source-specific values to a specified generic concept.</summary>
      <returns>Returns the value of the generic concept.</returns>
      <param name="typeName">The name of the data object type requesting this mapping.</param>
      <param name="conceptName">The name of the generic concept.</param>
      <param name="values">One or more data source specific values to map into the concept specified by <paramref name="conceptName" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="conceptName" /> and/or <paramref name="values" /> parameter is null</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="typeName" /> and/or <paramref name="conceptName" /> parameter is invalid, or the <paramref name="values" /> array does not contain the expected type of data.</exception>
      <exception cref="T:System.NotSupportedException">This method does not support mapping of the specified concept for the specified types.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectEnumerator">
      <summary>Provides the ability to enumerate data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectEnumerator.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectEnumerator" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectEnumerator.Connection">
      <summary>Retrieves the current data connection.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance representing the current data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectEnumerator.EnumerateObjects(System.String,System.Object[],System.Object[],System.String,System.Object[])">
      <summary>Enumerates items for a set of data objects of the specified type with the specified restrictions and sort string, if supported.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object containing the results of the enumeration call.</returns>
      <param name="typeName">Name of the type of the object to enumerate.</param>
      <param name="items">The set of items to enumerate, specified as strings where named items are available, otherwise as indexes. In cases in which a data provider does not support items filtering, this parameter is ignored.Not supported in Visual Studio 2005.</param>
      <param name="restrictions">A set of filtering restrictions to apply to the set of returned objects.</param>
      <param name="sort">A sort string, which follows syntax for the SQL Server ORDER BY clause. The actual sort order should be source-based; that is, if the client is English and the source is Chinese, the sort should be applied in Chinese.Not supported in Visual Studio 2005.</param>
      <param name="parameters">An array whose contents are defined by the given implementation of <see cref="M:Microsoft.VisualStudio.Data.DataObjectEnumerator.EnumerateObjects(System.String,System.Object[],System.Object[],System.String,System.Object[])" />, and which is specified by the Data Object Support XML file. Information supplied in this parameter can be used to provide extra data indicating how to perform the enumeration, allowing implementations of this method to be more data driven.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter">
      <summary>Provides the ability to convert data-source-specific object identifiers from strings to identifier parts, and from identifier parts to strings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.#ctor(System.String[],System.Char,System.Char)">
      <summary>Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> class with the specified configuration.</summary>
      <param name="reservedWords">An array of strings that are considered reserved and should always be quoted if included in an identifier.</param>
      <param name="quote">The character that should be used to quote identifier parts.</param>
      <param name="separator">The character that separates identifier parts.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.BuildString(System.String,System.String[],System.Boolean)">
      <summary>Builds a string version of an identifier.</summary>
      <returns>Returns a string version of an identifier.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierParts">An array of formatted identifier parts.</param>
      <param name="forDisplay">Indicates whether the resulting string will be used for display purposes only.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifierParts" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="identifierParts" /> parameter contains invalid data.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.ConvertToArray(System.String,System.String)">
      <summary>Converts a formatted string identifier into its equivalent set of identifier parts.</summary>
      <returns>Returns an array containing the separated, unformatted identifier parts as derived from the input identifier.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A partially or fully formatted identifier.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.ConvertToString(System.String,System.Object[],Microsoft.VisualStudio.Data.DataObjectIdentifierFormat)">
      <summary>Converts a set of identifier parts into a formatted string identifier based on the specified formatting options.</summary>
      <returns>Returns a partially or fully formatted identifier, depending on which parts of the input array were specified.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">An array containing a set of identifier parts for a specified object.</param>
      <param name="format">A set of flags indicating how to format the resulting string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.Default">
      <summary>Represents a default instance of <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> class that is used when a provider-specific implementation does not exist.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.FormatPart(System.String,System.Object,System.Boolean)">
      <summary>Formats a specified identifier part.</summary>
      <returns>Returns the specified identifier part as a formatted string.</returns>
      <param name="typeName">The name of the data object type.</param>
      <param name="identifierPart">The unformatted value of an identifier part.</param>
      <param name="withQuotes">Indicates whether the formatted part should be enclosed in quotation marks, where necessary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.SplitIntoParts(System.String,System.String)">
      <summary>Divides a string version of an identifier into a set of formatted identifier parts.</summary>
      <returns>Returns an array of formatted identifier parts.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A partially or fully formatted identifier.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter.UnformatPart(System.String,System.String)">
      <summary>Removes formatting applied to a given identifier part.</summary>
      <returns>Returns the unformatted equivalent of the formatted identifier part.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierPart">A formatted identifier part.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectIdentifierFormat">
      <summary>Specifies how to format a data object identifier as a string when converting from a set of identifier parts.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierFormat.None">
      <summary>No specialized formatting is applied to the string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierFormat.WithQuotes">
      <summary>Where necessary, the identifier is enclosed in quotation marks using the correct date-source-specific quoting mechanism. Specifying this option should always cause a valid identifier that can be parsed by the data source to be created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierFormat.ForDisplay">
      <summary>Format the identifier as a string to be used for display purposes rather than for passing to the data source. For example, this might format the identifier of the table 'authors' owned by Fred as 'authors (Fred)'.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver">
      <summary>Provides the ability to expand and contract an identifier for a specified data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.#ctor">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.ContractIdentifier(System.String,System.Object[],System.Boolean)">
      <summary>Contracts an identifier for a data object with the specified type and complete identifier and an indication whether or not any cached contraction should be updated.</summary>
      <returns>Returns the partial, contracted unique identifier for a data object.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="fullIdentifier">A full identifier of a data object.</param>
      <param name="refresh">An indication whether any cached contraction should be updated.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.Default">
      <summary>Provides a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver" /> object instance that is used by default when a provider-specific implementation does not exist.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.ExpandIdentifier(System.String,System.Object[],System.Boolean)">
      <summary>Expands an identifier for a data object with the specified type and partially complete identifier and an indication whether any cached expansion should be updated.</summary>
      <returns>Returns the complete, expanded identifier of the data object that matches the partial identifier passed in, or null if the identifier could not be expanded.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="partialIdentifier">A partial identifier of a data object.</param>
      <param name="refresh">An indication whether any cached expansion should be updated.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.QuickContractIdentifier(System.String,System.Object[])">
      <summary>Applies an algorithm for quickly contracting an identifier, if possible.</summary>
      <returns>Returns the contracted identifier, or returns null if it was not possible to quickly contract the identifier.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="fullIdentifier">A full identifier of a data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.QuickExpandIdentifier(System.String,System.Object[])">
      <summary>Applies an algorithm for quickly expanding an identifier, if possible.</summary>
      <returns>Returns the expanded identifier, or returns null if it was not possible to quickly expand the identifier.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="partialIdentifier">A partial identifier of a data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.SlowContractIdentifier(System.String,System.Object[])">
      <summary>Contracts an identifier by whatever means are available.</summary>
      <returns>Returns the contracted identifier.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="fullIdentifier">A full identifier of a data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectIdentifierResolver.SlowExpandIdentifier(System.String,System.Object[])">
      <summary>Expands an identifier by whatever means are available.</summary>
      <returns>The expanded identifier.</returns>
      <param name="typeName">The name of a type of data object.</param>
      <param name="partialIdentifier">A partial identifier of a data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectItemComparer">
      <summary>Allows you to compare two data object identifier parts or properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectItemComparer.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectItemComparer.Compare(System.String,System.Object[],System.Int32,System.Object)">
      <summary>Compares one object identifier part with another specified object identifier part.</summary>
      <returns>Returns less than zero in cases where the identifier part is less than the specified value. Returns zero if the identifier part is equal to the specified value. Returns greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="identifier">The identifier of an object of the type specified by <paramref name="typeName" /> parameter.</param>
      <param name="identifierPart">The zero based index into the identifier array indicating which part of the identifier to compare.</param>
      <param name="value">A value to compare the identifier part against.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="identifier" /> parameter is less than zero or greater than or equal to the number of elements in the identifier array.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectItemComparer.Compare(System.String,System.String,System.Object,System.Object)">
      <summary>Compares a property of a data object with another data object property.</summary>
      <returns>Returns less than zero in cases where the identifier part is less than the specified value. Returns zero if the identifier part is equal to the specified value. Returns greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="propertyName">The name of a property to compare.</param>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataObjectItemComparer.Default">
      <summary>Represents a default instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> class that is used when a provider-specific implementation does not exist.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper">
      <summary>Provides a way to customize mappings from generic restrictions to data-source-specific restrictions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper.Connection">
      <summary>Retrieves the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance for the current connection.</summary>
      <returns>Returns the current <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectRestrictionMapper.MapValuesToRestriction(System.String,System.Int32,System.Object[])">
      <summary>Maps a set of generic restrictions to a data-source-specific restriction.</summary>
      <returns>Returns the value of the requested source-specific restriction.</returns>
      <param name="conceptName">Name of the type concept on which generic restrictions are being supplied.</param>
      <param name="index">Index of the data-source-specific restriction to which a mapping is made.</param>
      <param name="values">The set of initial generic restriction values to use in this custom restriction mapping.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="conceptName" /> and/or <paramref name="values" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is not a valid restriction index.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataObjectSupport">
      <summary>Allows you to retrieve an XML stream that describes a set of data object types on a data source, which can then interpret and manipulate programmatically.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectSupport.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectSupport" /> class that provides means for locating a resource stream.</summary>
      <param name="baseName">The base name of the resource in the assembly.</param>
      <param name="assembly">The assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectSupport.#ctor(System.String,System.String)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectSupport" /> class that provides resource directory information.</summary>
      <param name="baseName">The base name of the resource in the assembly.</param>
      <param name="directory">The directory that contains the XML file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="directory" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataObjectSupport.GetDataObjectTypes">
      <summary>Retrieves an XML stream that contains information about a set of data object types that can be interpreted and manipulated programmatically.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object instance from which XML data is read.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataParameter">
      <summary>Represents a data parameter that is derived from a data source command, or that is passed with a command to a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.#ctor">
      <summary>Class constructor. Initializes a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.#ctor(System.Boolean)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> class, along with an indication whether the instance was derived using the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method.</summary>
      <param name="isDerived">Indicates whether this data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.DefaultPrecision">
      <summary>Retrieves a byte value specifying the default precision for the current parameter type.</summary>
      <returns>Returns a byte value specifying the default precision for the current parameter type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.DefaultScale">
      <summary>Retrieves a byte value specifying the default scale for the current parameter type.</summary>
      <returns>Returns the default scale for the current parameter type as a byte value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.DefaultSize">
      <summary>Retrieves and integer value specifying the default size for the current parameter type.</summary>
      <returns>Returns the default size for the current parameter type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Direction">
      <summary>Retrieves or sets a <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> object specifying the direction of the parameter.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> object specifying the direction of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetDirectionImpl">
      <summary>Retrieves the parameter direction.</summary>
      <returns>Returns the parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetIsNullableImpl">
      <summary>Retrieves a Boolean value indicating whether or not this parameter can be null.</summary>
      <returns>Returns true if this parameter can have a null value; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetIsOptionalImpl">
      <summary>Retrieves a Boolean value indicating whether this parameter is optional.</summary>
      <returns>Returns true if this parameter is optional; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetNameImpl">
      <summary>Retrieves the name of the parameter.</summary>
      <returns>Returns the name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetPrecisionImpl">
      <summary>Retrieves a byte value specifying the precision of the parameter.</summary>
      <returns>Returns the precision of the parameter as a byte value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetScaleImpl">
      <summary>Retrieves a byte value specifying the scale of the parameter.</summary>
      <returns>Returns the scale of the parameter as a byte value. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetSizeImpl">
      <summary>Retrieves an integer value specifying the size of the parameter.</summary>
      <returns>Returns the size of the parameter and an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetTypeFrom(System.Object)">
      <summary>Infers the data-source-specific parameter type from a parameter value.</summary>
      <returns>Returns the data-source-specific type, or returns null if the value type is not supported.</returns>
      <param name="value">A candidate parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetTypeImpl">
      <summary>Retrieves the data-source-specific type of the parameter.</summary>
      <returns>Returns the data-source-specific type of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.GetValueImpl">
      <summary>Retrieves the value of a specified parameter.</summary>
      <returns>Returns the value of the specified parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsDerived">
      <summary>Retrieves a Boolean value that indicates whether this parameter was derived from the data source.</summary>
      <returns>Returns true if the specified parameter was derived from the data source; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsFixedPrecision">
      <summary>Retrieves a Boolean value indicating whether the precision for the current parameter type is fixed.</summary>
      <returns>Returns true if the precision is fixed for the current parameter type; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsFixedScale">
      <summary>Retrieves a Boolean value indicating whether the scale for the current parameter type is fixed.</summary>
      <returns>Returns true if the scale is fixed for the current parameter type; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsFixedSize">
      <summary>Retrieves a Boolean value indicating whether the size for the current parameter type is fixed.</summary>
      <returns>Returns true if the size is fixed for the current parameter type; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsNullable">
      <summary>Retrieves a Boolean value indicating whether this parameter can have a null value.</summary>
      <returns>Returns true if this parameter can have a null value; otherwise returns false.</returns>
      <exception cref="T:System.InvalidOperationException">This parameter is not derived.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.IsOptional">
      <summary>Retrieves a Boolean value indicating whether this parameter is optional, in cases where this parameter is a derived parameter.</summary>
      <returns>Returns true if this parameter is optional; otherwise returns false.</returns>
      <exception cref="T:System.InvalidOperationException">This parameter is not derived.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.IsSupportedDirection(Microsoft.VisualStudio.Data.DataParameterDirection)">
      <summary>Retrieves a Boolean value indicating whether the specified parameter direction is supported.</summary>
      <returns>Returns true if the specified parameter direction is supported; otherwise returns false.</returns>
      <param name="direction">A parameter direction, as defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.IsValidType(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified data-source-specific type is a valid type.</summary>
      <returns>Returns true if the specified data-source-specific type is a valid type; otherwise returns false.</returns>
      <param name="type">A data-source-specific data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Name">
      <summary>Retrieves or sets the string literal name of the parameter.</summary>
      <returns>Returns the name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnDirectionChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Direction" /> property is changed to signal a change in the parameter direction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnDirectionChanging(Microsoft.VisualStudio.Data.DataParameterDirection)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Direction" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Direction" /> property will be set to, from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnNameChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnNameChanging(System.String)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnPrecisionChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Precision" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnPrecisionChanging(System.Byte)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Precision" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Precision" /> property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnScaleChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Scale" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnScaleChanging(System.Byte)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Scale" /> property is about to change.</summary>
      <param name="value">The value to which the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Scale" /> property is to be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnSizeChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Size" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnSizeChanging(System.Int32)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Size" /> property is about to change.</summary>
      <param name="value">The value to which the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Size" /> property will be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnTypeChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Type" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnTypeChanging(System.String)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Type" /> property is about to change.</summary>
      <param name="value">The value that the Type property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnValueChanged">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Value" /> property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.OnValueChanging(System.Object)">
      <summary>Called when the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Value" /> property is about to change.</summary>
      <param name="value">The value that the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Value" /> property will be set to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.Parse(System.String)">
      <summary>Disassembles a parameter value in a string format and converts the value to the correct type.</summary>
      <param name="value">A string representation of a parameter value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Precision">
      <summary>Retrieves or sets a byte value specifying the precision of the parameter.</summary>
      <returns>Returns the precision of the parameter as a byte value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Scale">
      <summary>Retrieves or sets a byte value specifying the scale of the parameter.</summary>
      <returns>Returns the scale of the parameter as a byte value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetDirectionImpl(Microsoft.VisualStudio.Data.DataParameterDirection)">
      <summary>Sets the direction of the parameter using the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</summary>
      <param name="value">A specific data parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetNameImpl(System.String)">
      <summary>Sets the name of the parameter.</summary>
      <param name="value">The string literal parameter name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetPrecisionImpl(System.Byte)">
      <summary>Sets a byte value specifying the precision of the parameter.</summary>
      <param name="value">A byte value specifying precision.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetScaleImpl(System.Byte)">
      <summary>Sets a byte value specifying the scale of the parameter.</summary>
      <param name="value">A byte value specifying scale.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetSizeImpl(System.Int32)">
      <summary>Sets an integer value specifying the size of this parameter.</summary>
      <param name="value">An integer specifying size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetTypeImpl(System.String)">
      <summary>Sets the data type of this parameter.</summary>
      <param name="value">A parameter data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.SetValueImpl(System.Object)">
      <summary>Sets the value of this parameter.</summary>
      <param name="value">An object value to which the parameter is set.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Size">
      <summary>Retrieves or sets an integer value specifying the size of the parameter.</summary>
      <returns>Returns the size of the parameter as an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.ToString">
      <summary>Retrieves a string representation of the value of this parameter.</summary>
      <returns>Returns a string representation of the value of this parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataParameter.TryConvertValue(System.Object,System.String)">
      <summary>Attempts to convert the specified value to the specified type.</summary>
      <returns>Returns the converted value, or returns null if no conversion was possible.</returns>
      <param name="value">A potential parameter value.</param>
      <param name="type">The name of a parameter type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Type">
      <summary>Retrieves or sets the data-source-specific type of the parameter.</summary>
      <returns>Returns the data-source-specific type of the parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataParameter.Value">
      <summary>Retrieves or sets the value of the parameter.</summary>
      <returns>Returns the parameter value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataParameterDirection">
      <summary>Specifies the direction of a data parameter for a specified data command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.Unknown">
      <summary>The parameter direction is unknown. This value may be used in derived parameters when a provider does not know how to return direction information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.In">
      <summary>The parameter can be passed into the command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.Out">
      <summary>The parameter can be read only from the command. After executing, the returned <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object instance must be closed before a parameter of this direction is read.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.InOut">
      <summary>The parameter can be passed into the command and read from the command. After executing, the returned <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object instance must be closed before a parameter of this direction is read.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataParameterDirection.ReturnValue">
      <summary>The parameter is a return value from the command. After executing, the returned <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object instance must be closed before a parameter of this direction is read.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProtection">
      <summary>Represents the ability to encrypt and decrypt strings using the Windows Data Protection API (DPAPI).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProtection.DecryptString(System.String)">
      <summary>Decrypts a specified string.</summary>
      <returns>Returns the decrypted string.</returns>
      <param name="s">A string previously encrypted with a call to <see cref="M:Microsoft.VisualStudio.Data.DataProtection.EncryptString(System.String)" />.</param>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a valid format.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The decryption failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProtection.EncryptString(System.String)">
      <summary>Encrypts a specified string.</summary>
      <returns>Returns the encrypted string.</returns>
      <param name="s">A string to encrypt.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The encryption failed.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProvider">
      <summary>Enables creation of DDEX provider objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.CreateObject(System.Guid,System.Type)">
      <summary>Creates a new DDEX provider-implemented object, preferably tailored for the specified data source, and of the specified type.</summary>
      <returns>Returns a new DDEX provider-implemented object of the requested type.</returns>
      <param name="dataSource">A DDEX data source GUID.</param>
      <param name="objType">Data type of the object to create.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.CreateObject(System.Type)">
      <summary>Creates a DDEX provider implementation of a specific object type.</summary>
      <returns>Returns the specified object type.</returns>
      <param name="objType">The type of object to create.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.DeriveDataSource(System.String)">
      <summary>Determines which data source supported by this DDEX provider is represented by the given connection string.</summary>
      <returns>Returns the DDEX data source GUID that this connection string represents, or returns Guid.Empty if no data source can be derived.</returns>
      <param name="connectionString">A connection string recognized by this DDEX provider.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.Description">
      <summary>Retrieves a culture-sensitive description of the DDEX provider.</summary>
      <returns>Returns a culture-sensitive description of the DDEX provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.DisplayName">
      <summary>Retrieves a culture-sensitive name for the specified data provider.</summary>
      <returns>Returns the string literal name for the DDEX provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetAssembly(System.Guid,System.String)">
      <summary>Resolves an assembly string to an assembly associated with a specified data source as defined by the DDEX provider.</summary>
      <returns>Returns a specified assembly.</returns>
      <param name="dataSource">GUID for a DDEX data source.</param>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetAssembly(System.String)">
      <summary>Resolves an assembly string to a specific assembly as defined by the DDEX provider.</summary>
      <returns>Returns a specified assembly.</returns>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetProperty(System.String)">
      <summary>Retrieves a generically known or DDEX provider-specific property.</summary>
      <returns>Returns a specified property.</returns>
      <param name="name">Name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetType(System.Guid,System.String)">
      <summary>Resolves a type name to a <see cref="T:System.Type" /> for a specified data source as defined by the DDEX provider.</summary>
      <returns>Returns a specified type.</returns>
      <param name="dataSource">DDEX data source GUID.</param>
      <param name="typeName">String name for the data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.GetType(System.String)">
      <summary>Resolves a type name to a <see cref="T:System.Type" /> as defined by the DDEX provider. </summary>
      <returns>Returns a specified type.</returns>
      <param name="typeName">String name for the specified data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.Guid">
      <summary>Retrieves the unique identifier of the DDEX provider.</summary>
      <returns>Returns a GUID object instance providing the unique identifier for the DDEX provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.ShortDisplayName">
      <summary>Retrieves the short form of the display name.</summary>
      <returns>Returns a string representing the short form of the display name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.SupportsObject(System.Guid,System.Type)">
      <summary>Indicates whether a given DDEX provider supports an object of the specified type, potentially a specialized version for the specified data source.</summary>
      <returns>Returns true if the DDEX provider supports an object of the specified type; otherwise returns false.</returns>
      <param name="dataSource">A DDEX data source GUID.</param>
      <param name="objType">Data type of object for which to discover supportability.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProvider.SupportsObject(System.Type)">
      <summary>Retrieves a Boolean value that indicates whether a particular object type is supported by the provider.</summary>
      <returns>Returns true if a particular object type is supported by the provider; otherwise returns false.</returns>
      <param name="objType">Data type of the specified object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objType" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProvider.Technology">
      <summary>Retrieves the unique identifier of the underlying technology used by the provider, if any.</summary>
      <returns>Returns a GUID object instance providing a unique identifier for the underlying technology used by the DDEX provider, if any; returns null if none provided.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProviderException">
      <summary>Represents an exception thrown when a DDEX provider error occurs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.String)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with the name of the DDEX provider.</summary>
      <param name="providerName">The name of the DDEX provider that caused the error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.String,System.Exception)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.String,System.String)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with a specified provider name and error message.</summary>
      <param name="providerName">The name of the provider that caused the error.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderException.#ctor(System.String,System.String,System.Exception)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderException" /> class with a specified provider name, error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="providerName">The name of the provider that caused the error.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProviderManager">
      <summary>Represents the set of registered DDEX providers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.CopyTo(Microsoft.VisualStudio.Data.DataProvider[],System.Int32)">
      <summary>Copies the set of registered DDEX providers to an array, starting at the specified array index.</summary>
      <param name="array">An array into which the set of DDEX providers should be copied.</param>
      <param name="arrayIndex">The index in the array at which copying begins.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProviderManager.Count">
      <summary>Retrieves the number of registered DDEX providers.</summary>
      <returns>Returns an integer value representing the count of registered DDEX providers.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.GetDataProvider(System.Guid)">
      <summary>Retrieves a DDEX provider using the specified GUID.</summary>
      <returns>Returns a DDEX provider object instance specified by a GUID.</returns>
      <param name="provider">A DDEX provider GUID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.GetDataProviders">
      <summary>Retrieves an array containing all registered DDEX providers.</summary>
      <returns>Returns an array of DDEX provider objects.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.GetDataProvidersImpl">
      <summary>This method is for internal use only and is not to be called.</summary>
      <returns>Returns an array of DDEX provider objects.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#Add(Microsoft.VisualStudio.Data.DataProvider)">
      <summary>Adds a new DDEX provider to the collection of available DDEX providers.</summary>
      <param name="item">DDEX provider object to add.</param>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Clears the collection of DDEX providers.</summary>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#Contains(Microsoft.VisualStudio.Data.DataProvider)">
      <summary>Tests whether a given collection contains a specified DDEX provider.</summary>
      <returns>Returns true if the collection contains the specified DDEX provider; otherwise returns false.</returns>
      <param name="item">DDEX provider object to determine whether contained.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Tests whether the collection of DDEX providers is read only.</summary>
      <returns>Returns true if the collection is read only; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#ICollection{T}#Remove(Microsoft.VisualStudio.Data.DataProvider)">
      <summary>Removes a DDEX provider from the set of providers.</summary>
      <returns>Returns an <see cref="T:System.Collections.ICollection" /> object instance containing the set of DDEX providers.</returns>
      <param name="item">DDEX provider object to remove.</param>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an enumerator with which to enumerate the DDEX provider collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object instance to allow enumerating the DDEX provider collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator with which to enumerate the DDEX provider collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object instance to allow enumerating the DDEX provider collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataProviderObjectFactory">
      <summary>Allows you to create data objects implemented by a DDEX provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderObjectFactory.#ctor">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.DataProviderObjectFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderObjectFactory.CreateObject(System.Type)">
      <summary>Creates a data-provider-written object that implements the specified object type.</summary>
      <returns>Returns an object of type specified by the <paramref name="objectType" /> parameter, or null if the object type is not supported.</returns>
      <param name="objType">Data type of object to create.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataProviderObjectFactory.DataProvider">
      <summary>Retrieves the DDEX provider for which this class creates objects.</summary>
      <returns>Returns a DDEX provider object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderObjectFactory.GetAssembly(System.String)">
      <summary>Locates an assembly given an assembly string.</summary>
      <returns>Returns an assembly object instance.</returns>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataProviderObjectFactory.GetType(System.String)">
      <summary>Retrieves a type definition given a type name.</summary>
      <returns>Returns a type object instance.</returns>
      <param name="typeName">Name of the type to return.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataReader">
      <summary>Provides the ability to expose data from any data.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Close">
      <summary>Closes the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Dispose">
      <summary>Releases managed resources held for the current <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Dispose(System.Boolean)">
      <summary>Cleans up resources associated with the current <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> instance, both when the public <see cref="M:Microsoft.VisualStudio.Data.DataReader.Dispose" /> method is called and as well as when the object is finalized with a call to the <see cref="M:Microsoft.VisualStudio.Data.DataReader.Finalize" /> method.</summary>
      <param name="disposing">Indicates whether or not this method was called from the public Dispose method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Finalize">
      <summary>Finalizes the current <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of raw binary data.</summary>
      <returns>Returns an integer value indicating the number of bytes read into the buffer.</returns>
      <param name="index">Index into the current block of data for the item to retrieve.</param>
      <param name="buffer">An array into which specified data, as byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">Index of starting point in the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" />, <paramref name="bufferIndex" />, and/or <paramref name="length" /> parameters are invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItem(System.Int32)">
      <summary>Retrieves the value of the item at the specified index in the current block of data.</summary>
      <returns>Returns an integer value from the specified index in the current block of data.</returns>
      <param name="index">Index into the current block of the data item at which to retrieve the integer value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItem(System.String)">
      <summary>Retrieves the value of a data item with the specified name in the current block of data.</summary>
      <returns>Returns the string value of the item with the specified name.</returns>
      <param name="name">The name of the data item in the current block to retrieve.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="name" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves the maximum length, in characters, of data items at the specified index.</summary>
      <returns>Returns the maximum length, in number of characters, of the data item at the specified index; or, returns -1 if the maximum length is unavailable or is not sensible.</returns>
      <param name="index">The index of the data item being examined for length.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItemName(System.Int32)">
      <summary>Retrieves the name assigned to the data item at the specified index, if any.</summary>
      <returns>Returns the name assigned to the data item at the index specified by the <paramref name="index" /> parameter, or null if no name exists.</returns>
      <param name="index">The index of the data item for which to retrieve the name.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)">
      <summary>Retrieves the data type of a data item item, or items, at the specified index in a specified format.</summary>
      <returns>Returns the data type of items at the specified index in the specified format.</returns>
      <param name="index">Index of the data item for which to return data type.</param>
      <param name="itemTypeFormat">The format in which to return the data type information.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataReader.IsClosed">
      <summary>Retrieves a Boolean value that indicates whether the specified reader has been closed.</summary>
      <returns>Returns true if the specified data reader is closed; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.IsNullItem(System.Int32)">
      <summary>Indicates whether the data item at the specified index is unspecified, that is, null.</summary>
      <returns>Returns true if the item is null, that is, unspecified; otherwise returns false.</returns>
      <param name="index">Index of the data item to examine.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataReader.ItemCount">
      <summary>Retrieves the number of items in the current block of data.</summary>
      <returns>Returns an integer value indicating the number of items in the current block of data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.NextResult">
      <summary>Advances the data reader to the next result in cases where the reader contains multiple results.</summary>
      <returns>Returns true if more results remain to be read and the reader was advanced to the next result. Returns false if no more results were found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Read">
      <summary>Advances the reader to the next block of data in cases where the reader contains more than one block.</summary>
      <returns>Returns true if there are more blocks of data to read.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataReader.Status">
      <summary>Retrieves a numerical status code returned by the method currently providing data to the data reader.</summary>
      <returns>Returns an integer value status code from the method currently providing data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataReader.Terminate">
      <summary>Terminates the data reader immediately, without necessarily returning all of the data nor setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSource">
      <summary>Represents and provides access to a DDEX data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSource.DefaultProvider">
      <summary>Retrieves the default DDEX provider using a global unique identifier (GUID).</summary>
      <returns>Returns the guid of the default DDEX provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSource.Description">
      <summary>Retrieves a localized description of this data source.</summary>
      <returns>Returns a string value representing the description.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSource.DisplayName">
      <summary>Retrieves the name of the data source for UI display.</summary>
      <returns>Returns the string literal text for the data source display name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.GetDescription(System.Guid)">
      <summary>Retrieves a description for a data source combined with a specified DDEX provider.</summary>
      <returns>Returns the string literal description.</returns>
      <param name="provider">A DDEX provider GUID.</param>
      <exception cref="T:System.ArgumentException">The provider specified is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.GetProperty(System.Guid,System.String)">
      <summary>Retrieves a data source property stored with the data source registration entries, specifying the property by name and GUID.</summary>
      <returns>Returns a property object specified by name and GUID.</returns>
      <param name="provider">DDEX provider GUID.</param>
      <param name="name">Name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The provider specified is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.GetProperty(System.String)">
      <summary>Retrieves a data source property stored with the data source registration entries, specifying the property by name.</summary>
      <returns>Returns the property specified by name.</returns>
      <param name="name">Name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSource.GetProviders">
      <summary>Retrieves an array of data provider GUIDs representing DDEX providers that support the data source.</summary>
      <returns>Returns an array of GUIDs.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSource.Guid">
      <summary>Retrieves the global unique identifier (GUID) of the data source.</summary>
      <returns>Returns the data source GUID.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSourceInformation">
      <summary>Allows you to retrieve well-defined information about a specified data source in the form of properties passed as name/value pairs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class that provides the data connection for which the information is provided.</summary>
      <param name="connection">The data connection to use for retrieving data source properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection,System.Collections.ICollection)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class, along with the specific connection and an <see cref="T:System.Collections.ICollection" /> object containing the connection property names..</summary>
      <param name="connection">The data connection to use for retrieving data source properties.</param>
      <param name="propertyNames">A collection of names of properties supported by this instance.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection,System.Collections.IDictionary)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class along with a specific data connection and an <see cref="T:System.Collections.IDictionary" /> object containing connection properties information.</summary>
      <param name="connection">The data connection to use for retrieving data source properties.</param>
      <param name="properties">A collection of property name/value pairs with which to initialize the instance.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.AddProperty(System.String)">
      <summary>Adds a property to the list of supported properties.</summary>
      <param name="propertyName">The name of a data source information property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.AddProperty(System.String,System.Object)">
      <summary>Adds a property and its value to the list of supported properties.</summary>
      <param name="propertyName">The name of a data source information property.</param>
      <param name="value">The value for the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters that are invalid, that is, that may not appear in a generic catalog name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose use at the start of a generic catalog name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogIsSuffixed">
      <summary>Specifies the data source information property that indicates if a catalog name is suffixed on a multi-part object identifier, as opposed to being a prefix.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a catalog name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogSeparator">
      <summary>Specifies the data source information property that indicates the character separating a catalog name from the other parts in an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogSupported">
      <summary>Specifies the data source information property that indicates if a catalog name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CatalogSupportedInDml">
      <summary>Specifies the data source information property that indicates if a catalog name is supported in object identifiers that appear in SQL DML clauses.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnAliasInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a column alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnAliasInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a column alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnAliasMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a column alias.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnAliasSupported">
      <summary>Specifies the data source information property that indicates if a column alias is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a column name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a column name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a column name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ColumnSupported">
      <summary>Specifies the data source information property that indicates if a column name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandDeriveParametersSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandDeriveSchemaSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandExecuteSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> and <see cref="M:Microsoft.VisualStudio.Data.DataCommand.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandParameterSupport">
      <summary>Specifies what parameter directions are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.CommandPrepareSupport">
      <summary>Specifies what types of commands are supported by the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.Prepare(System.String,System.Int32,System.Int32)" /> method.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceInformation.Connection">
      <summary>Retrieves the data connection used to retrieve data source properties.</summary>
      <returns>Returns the data connection used to retrieve data source properties.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceInformation.ConnectionSupport">
      <summary>Retrieves the provider connection support object associated with the data connection.</summary>
      <returns>Returns the provider connection support object associated with the data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.Contains(System.String)">
      <summary>Retrieves a Boolean value indicating whether a specified property is contained in this data source information instance.</summary>
      <returns>Returns true if the specified property is contained in this data source information instance; otherwise returns false.</returns>
      <param name="propertyName">The name of the property being tested.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DataSourceCulture">
      <summary>Specifies the geographical culture of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DataSourceName">
      <summary>Specifies the name of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DataSourceProduct">
      <summary>Specifies the name of the product of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DataSourceVersion">
      <summary>Specifies the version of the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DateLiteralPrefix">
      <summary>Specifies the data source information property that provides the character(s) that prefix a date/time literal.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DateLiteralSuffix">
      <summary>Specifies the data source information property that provides the character(s) that suffix a date/time literal.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.Default">
      <summary>Provides a default instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> class for use when a data provider does not provide their own implementation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DefaultCatalog">
      <summary>Specifies the data source information property that provides the name of the default catalog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.DefaultSchema">
      <summary>Specifies the data source information property that provides the name of the default schema.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IdentifierCloseQuote">
      <summary>Specifies the data source information property that provides the character used to close an identifier part that needs to be enclosed in quotation marks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IdentifierOpenQuote">
      <summary>Specifies the data source information property that provides the character used to open an identifier part that needs to be quoted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IdentifierPartsCaseSensitive">
      <summary>Specifies the data source information property that indicates if identifier parts are treated as case sensitive.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IdentifierPartsStorageCase">
      <summary>Specifies the data source information property that indicates what case identifier parts are stored in the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IndexInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance as an index name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IndexInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of an index name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IndexMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of an index name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.IndexSupported">
      <summary>Specifies the data source information property that indicates if an index name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceInformation.Item(System.String)">
      <summary>Retrieves a data source information property with the specified name.</summary>
      <returns>Returns the data source information property with the specified name.</returns>
      <param name="propertyName">The name of the data source information property to retrieve.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.LikeClausePercent">
      <summary>Specifies the data source information property that indicates the wildcard character used to capture zero or more characters within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.LikeClausePercentEscape">
      <summary>Specifies the data source information property that indicates the character used to escape the LikeClausePercent character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.LikeClauseUnderscore">
      <summary>Specifies the data source information property that indicates the wildcard character used to capture a single characters within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.LikeClauseUnderscoreEscape">
      <summary>Specifies the data source information property that indicates the character used to escape the LikeClauseUnderscore character within values for a LIKE clause in a SQL DML statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ParameterPrefix">
      <summary>Specifies the data source information property that provides the character used to prefix a parameter name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ParameterPrefixInName">
      <summary>Specifies the data source information property that indicates if the parameter prefix should appear in the value set for the <see cref="P:Microsoft.VisualStudio.Data.DataParameter.Name" /> property.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ProcedureInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a procedure name is not valid. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ProcedureInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a procedure name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ProcedureMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a procedure name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ProcedureSupported">
      <summary>Specifies the data source information property that indicates if a procedure name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceInformation.ProviderObject">
      <summary>Retrieves the underlying provider connection object as exposed by the connection support object.</summary>
      <returns>Returns the underlying provider connection object as exposed by the connection support object.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.QuotedIdentifierPartsCaseSensitive">
      <summary>Specifies the data source information property that indicates if quoted identifier parts are treated as case sensitive.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.QuotedIdentifierPartsStorageCase">
      <summary>Specifies the data source information property that indicates what case quoted identifier parts are stored in the data source.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ReservedWords">
      <summary>Specifies the data source information property that provides the set of reserved words on the data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceInformation.RetrieveValue(System.String)">
      <summary>Retrieves a value for a specified data source information property.</summary>
      <returns>Returns the value of the data source information property, or returns null if the property is not supported.</returns>
      <param name="propertyName">The name of property whose value is retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a schema name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a schema name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a schema name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaSeparator">
      <summary>Specifies the data source information property that indicates the character separating a schema name from the other parts in an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaSupported">
      <summary>Specifies the data source information property that indicates if a schema name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SchemaSupportedInDml">
      <summary>Specifies the data source information property that indicates if a schema name is supported in object identifiers that appear in SQL DML clauses.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ServerSeparator">
      <summary>Specifies the data source information property that indicates the character separating a server name from the other parts in an object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsAnsi92Sql">
      <summary>Specifies the data source information property that indicates if the data source supports the ANSI92 SQL standard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsCommandTimeout">
      <summary>Specifies the data source information property that indicates whether command timeouts are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsNestedTransactions">
      <summary>Specifies the data source information property that indicates whether transactions can be started, committed, or rolled back inside other transactions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsQuotedIdentifierParts">
      <summary>Specifies the data source information property that indicates whether quoted identifier parts are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.SupportsVerifySql">
      <summary>Specifies the data source information property that indicates if SQL verification is supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableAliasInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a table alias is not valid. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableAliasInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a table alias is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableAliasMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a table alias.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableAliasSupported">
      <summary>Specifies the data source information property that indicates if a table alias is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a table name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a table name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a table name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.TableSupported">
      <summary>Specifies the data source information property that indicates if a table name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.UserInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a user name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.UserInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a user name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.UserMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a user name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.UserSupported">
      <summary>Specifies the data source information property that indicates if a user name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ViewInvalidCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance in a view name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ViewInvalidStartCharacters">
      <summary>Specifies the data source information property that provides a string of characters whose appearance at the start of a view name is not valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ViewMaxLength">
      <summary>Specifies the data source information property that indicates the maximum length of a view name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceInformation.ViewSupported">
      <summary>Specifies the data source information property that indicates if a view name is supported in a multi-part object identifier.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSourceManager">
      <summary>Represents the set of registered DDEX data sources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.CopyTo(Microsoft.VisualStudio.Data.DataSource[],System.Int32)">
      <summary>Copies the set of registered data sources to an array, starting at the specified array index.</summary>
      <param name="array">An array into which the set of data sources should be copied.</param>
      <param name="arrayIndex">The index in the array at which copying begins.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceManager.Count">
      <summary>Retrieves a count of the number of registered data sources.</summary>
      <returns>Returns an integer representing the count of registered data sources.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.GetDataSource(System.Guid)">
      <summary>Retrieves a data source with the specified GUID.</summary>
      <returns>Returns a DataSource object instance with the specified GUID.</returns>
      <param name="source">A DDEX data source GUID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.GetDataSources">
      <summary>Retrieves an array of all the registered data sources.</summary>
      <returns>Returns an array of data sources.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.GetDataSourcesImpl">
      <summary>For internal use only.</summary>
      <returns>The DataSource.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#Add(Microsoft.VisualStudio.Data.DataSource)">
      <summary>Adds a data source to the DDEX data source collection.</summary>
      <param name="item">DDEX data source</param>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Clears the DDEX data source collection.</summary>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#Contains(Microsoft.VisualStudio.Data.DataSource)">
      <summary>Tests whether the DDEX data source collection contains a specified data source.</summary>
      <returns>Returns true if the collection contains the specified data source; otherwise returns false.</returns>
      <param name="item">DDEX data source</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Tests whether the data source collection is read only.</summary>
      <returns>Returns true if the collection is read only; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#ICollection{T}#Remove(Microsoft.VisualStudio.Data.DataSource)">
      <summary>Removes a data source from the DDEX data source collection.</summary>
      <returns>Returns true if the data source was found and successfully removed; otherwise returns false.</returns>
      <param name="item">DDEX data source</param>
      <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retrieves an enumerator for enumerating the DDEX data source collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator for enumerating the DDEX data source collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSourceSpecializer">
      <summary>Represents an ability to specialize the behavior of a DDEX provider based on the data source to which it is connected.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.#ctor">
      <summary>Class constructor. Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceSpecializer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.CreateObject(System.Guid,System.Type)">
      <summary>Creates a DDEX-provider implemented object of the given type that is specialized for the specified data source.</summary>
      <returns>Returns a specialized object of specified type.</returns>
      <param name="dataSource">GUID of the data source for which the provider is specialized.</param>
      <param name="objType">Data type of the provider object.</param>
      <exception cref="T:System.ArgumentException">The data source specified with the <paramref name="dataSource" /> parameter is not a registered DDEX data source.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.DeriveDataSource(System.String)">
      <summary>Determines which data source supported by the provider is represented by the given connection string.</summary>
      <returns>Returns a GUID object instance specifying the derived data source for the connection string provided.</returns>
      <param name="connectionString">Connection string understood by the DDEX provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.GetAssembly(System.Guid,System.String)">
      <summary>Locates an assembly given an assembly string and data source guid.</summary>
      <returns>Returns an assembly.</returns>
      <param name="dataSource">DDEX data source guid.</param>
      <param name="assemblyString">Name of the assembly to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceSpecializer.GetType(System.Guid,System.String)">
      <summary>Retrieves a type definition given a type name and data source guid.</summary>
      <returns>Returns a type definition.</returns>
      <param name="dataSource">DDEX data source guid.</param>
      <param name="typeName">Name of the assembly to retrieve.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer">
      <summary>Provides the means to compare two data-source-specific version strings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceVersionComparer.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceVersionComparer.#ctor(System.Collections.Generic.IComparer{System.String})">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer" /> class using an <see cref="T:System.Collections.IComparer" /> object.</summary>
      <param name="comparer">An <see cref="T:System.Collections.IComparer" /> object instance to perform the comparison.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceVersionComparer.Compare(System.String,System.String)">
      <summary>Compares two data-source version strings and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>Returns one of three integer values:Less than zero: v<paramref name="ersionA" /> is less than v<paramref name="ersionB" />.Equal to zero: v<paramref name="ersionA" /> equals v<paramref name="ersionB" />.Greater than zero: v<paramref name="ersionA" /> is greater than v<paramref name="ersionB" />.</returns>
      <param name="versionA">The first version number to compare.</param>
      <param name="versionB">The second version number to compare.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataSourceVersionComparer.Comparer">
      <summary>Retrieves or sets the <see cref="T:System.Collections.IComparer" /> object with which to perform a comparison.</summary>
      <returns>Returns an <see cref="T:System.Collections.IComparer" /> object instance.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.DataSourceVersionComparer.Default">
      <summary>Retrieves a default instance of this class that uses a default comparison mechanism that is both culture and case sensitive.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSourceVersionComparer.System#Collections#Generic#IComparer{T}#Compare(System.String,System.String)">
      <summary>Compares two data-source version strings and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>Returns one of three integer values:Less than zero: v<paramref name="ersionA" /> is less than v<paramref name="ersionB" />.Equal to zero: v<paramref name="ersionA" /> equals v<paramref name="ersionB" />.Greater than zero: v<paramref name="ersionA" /> is greater than v<paramref name="ersionB" />.</returns>
      <param name="x">The first version number to compare.</param>
      <param name="y">The second version number to compare.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataSupport">
      <summary>Represents the base class for all classes that provide data support XML.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Class constructor. Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSupport" /> class with an XML resource stored in a managed assembly.</summary>
      <param name="resourceName">The name of the managed resource.</param>
      <param name="assembly">The managed assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="resourceName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.#ctor(System.String,System.String)">
      <summary>Initializes a new, parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.DataSupport" /> class with XML that is stored as a file at a specific file path on disk.</summary>
      <param name="fileName">The unqualified name of the file.</param>
      <param name="path">The path to the file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileName" /> and/or <paramref name="path" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.CreateXmlResourceManager(System.String,System.Reflection.Assembly)">
      <summary>Creates a <see cref="T:System.Resources.ResourceManager" /> object instance that is able to read managed resources that end with the .xml file extension.</summary>
      <returns>Returns a ResourceManager object able to read managed resources that end with the extension ".xml".</returns>
      <param name="resourceName">The name of the managed resource without the .xml file extension.</param>
      <param name="assembly">The assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="resourceName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.CreateXmlResourceManager(System.String,System.String)">
      <summary>Creates a <see cref="T:System.Resources.ResourceManager" /> object instance that is able to read XML files from a file at a specific location on disk.</summary>
      <returns>A <see cref="T:System.Resources.ResourceManager" /> object able to read XML files from a specific location on disk.</returns>
      <param name="fileName">The unqualified name of the resource file.</param>
      <param name="path">The path to the file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileName" /> and/or <paramref name="path" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataSupport.GetSupportStream(System.Globalization.CultureInfo)">
      <summary>Obtains a <see cref="T:System.IO.Stream" /> object instance for a specified culture.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object instance for the specified culture.</returns>
      <param name="culture">The geographical culture (as <see cref="T:System.Globalization.CultureInfo" /> object) for which to retrieve the Stream object instance.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataTransaction">
      <summary>Enables transaction-processing, which allows you to commit or roll back as a batch a series of related operations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataTransaction.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataTransaction" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataTransaction.BeginTransaction">
      <summary>Initiates a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer value indicating the new current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataTransaction.CommitTransaction">
      <summary>Commits a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer value indicating the new current transaction level.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataTransaction.CurrentTransactionLevel">
      <summary>Retrieves a numeric value indicating the current transaction level.</summary>
      <returns>Returns an integer value specifying the current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataTransaction.RollbackTransaction">
      <summary>Rolls back, or voids, a transaction and returns the new current transaction level.</summary>
      <returns>Returns and integer value indicating the new current transaction level.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider">
      <summary>Allows you to retrieve a specialized browse object for a specified node in a given data view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider.DataViewHierarchyAccessor">
      <summary>Retrieves a DataViewHierarchyAccessor object instance, which provides managed accessors for the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object that implements the data view hierarchy.</summary>
      <returns>The hierarchy accessor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewBrowseObjectProvider.GetBrowseObject(System.Int32,System.Object)">
      <summary>Retrieves a special browse object for a data view node, given the specified node's item ID.</summary>
      <returns>Returns an object representing the browse object for the specified node.</returns>
      <param name="itemId">An item ID specifying a node for which to get a custom browse object.</param>
      <param name="autoBrowseObj">A browse object automatically generated with information in the data view support XML, or null if the XML indicates that no such browse object should be generated. This allows an implementation of this method to specify most settings in XML and then provide only minor modification to the set of properties, rather than necessitating building the object from scratch.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewCommandHandler">
      <summary>Provides the ability to implement commands, specifically custom commands, for nodes in a data view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewCommandHandler" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewCommandHandler.DataViewHierarchyAccessor">
      <summary>Retrieves a <see cref="T:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor" /> object instance, which provides managed accessors to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object that implements the data view hierarchy.</summary>
      <returns>Returns a DataViewHierarchyAccessor object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandExecutionOption,System.Object)">
      <summary>Causes the specified command to execute.</summary>
      <returns>Returns an object instance representing the value returned by the specified command, which is typically nothing.</returns>
      <param name="itemId">The identifier of the item in the data view hierarchy on which this command should be invoked.</param>
      <param name="command">The <see cref="T:Microsoft.VisualStudio.Data.OleCommand" /> object representing the command to invoke.</param>
      <param name="executionOption">Any <see cref="T:Microsoft.VisualStudio.Data.OleCommandExecutionOption" /> object instance representing options on the invoked command.</param>
      <param name="arguments">An object representing arguments to the command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="itemId" /> parameter is invalid.</exception>
      <exception cref="T:System.NotImplementedException">This command handler does not implement the specified command.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.ExecuteCommand(System.Int32[],Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandExecutionOption,System.Object)">
      <summary>Causes the specified command to execute on multiple items.</summary>
      <returns>Returns an object array representing values returned by the specified commands.</returns>
      <param name="itemIds">Array of identifiers for the items in the data view hierarchy on which this command should be invoked.</param>
      <param name="command">The <see cref="T:Microsoft.VisualStudio.Data.OleCommand" /> object representing the command to invoke.</param>
      <param name="executionOption">Any <see cref="T:Microsoft.VisualStudio.Data.OleCommandExecutionOption" /> object instance representing options on the invoked command.</param>
      <param name="arguments">An object representing arguments to the command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="itemId" /> and/or <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="itemId" /> parameter is invalid.</exception>
      <exception cref="T:System.NotImplementedException">This command handler does not implement the specified command.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.GetCommandStatus(System.Int32[],Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandTextType,Microsoft.VisualStudio.Data.OleCommandStatus)">
      <summary>Retrieves the status of the commands executing on the specified items.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> object instance representing the status returned by the specified commands.</returns>
      <param name="itemIds">Array of identifiers for the items in the data view hierarchy on which this command should be invoked.</param>
      <param name="command">The <see cref="T:Microsoft.VisualStudio.Data.OleCommand" /> object representing the command to invoke.</param>
      <param name="textType">The <see cref="T:Microsoft.VisualStudio.Data.OleCommandTextType" /> object instance for the specified command.</param>
      <param name="status">The <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> object instance for the specified command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="status" />, <paramref name="itemId" /> and/or <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="itemId" /> parameter is invalid.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor">
      <summary>Represents a set of properties and methods that interact with the data view hierarchy implementation of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor" /> class with an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object instance.</summary>
      <param name="dataViewHierarchy">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object instance representing the current hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ActivateDocumentIfOpen(System.String)">
      <summary>Activates a document with the specified moniker, if the document is open.</summary>
      <returns>Returns true if the document is open; otherwise returns false.</returns>
      <param name="documentMoniker">Moniker for the document to activate.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="documentMoniker" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ActivateDocumentIfOpen(System.String,System.Guid)">
      <summary>Activates a document with the specified moniker and logical view, if the document is open.</summary>
      <returns>Returns true if the document is open; otherwise returns false.</returns>
      <param name="documentMoniker">Moniker for the document to activate.</param>
      <param name="logicalView">The identifier of a logical view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="documentMoniker" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.Connection">
      <summary>Retrieves a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance representing the data connection pertaining to the data view hierarchy.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.CreateObjectNode">
      <summary>Creates a new node in the data view hierarchy, but one without context and that is not placed anywhere in the hierarchy tree.</summary>
      <returns>Returns an integer value representing the Visual Studio item ID of the new node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.DropObjectNode(System.Int32)">
      <summary>Drops an existing node that represents an object from the data source from the data view hierarchy.</summary>
      <param name="itemId">The item ID of the node to be dropped.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="itemId" /> parameter is invalid or represents a non-object based node.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand)">
      <summary>Executes an OLE command without arguments directly on the data view hierarchy.</summary>
      <returns>Returns the value returned by the command.</returns>
      <param name="itemId">The item ID on which the command should be executed.</param>
      <param name="command">The OLE command to execute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandExecutionOption,System.Object)">
      <summary>Executes an OLE command directly on the data view hierarchy, with a specific execution option and arguments.</summary>
      <returns>Returns the value returned by the command.</returns>
      <param name="itemId">The item ID specifying the hierarchy on which the command should be executed.</param>
      <param name="command">The OLE command to execute.</param>
      <param name="executionOption">An OLE execution option.</param>
      <param name="arguments">Arguments expected by the command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand,System.Object)">
      <summary>Executes an OLE command on the data view hierarchy with arguments.</summary>
      <returns>Returns the value returned by the command.</returns>
      <param name="itemId">The item ID specifying the hierarchy on which the command should be executed.</param>
      <param name="command">The OLE command to execute.</param>
      <param name="arguments">Arguments expected by the command.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetChildSelectionTypes(System.Int32)">
      <summary>Retrieves an array of the object types enumerated when a parent node is expanded to show its child nodes.</summary>
      <returns>Returns an array of string objects enumerated when parent node is expanded.</returns>
      <param name="itemId">The item ID of a parent node.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetChildStaticNodeIds(System.Int32)">
      <summary>Retrieves an array of the static node IDs that are children of the specified item ID.</summary>
      <returns>Returns an array of the static node item IDs representing children of the specified item ID.</returns>
      <param name="itemId">The item ID of a parent node.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetCommandStatus(System.Int32,Microsoft.VisualStudio.Data.OleCommand)">
      <summary>Retrieves the status of an OLE command.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> object that describes the status of the OLE command.</returns>
      <param name="itemId">The item ID for which the command status should be retrieved.</param>
      <param name="command">The command to query for status.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetCommandStatus(System.Int32,Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandTextType)">
      <summary>Retrieves the status of an OLE command with a request for a particular type of command text.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> object that describes the status of the OLE command.</returns>
      <param name="itemId">The item ID for which the command status should be retrieved.</param>
      <param name="command">The command to query for status.</param>
      <param name="textType">The type of text that should be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetItemIdFromNodePath(System.String)">
      <summary>Infers the item ID of a node in the data view hierarchy given a path to the node.</summary>
      <returns>Returns the item ID of the node in the data view hierarchy, or null if no node was found.</returns>
      <param name="nodePath">The path to a node.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="nodePath" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetNodeId(System.Int32)">
      <summary>Retrieves the node ID as specified in the data view support XML from an item ID.</summary>
      <returns>Returns the node ID, or returns null if no node ID exists.</returns>
      <param name="itemId">Item ID of the object for which to retrieve the node ID.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetNodeName(System.Int32)">
      <summary>Retrieves the display name of a specified node.</summary>
      <returns>Returns the string literal display name of the specified node.</returns>
      <param name="itemId">The item ID of the node for which the name is retrieved.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetNodePath(System.Int32)">
      <summary>Infers a node path from the location of a node in the data view hierarchy.</summary>
      <returns>Returns the node path for the specified item, or returns null if not path is available.</returns>
      <param name="itemId">The item ID of the node for which the node path should be inferred.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetObjectIdentifier(System.Int32)">
      <summary>Retrieves the data-source-specific identifier of the object associated with the node matching the specified item ID.</summary>
      <returns>Returns the data-source-specific identifier of the object associated with the node matching the specified item ID.</returns>
      <param name="itemId">The item ID of the node for which the object identifier should be retrieved.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetObjectProperty(System.Int32,System.String)">
      <summary>Retrieves a property of a data object associated with the node matching the specified item ID.</summary>
      <returns>Returns the value of the property of the data object associated with the node matching the specified item ID.</returns>
      <param name="itemId">The item ID of the node for which the object property should be retrieved.</param>
      <param name="propertyName">The name of the property to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetObjectType(System.Int32)">
      <summary>Retrieves the type of the data object associated with the node matching the specified item ID.</summary>
      <returns>Returns a string specifying the type of the data object associated with the node matching the specified item ID.</returns>
      <param name="itemId">The item ID of the node for which the object type should be retrieved.</param>
      <exception cref="T:System.ArgumentException">The specified itemId is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetProperty(System.Int32,System.Int32)">
      <summary>Retrieves a hierarchy property.</summary>
      <returns>Returns the value of the specified hierarchy property.</returns>
      <param name="itemId">An item ID.</param>
      <param name="propertyId">A property ID from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.GetSelectedItems">
      <summary>Retrieves an integer array representing item IDs for currently selected nodes in the tree.</summary>
      <returns>Returns and integer array of item IDs. </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.Hierarchy">
      <summary>Retrieves an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object instance representing the current hierarchy view.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.IsDocumentOpen(System.String)">
      <summary>Retrieves a Boolean value that indicates whether a document with a particular moniker is currently open.</summary>
      <returns>Returns true if the specified document is open; otherwise returns false.</returns>
      <param name="documentMoniker">A document moniker.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="documentMoniker" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.IsDocumentOpen(System.String,System.Guid)">
      <summary>Retrieves a Boolean value that indicates whether a document with a particular moniker and logical view is currently open.</summary>
      <returns>Returns true if the specified document is open; otherwise returns false.</returns>
      <param name="documentMoniker">A document moniker.</param>
      <param name="logicalView">A unique identifier of a logical view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="documentMoniker" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.SelectedDataView">
      <summary>Retrieves a string representing the currently selected data view.</summary>
      <returns>Returns a string representing the currently selected data view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.ServiceProvider">
      <summary>Retrieves the Visual Studio global service provider being used by the data view hierarchy.</summary>
      <returns>Returns the Visual Studio global service provider object being used by the data view hierarchy.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.SetNodePath(System.Int32,System.String)">
      <summary>Sets the node path for a node identified by a particular item ID.</summary>
      <param name="itemId">An item ID .</param>
      <param name="nodePath">The new node path for the node.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="nodePath" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified itemID is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewHierarchyAccessor.SetProperty(System.Int32,System.Int32,System.Object)">
      <summary>Sets a specified hierarchy property.</summary>
      <param name="itemId">An item ID.</param>
      <param name="propertyId">A property ID from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" /> enumeration.</param>
      <param name="value">The value for the property.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewManager">
      <summary>Represents the collection of data view hierarchies currently active in the Visual Studio Server Explorer and provides methods and properties with which to manage these data views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.CopyTo(System.Object[],System.Int32)">
      <summary>Copies the set of data view hierarchies in the collection to an array at the specified starting index.</summary>
      <param name="array">An array to which the data view hierarchies are copied.</param>
      <param name="index">The index in array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewManager.Count">
      <summary>Retrieves the number of data view hierarchies in the current collection.</summary>
      <returns>Returns an integer value representing the number of data view hierarchies in the current collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.CreateDataViewHierarchy(System.String,System.Guid,System.String,System.Boolean)">
      <summary>Creates a new data view hierarchy object instance.</summary>
      <returns>This method is internal to the DDEX infrastructure and is not intended to be called from your code.</returns>
      <param name="name">Name of the data view hierarchy.</param>
      <param name="provider">Unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is encrypted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewManager.DataViews">
      <summary>Retrieves an array list of current data views.</summary>
      <returns>An array list of current data views.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.GetDataViewHierarchy(System.Guid,System.String,System.Boolean)">
      <summary>Retrieves a data view hierarchy with the specified DDEX provider and connection information.</summary>
      <returns>Returns a data view hierarchy with the specified DDEX provider and connection information.</returns>
      <param name="provider">The identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.GetDataViewHierarchy(System.String,System.Guid,System.String,System.Boolean)">
      <summary>Retrieves data view hierarchy object instance specified by the input parameters and sets the name of the hierarchy root node.</summary>
      <returns>Returns a specified data view hierarchy object instance.</returns>
      <param name="name">Name of the data view hierarchy to retrieve.</param>
      <param name="provider">Unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.IsEquivalent(System.Object,System.Guid,System.String,System.Boolean)">
      <summary>Tests the equivalency of a specified data view.</summary>
      <returns>Returns true if there is equivalency; otherwise returns false.</returns>
      <param name="dataView">Object instance of the specified data view.</param>
      <param name="provider">Unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataView" /> and/or <paramref name="connectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The specified provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the set of data views exposed in the Visual Studio Server Explorer to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the data views are copied.</param>
      <param name="index">The index into the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewManager.System#Collections#ICollection#IsSynchronized">
      <summary>Retrieves a value that indicates whether access to the data views collection is synchronized (thread safe).</summary>
      <returns>Returns true if access to the data views collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DataViewManager.System#Collections#ICollection#SyncRoot">
      <summary>Retrieves an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that is able to iterate through the data views collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DataViewSupport">
      <summary>Enables retrieving an XML stream that provides a description of one or more data views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewSupport.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewSupport.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> class, providing resource base name and the assembly in which the resource is located.</summary>
      <param name="baseName">The base name of the resource in the assembly.</param>
      <param name="assembly">The assembly that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewSupport.#ctor(System.String,System.String)">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataViewSupport" /> class.</summary>
      <param name="baseName">The base name of the resource XML file.</param>
      <param name="directory">The directory path to the XML file that contains the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> and/or <paramref name="assembly" /> parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DataViewSupport.GetDataViews">
      <summary>Retrieves an XML stream that contains a description of one or more data views to display in the Visual Studio Server Explorer tool window for a given connection.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> object instance that contains the XML description of the specified data view (or views).</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.DSRefBuilder">
      <summary>Allows you to create a Data Source Reference (DSRef) object that identifies a data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DSRefBuilder.#ctor">
      <summary>Class constructor constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DSRefBuilder" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DSRefBuilder.AppendToDSRef(System.Object,System.String,System.Object[],System.Object[])">
      <summary>Appends information about a data object with the specified type and identifier to a specified existing DSRef object.</summary>
      <param name="dsRef">The existing DSRef object to which information is appended.</param>
      <param name="typeName">The name of the object type.</param>
      <param name="identifier">The identifier of the object.</param>
      <param name="parameters">An array whose contents are defined by the particular implementation of <see cref="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])" /> method and specified by the Data Object Support XML. Such information can be used to provide extra data indicating how to build the DSRef object. This allows an implementation of <see cref="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])" /> to be more data driven.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dsRef" />, <paramref name="typeName" /> and/or <paramref name="identifier" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> argument is in an invalid format.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])">
      <summary>Builds a DSRef object that identifies a data object with the specified type and identifier.</summary>
      <returns>Returns a DSRef object that identifies a specified data object.</returns>
      <param name="typeName">The name of the type of object.</param>
      <param name="identifier">The identifier of the object.</param>
      <param name="parameters">An array whose contents are defined by the particular implementation of <see cref="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])" /> method and specified by the Data Object Support XML. Such information can be used to provide extra data indicating how to build the DSRef object. This allows an implementation of <see cref="M:Microsoft.VisualStudio.Data.DSRefBuilder.BuildDSRef(System.String,System.Object[],System.Object[])" /> to be more data driven.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameters are null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> argument is in an invalid format.</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">Could not create DSRef object.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.DSRefBuilder.Connection">
      <summary>Retrieves a data-source connection as a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.NameAttribute">
      <summary>Specifies the string literal name of a given connection property when specified in a connection string.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.NameAttribute.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.NameAttribute" /> class with the specified connection property name.</summary>
      <param name="name">The string literal name of a specified connection property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.NameAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether the value of the current object instance is equal to a specified object.</summary>
      <returns>Returns true if <paramref name="value" /> equals the value of the current instance; otherwise returns false.</returns>
      <param name="obj">Current value of the property Name to test for equality. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.NameAttribute.GetHashCode">
      <summary>Returns the has code for the current object instance.</summary>
      <returns>Returns an integer value representing the hash code of the current object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.NameAttribute.Name">
      <summary>Retrieves the string literal name of a given connection property.</summary>
      <returns>Returns the string literal connection property name.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.ObjectWithSite">
      <summary>Provides a simplified way to support communication between an object and its site in the container.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.#ctor">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.ObjectWithSite" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.#ctor(System.Object)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.ObjectWithSite" /> class with a specified site object.</summary>
      <param name="site">Object instance representing the site.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
      <summary>Retrieves the last site set using the <see cref="M:Microsoft.VisualStudio.Data.ObjectWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)" /> method. In cases where there is no known site, the object returns an exception.</summary>
      <param name="riid">Provides the IID of the interface pointer returned in the <paramref name="ppvSite" /> parameter.</param>
      <param name="ppvSite">The address of the caller's void variable in which the object stores the interface pointer of the site last seen in the M:Microsoft.VisualStudio.Data.ObjectWithSite.Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite(System.Object) method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
      <summary>Provides the site's pointer to the site object.</summary>
      <param name="pUnkSite">Address of an interface pointer to the site managing this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ObjectWithSite.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.ObjectWithSite.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.ObjectWithSite.Site">
      <summary>Retrieves or sets the object site.</summary>
      <returns>Returns a Site object instance.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.ObjectWithSite.SiteChanged">
      <summary>Event that is raised when the <see cref="P:Microsoft.VisualStudio.Data.ObjectWithSite.Site" /> property is changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.OleCommand">
      <summary>Provides a managed wrapper around the identifier of an OLE command.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.OleCommand.#ctor(System.Guid,System.Int32)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.OleCommand" /> class with command group identifier and command identifier.</summary>
      <param name="groupGuid">GUID of the menu group for the specified command.</param>
      <param name="commandId">The ID of the command within the specified menu group.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommand.CommandId">
      <summary>Retrieves the ID of the command from within the specified menu group.</summary>
      <returns>Returns an integer value representing the command ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommand.GroupGuid">
      <summary>Retrieves the menu group GUID for the specified command.</summary>
      <returns>Returns the GUID of the menu group for the specified command.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.OleCommandExecutionOption">
      <summary>Provides a managed implementation of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, which specifies allowable options to the <see cref="M:Microsoft.VisualStudio.Data.DataViewCommandHandler.ExecuteCommand(System.Int32,Microsoft.VisualStudio.Data.OleCommand,Microsoft.VisualStudio.Data.OleCommandExecutionOption,System.Object)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandExecutionOption.DoDefault">
      <summary>Either prompts the user for input, or does not, whichever is the default behavior.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandExecutionOption.PromptUser">
      <summary>Executes the command after obtaining user input.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandExecutionOption.DontPromptUser">
      <summary>Executes the command without prompting the user. For example, clicking the Print toolbar button causes a document to be immediately printed without user input.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandExecutionOption.ShowHelp">
      <summary>Shows help for the corresponding command, but does not execute the command.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.OleCommandStatus">
      <summary>Provides the status of a specified OLE command.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.OleCommandStatus.#ctor">
      <summary>Class constructor. Instantiates a nonparameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.OleCommandStatus.#ctor(System.Int32)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.OleCommandStatus" /> class.</summary>
      <param name="flags">A value from the unmanaged <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Checked">
      <summary>Retrieves or sets a value indicating whether this command is checked.</summary>
      <returns>Returns true if the command is checked; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Enabled">
      <summary>Retrieves or sets a value indicating whether this command is enabled.</summary>
      <returns>Returns true if the command is enabled; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Flags">
      <summary>Retrieves or sets a value representing the underlying <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> value.</summary>
      <returns>Returns an integer value specifying an underlying <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Supported">
      <summary>Retrieves or sets a value indicating whether this command is supported.</summary>
      <returns>Returns true if the command is supported; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Text">
      <summary>Retrieves or sets the text displayed for this command.</summary>
      <returns>Returns the text to display for the specified command.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.OleCommandStatus.Visible">
      <summary>Retrieves or sets a value indicating whether this command is visible.</summary>
      <returns>Returns true if the command is visible; otherwise returns false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.OleCommandTextType">
      <summary>Provides a managed implementation of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXTF" /> enumeration, which specifies the kind of text that is being requested.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandTextType.None">
      <summary>No extra information is requested.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandTextType.Name">
      <summary>The command handler should provide the localized name of the command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.OleCommandTextType.Status">
      <summary>The command handler should provide a localized status string for the command.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.ServiceProvider">
      <summary>Provides an object that can proffer services using both the managed and unmanaged IServiceProvider interfaces. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.#ctor">
      <summary>Class constructor for a managed service provider (<see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />) that is accessible through the unmanaged IServiceProvider interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Class constructor for wrapping an unmanaged IServiceProvider interface that is accessible through the managed <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</summary>
      <param name="serviceProvider">An unmanaged IServiceProvider interface object to wrap.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.GetService(System.Guid)">
      <summary>Retrieves a service with a specified service GUID.</summary>
      <returns>Returns the service with the specified service GUID, or returns null if no service was found.</returns>
      <param name="serviceGuid">The GUID of a service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.GetService(System.Type)">
      <summary>Retrieves a service of the specified type.</summary>
      <returns>Returns the service of the specified type, or returns null if no service was found.</returns>
      <param name="serviceType">A service type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.GetServiceImpl(System.Guid)">
      <summary>Provides the implementation for retrieving a service with a specific GUID.</summary>
      <returns>Returns the service with a specified service GUID, or returns null if no service was found.</returns>
      <param name="serviceGuid">The GUID of a service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.GetServiceImpl(System.Type)">
      <summary>Provides the implementation for retrieving a service of a specific type.</summary>
      <returns>Returns the service of the specified type, or returns null if no service was found.</returns>
      <param name="serviceType">A service type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IServiceProvider#QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
      <summary>Performs as a factory for services that are exposed through an implementation of IServiceProvider.</summary>
      <returns>Returns an integer specifying the address of interface for the requested service.</returns>
      <param name="guidService">A unique identifier of the requested service.</param>
      <param name="riid">A unique identifier of the interface which the caller wishes to receive for the service.</param>
      <param name="ppvObject">Address of the interface specified by the <paramref name="riid" /> parameter.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.ServiceProvider.ServiceTypes">
      <summary>Retrieves a list of service types used to convert the unmanaged QueryService method call, in which a service GUID is specified, into a managed IServiceProvider.GetService method call, in which a managed type is specified.</summary>
      <returns>A list of service types used to convert the unmanaged QueryService method call, in which a service GUID is specified, into a managed <see cref="M:Microsoft.VisualStudio.Data.ServiceProvider.GetService(System.Guid)" /> method call, in which a managed type is specified.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.ServiceProviderWithSite">
      <summary>Provides an object that proffers services using both the managed and unmanaged versions of the <see cref="T:Microsoft.VisualStudio.Data.ServiceProvider" /> interface, and can be sited using the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite" /> interface. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.ServiceProviderWithSite" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
      <summary>Retrieves the last site set using the <see cref="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)" /> method. If there is no known site, an exception is thrown.</summary>
      <param name="riid">The interface ID (IID) of the interface pointer returnable in the <paramref name="ppvSite" /> parameter.</param>
      <param name="ppvSite">Address of the pointer variable that receives the interface pointer request in the <paramref name="riid" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
      <summary>Provides a site's <see cref="T:IUnknown" /> pointer to a given object.</summary>
      <param name="pUnkSite">Pointer to the <see cref="T:IUnknown" /> interface pointer of the site managing this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.ServiceProviderWithSite.OnSiteChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Data.ServiceProviderWithSite.SiteChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Site">
      <summary>Retrieves or sets the site object instance.</summary>
      <returns>Returns the site object.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.ServiceProviderWithSite.SiteChanged">
      <summary>Event raised when the <see cref="P:Microsoft.VisualStudio.Data.ServiceProviderWithSite.Site" /> property has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.SynonymsAttribute">
      <summary>Provides a comma-delimited list of connection property names that are synonymous with a primary connection property name.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.SynonymsAttribute.#ctor(System.String)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.SynonymsAttribute" /> class.</summary>
      <param name="synonyms">A comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.SynonymsAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether this object instance is equal to a specified object.</summary>
      <returns>Returns true if the objects are equal; otherwise returns false.</returns>
      <param name="obj">The object value being tested for equality.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.SynonymsAttribute.GetHashCode">
      <summary>Retrieves the hash code for the current object instance.</summary>
      <returns>Returns an integer value representing the hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.SynonymsAttribute.Synonyms">
      <summary>Retrieves a comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</summary>
      <returns>Returns a comma-delimited list of connection property names that are synonymous with the connection property to which this attribute is attached.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties">
      <summary>Provides an implementation of the DataConnectionProperties class using the ADO.NET connection string builder base class (DbConnectionStringBuilder).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.#ctor(System.String)">
      <summary>Class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> class that provides the ADO.NET provider name.</summary>
      <param name="providerName">Invariant name of the ADO.NET provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.#ctor(System.String,System.String)">
      <summary>Parameterized class constructor. Instantiates a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> class that provides the ADO.NET provider invariant name and a provider connection string.</summary>
      <param name="providerName">Invariant name of the ADO.NET provider.</param>
      <param name="connectionString">Connection string for the specified provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Add(System.String)">
      <summary>Adds a new property to the current connection properties collection.</summary>
      <param name="propertyName">Name of the property being added.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The connection properties are not extensible.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.ConnectionStringBuilder">
      <summary>Retrieves the underlying ADO.NET connection string builder object for the current connection properties instance.</summary>
      <returns>Returns a <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> object representing a valid data connection string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Contains(System.String)">
      <summary>Tests whether a specified property is a member of the current set of connection properties.</summary>
      <returns>Returns true if the specified property is a member of the connection properties collection; otherwise returns false.</returns>
      <param name="propertyName">Name of the property whose presence is being tested.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.EquivalentTo(Microsoft.VisualStudio.Data.DataConnectionProperties)">
      <summary>Tests whether the current instance of the class is equivalent to another class instance.</summary>
      <returns>Returns true if the specified object instances are equivalent; otherwise returns false.</returns>
      <param name="connectionProperties">Connection properties object against which an equivalency is to be established or refuted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionProperties" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.GetBasicProperties">
      <summary>Retrieves an array of property name values representing the set of "basic" properties recognizable by the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> class instance.</summary>
      <returns>Returns the set of "basic" properties associated with the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.GetEnumerator">
      <summary>Retrieves an enumerator that enumerates over all of the known connection properties and their values, if any.</summary>
      <returns>Returns a data connection properties enumerator</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.GetSynonyms(System.String)">
      <summary>Retrieves an array list of synonyms for a specified data connection property.</summary>
      <returns>Returns a list of synonyms for a specified property.</returns>
      <param name="propertyName">Name of the property for which synonyms are retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.IsComplete">
      <summary>Retrieves a Boolean value indicating whether a given connection string is complete.</summary>
      <returns>Returns true if the connection string is complete; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.IsExtensible">
      <summary>Retrieves or sets a Boolean value indicating whether the DDEX Provider connection properties are extensible.</summary>
      <returns>Returns true if the DDEX Provider connection properties are extensible; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.IsSensitive(System.String)">
      <summary>Returns a Boolean value indicating whether a specified property contains sensitive information.</summary>
      <returns>Returns true if the property contains sensitive information; otherwise returns false.</returns>
      <param name="propertyName">Name of the property for which the indication of sensitive information is provided.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The property does not exist.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Item(System.String)">
      <summary>Retrieves or sets a value for a specified property on the DDEX Provider.</summary>
      <returns>Returns the value for the property with the specified name.</returns>
      <param name="propertyName">Name of the property for which a value is retrieved or set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">When setting a property value, the specified value cannot be converted to the property type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Parse(System.String)">
      <summary>Disassembles the components of a connection string into a set of connection properties as set in the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> class instance.</summary>
      <param name="s">The connection string in a format recognized by the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties" /> instance.</param>
      <exception cref="T:System.FormatException">The format of <paramref name="s" /> was invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Remove(System.String)">
      <summary>Removes a property from the current connection property collection.</summary>
      <param name="propertyName">Name of the property to be removed from the current set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Reset">
      <summary>Resets a connection property to its initial value.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Reset(System.String)">
      <summary>Reverts a property value to its initial value.</summary>
      <param name="propertyName">Name of the property to be reset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the set of connection properties to an array, starting at the specified array index.</summary>
      <param name="array">Array into which the connection properties are copied.</param>
      <param name="index">The index into the array at which copying should begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#ICollection#Count">
      <summary>Retrieves the number of elements contained in the current <see cref="T:System.Collections.ICollection" /> instance.</summary>
      <returns>Returns the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#ICollection#IsSynchronized">
      <summary>Retrieves a value that indicates whether access to the connection properties collection is synchronized (thread safe).</summary>
      <returns>Returns true if access to the connection properties collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#ICollection#SyncRoot">
      <summary>Retrieves an object that can be used to synchronize access to the connection properties collection.</summary>
      <returns>Returns a synchronization object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds an element as a key/value pair to the specified <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <param name="key">The object to use as the key of the element to add to the dictionary.</param>
      <param name="value">The object to use as the value of the element to add to the dictionary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Clear">
      <summary>Removes all elements from the specified <see cref="T:System.Collections.IDictionary" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Collections.IDictionary" /> instance contains an element with the specified key.</summary>
      <returns>Returns true if the IDictionary instance contains an element with the specified key; otherwise returns false.</returns>
      <param name="key">The key on which to locate an element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <returns>Returns an IDictionaryEnumerator object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#IsFixedSize">
      <summary>Retrieves a Boolean value indicating whether the specified <see cref="T:System.Collections.IDictionary" /> instance has a fixed size.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> instance has a fixed size; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#IsReadOnly">
      <summary>Retrieves a Boolean indicating whether the <see cref="T:System.Collections.IDictionary" /> instance is read-only.</summary>
      <returns>Returns true if the <see cref="T:System.Collections.IDictionary" /> instance is read-only; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Item(System.Object)">
      <summary>Retrieves an item, or element, with the specified key from the current <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <returns>Returns the element with the specified key.</returns>
      <param name="key">The key on which to locate an item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Keys">
      <summary>Retrieves an <see cref="T:System.Collections.ICollection" /> object containing the keys for the <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <returns>Returns an ICollection object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <param name="key">The key for the element to be removed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IDictionary#Values">
      <summary>Retrieves an <see cref="T:System.Collections.ICollection" /> object containing the values in the specified <see cref="T:System.Collections.IDictionary" /> instance.</summary>
      <returns>Returns an ICollection object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that is able to iterate through the connection properties collection.</summary>
      <returns>Returns an IEnumerator object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Retrieves a collection of custom attributes for the specified object.</summary>
      <returns>Returns an AttributeCollection object instance that contains the attributes for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Retrieves the class name of the specified object.</summary>
      <returns>Returns the class name of the object, or null if the class does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Retrieves the name of the specified object.</summary>
      <returns>Returns the name of the object, or null if the object does not have a name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Retrieves a type converter for the specified object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.TypeConverter" /> instance appropriate for the specified object, or returns null if there is no TypeConverter for this object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Retrieves the default event for the specified object.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptor" /> representing the default event for the specified object, or returns null if this object does not have events.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Retrieves the default property for the specified object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the default property for this object, or returns null if this object does not have properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Retrieves an editor of the specified type for this object.</summary>
      <returns>Returns an object of the specified type that is the editor for this object, or returns null if the editor cannot be found.</returns>
      <param name="editorBaseType">A managed <see cref="T:System.Type" /> representing the editor for this object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Retrieves the events for the specified instance of a component.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> object representing the events for the specified component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Retrieves the events for this instance of a component using the specified attribute array as a filter.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptorCollection" /> representing the filtered events for the specified component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Retrieves the properties for the specified instance of a component.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> representing the properties for this component instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Retrieves the properties for the specified instance of a component using the attribute array as a filter.</summary>
      <returns>Returns an array of type <see cref="T:System.Attribute" /> that represents the filtered properties for this component instance.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter to define which properties to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retrieves an object that contains the property described by the specified property descriptor.</summary>
      <returns>Returns an <see cref="T:System.Object" /> representing the owner of the specified property.</returns>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> representing the property whose owner is to be found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.Test">
      <summary>Tests that the current set of connection properties will successfully open a connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.ToDisplayString">
      <summary>Retrieves a string representation of the current set of data connection properties that are suitable for on-screen display.</summary>
      <returns>Returns a string representation of the current set of data connection properties that are suitable for on-screen display.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.ToFullString">
      <summary>Retrieves a string representation of the current set of data connection properties for this instance.</summary>
      <returns>Returns a string representation of the current set of data connection properties for this instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionProperties.ToTestString">
      <summary>Retrieves a form of the connection string that can be used for testing the connection.</summary>
      <returns>Returns a testable form of the connection string.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport">
      <summary>Provides a managed implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" />, <see cref="T:Microsoft.VisualStudio.Data.DataCommand" />, and <see cref="T:Microsoft.VisualStudio.Data.DataTransaction" /> classes using the ADO.NET <see cref="T:System.Data.IDbConnection" />, <see cref="T:System.Data.IDbCommand" />, and <see cref="T:System.Data.IDbTransaction" />interfaces, respectively; also provides a simple way to supply an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataSourceVersionComparer" />class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.#ctor(System.String)">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport" /> class with a specified ADO.NET provider name.</summary>
      <param name="providerName">Invariant name of the ADO.NET provider initialized on the object instance.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.BaseCommand">
      <summary>Retrieves the main <see cref="T:System.Data.IDbCommand" /> object being used for executing commands on this connection.</summary>
      <returns>Returns an <see cref="T:System.Data.IDbCommand" /> object instance employed on the current connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.BeginTransaction">
      <summary>Initiates a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer value representing the new current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Close">
      <summary>Closes the specified data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CommitTransaction">
      <summary>Commits a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer representing the new current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CompareVersions(System.String,System.String)">
      <summary>Compares two data-source version strings and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>Returns an integer specifying the following:Less than zero: <paramref name="versionA" /> is less than <paramref name="versionB" />;Equal to zero: <paramref name="versionA" /> is equal to <paramref name="versionB" />;Greater than zero: <paramref name="versionA" /> is greater than <paramref name="versionB" />.</returns>
      <param name="versionA">The first of two versions to compare.</param>
      <param name="versionB">The second of two versions to compare.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Connection">
      <summary>Retrieves the <see cref="T:System.Data.IDbConnection" /> object being used by the current connection support instance.</summary>
      <returns>Returns an <see cref="T:System.Data.IDbConnection" /> object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ConnectionString">
      <summary>Retrieves or sets a string representation of information required to establish a specified data source connection.</summary>
      <returns>Returns a string representation of the data source connection information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ConnectionTimeout">
      <summary>Retrieves or sets the amount of time, in seconds, to wait to establish a connection before terminating the attempt and generating a timeout error.</summary>
      <returns>Returns an integer representation of the allowable timeout period, in seconds.</returns>
      <exception cref="T:System.NotSupportedException">The provider does not support connection timeout.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CreateDataSourceInformation">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CreateObjectIdentifierConverter">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CreateObjectItemComparer">
      <summary>Creates a object instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CreateParameter">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object instance. </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.CurrentTransactionLevel">
      <summary>Retrieves the current transaction level.</summary>
      <returns>Returns an integer representation of the current transaction level.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.DeriveParameters(System.String,System.Int32,System.Int32)">
      <summary>Derives parameters that can be specified for a given command</summary>
      <returns>Returns an array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> objects, each one representing a parameter derived from the command.</returns>
      <param name="command">A data-source-specific command from which to derive parameters.</param>
      <param name="commandType">The command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">The length of time, in seconds, to block the client before canceling the parameter derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.DeriveSchema(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Derives the schema returned from a specified command, indicating the layout of items and blocks in a given data reader.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object instance representing the command schema.</returns>
      <param name="command">Data-source-specific command for which to derive the schema</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter" /> objects for the specified command type. </param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Dispose(System.Boolean)">
      <summary>Releases all resources held by the data connection.</summary>
      <param name="disposing">Indication whether both managed and unmanaged resources are to be released (true), or unmanaged resources only (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Executes a specified command, optionally with parameters, and returns results as a <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object, which provides a forward-only, read-only stream from the data source.</returns>
      <param name="command">Command to execute that is specific to the data source.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object for the specified command type. </param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)">
      <summary>Executes a command, optionally with parameters, but does not request results, instead returning an integer indicating the outcome of the call.</summary>
      <returns>Returns a data-provider-specific integer status code.</returns>
      <param name="command">Data-source-specific command to execute.</param>
      <param name="commandType">Type of the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="parameters">Array of <see cref="T:Microsoft.VisualStudio.Data.DataParameter" /> object for the specified command type. </param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ExecutingCommand">
      <summary>Retrieves the <see cref="T:System.Data.IDbCommand" /> instance currently being used for execution.</summary>
      <returns>Returns an <see cref="T:System.Data.IDbCommand" /> object instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.GetServiceImpl(System.Type)">
      <summary>Enables retrieving implementation services.</summary>
      <returns>Returns a service object instance.</returns>
      <param name="serviceType">Data type of the service to be implemented.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Initialize(System.Object)">
      <summary>Initializes the specified ADO.NET connection using a specified provider.</summary>
      <param name="providerObj">Data provider object, or null if a new object needs to be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Open(System.Boolean)">
      <summary>Opens the specified data connection.</summary>
      <returns>Returns true if the connection was opened successfully and does not require a prompt. Returns false if the connection is missing required connection information and a prompt should be displayed to obtain the missing information form the user. You should return false only when a provider has implemented the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionPromptDialog" /> class.</returns>
      <param name="doPromptCheck">Boolean indication whether the call to the Open method should return false for specified errors that relate to missing connection information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Prepare(System.String,System.Int32,System.Int32)">
      <summary>Prepares the specified command on the data source to be executed; the command may be executed multiple times, with varying parameters.</summary>
      <returns>Returns an identifier of the prepared command that can later be passed to the <see cref="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Execute(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> or <see cref="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ExecuteWithoutResults(System.String,System.Int32,Microsoft.VisualStudio.Data.DataParameter[],System.Int32)" /> methods.</returns>
      <param name="command">Command to prepare for execution.</param>
      <param name="commandType">Command type for the indicated command, specifying how to interpret the contents of the <paramref name="command" /> parameter.</param>
      <param name="commandTimeout">Length of time, in seconds, to block the client before canceling the schema derivation and returning to the caller. A value of zero indicates infinite timeout; value of -1 indicates a provider default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.PreparedCommands">
      <summary>Retrieves a list of <see cref="T:System.Data.IDbCommand" /> objects that have been previously prepared.</summary>
      <returns>Returns an <see cref="T:System.Collections.IList" /> object instance containing prepared <see cref="T:System.Data.IDbCommand" /> instances.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.ProviderObject">
      <summary>Retrieves the underlying provider object for the specified connection.</summary>
      <returns>Returns the ADO.NET data provider's <see cref="T:System.Data.IDbConnection" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.RollbackTransaction">
      <summary>Rolls back, or voids, a transaction and returns the new current transaction level.</summary>
      <returns>Returns an integer value indicating the new current transaction level.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.State">
      <summary>Retrieves the state of the data connection.</summary>
      <returns>Returns the state of the connection, as enumerated by the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionState" /> class.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetConnectionSupport.Transaction">
      <summary>Retrieves the current <see cref="T:System.Data.IDbTransaction" />, if any.</summary>
      <returns>Returns an <see cref="T:System.Data.IDbTransaction" /> object instance; returns null if not currently in a transaction.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> class using an implementation of the ADO.NET <see cref="T:System.Data.IDataReader" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.#ctor(System.Data.IDataReader)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader" /> class with an implementation of the <see cref="T:System.Data.IDataReader" /> interface.</summary>
      <param name="dataReader">Name of the <see cref="T:System.Data.IDataReader" /> instance with which the class is initialized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.#ctor(System.Data.IDataReader,System.Data.IDbCommand,Microsoft.VisualStudio.Data.DataParameter[])">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader" /> class with an implementation of the <see cref="T:System.Data.IDataReader" /> interface and the command and/or parameters that produced the <see cref="T:System.Data.IDataReader" />.</summary>
      <param name="dataReader">The <see cref="T:System.Data.IDataReader" /> object.</param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" />object.</param>
      <param name="parameters">Parameter array, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.Close">
      <summary>Closes the current <see cref="T:System.Data.IDataReader" /> object instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a specified number of bytes of binary data.</summary>
      <returns>Returns a numerical value indicating the number of bytes read into the buffer.</returns>
      <param name="index">Index into the current block of data for the item to retrieve.</param>
      <param name="buffer">An array into which specified data, as byte array, should be placed. If null, this method returns the size required of the array in order to fit all of the specified data.</param>
      <param name="bufferIndex">Index of starting point in the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <param name="length">The number of bytes to be read into the byte array specified with the <paramref name="buffer" /> parameter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" />, <paramref name="bufferIndex" />, and/or <paramref name="length" /> parameters are invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItem(System.Int32)">
      <summary>Retrieves an object instance representing the retrievable item as determined by an index into the current block of data.</summary>
      <returns>Returns an object representing the item at the specified index.</returns>
      <param name="index">Index into the current block of the data item at which to retrieve the item.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItem(System.String)">
      <summary>Retrieves an object instance representing the retrievable item as specified by name.</summary>
      <returns>Returns an object specified by name.</returns>
      <param name="name">The name of the data item in the current block to retrieve.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="name" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves the maximum length, in characters, of data items at the specified index.</summary>
      <returns>Returns the maximum length, in number of characters, of the data item at the specified index.</returns>
      <param name="index">The index of the data item being examined for length.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItemName(System.Int32)">
      <summary>Retrieves the name assigned to the data item at the specified index, if any.</summary>
      <returns>Returns the name assigned to the data item at the index specified by the <paramref name="index" /> parameter, or null if no name exists.</returns>
      <param name="index">The index of the data item for which to retrieve the name.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)">
      <summary>Returns the data type of a data item, or items, at the specified index in a specified format.</summary>
      <returns>Returns the data type of items at the specified index in the specified format.</returns>
      <param name="index">Index of the data item for which to return data type.</param>
      <param name="itemTypeFormat">The format in which to return the data type information, as enumerated in <see cref="T:Microsoft.VisualStudio.Data.DataItemTypeFormat" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.InnerDataReader">
      <summary>Retrieves the underlying <see cref="T:System.Data.IDataReader" /> object that is driving the current data reader.</summary>
      <returns>Returns an <see cref="T:System.Data.IDataReader" /> object instance for the current data reader.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.IsClosed">
      <summary>Retrieves a Boolean value that indicates whether the specified data reader instance has been closed.</summary>
      <returns>Returns true if the specified data reader instance is closed; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.IsNullItem(System.Int32)">
      <summary>Indicates whether the data item at the specified index is unspecified, that is, null.</summary>
      <returns>Returns true if the item is null, that is, unspecified; otherwise returns false.</returns>
      <param name="index">Index of the data item to examine.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is invalid.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.ItemCount">
      <summary>Retrieves the number of items in the current block of data.</summary>
      <returns>Returns an integer value indicating the number of items in the current block of data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.NextResult">
      <summary>Advances the data reader to the next result in cases where the reader contains multiple results.</summary>
      <returns>Returns true if more results remain to be read and the reader was advanced to the next result. Returns false if no more results were found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.Read">
      <summary>Advances the reader to the next block of data in cases where the reader contains more than one block.</summary>
      <returns>Returns true if there are more blocks of data to read.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.Status">
      <summary>Retrieves a numerical status code returned by the method currently providing data to the data reader.</summary>
      <returns>Returns a numerical status code from the method currently providing data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader.Terminate">
      <summary>Terminates the data reader immediately, without necessarily returning all of the data nor setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation">
      <summary>Provides information about an ADO.NET data source in the form of properties passed as name/value pairs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation" /> class with a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object.</summary>
      <param name="connection">Current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection,System.Collections.ICollection)">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation" /> class with a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object and a collection of connection properties.</summary>
      <param name="connection">Current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</param>
      <param name="propertyNames">Names of the properties in the connection properties <see cref="T:System.Collections.ICollection" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.#ctor(Microsoft.VisualStudio.Data.DataConnection,System.Collections.IDictionary)">
      <summary>Class constructor. Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation" /> class with a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object and a connection properties <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="connection">Current instance of the <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> class.</param>
      <param name="properties">An <see cref="T:System.Collections.IDictionary" /> object containing the set of current connection properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.Contains(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified property is contained in this data source information instance.</summary>
      <returns>Returns true if the specified property is contained in this data source information instance; otherwise returns false.</returns>
      <param name="propertyName">The name of a data source information property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.DataSourceInformation">
      <summary>Retrieves in-memory data source information provided by an implementation of the <see cref="T:System.Data.DataTable" /> class to represent a table of in-memory data.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.DataSourceInformation" /> object instance.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.Item(System.String)">
      <summary>Retrieves a data source information property with the specified name.</summary>
      <returns>Returns the data source information property with the specified name.</returns>
      <param name="propertyName">The name of the data source information property to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.RetrieveValue(System.String)">
      <summary>Retrieves a value for a specified data source information property.</summary>
      <returns>Returns the value of the data source information property, or returns null if the property is not supported.</returns>
      <param name="propertyName">The name of a data source information property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader">
      <summary>Retrieves the contents of one or more <see cref="T:System.Data.DataTable" /> objects in the form of one or more read-only, forward-only result sets.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.#ctor(System.Data.DataTable)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader" /> class along with a <see cref="T:System.Data.DataTable" /> instance.</summary>
      <param name="dataTable">Contents, or result set, of the specified <see cref="T:System.Data.DataTable" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.#ctor(System.Data.DataTable,System.Int32)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader" /> class along with a <see cref="T:System.Data.DataTable" /> instance and a <see cref="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.Status" /> indicator.</summary>
      <param name="dataTable">Contents, or result set, of the specified <see cref="T:System.Data.DataTable" /> object.</param>
      <param name="status">Integer specifying status.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.Close">
      <summary>Closes the current <see cref="T:System.Data.DataTableReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes into the buffer as an array, starting at a specified offset</summary>
      <returns>Returns an integer value specifying the offset at which to begin reading in the byte stream.</returns>
      <param name="index">Index into the data field from which to begin the read operation.</param>
      <param name="buffer">The byte array to be read.</param>
      <param name="bufferIndex">Index into the buffer at which to start placing the data.</param>
      <param name="length">Length of the byte stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItem(System.Int32)">
      <summary>Retrieves a data item at a specified index.</summary>
      <returns>Returns an object representing the item at the specified index.</returns>
      <param name="index">Index into the field specifying the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItem(System.String)">
      <summary>Retrieves a data item with a specified name.</summary>
      <returns>Returns an object representing the item with the specified name.</returns>
      <param name="name">Name of the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves an integer value specifying the maximum length of the data item at the specified index.</summary>
      <returns>Returns an integer value specifying the maximum length of the data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the max length value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItemName(System.Int32)">
      <summary>Retrieves the string literal name of the data item at the specified index.</summary>
      <returns>Returns the name of the data item at the specified index.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the item name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)">
      <summary>Retrieves the data type for a data item at a specified index and with a specified item type format.</summary>
      <returns>Returns the data type for the specified data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the item type format.</param>
      <param name="itemTypeFormat">The <see cref="T:Microsoft.VisualStudio.Data.DataItemTypeFormat" /> object specifying the data type format for the data item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.InnerDataTable">
      <summary>Provides a means for accessing the underlying <see cref="T:System.Data.DataTable" /> object directly.</summary>
      <returns>Returns the base <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.IsClosed">
      <summary>Retrieves a Boolean value indicating whether the <see cref="T:System.Data.DataTableReader" /> is closed.</summary>
      <returns>Returns true if the <see cref="T:System.Data.DataTableReader" /> object is closed; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.IsNullItem(System.Int32)">
      <summary>Retrieves a Boolean value indicating whether the data item at the specified index is null.</summary>
      <returns>Returns true if the data item is null; otherwise returns false.</returns>
      <param name="index">Index into the field specifying the data item for which to test for null.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.ItemCount">
      <summary>Override. Retrieves an integer value specifying the number of data items contained in the current <see cref="T:System.Data.DataTableReader" /> instance.</summary>
      <returns>Returns an integer specifying data items in the current <see cref="T:System.Data.DataTableReader" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.NextResult">
      <summary>Tests whether there is another result set and if true advances the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader" />.</summary>
      <returns>Returns true if another result exists; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.Read">
      <summary>Tests whether there is another data record and if true advances the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader" /> to the next record.</summary>
      <returns>Returns true if there is another record (row) to read; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataTableReader.Status">
      <summary>Retrieves an integer value representing the status of the data table; however, invariably returns zero.</summary>
      <returns>Returns an integer representing status.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper">
      <summary>Provides a default implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectConceptMapper" /> class for ADO.NET data providers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectConceptMapper" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.DataTypes">
      <summary>Retrieves data types as <see cref="T:System.Data.DataTable" /> object instance.</summary>
      <returns>Returns a <see cref="T:System.Data.DataTable" /> object instance representing data types.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.GetDbTypeFromNativeType(System.String)">
      <summary>Maps a native type to a <see cref="T:System.Data.DbType" /> instance and returns the type value.</summary>
      <returns>Returns a <see cref="T:System.Data.DbType" /> object instance representing the mapped type.</returns>
      <param name="nativeType">Name of the native type to map.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.GetFrameworkTypeFromNativeType(System.String)">
      <summary>Maps a native type to .NET Framework data type and returns the appropriate type instance.</summary>
      <returns>Returns a .NET Framework type instance representing the mapped type.</returns>
      <param name="nativeType">Name of the native type to map.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.GetProviderTypeFromNativeType(System.String)">
      <summary>Maps a native type to a provider-specific data type.</summary>
      <returns>The provider type.</returns>
      <param name="nativeType">Name of the native type to map.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectConceptMapper.MapValuesToConcept(System.String,System.String,System.Object[])">
      <summary>Maps one or more data-source-specific values to a specified generic concept.</summary>
      <returns>Returns an object representing the value of the generic concept.</returns>
      <param name="typeName">The name of the data object type requesting this mapping.</param>
      <param name="conceptName">The name of the generic concept.</param>
      <param name="values">One or more data source specific values to map into the concept specified by <paramref name="conceptName" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="conceptName" /> and/or <paramref name="values" /> parameter is null</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="typeName" /> and/or <paramref name="conceptName" /> parameter is invalid, or the <paramref name="values" /> array does not contain the expected type of data.</exception>
      <exception cref="T:System.NotSupportedException">This method does not support mapping of the specified concept for the specified types.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectEnumerator">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectEnumerator" /> class using the ADO.NET GetSchema API. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectEnumerator.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectEnumerator" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectEnumerator.EnumerateObjects(System.String,System.Object[],System.Object[],System.String,System.Object[])">
      <summary>Enumerates items for a set of data objects of the specified type with the specified restrictions and sort string, if supported.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataReader" /> object containing the results of the enumeration call.</returns>
      <param name="typeName">Name of the type of the object to enumerate.</param>
      <param name="items">The set of items to enumerate, specified as strings where named items are available, otherwise as indexes. In cases in which a data provider does not support items filtering, this parameter is ignored.</param>
      <param name="restrictions">A set of filtering restrictions to apply to the set of returned objects.</param>
      <param name="sort">A sort string, which follows syntax for the SQL Server ORDER BY clause. The actual sort order should be source-based; that is, if the client is English and the source is Chinese, the sort should be applied in Chinese.</param>
      <param name="parameters">An array whose contents are defined by the given implementation of EnumerateObjects, and which is specified by the Data Object Support XML file. Information supplied in this parameter can be used to provide extra data indicating how to perform the enumeration, allowing implementations of this method to be more data driven.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectIdentifierConverter" /> class using information supplied by an ADO.NET provider, including <see cref="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetDataSourceInformation.DataSourceInformation" /> property values and the <see cref="T:System.Data.Common.DbCommandBuilder" />, <see cref="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)" />, and <see cref="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)" />methods.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter.#ctor(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Class constructor. Initializes a new instance of the xx class, providing a <see cref="T:Microsoft.VisualStudio.Data.DataConnection" /> object to the data source.</summary>
      <param name="connection">Connection to the data source object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter.FormatPart(System.String,System.Object,System.Boolean)">
      <summary>Formats a specified identifier part; where the with Quotes parameter is true, this method calls the <see cref="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)" /> method.</summary>
      <returns>Returns the specified identifier part as a formatted string.</returns>
      <param name="typeName">The name of the data object type.</param>
      <param name="identifierPart">The unformatted value of an identifier part.</param>
      <param name="withQuotes">Indicates whether the formatted part should be enclosed in quotation marks, where necessary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter.SplitIntoParts(System.String,System.String)">
      <summary>Retrieves the composite identifier separator pattern from the ADO.NET provider's data source information and calls the <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String)" /> method with this value and the input string.</summary>
      <returns>Returns an array of formatted identifier parts.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifier">A partially or fully formatted identifier.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectIdentifierConverter.UnformatPart(System.String,System.String)">
      <summary>Calls the <see cref="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)" /> method.</summary>
      <returns>Returns the unformatted equivalent of the formatted identifier part.</returns>
      <param name="typeName">The name of a data object type.</param>
      <param name="identifierPart">A formatted identifier part.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectItemComparer">
      <summary>Provides an implementation of the <see cref="T:Microsoft.VisualStudio.Data.DataObjectItemComparer" /> class that uses ADO.NET data source information to determine how to compare identifier parts.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectItemComparer.#ctor(Microsoft.VisualStudio.Data.DataConnection)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectItemComparer" /> class with a connection to the data source.</summary>
      <param name="connection">Connection to the data source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetObjectItemComparer.Compare(System.String,System.Object[],System.Int32,System.Object)">
      <summary>Compares one object identifier part with another specified object identifier part.</summary>
      <returns>Returns less than zero in cases where the identifier part is less than the specified value. Returns zero if the identifier part is equal to the specified value. Returns greater than zero if the identifier part is greater than the specified value.</returns>
      <param name="typeName">The name of an object type.</param>
      <param name="identifier">The identifier of an object of the type specified by <paramref name="typeName" /> parameter.</param>
      <param name="identifierPart">The zero based index into the identifier array indicating which part of the identifier to compare.</param>
      <param name="value">A value to compare the identifier part against.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> and/or <paramref name="identifier" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="identifier" /> parameter is less than zero or greater than or equal to the number of elements in the identifier array.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter">
      <summary>Represents a data parameter that is derived from a data source command, or that is passed with a command to a data source whose underlying technology is ADO.NET.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.#ctor(System.String)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter" /> class, along with the name of the ADO.NET data provider being serviced by the connection.</summary>
      <param name="providerName">Name of the ADO.NET data provider being serviced by the connection</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.#ctor(System.String,System.Data.IDataParameter)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter" /> class, providing a parameter for a Command object and the name of the DDEX provider.</summary>
      <param name="providerName">Name of the DDEX provider.</param>
      <param name="parameter">The <see cref="T:System.Data.IDataParameter" /> object representing the command parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.#ctor(System.String,System.Data.IDataParameter,System.Boolean)">
      <summary>Class constructor. Initializes a parameterized instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter" /> class, providing a parameter for a Command object, the name of the DDEX provider, and an indication whether the parameter is derived using the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method.</summary>
      <param name="providerName">Name of the DDEX provider.</param>
      <param name="parameter">The <see cref="T:System.Data.IDataParameter" /> object representing the command parameter.</param>
      <param name="isDerived">Indicates whether this data parameter instance was created as a return value of the <see cref="M:Microsoft.VisualStudio.Data.DataCommand.DeriveParameters(System.String,System.Int32,System.Int32)" /> method</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetDirectionImpl">
      <summary>Retrieves the parameter direction.</summary>
      <returns>Returns the parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetIsNullableImpl">
      <summary>Retrieves a Boolean value indicating whether this parameter can be null.</summary>
      <returns>Returns true if this parameter can have a null value; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetNameImpl">
      <summary>Retrieves the name of the parameter.</summary>
      <returns>Returns the name of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetPrecisionImpl">
      <summary>Retrieves a byte value specifying the precision of the parameter.</summary>
      <returns>Returns the precision of the parameter as a byte value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetScaleImpl">
      <summary>Retrieves a byte value specifying the scale of the parameter.</summary>
      <returns>Returns the scale of the parameter as a byte value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetSizeImpl">
      <summary>Retrieves an integer value specifying the size of the parameter.</summary>
      <returns>Returns the size of the parameter and an integer value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetTypeFrom(System.Object)">
      <summary>Returns a <see cref="F:System.Data.DbType.AnsiString" /> for a null or DBNull value; alternatively maps the value type to a <see cref="T:System.Data.DbType" /> value and returns the string equivalent.</summary>
      <returns>Returns the data-source-specific type, or returns null if the value type is not supported.</returns>
      <param name="value">A candidate parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetTypeImpl">
      <summary>Retrieves the data-source-specific type of the parameter.</summary>
      <returns>Returns the data-source-specific type of the parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.GetValueImpl">
      <summary>Retrieves the value of a specified parameter.</summary>
      <returns>Returns the value of the specified parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.IsFixedPrecision">
      <summary>Retrieves a Boolean value indicating whether the precision for the current parameter type is fixed.</summary>
      <returns>Returns true if the type is not one of the following <see cref="T:System.Data.DbType" /> values: AnsiString, Binary, Object, String, or VarNumeric.; <see cref="F:System.Data.DbType.AnsiString" />, <see cref="F:System.Data.DbType.Binary" />, Object, String, or <see cref="F:System.Data.DbType.VarNumeric" /> otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.IsFixedScale">
      <summary>Retrieves a Boolean value indicating whether the scale for the current parameter type is fixed.</summary>
      <returns>Returns true if the type is not one of the following <see cref="T:System.Data.DbType" /> values: Currency, Date, Decimal, Double, Single, Time, or VarNumeric.; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.IsFixedSize">
      <summary>Retrieves a Boolean value indicating whether the size for the current parameter type is fixed.</summary>
      <returns>Returns true if the type is not one of the following <see cref="T:System.Data.DbType" /> values: AnsiString, Binary, Object, String, or VarNumeric.; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.IsValidType(System.String)">
      <summary>Retrieves a Boolean value indicating whether the specified data-source-specific type is a valid type.</summary>
      <returns>Returns true if the method successfully calls <see cref="M:System.Enum.Parse(System.Type,System.String)" /> on the input string; otherwise returns false.</returns>
      <param name="type">A data-source-specific data type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.Parameter">
      <summary>Retrieves the <see cref="T:System.Data.IDataParameter" /> object representing the command parameter.</summary>
      <returns>Returns an <see cref="T:System.Data.IDataParameter" /> object representing the command parameter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.Parse(System.String)">
      <summary>Gets the <see cref="T:System.Data.DbType" /> and attempts to parts the input string value into the correct type using primitive type conversions (like Byte.Parse and Int32.Parse).</summary>
      <param name="value">A string representation of a parameter value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetDirectionImpl(Microsoft.VisualStudio.Data.DataParameterDirection)">
      <summary>Sets the direction of the parameter using the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</summary>
      <param name="value">A specific data parameter direction from among those defined in the <see cref="T:Microsoft.VisualStudio.Data.DataParameterDirection" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetNameImpl(System.String)">
      <summary>Sets the name of the parameter.</summary>
      <param name="value">The string literal parameter name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetPrecisionImpl(System.Byte)">
      <summary>Sets a byte value specifying the precision of the parameter.</summary>
      <param name="value">A byte value specifying precision.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetScaleImpl(System.Byte)">
      <summary>Sets a byte value specifying the scale of the parameter.</summary>
      <param name="value">A byte value specifying scale.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetSizeImpl(System.Int32)">
      <summary>Sets an integer value specifying the size of this parameter.</summary>
      <param name="value">An integer specifying size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetTypeImpl(System.String)">
      <summary>Attempts to parse the string type into a <see cref="T:System.Data.DbType" /> enumeration value using Enum.Parse and if this fails it assumes DbType.Object as the correct <see cref="T:System.Data.DbType" />.</summary>
      <param name="value">A parameter data type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetParameter.SetValueImpl(System.Object)">
      <summary>Sets the value of this parameter.</summary>
      <param name="value">An object value to which the parameter is set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetProviderObjectFactory">
      <summary>Provides an implementation of the DataProviderObjectFactory class for DDEX Providers whose underlying technology is ADO.NET.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetProviderObjectFactory.#ctor">
      <summary>Class constructor. Instantiates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetProviderObjectFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetProviderObjectFactory.CreateObject(System.Type)">
      <summary>Supports creation of the <see cref="T:Microsoft.VisualStudio.Data.DataConnectionProperties" /> and <see cref="T:Microsoft.VisualStudio.Data.DataConnectionSupport" /> types.</summary>
      <returns>Returns an object of type specified by the <paramref name="objectType" /> parameter, or null if the object type is not supported.</returns>
      <param name="objType">Data type of object to create.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader">
      <summary>Provides a means for obtaining the schema of the <see cref="T:System.Data.IDataReader" /> object encapsulating the result set.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.#ctor(System.Data.IDataReader)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> class with an <see cref="T:System.Data.IDataReader" />.</summary>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> object containing the data result set, plus schema.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.#ctor(System.Data.IDataReader,System.Data.IDbCommand)">
      <summary>Class constructor. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> class with <see cref="T:System.Data.IDataReader" /> and <see cref="T:System.Data.IDbCommand" /> objects.</summary>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> object containing the data result set, plus schema.</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> object encapsulating the command executed against the data source, which allows the implementation of the <see cref="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Terminate" /> method to call <see cref="M:Microsoft.VisualStudio.Data.DataAsyncCommand.Cancel" /> on the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Close">
      <summary>Closes the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes into the buffer as an array, starting at a specified offset</summary>
      <returns>Returns a byte stream array.</returns>
      <param name="index">Index into the data field from which to begin the read operation.</param>
      <param name="buffer">The byte array to be read.</param>
      <param name="bufferIndex">Index into the buffer at which to start placing the data.</param>
      <param name="length">Length of the byte stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItem(System.Int32)">
      <summary>Retrieves a data item at a specified index.</summary>
      <returns>Returns an integer specifying the index at which to retrieve the data item.</returns>
      <param name="index">Index into the field specifying the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItem(System.String)">
      <summary>Retrieves a data item with a specified name.</summary>
      <returns>Returns the string literal name by which to retrieve the data item.</returns>
      <param name="name">Name of the data item to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItemMaxLength(System.Int32)">
      <summary>Retrieves an integer value specifying the maximum length of the data item at the specified index.</summary>
      <returns>Returns an integer value specifying the maximum length of the data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the max length value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItemName(System.Int32)">
      <summary>Retrieves the string literal name of the data item at the specified index.</summary>
      <returns>Returns the name of the data item at the specified index.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the item name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.GetItemType(System.Int32,Microsoft.VisualStudio.Data.DataItemTypeFormat)">
      <summary>Retrieves the data type for a data item at a specified index and with a specified item type format.</summary>
      <returns>Returns the data type for the specified data item.</returns>
      <param name="index">Index into the field specifying the data item for which to retrieve the item type format.</param>
      <param name="itemTypeFormat">The <see cref="T:Microsoft.VisualStudio.Data.DataItemTypeFormat" /> object instance specifying the data type format for the data item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.InnerDataReader">
      <summary>Provides a means for accessing the underlying <see cref="T:System.Data.IDataReader" /> object directly.</summary>
      <returns>Returns the base <see cref="T:System.Data.IDataReader" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.IsClosed">
      <summary>Retrieves a Boolean value indicating whether or not the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> is closed.</summary>
      <returns>Returns true if the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> object is closed; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.IsNullItem(System.Int32)">
      <summary>Retrieves a Boolean value indicating whether the data item at the specified index is null.</summary>
      <returns>Returns true if the data item is null; otherwise returns false.</returns>
      <param name="index">Index into the field specifying the data item for which to test for null.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.ItemCount">
      <summary>Retrieves an integer value specifying the number of data items contained in the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> instance.</summary>
      <returns>Returns an integer specifying data items in the current <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.NextResult">
      <summary>Tests whether there is another result set and if true advances the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" />.</summary>
      <returns>Returns true if another result exists; otherwise returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Read">
      <summary>Tests whether there is another data record and if true advances the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" /> to the next record.</summary>
      <returns>Returns true if there is another record (row) to read; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.SchemaTable">
      <summary>Retrieves the DataTable object that represents the schema of the <see cref="T:System.Data.IDataReader" /> passed into the constructor of the <see cref="T:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader" />.</summary>
      <returns>Returns a DataTable object instance representing the schema table.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Status">
      <summary>Retrieves a numerical status code returned by the method currently providing data to the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object.</summary>
      <returns>Returns an integer value specifying a status code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.AdoDotNet.AdoDotNetSchemaReader.Terminate">
      <summary>Terminates the <see cref="T:Microsoft.VisualStudio.Data.DataReader" /> object immediately, without necessarily returning all of the data nor setting output parameters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE">
      <summary>For documentation of this enumeration's behavior, see DSREFTYPE Enumeration</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_NULL">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_COLLECTION">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_MULTIPLE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_MIXED">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_DATASOURCEROOT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_FIELD">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_TABLE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_QUERY">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_DATABASE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_TRIGGER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_STOREDPROCEDURE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_EXTENDED">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_SCHEMADIAGRAM">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_VIEW">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_SYNONYM">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_FUNCTION">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_PACKAGE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_PACKAGEBODY">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_RELATIONSHIP">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_INDEX">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_USERDEFINEDTYPE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_VIEWTRIGGER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_VIEWINDEX">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASFIRSTCHILD">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASNEXTSIBLING">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASNAME">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASMONIKER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASOWNER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_HASPROP">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Interop.__DSREFTYPE.DSREFTYPE_NODE">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer">
      <summary>Reads DSRef trees.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetExtendedType(System.IntPtr)">
      <summary>Retrieves the GUID for the extended type of a specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose extended type is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetFirstChildNode(System.IntPtr)">
      <summary>Retrieves the identifier of the first child node in the parent's vector of children for a specified parent node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the parent node for which the first child node is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetMoniker(System.IntPtr)">
      <summary>Retrieves the moniker of the specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose moniker is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetName(System.IntPtr)">
      <summary>Retrieves the name of the database object to which the database refers.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose database object name is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetNextSiblingNode(System.IntPtr)">
      <summary>Retrieves the identifier of the next sibling node of a specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the child node of which the sibling node is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetOwner(System.IntPtr)">
      <summary>Retrieves the schema of the database object to which the database refers.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose owner schema is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetProperty(System.IntPtr,System.Guid@)">
      <summary>Retrieves the GUID and Variant property associated with the specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose property is to be retrieved.</param>
      <param name="guidProp">[in] REFGUID of the property to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetTimestamp">
      <summary>Returns the time that the DSRef is persisted.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetType(System.IntPtr)">
      <summary>Retrieves the type of a specified node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose type is to be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefConsumer.GetVersion">
      <summary>Returns the version of the DSRef tree.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Interop.IDSRefProvider">
      <summary>Builds DSRef trees.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.Clear">
      <summary>Resets a specified tree to an empty state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.CreateFirstChildNode(System.IntPtr)">
      <summary>Adds an initial child node to a parent node. </summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code.</returns>
      <param name="drnidCurr">[in] DSREFNODEID of the parent node for which the first child node is to be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.CreateNextSiblingNode(System.IntPtr)">
      <summary>Creates another sibling node to a child node.</summary>
      <returns>Returns NOERROR if successful. Otherwise, it returns an unspecified failure code. </returns>
      <param name="drnidCurr">[in] DSREFNODEID of the child node to which the sibling node is to be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetExtendedType(System.IntPtr,System.Guid@)">
      <summary>Sets the extended type for a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose extended property is to be set.</param>
      <param name="pguidType">[in] Reference to the GUID of the extended type to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetMoniker(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IMoniker)">
      <summary>Sets the moniker of a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose moniker is to be set.</param>
      <param name="pIMoniker">[in] Reference to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IMoniker" /> interface that contains the moniker to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetName(System.IntPtr,System.String)">
      <summary>Sets the name of a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose name is to be set.</param>
      <param name="bstrName">[in] BSTR that contains the name to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetOwner(System.IntPtr,System.String)">
      <summary>Sets the schema name for a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose owner name is to be set.</param>
      <param name="bstrOwnerName">[in] BSTR that contains the owner name to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetProperty(System.IntPtr,System.Guid@,System.Object)">
      <summary>Sets the GUID and value of the catalog or database property for a specified node.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose property is to be set.</param>
      <param name="guidProp">[in] REFGUID of the property to be set for the specified node.</param>
      <param name="varPropValue">[in] VARIANT value of the property to be set for the specified node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Interop.IDSRefProvider.SetType(System.IntPtr,Microsoft.VisualStudio.Data.Interop.__DSREFTYPE)">
      <summary>Sets the type of a node to specify the type of database object that the node references.</summary>
      <param name="drnidCurr">[in] DSREFNODEID of the node whose type is to be set.</param>
      <param name="grfType">[in] DSREFTYPE enumeration that contains the value of the type to be set for the specified node.</param>
    </member>
  </members>
</doc>