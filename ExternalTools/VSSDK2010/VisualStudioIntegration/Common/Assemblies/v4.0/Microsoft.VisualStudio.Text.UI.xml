<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.UI</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ErrorTypeDefinition">
            <summary>
            Defines error types.
            </summary>
            <remarks> This is a MEF component part, and should be exported as:
            [Export(typeof(ErrorTypeDefinition))]
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory">
            <summary>
            Gets a error tagger (a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/> of type <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag"/>) for the given buffer, 
            or creates a new one if there is no error tagger already cached in the owned properties of the buffer.
            </summary>
            <remarks>This is a MEF somponent part, and should be exported with the following attribute:
            [Export(typeof(IErrorProviderFactory))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory.GetErrorTagger(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the cached error tagger for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            If one does not exist, creates and caches a new <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/> 
            with the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with which to get the error tagger.</param>
            <returns>The cached error tagger for the <paramref name="textBuffer"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory">
            <summary>
            Gets a text marker tagger (a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/> of type <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag"/> for a given buffer, or creates a new one if 
            no text marker tagger is already cached in the owned properties of the buffer.
            </summary>
            <remarks>This is a MEF Component, and should be exported with the following attribute:
            [Export(typeof(ITextMarkerProviderFactory))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory.GetTextMarkerTagger(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the cached text marker tagger for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. 
            If one does not exist, creates and caches a new <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/>
            with the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with which to get the text marker tagger.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/> for <paramref name="textBuffer"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider">
            <summary>
            Creates and displays tooltips, using an arbitrary object as content.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider.ShowToolTip(Microsoft.VisualStudio.Text.ITrackingSpan,System.Object)">
            <summary>
            Creates and displays a tooltip. 
            </summary>
            <param name="span">
            The range of text for which the tooltip is relevant.
            </param>
            <param name="toolTipContent">
            The content to be displayed in the tooltip. This must be a string or UIElement for the WPF tooltip adornment surface. 
            </param>
            <remarks>This is equivalent to ShowToolTip(..., PopupStyles.None).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider.ShowToolTip(Microsoft.VisualStudio.Text.ITrackingSpan,System.Object,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Creates and displays a tooltip. 
            </summary>
            <param name="span">
            The range of text for which the tooltip is relevant.
            </param>
            <param name="toolTipContent">
            The content to be displayed in the tooltip. This must be a string or UIElement for the WPF tooltip adornment surface.
            </param>
            <param name="style">
            <see cref="T:Microsoft.VisualStudio.Text.Adornments.PopupStyles"/> for the tooltip.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider.ClearToolTip">
            <summary>
            Removes the tooltip currently being displayed, if any.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProviderFactory">
            <summary>
            Gets an existing tooltip adornment provider from the cached list, or creates one if there is not one
            in the cache.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IToolTipProviderFactory))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProviderFactory.GetToolTipProvider(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider"/> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
            If one does not exist, creates and caches a new <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider"/> with the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider"/>.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider"/> for <paramref name="textView"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.PopupStyles">
            <summary>
            Represents the styles associated with pop-up windows.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.None">
            <summary>
            Sets the default behavior: the pop-up window has no border, is not resizable, is not dismissed when the mouse moves,
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveText">
            <summary>
            Dismiss the pop-up window if the mouse leaves the associated text span.  
            This setting is mutually exclusive with <see cref="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveTextOrContent"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveTextOrContent">
            <summary>
            Dismiss the pop-up window if the mouse leaves the associated text span or the pop-up content.  
            This setting is mutually exclusive with <see cref="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveText"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PositionLeftOrRight">
            <summary>
            Try to position the pop-up window to the left or right of the visual span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PreferLeftOrTopPosition">
            <summary>
             Try to position the pop-up window to the left or above the visual span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.RightOrBottomJustify">
            <summary>
             Align the right or bottom edges of the pop-up window with those of the visual span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PositionClosest">
            <summary>
            Use the positioning preference specified, but if the opposite positioning can get the popup
            closer to the visual span, use the opposition positioning.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames">
            <summary>
            Enumerates the predefined error types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.SyntaxError">
            <summary>
            Represents syntax errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.CompilerError">
            <summary>
            Represents compiler errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.OtherError">
            <summary>
            Represents other errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.Warning">
            <summary>
            Represents compiler warnings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService">
            <summary>
            A service that returns an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/> that aggregates and normalizes all <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>
            contributions for all <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>s in the buffer graph of a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            <para>The normalized classifications produced by this aggregator are sorted and do not overlap. If a span of text
            had multiple classifications based on the original classifier contributions, then in the normalized
            classification it has a transient classification (<see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService"/>) that corresponds to
            all of the original classifications.</para>
            <para>Classifier aggregators are cached for each <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> and <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> combination.</para>
            </remarks>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IViewClassifierAggregatorService aggregator = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService.GetClassifier(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            If one does not exist, an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/> will be created and cached for each <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> in the
            view's buffer graph.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> to use in retrieving or creating the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textView"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions">
            <summary>
            Provides methods for <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>-related options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsVirtualSpaceEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether virtual space is enabled for the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if virtual space is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsOverwriteModeEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether overwrite mode is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if overwrite mode is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsAutoScrollEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether auto-scroll is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if auto-scroll is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.WordWrapStyle(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the set of word wrap styles with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyles"/> of the set of editor options.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsVisibleWhitespaceEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether visible whitespace is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if visible whitespace is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.DoesViewProhibitUserInput(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the view prohibits all user input.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns>if <c>true</c> then all user input to the view is prohibited.</returns>
            <remarks>The view's underlying buffer can still be modified even if this option is set.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsOutliningUndoEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option for outlining undo enabled in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns><c>true</c> if the option is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsDragDropEditingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option for drag/drop editing is enabled in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> used to look up the option value.</param>
            <returns><c>true</c> if the drag/drop editing option is enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsViewportLeftClipped(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the view's ViewportLeft property is clipped to the text width.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if ViewportLeft is clipped, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions">
            <summary>
            Provides methods for <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> host related options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsVerticalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the vertical scrollbar is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the vertical scrollbar is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsHorizontalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the horizontal scrollbar is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the horizontal scrollbar is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsGlyphMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
             Determines whether the glyph margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the glyph margin is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsSelectionMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the selection margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the selection margin is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsLineNumberMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the line number margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the line number margin is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsChangeTrackingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether change tracking is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if change tracking is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsOutliningMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
             Determines whether the Outlining margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the Outlining margin is enabled, otherwise <c>false</c>.</returns>
            <remarks>Disabling the margin does NOT turn off Outlining (it just hides the margin</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsZoomControlEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the zoom control is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the zoom control is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions">
            <summary>
            Defines common <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.CutOrCopyBlankLineIfNoSelectionId">
            <summary>
            Determines whether cut and copy causes a blank line to be cut or copied when the selection is empty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ViewProhibitUserInputId">
            <summary>
            Determines whether to prohibit user input. The text in the view's
            buffer can still be modified, and other views on the same buffer may allow user input.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.WordWrapStyleId">
            <summary>
            Gets the word wrap style for the underlying view.
            </summary>
            <remarks>Turning word wrap on will always hide the host's horizontal scroll bar. Turning word wrap off
            will always expose the host's horizontal scroll bar.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVirtualSpaceId">
            <summary>
            Determines whether to enable virtual space in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.IsViewportLeftClippedId">
            <summary>
            Determines whether the view's ViewportLeft property is clipped to the text width.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OverwriteModeId">
            <summary>
            Determines whether overwrite mode is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.AutoScrollId">
            <summary>
            Determines whether the view should auto-scroll on text changes.
            </summary>
            <remarks>
            If this option is enabled, whenever a text change occurs and the caret is on the last line,
            the view will be scrolled to make the caret visible.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVisibleWhitespaceId">
            <summary>
            Determines whether to show spaces and tabs as visible glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ProduceScreenReaderFriendlyTextId">
            <summary>
            Whether or not to replace the coding characters and special symbols (such as (,),{,},etc.) with their textual representation
            for automated objects to produce friendly text for screen readers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OutliningUndoOptionId">
            <summary>
            The default option that determines whether outlining is undoable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DisplayUrlsAsHyperlinksId">
            <summary>
            Determines whether URLs should be displayed as hyperlinks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DragDropEditingId">
            <summary>
            The default option that determines whether drag/drop editing is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions">
            <summary>
            Names of common <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> host-related options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.VerticalScrollBarId">
            <summary>
            Determines whether to have a vertical scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.HorizontalScrollBarId">
            <summary>
            Determines whether to have a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.GlyphMarginId">
            <summary>
            Determines whether to have a glyph margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SelectionMarginId">
            <summary>
            Determines whether to have a selection margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.LineNumberMarginId">
            <summary>
            Determines whether to have a line number margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ChangeTrackingId">
            <summary>
            Determines whether to have the change tracking margin.
            </summary>
            <remarks>The change tracking margins will "reset" (lose the change history) when this option is turned off.
            If it is turned back on, it will track changes from the time the margin is turned on.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.OutliningMarginId">
            <summary>
            Determines whether to have an outlining margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ZoomControlId">
            <summary>
            Determines whether to have a zoom control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDropEditing">
            <summary>
            Defines the view option for drag/drop editing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1">
            <summary>
            Defines a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>-specific editor option.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with:
            [Export(typeof(EditorOptionDefinition))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Determines whether the option is applicable to the specified scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDropEditing.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDropEditing.Key">
            <summary>
            Gets the default key for the drag/drop editing option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OverwriteMode">
            <summary>
            Defines the view option for overwrite mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OverwriteMode.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OverwriteMode.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace">
            <summary>
            Defines the Use Virtual Space option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace.Key">
            <summary>
            Gets the default text view value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped">
            <summary>
            Defines the Use Virtual Space option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped.Key">
            <summary>
            Gets the default text view value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput">
            <summary>
            Defines the Prohibit User Input option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput.Key">
            <summary>
            GGets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection">
            <summary>
            Defines the option to cut or copy a blank line if the selection is empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyle">
            <summary>
            Defines the word wrap style option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.WordWrapStyle.Default">
            <summary>
            Gets the default value, which is <c>WordWrapStyles.None</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.WordWrapStyle.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace">
            <summary>
            Defines the Use Visible Whitespace option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText">
            <summary>
            Defines the option to enable providing annotated text in automation controls so that screen readers can properly
            read contents of code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled">
            <summary>
            Defines the option to enable the vertical scroll bar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled">
            <summary>
            Defines the option to enable the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled">
            <summary>
            Defines the option to enable the glyph margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled">
            <summary>
            Defines the option to enable the selection margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled">
            <summary>
            Defines the option to enable the line number margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled">
            <summary>
            Defines the option to enable auto-scroll.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled">
            <summary>
            Defines the option to enable the change-tracking margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled">
            <summary>
            Defines the option to enable the Outlining margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled">
            <summary>
            The option definition that determines whether outlining is undoable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled.Default">
            <summary>
            Gets the default value (<c>true</c>)>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled">
            <summary>
            Defines the option to enable the Zoom Control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks">
            <summary>
            The option definition that determines if URLs should be displayed as hyperlinks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks.Default">
            <summary>
            Gets the default value (<c>true</c>)>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CaretPosition">
            <summary>
            Represents the position of a caret in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.IMappingPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
            <param name="bufferPosition">The index of the caret. This corresponds to a gap between two characters in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <param name="mappingPoint">A mapping point for the caret that can be used to find its position in any buffer.</param>
            <param name="caretAffinity">The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the caret. The caret can have an affinity with 
            the preceding edge of the gap or the following edge of the gap.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.ToString">
            <summary>
            Provides a string representation of the caret position.
            </summary>
            <returns>The string representation of the caret position.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.GetHashCode">
            <summary>
            Gets the hash code for the <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> objects are the same
            </summary>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.op_Equality(Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> objects are the same.
            </summary>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false.</c></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.op_Inequality(Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> objects are different.
            </summary>
            <returns><c>true</c> if the two objects are different, otherwise <c>false.</c></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.BufferPosition">
            <summary>
            Gets the position of the caret, corresponding to a gap between two characters in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> of the view.
            </summary>
            <remarks>
            This property gets the buffer position at the end of a line if the caret is positioned in virtual space.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.Point">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/>. This marks the position of the caret in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.Affinity">
            <summary>
            Gets the affinity of the caret. 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/> indicates that the caret is bound to the preceding edge of the gap. 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/> indicates that the caret is bound to the following edge of the gap.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.VirtualBufferPosition">
            <summary>
            Gets the virtual buffer position as a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.VirtualSpaces">
            <summary>
            Gets the number of spaces past the physical end of the line of the caret position.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextCaret.PositionChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs"/>.
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that contains the caret.
            </param>
            <param name="oldPosition">
            The old <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </param>
            <param name="newPosition">
            The new <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that contains the caret.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.OldPosition">
            <summary>
            Gets the old <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.NewPosition">
            <summary>
            Gets the new <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IScrollMap">
            <summary>
            <para>Defines the mapping between character positions and scrollmap coordinates. This is not
            the same as the coordinate system in which the scrollbar is rendered.</para>
            </summary>
            <remarks>
            <para>Valid text positions range are [0...TextView.TextSnapshot.Length].</para>
            <para>Corresponding scrollmap coordinates are [0.0 ... CoordinateOfBufferEnd].</para>
            <para>Not every buffer position will have a distinct scrollmap coordinate. For example, every character on the same line of text will,
            generally, have the same scrollmap coordinate.</para>
            <para>Different scrollmap coordinates may map to the same buffer position. For example, scrollmap coordinates in the range [0.0, 1.0) will, generally,
            map to the first character of the buffer.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap">
            <summary>
            <para>Maps between character positions and fractions of the total vertical extent of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</para>
            </summary>
            <remarks>
            <para>Valid text positions range are [0...TextView.TextSnapshot.Length].
            Valid scrollbar coordinates are [0.0 ... 1.0].
            0.0 corresponds to the top of the first line in the text view; 1.0 corresponds to the bottom of the last line in the view.
            Not every text position will have a unique value. For example, every character on
            the same text buffer line will have the same value, assuming that word wrap is not enabled.</para>
            <para>This interface is the base type of the <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/> interface, 
            which is created using the <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.GetFractionAtBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the fraction of the vertical extent of the view that corresponds to the specified buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The corresponding fraction of the vertical extent of the view.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.GetBufferPositionAtFraction(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a fraction of the vertical extent of the view,
            if it exists.
            </summary>
            <param name="fraction">The fraction of the vertical extent of the view.</param>
            <returns>The corresponding character position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fraction"/> is NaN, less than 0.0 or greater than 1.0.</exception>
            <remarks>Different buffer positions can have the same fractions. This method is guaranteed only to be consistent: it will
            return the same position for the same fraction. The exact character returned depends on the implementation of the fraction map.
            It will, generally, be the first character on the line, but this is not guaranteed.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.TextView">
            <summary>
            Gets the text view to which this fraction map applies.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.MappingChanged">
            <summary>
            Occurs when the mapping between character position and its vertical fraction has changed.
            For example, the view may have re-rendered some lines, changing their font size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMap.GetCoordinateAtBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the scrollmap coordinates of a buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The scrollmap coordinate, which will be between 0.0 and CoordinateOfBufferEnd inclusive.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMap.GetBufferPositionAtCoordinate(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a scrollmap coordinate.
            </summary>
            <param name="coordinate">The scrollmap coordinate.</param>
            <returns>The corresponding buffer position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="coordinate"/> is NaN.</exception>
            <remarks>Different buffer positions can have the same scroll map coordinates. This method is guaranteed only to be consistent: it will
            return the same position for the same coordinate. The exact character returned will depend on the implementation of the scroll map.
            It will generally be the first character on the line.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.AreElisionsExpanded">
            <summary>
            Does the coordinate system used by this scroll map act as if all elisions are expanded?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.Start">
            <summary>
            The scrollmap coordinate of the start of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.End">
            <summary>
            The scrollmap coordinate of the end of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.ThumbSize">
            <summary>
            Gets the size of the text visible in the view (in scrollmap coordinates).
            </summary>
            <remarks>
            This is equivalent to the scrollbar thumb size. The total height of the scroll map, in scrollmap coordinates, 
            is CoordinateOfBufferEnd + ThumbSize.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService">
            <summary>
            Creates or reuses an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IScrollMapFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates or reuses an existing scroll map for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView"><see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which to get an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/>.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/> for <paramref name="textView"/>.</returns>
            <remarks>The coordinate system returned by this scroll map will act as if elisions are not expanded.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView,System.Boolean)">
            <summary>
            Creates or reuses an existing scroll map for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView"><see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which to get an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/>.</param>
            <param name="areElisionsExpanded">Does the coordinate system used by this scroll map act as if all elisions are expanded?</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap"/> for <paramref name="textView"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent">
            <summary>
            Provides for computing the desired indentation for a line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndent.GetDesiredIndentation(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Gets the desired indentation of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <param name="line">The line for which to compute the indentation.</param>
            <returns>The number of spaces to place at the start of the line, or null if there is no desired indentation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent"/> object for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            Component exporters must supply at least one content type attribute to specify the applicable content types.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attributes:
            [Export(NameSource=typeof(ISmartIndentProvider))]
            [ContentType("some content type")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider.CreateSmartIndent(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent"/> object for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> on which the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent"/> will navigate.
            </param>
            <returns>
            A valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent"/>. This value will never be <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textView"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentationService">
            <summary>
            Provides a Visual Studio service that determines automatic indentation when the enter key is pressed or
            when navigating to an empty line.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ISmartIndentationService selector = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndentationService.GetDesiredIndentation(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Gets the desired indentation of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> as displayed in <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The text view in which the line is displayed.</param>
            <param name="line">The line for which to compute the indentation.</param>
            <returns>The number of spaces to place at the start of the line, or null if there is no desired indentation.</returns>
            <remarks>
            This service consumes <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider"/>s to determine how to perform the indentation.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextCaret">
            <summary>
            <para>Represents the caret associated with an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</para>
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.EnsureVisible">
            <summary>
            Makes the caret visible by scrolling the view up or down and left or right until the caret is visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double)">
            <summary>
            Moves the caret to the best <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> for the specified x-coordinate and text line.
            </summary>
            <param name="textLine">
            The text line that will contain the caret.
            </param>
            <param name="xCoordinate">
            The x-coordinate of the caret in the text rendering coordinate system.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret after the move has occurred.
            </returns>
            <remarks>This is equivalent to calling MoveTo(textLine, xCoordinate, true).</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="xCoordinate"/> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,System.Boolean)">
            <summary>
            Moves the caret to the best <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>  for the given x-coordinate and text line.
            </summary>
            <param name="textLine">
            The text line that will contain the caret.
            </param>
            <param name="xCoordinate">
            The x-coordinate of the caret in the text rendering coordinate system.
            </param>
            <param name="captureHorizontalPosition"><c>true</c> if the caret should capture its horizontal position for subsequent moves up or down.
            <c>false</c> if the caret should retain its previously-captured horizontal position.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret after the move has occurred.
            </returns>
            <remarks>This method takes care of UTF-16 surrogate pairs and combining character sequences.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="xCoordinate"/> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
            <summary>
            Moves the caret to the specified <paramref name="textLine"/> while preserving its current x-coordinate.
            </summary>
            <param name="textLine">The text line that will contain the caret.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret after the move has occurred.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, PositionAffinity.Successor, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless 
            <paramref name="bufferPosition"/> specifies a location that is at the seam between two word-wrapped lines.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, caretAffinity, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity,System.Boolean)">
            <summary>
            Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless 
            <paramref name="bufferPosition"/> specifies a location that is at the seam between two word-wrapped lines.</param>
            <param name="captureHorizontalPosition"><c>true</c> if the caret should capture its horizontal position for subsequent moves up or down,
            <c>false</c> if the caret should retain its previously-captured horizontal position.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.  
            For example, if the text buffer consists of a high surrogate character at index 0 and a low surrogate character at index 1, 
            and <paramref name="bufferPosition"/> is 1 and 
            <paramref name="caretAffinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, 
            the actual valid caret index is 0 (since the high surrogate and low surrogate characters form one text element). 
            If <paramref name="caretAffinity"/> is<see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the actual valid caret index is 2.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Moves the caret to the specified <paramref name="bufferPosition"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, PositionAffinity.Successor, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Moves the caret to the specified <paramref name="bufferPosition"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless <paramref name="bufferPosition"/> 
            specifies a location that is at the seam between two word-wrapped lines.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, caretAffinity, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity,System.Boolean)">
            <summary>
            Moves the caret to the specified <paramref name="bufferPosition"/>.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless <paramref name="bufferPosition"/> 
            specifies a location that is at the seam between two word-wrapped lines.</param>
            <param name="captureHorizontalPosition">If <c>true</c>, the caret will capture its horizontal position for subsequent moves up or down.
            If <c>false</c>, the caret retains its previously-captured horizontal position.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.  
            For example, if the text buffer consists of a high surrogate character at index 0 and a low surrogate character at index 1, 
            and <paramref name="bufferPosition"/> is 1 and <paramref name="caretAffinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, 
            the actual valid caret index is 0 (since the high surrogate and low surrogate characters form one text element). 
            If <paramref name="caretAffinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the actual valid caret index is 2.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToPreferredCoordinates">
            <summary>
            Moves the caret to the preferred x and y-coordinates.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>You cannot change the preferred coordinates by calling this method.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToNextCaretPosition">
            <summary>
            Moves the caret to the next valid <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> containing the valid values of the caret after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToPreviousCaretPosition">
            <summary>
            Moves the caret to the previous valid <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition"/> containing the valid values of the caret after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.ContainingTextViewLine">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the caret, provided that that text line is visible
            in the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Left">
            <summary>
            Gets the position of the left edge of the caret in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Width">
            <summary>
            Gets the width of the caret in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Right">
            <summary>
            Gets the position of the right edge of the caret in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Top">
            <summary>
            Gets the position of the top edge of the caret in the text rendering coordinate system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Height">
            <summary>
            Gets the height of the caret in the text rendering coordinate system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Bottom">
            <summary>
            Gets the position of the bottom edge of the caret in the text rendering coordinate system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Position">
            <summary>
            Gets the current position of the caret.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.OverwriteMode">
            <summary>
            Determines whether the caret is in overwrite mode.
            </summary>
            <remarks>
            <para>When the caret is in overwrite mode, typed characters replace the character under the caret, 
            and a block is drawn instead of a vertical line.</para>
            <para>This is distinct from the IEditorOptions overwrite mode, 
            since the caret can switch modes based on its position in the view. 
            The caret is not in OverwriteMode when it is positioned at the end of the line in a view, or when there is a
            non-empty selection, even if IEditorOptions.OverwriteMode is true.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.InVirtualSpace">
            <summary>
            Determines whether the caret lies in virtual space. A virtual space is one that is after the physical end of a line.
            </summary>
            <remarks>
            <para>This is distinct from the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> UseVirtualSpace, 
            since virtual space can be enabled even if the caret does not lie in virtual space.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.IsHidden">
            <summary>
            Gets or sets the visibility of the caret.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextCaret.PositionChanged">
            <summary>
            Occurs when the position of the caret has been explicitly changed.
            </summary>
            <remarks>
            The event is not raised if the caret position was changed as a consequence of tracking normal text edits.
            The normal behavior of the caret is to move after the typed character.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextSelection">
            <summary>
            Represents the selected text in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Select(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Selects the text in the specified <paramref name="selectionSpan"/>.
            </summary>
            <param name="selectionSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> of text to select in the 
            underlying text buffer.</param>
            <param name="isReversed"><c>true</c> if the selection was made in a reverse direction, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Select(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Select from the anchor point to the active point.
            </summary>
            <param name="anchorPoint">The anchor point</param>
            <param name="activePoint">The active point</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.GetSelectionOnTextViewLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
            <summary>
            Get the selection on a particular <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
            <param name="line">Line for which to get the selection.</param>
            <returns>The selection on <paramref name="line"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Clear">
            <summary>
            Clears the selection.
            </summary>
            <remarks>
            After calling this method, <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsEmpty"/> will be <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.TextView">
            <summary>
            Gets the text view to which this selection belongs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.SelectedSpans">
            <summary>
            The currently-selected spans.
            </summary>
            <remarks>
            <para>This span collection will never be empty.  However, the spans in
            this collection may be 0-length.</para>
            <para>This value can be very expensive to compute the first time after the selection has changed.</para>
            <para>Use GetSelectionOnTextViewLine() unless you need the entire selection.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.VirtualSelectedSpans">
            <summary>
            The currently-selected spans, as <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan"/> objects.
            </summary>
            <remarks>
            <para>This span collection will never be empty.  However, the spans in
            this collection may be 0-length.</para>
            <para>This value can be very expensive to compute the first time after the selection has changed.</para>
            <para>Use GetSelectionOnTextViewLine() unless you need the entire selection.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.StreamSelectionSpan">
            <summary>
            Get the current selection as if it were a stream selection, regardless
            of the current selection mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.Mode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsReversed">
            <summary>
            Is <c>true</c> if the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivePoint"/> comes before the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.AnchorPoint"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsEmpty">
            <summary>
            Determines whether the selection is empty.
            </summary>
            <remarks>The selection is empty if the active and anchor points are
            the same point.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive">
            <summary>
            Whether or not the selection is active.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus"/> is <c>true</c>, this property is automatically
            updated when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> gains and loses aggregate focus.  You can still
            override it while <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus"/> is <c>false</c>, but the value will change
            whenever focus changes.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus">
            <summary>
            Determines whether <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive"/> should track when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> gains and
            loses aggregate focus.  The default is <c>true</c>.
            </summary>
            <remarks>
            <para>
            While the value of this property is <c>true</c>, the value of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive"/> will track
            <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.HasAggregateFocus"/>.  When the value of this property changes to <c>true</c>,
            the value of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive"/> will be immediately updated.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextSelection.SelectionChanged">
            <summary>
            Occurs when Select or Clear start to be called.  The sender of the event will be this <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextSelection"/>.
            </summary>
            <remarks>
            This event is not raised if the selection shrinks or grows as a result of its associated span expanding or shrinking.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivePoint">
            <summary>
            Gets the active point of the selection.
            </summary>
            <remarks><para>This point normally corresponds to the end of the selection that contains to the caret position.</para>
            <para>If the selection is reversed, then this point will come before the AnchorPoint.</para></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.AnchorPoint">
            <summary>
            Gets the anchor point of the selection.
            </summary>
            <remarks><para>This normally corresponds to the end of the selection that does not contain to the caret position.</para>
            <para>If the selection is reversed, then this point will come after the ActivePoint.</para></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.Start">
            <summary>
            Gets the start point of the selection.
            </summary>
            <remarks>This is either the active point or the anchor point, whichever comes first.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.End">
            <summary>
            Gets the end point of the selection.
            </summary>
            <remarks>This is either the active point or the anchor point, whichever comes last.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextView">
            <summary>
            Represents a view of text in an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. It is the base class for a platform-specific interface
            that has methods to allow the formatted text to be rendered.
            </summary>
            <remarks>
            <para>A text view is a platform-independent representation of a contiguous block of formatted and adorned text,
            accessible through the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines"/> property.
            It also instantiates an instance of an IEditorOperations component part so that
            it can execute various commands.</para>
            <para>The text is formatted based on the classifiers attached to the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
            <summary>
            Formats and displays the contents of the text buffer so that the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing <paramref name="bufferPosition"/> 
            is displayed at the desired position.
            </summary>
            <param name="bufferPosition">
            The position of the character that is to be contained in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> displayed at the specified vertical position.
            </param>
            <param name="verticalDistance">
            The distance (in pixels) between the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the edge of the view. If <paramref name="relativeTo"/> is equal to
            <c>ViewRelativePosition.Top</c>, then the distance is from the top of the view to the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>. Otherwise,
            it is the distance from the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> to the bottom on the view.
            Negative values are allowed, which might cause the line to be displayed outside the viewport.
            This method can become quite expensive if <paramref name="verticalDistance"/> is large. You 
            should avoid making <paramref name="verticalDistance"/> greater than the height of the view.
            </param>
            <param name="relativeTo">
            Specifies whether the line offset is relative to the top or bottom of the view.
            </param>
            <returns>
            The vertical distance (from the top or bottom of the view) 
            at which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing the specified position is to be displayed.
            </returns>
            <remarks>
            <para>If word wrap is disabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the entire <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that contains <paramref name="bufferPosition"/>.
            If word wrap is enabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the portion of the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that both
            contains <paramref name="bufferPosition"/> and fits into the view. <paramref name="bufferPosition"/> may not be the first
            character in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</para>
            <para>The returned value will generally be equal to <paramref name="verticalDistance"/>, except in cases where the view
            was repositioned to prevent a gap from appearing at the top or bottom of the view.</para>
            <para>Calling this method will cause the view to dispose of its current <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="bufferPosition"/> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeTo"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Formats and displays the contents of the text buffer so that the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing <paramref name="bufferPosition"/> 
            is displayed at the desired position.
            </summary>
            <param name="bufferPosition">
            The position of the character that is to be contained in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> displayed at the specified vertical position.
            </param>
            <param name="verticalDistance">
            The distance (in pixels) between the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the edge of the view. If <paramref name="relativeTo"/> is equal to
            <c>ViewRelativePosition.Top</c>, then the distance is from the top of the view to the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>. Otherwise,
            it is the distance from the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> to the bottom on the view.
            Negative values are allowed, which might cause the line to be displayed outside the viewport.
            This method can become quite expensive if <paramref name="verticalDistance"/> is large. You 
            should avoid making <paramref name="verticalDistance"/> greater than the height of the view.
            </param>
            <param name="relativeTo">
            Specifies whether the line offset is relative to the top or bottom of the view.
            </param>
            <param name="viewportWidthOverride">
            If specified, the text is formatted as if the viewport had the specified width.
            </param>
            <param name="viewportHeightOverride">
            If specified, the text is formatted as if the viewport had the specified height.
            </param>
            <returns>
            The vertical distance (from the top or bottom of the view) 
            at which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing the specified position is to be displayed.
            </returns>
            <remarks>
            <para>If word wrap is disabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the entire <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that contains <paramref name="bufferPosition"/>.
            If word wrap is enabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the portion of the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that both
            contains <paramref name="bufferPosition"/> and fits into the view. <paramref name="bufferPosition"/> may not be the first
            character in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</para>
            <para>The returned value will generally be equal to <paramref name="verticalDistance"/>, except in cases where the view
            was repositioned to prevent a gap from appearing at the top or bottom of the view.</para>
            <para>Calling this method will cause the view to dispose of its current <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines"/>.</para>
            <para>The viewport width override will have no effect unless word wrap is enabled in the view.</para>
            <para>The viewport height and width overrides only change how text is formatted for this call. Subsequent calls will use the
            width and height of the viewport (unless explicitly overriden a second time).</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="bufferPosition"/> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeTo"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> of text that constitutes a text element (a single visual representation)
            at the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/>.
            </summary>
            <param name="point">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in the text snapshot at which to get the text element.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> containing the bounds of the text element.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="point"/> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</exception>
            <remarks>A text element may be a UTF-16 surrogate pair, consisting of a high
            surrogate character and a low surrogate character. If a point in the text buffer
            lies between a high surrogate character and a low surrogate character, the text element span will 
            start at the high surrogate character and end at the low surrogate character.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.Close">
            <summary>
            Closes the text view and its view.
            </summary>
            <exception cref="T:System.InvalidOperationException">The text view host is already closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.QueueSpaceReservationStackRefresh">
            <summary>
            Requests a refresh of the space reservation stack.
            </summary>
            <remarks>
            Refreshing the space reservation stack involves asking each of the space reservation managers/agents to reposition
            themselves.  This method will be called mostly by space reservation agents that wish to reposition their content.  The
            space reservation stack is refreshed asynchronously.  Calling QueueSpaceReservationStackRefresh will perform a refresh
            of the space reservation stack, but the effects will not be visible immediately on return of the call.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the specified buffer position.
            </returns>
            <remarks>
            <para>This method returns an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> if it exists in the view.</para>
            <para>If the line does not exist in the cache of formatted lines, it will be formatted and added to the cache.</para>
            <para>The returned <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> could be invalidated by either a layout by the view or by subsequent calls to this method.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> is not a valid buffer position.</exception>
            <exception cref="T:System.InvalidOperationException"> if the view has not completed initialization.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.InLayout">
            <summary>
            Determines whether the view is in the process of being laid out.
            </summary>
            <remarks>Attempting to get the text view lines of the view while it is being laid out will throw an exception.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewScroller">
            <summary>
            Gets a helper that provides various methods to scroll or manipulate the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines">
            <summary>
            Gets a read-only list of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects rendered in this view.
            </summary>
            <remarks>
            This list will be dense. That is, all characters between the first character of the first <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> through
            the last character of the last <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> will be represented in one of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects,
            except when the layout of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects is in progress.
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects are disjoint. That is, a given character is part of only one <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </para>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects are sorted by the index of their first character.
            </para>
            <para>Some of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects may not be visible, 
            and all <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects will be disposed of when the view
            recomputes its layout.</para>
            <para>This property will be null during the view's initialization.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">View is in the process of being laid out.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Caret">
            <summary>
            Gets the caret element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Selection">
            <summary>
            Gets the selection element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ProvisionalTextHighlight">
            <summary>
            Gets the span of text covered by the provisional text highlight.
            </summary>
            <remarks>
            If there is no provisional text, this method returns null.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Roles">
            <summary>
            The roles which this view plays. Roles partially determine the extensions that are instantiated for the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> whose text is rendered in this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.BufferGraph">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> that contains the set of source buffers that contribute to this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextSnapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> of the text that is currently rendered in the view.
            </summary>
            <remarks>
            This snapshot will be identical to the CurrentSnapshot of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer"/>, except when handling a
            Changed event on that buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.VisualSnapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> of the visual buffer that is being rendered.
            </summary>
            <remarks>
            This snapshot should not be used in any method that requires a position in the text buffer, since
            those positions refer to <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextSnapshot"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewModel">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> of this text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextDataModel">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> of this text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.MaxTextRightCoordinate">
            <summary>
            Gets the right coordinate of the longest line, whether or not that line is currently visible, in logical pixels.
            </summary>
            <remarks>This value is cached and may not represent the width of the widest line
            in the underlying buffer. For example, if the widest line has never been formatted,
            then it is not in the cache.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportLeft">
            <summary>
            Gets or sets the position of the left edge of the viewport in the text rendering coordinate system.
            </summary>
            <remarks>
            When set, the horizontal offset is clipped to [0.0, Max(0.0, formatted text width - viewport width)] on non word-wrapped views,
            and [0,0] for views in which word-wrap is enabled.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportTop">
            <summary>
            Gets the position of the top edge of the viewport in the text rendering coordinate system.
            </summary>
            <remarks>
            Scrolling the text is done by changing the set of formatted lines and/or the vertical offset of those lines.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportRight">
            <summary>
            Gets the position of the right edge of the viewport in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportBottom">
            <summary>
            Gets the position of the bottom edge of the viewport in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportWidth">
            <summary>
            Gets the width of the visible content window in logical pixels.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportHeight">
            <summary>
            Gets the height of the visible content window in logical pixels.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.LineHeight">
            <summary>
            Gets the nominal height of a line of text in the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.IsClosed">
            <summary>
            Determines whether this text view has been closed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Options">
            <summary>
            Gets the options for this text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.IsMouseOverViewOrAdornments">
            <summary>
            Determines whether the mouse is over the view or any of its adornments.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.HasAggregateFocus">
            <summary>
            Determines whether the view or any of its adornments has focus.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.LayoutChanged">
            <summary>
            Occurs whenever the text displayed in the view changes.
            </summary>
            <remarks><para>This event is raised whenever the rendered text displayed in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> changes.</para>
            <para>It is raised whenever the view does a layout (which happens when DisplayTextLineContainingBufferPosition is called or in response to text or classification changes).</para>
            <para>It ia also raised whenever the view scrolls horizontally or when its size changes.</para></remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportLeftChanged">
            <summary>
            Occurs when the position of the viewport's left edge is changed. (e.g. when the view is horizontally scrolled)
            </summary>
            <remarks>Deprecated. Use LayoutChanged instead.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportHeightChanged">
            <summary>
            Occurs when the viewport's height is changed.
            </summary>
            <remarks>Deprecated. Use LayoutChanged instead.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportWidthChanged">
            <summary>
            Occurs when the viewport's width is changed.
            </summary>
            <remarks>Deprecated. Use LayoutChanged instead.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.MouseHover">
            <summary>
            Occurs when the mouse has hovered over the same character.
            </summary>
            <remarks>
            This event is raised only once, unless either the mouse moves or the text in the view changes.
            <para>The delay between the time when the mouse stops moving and the time when the event is raised 
            can be changed by adding a <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute"/> to the event handler.
            If no <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute"/> is specified on the event handler, the delay will be 150ms.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.Closed">
            <summary>
            Occurs immediately after the text view is closed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.LostAggregateFocus">
            <summary>
            Occurs when the keyboard focus switches away from the view and any of its adornments.
            </summary>
            <remarks>This event will not be raised when keyboard focus transitions from the view to one of its popups.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.GotAggregateFocus">
            <summary>Occurs when the keyboard focus switches to the view or one of its adornments.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection">
            <summary>
            <para>Represents a helper class for accessing the view's collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects. The
            TextViewLines property on the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is used to get an instance of this interface.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> disposes its <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection"/>
            and all the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects it contains every time it generates a new layout.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.ContainsBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether the specified buffer position is contained by any of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects in the collection.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns><c>true</c> if <paramref name="bufferPosition"/> is contained by ones of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.IntersectsBufferSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Detrmines whether the specified buffer span intersects any of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects in the collection.
            </summary>
            <param name="bufferSpan">The buffer span.</param>
            <returns><c>true</c> if <paramref name="bufferSpan"/> is contained by ones of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the position, or null if none exists.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> is not a valid buffer position.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLineContainingYCoordinate(System.Double)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the specified y-coordinate.
            </summary>
            <param name="y">
            The y-coordinate in the text rendering coordinate.
            </param>
            <returns>
            A text line that contains the y-coordinate, or null if none exists.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLinesIntersectingSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects that intersect <paramref name="bufferSpan"/>.
            </summary>
            <param name="bufferSpan">The span.</param>
            <returns>A sorted collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects that intersect the buffer span.</returns>
            <remarks>
            <para>This will return an empty list if there is no intersection between the
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects in this collection and <paramref name="bufferSpan"/>.</para>
            <para>This method handles the special processing required for the last line of the buffer.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the span whose text element span contains the given buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> that corresponds to the given text element index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the text bounds of the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A rectangular <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetNormalizedTextBounds(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures for the text that corresponds to the given span.
            </summary>
            <param name="bufferSpan">
            The buffer span representing the text for which to compute the text bounds.
            </param>
            <returns>
            A read-only collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures that contain the text specified in <paramref name="bufferSpan"/>.
            </returns>
            <remarks>
            <para>
            If the line contains bidirectional text, the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> objects that are returned may be disjoint.
            </para>
            <para>
            The height and top of the bounds will be the maximum of the height and the minimum of the top of all text
            in the line.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a legal span in the underlying text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetIndexOfTextLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
            <summary>
            Gets the index in the text lines of the given text view line.
            </summary>
            <param name="textLine">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> for which to find the index.</param>
            <returns>The index of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> in the view's TextLines list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textLine"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="textLine"/> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.FirstVisibleLine">
            <summary>
            Gets the first line that is not completely hidden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.LastVisibleLine">
            <summary>
            Gets the last line that is not completely hidden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.FormattedSpan">
            <summary>
            Gets the span of text contained in this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> collection. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.IsValid">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection"/> object is still valid.
            </summary>
            <remarks>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> will always invalidate the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection"/>
            when performing a layout.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin">
            <summary>
            Represents margins that are attached to an edge of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.GetTextViewMargin(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/> with the given <paramref name="marginName"/>.
            </summary>
            <param name="marginName">The name of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/> named <paramref name="marginName"/>, or null if no match is found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="marginName"/> is null.</exception>
            <remarks>A margin returns itself if it is passed its own name. If the name does not match and it is a container margin, it
            forwards the call to its children. Margin name comparisons are case-insensitive.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.MarginSize">
            <summary>
            Gets the size of the margin. 
            </summary>
            <remarks>For a horizontal margin this is the height of the margin, 
            since the width will be determined by the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
            For a vertical margin this is the width of the margin, since the height will be determined by the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</remarks>
            <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.Enabled">
            <summary>
            Determines whether the margin is enabled.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel">
            <summary>
            Represents a set of zero or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects that are unique to the presentation of text
            in a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.IsPointInVisualBuffer(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Determines whether a point in the edit buffer is represented in the visual buffer.
            </summary>
            <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer"/>.</param>
            <param name="affinity">
            If the mapping is ambiguous, this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the projection buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the projection buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns><c>true</c> if the point is represented in the visual buffer, otherwise <c>false</c>.</returns>
            <remarks>
            A point that is represented in the visual buffer may not be visible on screen, but if the view
            is scrolled to that position, then the point would become visible.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.GetNearestPointInVisualBuffer(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> that corresponds to the specified point in the edit
            buffer. If the point is hidden or has an alternative representation, gets
            the nearest point to it.
            </summary>
            <remarks>The definition of "nearest" depends on the implementation of the text view model.</remarks>
            <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer"/>.</param>
            <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> that corresponds to the given point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.GetNearestPointInVisualSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Gets a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> that corresponds to the specified point in the edit
            buffer. If the point is hidden or has an alternative representation, gets
            the nearest point to it.
            </summary>
            <remarks>The definition of "nearest" depends on the implementation of the text view model.</remarks>
            <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer"/>.</param>
            <param name="targetVisualSnapshot">The snapshot of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> to map to.</param>
            <param name="trackingMode">The <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/> to use when translating to targetVisualSnapshot.</param>
            <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> that corresponds to the given point in targetVisualSnapshot.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataModel">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> that supplies the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer"/> and the governing <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer">
            <summary>
            Represents the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for the data level. The data level text buffer is the highest buffer in the graph that
            is shared across multiple views and is therefore the base of the view model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> in which editing positions are tracked and to which edits are applied.
            All the text that appears in the view must reside in this buffer.
            </summary>
            <remarks>
            This text buffer may be the same as the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer"/>, or it may be a projection buffer
            or elision buffer whose ultimate source is the data buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> whose contents should be presented in the editor. 
            </summary>
            <remarks>
            This text buffer may be the same as the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer"/> or it may be a projection buffer
            or elision buffer whose ultimate source is the edit buffer.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> objects.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(NameSource=typeof(ITextViewModelProvider))]
            Component exporters must specify at least one ContentTypeAttribute characterizing the data
            models to which they apply and at least one TextViewRoleAttribute characterizing the views to which they apply.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider.CreateTextViewModel(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> for the given <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/>.
            </summary>
            <param name="dataModel">The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/>.</param>
            <param name="roles">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet"/> for the view that is about to be created.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> created for <paramref name="dataModel"/>, 
            or <c>null</c> if the text view model cannot be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet">
            <summary>
            Set of text view roles.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.Contains(System.String)">
            <summary>
            Compute whether the given text view role is a member of the set.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="textViewRole"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.ContainsAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compute whether the set contains all of the given text view roles.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="textViewRoles"/> is null.</exception>
            <param name="textViewRoles">The list of roles to check for inclusion.</param>
            <remarks>
            Returns <b>true</b> if <paramref name="textViewRoles"/> contains no roles. Null values 
            in <paramref name="textViewRoles"/> are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.ContainsAny(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compute whether the set contains at least one of the given text view roles. 
            </summary>
            <param name="textViewRoles">The list of roles to check for inclusion.</param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="textViewRoles"/> is null.</exception>
            <remarks>
            Returns <b>false</b> if <paramref name="textViewRoles"/> contains no roles. Null values 
            in <paramref name="textViewRoles"/> are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.UnionWith(Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Compute the union of the set and another text view role set.
            </summary>
            <param name="roleSet"></param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="roleSet"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar">
            <summary>
            Represents a vertical scroll bar.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetYCoordinateOfBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the y-coordinate in the scrollbar track that corresponds to a buffer position.
            </summary>
            <param name="bufferPosition">Desired position.</param>
            <returns>Corresponding y-coordinate.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetYCoordinateOfScrollMapPosition(System.Double)">
            <summary>
            Gets the y-coordinate in the scrollbar track that corresponds to a position in scroll map coordinates.
            </summary>
            <param name="scrollMapPosition">Desired position.</param>
            <returns>Corresponding y-coordinate.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetBufferPositionOfYCoordinate(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a y-coordinate in the scrollbar track.
            </summary>
            <param name="y">Desired y-coordinate.</param>
            <returns>A position in the buffer, even if <paramref name="y"/> is below or above the mapped range of coordinates.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.Map">
            <summary>
            Gets the mapping between the text position and the scrollbar coordinate for the scrollbar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.ThumbHeight">
            <summary>
            Gets the height of the scrollbar thumb in pixels.
            </summary>
            <remarks>
            The last buffer position maps to the bottom of the scrollbar track minus the thumb height.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanTop">
            <summary>
            Gets the y-coordinate of the top of the scrollbar track as it is rendered in the display (excluding the scroll buttons
            at the top and bottom).
            </summary>
            <remarks>
            <para>If mapping from scrollbar coordinates to positions in the scrollbar's track, the correct mapping is:</para>
            <para>pixel position = (scrollbar coordinate * TrackSpanHeight / (Map.Maximum + Map.ViewportSize)) + TrackSpanTop</para>
            <para>scrollbar coordinate = (pixel position - TrackSpanTop) * (Map.Maximum + Map.ViewportSize) / TrackSpanHeight</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanBottom">
            <summary>
            Gets the y-coordinate of the bottom of the scrollbar track as it is rendered in the display (excluding the scroll buttons
            at the top and bottom).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanHeight">
            <summary>
            Gets the height of the scrollbar track as it is rendered in the display (excluding the scroll buttons
            at the top and bottom).
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanChanged">
            <summary>
            Occurs when the span of the scrollbar track dimensions is changed. For example, they could change as a result of resizing
            the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IViewScroller">
            <summary>
            Represents a helper class for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>, and provides basic functionality for scrolling. The
            <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewScroller"/> property of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is used to get an instance of the this
            interface.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByPixels(System.Double)">
            <summary>
            Scrolls the viewport vertically by <paramref name="distanceToScroll"/>.
            </summary>
            <param name="distanceToScroll">
            The distance to scroll in the text rendering coordinate system. Positive values scroll the viewport
            up, and negative values scroll the viewport down.
            </param>
            <remarks>
            <para>This can be very slow for large numbers of pixels. You should avoid
            using this method to scroll more than the height of the viewport in either direction.</para>
            <para>The viewport always contains at least one visible line along its top edge, and the distance
            scrolled will be clipped to ensure that this always remains true.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="distanceToScroll"/> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByLine(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
            <summary>
            Scrolls the viewport vertically one line up or down.
            </summary>
            <param name="direction">
            The direction in which to scroll.
            </param>
            <remarks>
            <para>The viewport always contains at least one visible line along its top edge, and the distance
            scrolled is clipped to ensure that this always remains true.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction"/> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByLines(Microsoft.VisualStudio.Text.Editor.ScrollDirection,System.Int32)">
            <summary>
            Scrolls the viewport vertically by multiple lines up or down.
            </summary>
            <param name="direction">
            The direction in which to scroll.
            </param>
            <param name="count">
            The number of lines to scroll up or down.
            </param>
            <remarks>
            <para>The viewport always contains at least one visible line along its top edge, and the distance
            scrolled is clipped to ensure that this always remains true.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction"/> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByPage(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
            <summary>
            Scrolls the viewport vertically one page up or down.
            </summary>
            <param name="direction">
            The direction in which to scroll.
            </param>
            <returns><c>true</c> if the view contains one or more fully visible lines prior to scrolling, otherwise <c>false</c>.</returns>
            <remarks>
            <para>When paging down, this method scrolls the view so that the line below the last fully-visible line
            is even with the top of the view. When paging up, this method scrolls the view so that the line 
            above the first fully visible line is even with or slightly above the bottom of the view. 
            It may be shifted up to prevent a partially-visible line at the top of the view.
            If there are no fully-visible lines in the view because the view is too short, 
            the view is scrolled by exactly the viewport height.</para>
            <para>The view cannot be scrolled so that there is a gap between the top of the view and the first line of text.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction"/> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportHorizontallyByPixels(System.Double)">
            <summary>
            Scrolls the viewport horizontally by <paramref name="distanceToScroll"/>.
            </summary>
            <param name="distanceToScroll">
            The distance to scroll the viewport in the text rendering coordinate system. Positive values
            scroll the viewport to the right, and negative values scroll the viewport to the left.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="distanceToScroll"/> is NaN.</exception>
            <remarks>
            A view cannot be scrolled horizontally if word wrap is enabled.
            If word wrap is disabled, the horizontal offset of the view must be between [0.0, max(0.0, formatted content width - viewport width)].
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Ensures that all the text in <paramref name="span"/> is entirely visible in the view.
            </summary>
            <param name="span">The span to make visible.</param>
            <remarks>
            This is equivalent to scroller.EnsureSpanVisible(span, EnsureSpanVisibleOptions.None);
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Ensures that all the text in <paramref name="span"/> is entirely visible in the view.
            </summary>
            <param name="span">The span to make visible.</param>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions"/>.</param>
            <remarks>
            The view will not be scrolled if the text in <paramref name="span"/> is completely visible. If the text in <paramref name="span"/> is partially visible,
            then the view will be scrolled as little as possible to make the text completely visible.
            If none of the text in <paramref name="span"/> was visible, then it will be centered in the view.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.VirtualSnapshotSpan,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Ensures that all the text in <paramref name="span"/> is entirely visible in the view.
            </summary>
            <param name="span">The span to make visible.</param>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions"/>.</param>
            <remarks>
            The view will not be scrolled if the text in <paramref name="span"/> is completely visible. If the text in <paramref name="span"/> is partially visible,
            then the view will be scrolled as little as possible to make the text completely visible.
            If none of the text in <paramref name="span"/> was visible, then it will be centered in the view.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions">
            <summary>
            Options to control the behavior of <see cref="T:Microsoft.VisualStudio.Text.Editor.IViewScroller"/> EnsureSpanVisible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.ShowStart">
            <summary>
            Ensure that the start of the span is visible if it is impossible to display the entire span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.MinimumScroll">
            <summary>
            Do the minimum amount of scrolling to display the span in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.AlwaysCenter">
            <summary>
            Always center the span in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.None">
            <summary>
            Ensure that the end of the span is visible if it is impossible to display the entire span. If none of the text
            in the span is currently visible, center the span in the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute">
            <summary>
            Specifies the type of margin container.
            </summary>
            <remarks>The Name attribute is used for associating a name with a component part.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute.#ctor(System.String)">
            <summary>
            Instantiates a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute"/>.
            </summary>
            <param name="marginContainer">The name of the container for this margin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="marginContainer"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="marginContainer"/> is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute.MarginContainer">
            <summary>
            The name of the margin container.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute">
            <summary>
            An attribute to be placed on an event handler for <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextView.MouseHover"/>,
            specifying the delay between the time when the mouse stops moving
            and the generation of the hover event.
            </summary>
            <remarks>The default, if no MouseHoverAttribute is specified, is 150ms.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute"/>.
            </summary>
            <param name="delay">The time in milliseconds between the time when the mouse stops moving and the generation of the hover event.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute.Delay">
            <summary>
            Gets the time in milliseconds between the time when the mouse stops moving and the generation of the hover event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs">
            <summary>
            Provides information for a MouseHover event of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.Int32,Microsoft.VisualStudio.Text.IMappingPoint)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs"/>.
            </summary>
            <param name="view">The view in which the hover event is being generated.</param>
            <param name="position">The position of the character under the mouse in the snapshot span of the view.</param>
            <param name="textPosition">The position mapped to the buffer graph of the character under the mouse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="view"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is negative or greater than the length of the view's buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.View">
            <summary>
            The view for which the hover event is being generated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.Position">
            <summary>
            The position in the SnapshotSpan of the character under the mouse at the time of the hover.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.TextPosition">
            <summary>
            The position mapped to the buffer graph of the character under the mouse at the time of the hover.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames">
            <summary>
            Specifies the names of the pre-defined margins supplied by Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Left">
            <summary>
            The margin to the left of the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Right">
            <summary>
            The margin to the right of the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Top">
            <summary>
            The margin above the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Bottom">
            <summary>
            The margin below the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.LeftSelection">
            <summary>
            The margin to the left of the text view that implements mouse handlers for line selection.
            This behavior is inherited by margins contained in the left selection margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Outlining">
            <summary>
            The margin to the left of the text view that allows collapsing and expansion of outlining regions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.LineNumber">
            <summary>
            The margin to the left of the text view that shows line numbers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar">
            <summary>
            The standard horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBarContainer">
            <summary>
            The container margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar"/> by default.
            </summary>
            <remarks>
            Other margins can be placed to the left or right of the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar"/> depending on their order attribute.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar">
            <summary>
            The standard vertical scrollbar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBarContainer">
            <summary>
            The container margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar"/> by default.
            </summary>
            <remarks>
            Other margins can be placed above or below the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar"/> depending on their order attribute.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.RightControl">
            <summary>
            A vertical margin container in the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Right"/> margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBarContainer"/>.
            </summary>
            <remarks>
            Margins that wish to appear on top or bottom of the vertical scrollbar and all its siblings should be added
            to this container margin.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.BottomControl">
            <summary>
            A horizontal margin container in the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Bottom"/> margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBarContainer"/>.
            </summary>
            <remarks>
            Margins that wish to appear to the left or right of the horizontal scrollbar and all its siblings should be added to
            this container margin.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Spacer">
            <summary>
            The margin that appears between the line number and outlining margins and shows which text
            has changed in the current session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Glyph">
            <summary>
            The margin to the left of the text view that shows breakpoint and other glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.ZoomControl">
            <summary>
            The margin to the left of the horizontal scroll bar that hosts a zoom control for zooming the view. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles">
            <summary>
            Specifies the names of the pre-defined text view roles supplied by Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Document">
            <summary>
            The predefined Document role. Applies to text views of entities, typically stored in files, that have
            a definite first line and last line. This excludes entities such as output logs or textual displays of
            data that are presented in a form.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured">
            <summary>
            The predefined Structured role. Applies to text views of entities that have internal structure that should
            be exposed by editor facilities such as Outlining.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Interactive">
            <summary>
            The predefined Interactive role. Applies to text views with which the user can interact using the mouse and/or
            keyboard. Views that are not interactive cannot display a caret or a selection and cannot have keyboard input.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Editable">
            <summary>
            The predefined Editable role. Applies to text views that can be changed using the keyboard.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Analyzable">
            <summary>
            The predefined Analyzable role. Applies to text views of entities that can be analyzed for errors or
            other information (such as "quick info").
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Zoomable">
            <summary>
            The predefined Zoomable role. Applies to text views of entities that allow the user to perform zooming operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.PrimaryDocument">
            <summary>
            The predefined Primary Document role. Applies to text views of documents that are open for mainline editing,
            excluding auxiliary views of documents.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Debuggable">
            <summary>
            The predefined Debuggable role. Applies to text views of entities in which the debugger can display information
            at runtime.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection">
            <summary>
            The direction in which to scroll the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ScrollDirection.Up">
            <summary>
            Scroll up.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ScrollDirection.Down">
            <summary>
            Scroll down.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextSelectionMode">
            <summary>
            Specifies the text selection mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.TextSelectionMode.Stream">
            <summary>
            A simple selection (only one span)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.TextSelectionMode.Box">
            <summary>
            A box selection (from a start line and column to an end line and column).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs">
            <summary>
            Provides information for newly created <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that was created.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs.TextView">
            <summary>
            The newly created <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs">
            <summary>
            Provides information for a Layout Changed event of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ViewState,Microsoft.VisualStudio.Text.Editor.ViewState,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.Formatting.ITextViewLine},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.Formatting.ITextViewLine})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs"/>.
            </summary>
            <param name="oldState">
            State of the view prior to the layout.
            </param>
            <param name="newState">
            State of the view after the layout.
            </param>
            <param name="newOrReformattedLines">A list of the new or reformatted <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="translatedLines">A list of the translated <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <exception name="ArgumentNullException"><paramref name="oldState"/>, <paramref name="newState"/>, <paramref name="translatedLines"/> or <paramref name="newOrReformattedLines"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.OldViewState">
            <summary>
            State of the view prior to the layout.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewViewState">
            <summary>
            State of the view after the layout.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.HorizontalTranslation">
            <summary>
            Has the view translated horizontally since the last layout?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.VerticalTranslation">
            <summary>
            Has the view translated vertically since the last layout?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.OldSnapshot">
            <summary>
            Gets the old snapshot of the view.
            </summary>
            <remarks>Deprecated. Use OldViewState.EditSnapshot instead.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewSnapshot">
            <summary>
            Gets the new snapshot produced by the changed layout.
            </summary>
            <remarks>Deprecated. Use NewViewState.EditSnapshot instead.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewOrReformattedLines">
            <summary>
            Gets a read-only collection of new or reformatted lines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.TranslatedLines">
            <summary>
            Gets a read-only collection of translated lines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewOrReformattedSpans">
            <summary>
            Gets a collection the spans that are either new or have been reformatted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.TranslatedSpans">
            <summary>
            Gets a collection spans that have been translated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute">
            <summary>
            Use this attribute to specify the kinds of TextViews to which an extension applies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute.#ctor(System.String)">
            <summary>
            Construct a new instance of the attribute.
            </summary>
            <param name="role">The case-insensitive name of the role.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="role"/> is null or empty.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute.TextViewRoles">
            <summary>
            The role name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition">
            <summary>
            Defines the meaning of the verticalOffset parameter in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.DisplayTextLineContaining(...).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition.Top">
            <summary>
            The offset with respect to the top of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition.Bottom">
            <summary>
            The offset with respect to the bottom of the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewState">
            <summary>
            View state at a particular point in time.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ViewState.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.Double,System.Double)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewState"/>.
            </summary>
            <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for this view state.</param>
            <param name="effectiveViewportWidth">The width of the view port for <paramref name="view"/>.</param>
            <param name="effectiveViewportHeight">The height of the view port for <paramref name="view"/>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ViewState.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewState"/>.
            </summary>
            <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for this view state.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportLeft">
            <summary>
            Gets the X-coordinate of the viewport's left edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportTop">
            <summary>
            Gets the Y-coordinate of the viewport's top edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportWidth">
            <summary>
            Gets the Width of the viewport.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportHeight">
            <summary>
            Gets the Height of the viewport.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportRight">
            <summary>
            Gets the X-coordinate of the viewport's right edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportBottom">
            <summary>
            Gets the Y-coordinate of the viewport's bottom edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.VisualSnapshot">
            <summary>
            Gets the View's visual snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.EditSnapshot">
            <summary>
            Gets the view's edit snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyles">
            <summary>
            Sets a bitwise combination of enumeration values to specify the word wrap style of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
            </summary>
            <remarks>The VisibleGlyphs and AutoIndent bits will have no effect
            unless the WordWrap bit is also set.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.None">
            <summary>
            Word wrap is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.WordWrap">
            <summary>
            Word wrap is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.VisibleGlyphs">
            <summary>
            If word wrap is enabled, use visible glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.AutoIndent">
            <summary>
            If word wrap is enabled, use auto-indent.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomConstants">
            <summary>
            Defines the constants used for zoom operations 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.MaxZoom">
            <summary>
            The maximum zoom allowed on the text view
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.MinZoom">
            <summary>
            The minimum zoom allowed on the text view
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.DefaultZoom">
            <summary>
            The default zoom level on the text view
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.ScalingFactor">
            <summary>
            The scaling factor used for zooming in and out of the view. The view zooms by a factor of 10%
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement">
            <summary>
            Represents a sequence element that consists of an adornment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement">
            <summary>
            Represents the basic element in a sequence of elements that compose an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ISequenceElement.Span">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> of the element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ISequenceElement.ShouldRenderText">
            <summary>
            Determines whether the text in the span should be rendered in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Width">
            <summary>
            Gets the width of the adornment (in logical pixels).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TopSpace">
            <summary>
            Gets the amount of space (in logical pixels) to reserve above top of the text for the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Baseline">
            <summary>
            The distance (in logical pixel)s between the top of the adornment text and the baseline of the
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
            <remarks><para>This property should be equal to <see cref="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TextHeight"/> unless you plan to draw into the space between the baseline of
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and its TextBottom.</para>
            <para>The size of the baseline affects the amount of space reserved for text on an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>, which is used to
            determine the vertical size of the caret.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TextHeight">
            <summary>
            Gets the height of the adornment text. 
            </summary>
            <remarks><para>This affects the amount of space reserved for text on an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>, which is used to
            determine the vertical size of the caret.</para></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.BottomSpace">
            <summary>
            The amount of space (in logical pixels) to reserve below the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.IdentityTag">
            <summary>
            Gets the unique identifier associated with this adornment.
            </summary>
            <remarks>This ID can be passed to <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.GetAdornmentBounds() to find the location
            of this adornment on a line in the view.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.ProviderTag">
            <summary>
            Gets the unique identifier associated with the provider of the adornment.
            </summary>
            <remarks>This ID can be passed to <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)"/> to find the list
            off adornment identity tags located on the line.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Affinity">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the adornment.
            </summary>
            <remarks>This is used only when the length of the adornment element span in the source buffer is zero.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection">
            <summary>
            Represents a list of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement"/> objects generated by the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection.Sequencer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/> that generated the collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer">
            <summary>
            Creates a sequence of text and adornment elements to compose an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.  
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.CreateTextAndAdornmentCollection(Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Creates a sequence of text and adornment elements that compose the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <param name="topLine">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> in the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer"/> to sequence.</param>
            <param name="sourceTextSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> of the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer"/> that corresponds to topLine.</param>
            <returns>A normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement"/> objects that contain the text and adornment elements.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.CreateTextAndAdornmentCollection(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Creates a sequence of text and adornment elements that compose the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <param name="topSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> in the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer"/> to sequence.</param>
            <param name="sourceTextSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> of the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer"/> that corresponds to topSpan.</param>
            <returns>A normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement"/> objects that contain the text and adornment elements.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.BufferGraph">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> used by the sequencer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer">
            <summary>
            Gets the visual <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> of the buffer graph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer">
            <summary>
            Gets the edit buffer of the buffer graph.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SequenceChanged">
            <summary>
            Occurs when there has been a change in the data used by the sequencer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService">
            <summary>
            Service to create an instance of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/>.
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextAndAdornmentSequencerFactoryService factory = null;
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine">
            <summary>
            Represents text that has been formatted for display in a text view.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetBufferPositionFromXCoordinate(System.Double,System.Boolean)">
            <summary>
            Gets the buffer position of the character whose character bounds contains the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired character.</param>
            <param name="textOnly">If true, then this method will return null if <paramref name="xCoordinate"/> is over an adornment.</param>
            <returns>The text buffer-based point of the character at x, or null if there is no character at that position.</returns>
            <remarks>
            <para>
            Please note that the rightmost edge of a character bound is considered to be contained in its following character.
            </para>
            <para>
            The rightmost edge of the last character's bounds don't map to any character.
            </para>
            <para>
            If <paramref name="textOnly"/> is true and <paramref name="xCoordinate"/> is over an adornment, then the text position assoicated with the adornment is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetBufferPositionFromXCoordinate(System.Double)">
            <summary>
            Gets the buffer position of the character whose character bounds contains the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired character.</param>
            <returns>The text buffer-based point of the character at x, or null if there is no character at that position.</returns>
            <remarks>
            <para>
            This is equivalent to GetBufferPositionFromXCoordinate(xCoordinate, false).
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetVirtualBufferPositionFromXCoordinate(System.Double)">
            <summary>
            Gets the buffer position of the character whose character bounds contains the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired character.</param>
            <returns>The text buffer-based point of the character at x</returns>
            <remarks>
            <para>
            If there are no characters at the provided x-coordinate, a point in virtual space will be returned.
            </para>
            <para>
            If the provided x-coordinate is to the left of the start of the line, the buffer position of the line's
            left edge will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetInsertionBufferPositionFromXCoordinate(System.Double)">
            <summary>
            Gets the buffer position used if new data were to be inserted at the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired point.</param>
            <remarks>
            <para>
            If there are no characters at the provided x-coordinate, a point in virtual space will be returned.
            </para>
            <para>
            If the provided x-coordinate is to the left of the start of the line, the buffer position of the line's
            left edge will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ContainsBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether the specified buffer position lies within this text line.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns><c>true</c> if <paramref name="bufferPosition"/> lies within this text line, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the span whose text elementindex corresponds to the given buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> that corresponds to the given text element.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetCharacterBounds(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetExtendedCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified buffer position, including any adjacent
            space-negotiating adornments.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetExtendedCharacterBounds(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified virtual buffer position, including any adjacent
            space-negotiating adornments.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentBounds(System.Object)">
            <summary>
            Calculates the bounds of the specified adornment.
            </summary>
            <param name="identityTag">
            The <c>IAdornmentElement.IdentityTag</c> of the adornment whose bounds should be calculated.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure if this line contains an adornment with the specified <paramref name="identityTag"/>,
            otherwise null.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetNormalizedTextBounds(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures for the text that corresponds to the given span.
            </summary>
            <param name="bufferSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> representing the text for which to compute the text bounds.
            </param>
            <returns>
            A collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures that contain the text specified in <paramref name="bufferSpan"/>.
            </returns>
            <remarks>
            <para>
            If the line contains bidirectional text, the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures that are returned may be disjoint.
            </para>
            <para>
            The height and top of the bounds will correspond to the top and bottom of this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a legal span in the underlying text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IntersectsBufferSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether a <paramref name="bufferSpan"/> intersects this text line.
            </summary>
            <param name="bufferSpan">The buffer span.</param>
            <returns><c>true</c> if <paramref name="bufferSpan"/> intersects the text line, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)">
            <summary>
            Gets the adornments positioned on the line.
            </summary>
            <param name="providerTag">The identity tag of the provider.
            This tag should match <c>SpaceNegotiatingAdornmentTag.ProviderTag</c>.</param>
            <returns>A sequence of adornment identity tags in order of their appearance on the line. The collection is always non-null but may be empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="providerTag "/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IdentityTag">
            <summary>
            Gets a tag that can be used to track the identity of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> across layouts in the view.
            </summary>
            <remarks>
            <para>
            If an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> has the same identity tag as the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> from an earlier layout,
            then both text view lines correspond to the same text, even when the
            text has been moved without being modifed, or when the text view lines appear at different locations
            in the view.
            </para>
            <para>
            This property can be called even when the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> is invalid.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Snapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> on which this map is based.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsFirstTextViewLineForSnapshotLine">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> is the first line in the list of lines formatted for a particular
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <remarks>This property will always be <c>true</c> for lines that are not word-wrapped.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsLastTextViewLineForSnapshotLine">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> is the last line in the list of lines formatted for a particular
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <remarks>This property will always be <c>true</c> for lines that are not word-wrapped.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Baseline">
            <summary>
            Gets the distance from the top of the text to the baseline text on the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Extent">
            <summary>
            Gets the extent of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentAsMappingSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> that corresponds to the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Extent"/> of the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreak">
            <summary>
            Gets the extent of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreakAsMappingSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> that corresponds to <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreak"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Start">
            <summary>
            Gets the position in <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Snapshot"/> of the first character in the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Length">
            <summary>
            Gets the length of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LengthIncludingLineBreak">
            <summary>
            Gets the length of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.End">
            <summary>
             Gets the position of the first character past the end of the line, excluding any
            line break characters. In most cases this property references a line break character, except 
            for the last line in the buffer, in which case it contains a
            position past the end of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndIncludingLineBreak">
            <summary>
            Gets the position of the first character past the end of the line, including any
            line break characters In most cases this property references the first character in 
            the following line, unless this is the last line, in which case it contains a
            position past the end of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineBreakLength">
            <summary>
            Gets the length of the line break sequence (for example, "\r\n") that appears at the end of this line.
            </summary>
            <value>A integer in the range [0..2].</value>
            <remarks>
            If this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> corresponds to a line that was word-wrapped, then the length of its
            line break will be zero. The length of the line break will also be zero for the last line in the buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Left">
            <summary>
            Gets the position of the left edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top">
            <summary>
            Gets the position of the top edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Height">
            <summary>
            Gets the distance between the top and bottom edge of this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextTop">
            <summary>
            Gets the y-coordinate of the top of the text in the rendered line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextBottom">
            <summary>
            Gets the y-coordinate of the bottom of the text in the rendered line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextHeight">
            <summary>
            Gets the vertical distance between the top and bottom of the text in the rendered line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextLeft">
            <summary>
            Gets the x-coordinate of the left edge of the text in the rendered line.
            </summary>
            <remarks>This will always be the same as <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Left"/>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextRight">
            <summary>
            Gets the x-coordinate of the right edge of the text in the rendered line.
            </summary>
            <remarks>This does not include the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndOfLineWidth"/> for lines that have a line break.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextWidth">
            <summary>
            Gets the horizontal distance between <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextRight"/> and <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextLeft"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Width">
            <summary>
            Gets the distance between the left and right edges of this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Bottom">
            <summary>
            Gets the position of the bottom edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Right">
            <summary>
            Gets the position of the right edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndOfLineWidth">
            <summary>
            Gets the distance from the right edge of the last character in this line to
            the end of the space of this line. This may include padding for line break
            characters or for end of file characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.VirtualSpaceWidth">
            <summary>
            Get the width of the virtual spaces at the end of this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsValid">
            <summary>
            Determines whether this text view line is still valid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform"/> used to render this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.DefaultLineTransform">
            <summary>
            Gets the default <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform"/> used to render this line.
            </summary>
            <remarks>
            This is the line transform used if no other extension defines a <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform"/> for the line.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.VisibilityState">
            <summary>
            Gets the visibility state of this rendered text line with respect to the top and bottom of the view.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.DeltaY">
            <summary>
            Gets the change in the top of this rendered textline between between the value of <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top"/>
            in the current layout and the value of <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top"/> in the previous layout.
            </summary>
            <remarks>This property is 0.0 for rendered text lines that did not exist in the
            previous layout.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Change">
            <summary>
            Gets the change to this rendered textline between the current layout and
            the previous layout.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.LineTransform">
            <summary>
            Represents the transform from a formatted text line to a rendered text line.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/>. 
            </summary>
            <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
            <remarks>
            <para>All <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects on a formatted line of text are combined using the <see cref="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)"/> operator below. 
            The resulting <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> determines the placement and scaling of the rendered line of text.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/>.  
            </summary>
            <param name="topSpace">The amount of space required above the text of the line before applying <paramref name="verticalScale"/>.</param>
            <param name="bottomSpace">The amount of space required below the text of the line before applying <paramref name="verticalScale"/>.</param>
            <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
            <remarks>
            <para>All the <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects on a formatted line of text are combined
            using the <see cref="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)"/> operator, and the combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> determines 
            the placement and scaling of the rendered line of text.</para>
            <para>Negative <paramref name="topSpace"/> and <paramref name="bottomSpace"/> values will be ignored,
            since they will always be combined with
            at least one <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> with non-negative space requests.</para>
            <para>The rendered height of a line will be 
            ((line text height) + <paramref name="topSpace"/> + <paramref name="bottomSpace"/>) * <paramref name="verticalScale"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/>.  
            </summary>
            <param name="topSpace">The amount of space required above the text of the line before applying <paramref name="verticalScale"/>.</param>
            <param name="bottomSpace">The amount of space required below the text of the line before applying <paramref name="verticalScale"/>.</param>
            <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
            <param name="right">The x-coordinate of the right edge the line (typically the right edge of any adornment on the line that extends to the right of the line's text).</param>
            <remarks>
            <para>All the <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects on a formatted line of text are combined
            using the <see cref="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)"/> operator, and the combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> determines 
            the placement and scaling of the rendered line of text.</para>
            <para>Negative <paramref name="topSpace"/> and <paramref name="bottomSpace"/> values will be ignored,
            since they will always be combined with
            at least one <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> with non-negative space requests.</para>
            <para>The rendered height of a line will be 
            ((line text height) + <paramref name="topSpace"/> + <paramref name="bottomSpace"/>) * <paramref name="verticalScale"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Combines two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects.
            </summary>
            <param name="transform1">The first <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> to combine.</param>
            <param name="transform2">The second <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> to combine.</param>
            <returns>The combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects are the same.
            </summary>
            <param name="obj">The object to compare for equality.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.op_Equality(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.op_Inequality(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.TopSpace">
            <summary>
            Gets the amount of space required above the text of the line before applying the <see cref="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale"/> factor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.BottomSpace">
            <summary>
            Gets the amount of space required below the text of the line before applying the <see cref="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale"/> factor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale">
            <summary>
            Gets the vertical scale factor to be applied to the text of the line and the space above and below the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.Right">
            <summary>
            Gets the x-coordinate of the effective right edge of the line.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextBounds">
            <summary>
            The bounds of a span of text in a given text line.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/>.
            </summary>
            <param name="leading">
            The x-coordinate of the leading edge of the bounding rectangle.
            </param>
            <param name="top">
            The y-coordinate of the top edge of the bounding rectangle.
            </param>
            <param name="bidiWidth">;
            The distance between the leading and trailing edges of the bounding rectangle. This can be negative for right-to-left text.
            </param>
            <param name="height">
            The height of the rectangle. The height must be non-negative.
            </param>
            <param name="textTop">
            The top of the text, measured from the line that contains the text.
            </param>
            <param name="textHeight">
            The height of the text, measured from the line that contains the text.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="leading"/> or <paramref name="bidiWidth"/> is not a valid number, or
            <paramref name="height"/> is negative or not a valid number.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.ToString">
            <summary>
            Converts the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> object to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.GetHashCode">
            <summary>
            Gets the hash code of the see cref="TextBounds"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> objects are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.op_Equality(Microsoft.VisualStudio.Text.Formatting.TextBounds,Microsoft.VisualStudio.Text.Formatting.TextBounds)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> objects are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.op_Inequality(Microsoft.VisualStudio.Text.Formatting.TextBounds,Microsoft.VisualStudio.Text.Formatting.TextBounds)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> objects are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Leading">
            <summary>
            Gets the position of the leading edge of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            In right-to-left text, the leading edge is to the right of the trailing edge.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Top">
            <summary>
            Gets the position of the top edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextTop">
            <summary>
            Gets the top of the text on the line containing the text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Width">
            <summary>
            Gets the distance between the leading and trailing edges of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            This value will always be non-negative.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Height">
            <summary>
            Gets the distance between the top and bottom edges of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            This value will always be positive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextHeight">
            <summary>
            Gets the height of the text on the line containing the characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Trailing">
            <summary>
            Gets the position of the trailing edge of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            In right-to-left text, the trailing edge is positioned to the left of the leading edge.
            If the text has a non-zero width end of line glyph, this property includes the 
            width of that character.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Bottom">
            <summary>
            Gets the position of the bottom edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextBottom">
            <summary>
            Gets the bottom of the text on the line containing the characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Left">
            <summary>
            Gets the position of the left edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Right">
            <summary>
            Gets the position of the right edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.IsRightToLeft">
            <summary>
            Returns true if the bounds correspond to a right to left character
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs">
            <summary>
            Provides information for the tag aggregator TagsChanged event,
            and returns the span of changed tags as a mapping span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.IMappingSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>.
            </summary>
            <param name="span">The span that changed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs.Span">
            <summary>
            Gets the span over which tags have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange">
            <summary>
            Defines the possible types of change in a rendered text line between one layout and another.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.None">
            <summary>
            No change type is specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.NewOrReformatted">
            <summary>
            The line is new or reformatted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.Translated">
            <summary>
            The text has not changed, but some change has caused the y-coordinate to change. For example,
            a line was inserted above this line, or the user scrolled the view up or down.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.VisibilityState">
            <summary>
            Specifies the visibility of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> with respect to the visible area when the line was rendered.
            </summary>
            <remarks>
            <para>An <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> is considered partially visible when its
            bottom is equal to the top of the visible area.</para>
            <para>Unattached lines are lines that were not formatted as part of a layout in the text view.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.Unattached">
            <summary>
            The line is unattached, that is, it was not formatted as part of a layout in the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.Hidden">
            <summary>
            The line is hidden, that is, not visible inside the view. Lines are also hidden when 
            their bottom edge is even with the top of the view or their top edge is even with the top of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.PartiallyVisible">
            <summary>
            The line is partially visible, that is, 
            some portion of the line extends above the top of the view and/or below the bottom of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.FullyVisible">
            <summary>
            The line is fully visible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch">
            <summary>
            Defines an incremental search operation. 
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> interface is associated
            with a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </para>
            <para>
            After the Start() method is called, the current caret position is marked as the start of the search, 
            and the <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.AppendCharAndSearch(System.Char)"/> and <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.DeleteCharAndSearch"/> operations can be used to change the search term. 
            The direction of the search is set to forward by default, although this setting can be changed with the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchDirection"/> property.
            If a matching term is found, it is selected and the caret is moved to the end of the selected word. 
            </para>
            <para>
            Every search operation returns an <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/>, which includes 
            information about the search, such as whether the search looped around the start or 
            end of the buffer, whether the search looped around the starting position of the search,
            and whether the item was found. It is the responsibility of the caller
            to pass this information to the end user.
            </para>
            <para>
            Incremental search performs its search on the text snapshot of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. As a result, if the
            result falls within a collapsed outlining region, the region will be expanded before the result is selected.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Start">
            <summary>
            Starts an incremental search operation, and marks the position of the caret
            as the starting position for the search.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            An incremental search session is in progress.
            To avoid raising this exception, check the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.IsActive"/> property before calling
            <c>Start</c>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Dismiss">
            <summary>
            Terminates an incremental search operation.
            </summary>
            <exception creg="System.InvalidOperationException">
            <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Dismiss"/> was called before <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Start"/>. A search must be
            started before it can be terminated.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.AppendCharAndSearch(System.Char)">
            <summary>
            Extends the current term being searched for by one character. If a new term is matched, it 
            is selected. The selection can be used to access the match.
            </summary>
            <param name="toAppend">
            The character to append to the current search term.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> that contains information about whether the search term was found and whether
            the search wrapped around the beginning or end of the buffer.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.DeleteCharAndSearch">
            <summary>
            Removes the last character of the current search term and updates the
            search results based on the new term. 
            </summary>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> that indicates whether the new search term was found
            and whether the search wrapped around the beginning or end of 
            the buffer.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The search string is empty. To avoid this exception,
            check the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchString"/> property before calling this method.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SelectNextResult">
            <summary>
            Selects the next result in an incremental search operation. 
            The matched term will be selected.
            </summary>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> indicating whether the newly selected item caused a
            wrap around the end or beginning of the document and whether the search looped around the first item found.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Clear">
            <summary>
            Clears the existing search term without changing the selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchString">
            <summary>
            Gets or sets the current search term.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.IsActive">
            <summary>
            Determines whether an incremental search is in process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchDirection">
            <summary>
            Gets or sets the direction of the incremental search.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> associated with this search.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService">
            <summary>
            Used to get or create an incremental search service for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            There will always be a maximum of one <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/>
            for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IIncrementalSearchFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService.GetIncrementalSearch(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            If there is no <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> for the view, one
            will be created.
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which the incremental search is to be performed.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> associated with the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult">
            <summary>
            Consolidates the result of an incremental search operation.
            </summary>
            <remarks>
            This result indicates whether the item was found, whether the search
            caused the cursor to wrap around the beginning or end of the buffer, and
            the position of the first result.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> with the specified properties.
            </summary>
            <param name="passedEndOfBuffer"></param>
            <param name="passedStartOfBuffer"></param>
            <param name="passedStartOfSearch"></param>
            <param name="resultFound"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.Equals(System.Object)">
            <summary>
            Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> objects are the same.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns><c>true</c> if both objects have the same content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.op_Equality(Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult,Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult)">
            <summary>
            Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> objects are the same.
            </summary>
            <returns><c>true</c> if both objects have the same content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.op_Inequality(Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult,Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult)">
            <summary>
            Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> objects are different.
            </summary>
            <returns><c>true</c> if both objects have different content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns>base class' implementation</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedStartOfBuffer">
            <summary>
            Determines whether the search wrapped around the start of the buffer to its end.
            </summary>
            <remarks>This is applicable only if the search direction is backward.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedEndOfBuffer">
            <summary>
            Determines whether the search wrapped around the end of the buffer to its beginning.
            </summary>
            <remarks>This is applicable only if the search direction is forward.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedStartOfSearch">
            <summary>
            Determines whether the search passed the first item found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.ResultFound">
            <summary>
            Determines whether the search for the term was successful.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection">
            <summary>
            Determines the direction of the incremental search.
            See <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> for more information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection.Forward">
            <summary>
            Forward search.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection.Backward">
             <summary>
            Backward search.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations">
            <summary>
            Defines operations relating to the editor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Selects from the given anchor point to active point, moving the caret to the new active
            point of the selection.  The selected span will be made visible.
            </summary>
            <param name="anchorPoint">The anchor point of the new selection.</param>
            <param name="activePoint">The active point of the new selection and position of the caret.</param>
            <remarks>This puts the selection in stream selection mode and does the minimum amount of required scrolling to ensure the selected span is visible.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.Editor.TextSelectionMode)">
            <summary>
            Selects from the given anchor point to active point, moving the caret to the new active
            point of the selection.  Additionally, ensure the selection is in the given selection
            mode, and make the selected span visible.
            </summary>
            <param name="anchorPoint">The anchor point of the new selection.</param>
            <param name="activePoint">The active point of the new selection and position of the caret.</param>
            <param name="selectionMode">The selection mode of the new selection.</param>
            <remarks>This does the minimum amount of required scrolling to ensure the selected span is visible.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.Editor.TextSelectionMode,System.Nullable{Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions})">
            <summary>
            Selects from the given anchor point to active point, moving the caret to the new active
            point of the selection.  Additionally, ensure the selection is in the given selection
            mode, and make the selected span visible.
            </summary>
            <param name="anchorPoint">The anchor point of the new selection.</param>
            <param name="activePoint">The active point of the new selection and position of the caret.</param>
            <param name="selectionMode">The selection mode of the new selection.</param>
            <param name="scrollOptions">What, if any, scrolling is done in the view after the selection is made. If null, no scrolling is done.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToNextCharacter(System.Boolean)">
            <summary>
            Moves the caret to the next character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToPreviousCharacter(System.Boolean)">
            <summary>
            Moves the caret to the previous character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToNextWord(System.Boolean)">
            <summary>
            Moves the caret to the next word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToPreviousWord(System.Boolean)">
            <summary>
            Moves the caret to the previous word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveLineUp(System.Boolean)">
            <summary>
            Moves the caret one line up.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveLineDown(System.Boolean)">
            <summary>
            Moves the caret one line down.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.PageUp(System.Boolean)">
            <summary>
            Moves the caret one page up.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.PageDown(System.Boolean)">
            <summary>
            Moves the caret one page down.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToEndOfLine(System.Boolean)">
            <summary>
            Moves the caret to the end of the line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfLine(System.Boolean)">
            <summary>
            Moves the caret to the first column on the current line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToHome(System.Boolean)">
            <summary>
            Moves the caret to the first text column on the line; if the caret is already
            at the first text column or there is no text, move the caret to the first column
            on the line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>This is effectively the behavior of pressing the Home key</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.GotoLine(System.Int32)">
            <summary>
            Moves the caret to the start of the specified line.
            </summary>
            <param name="lineNumber">
            The line number to which to move the caret.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber"/> is less than zero 
            or greater than the line number of the last line in the text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfDocument(System.Boolean)">
            <summary>
            Moves the caret to the start of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToEndOfDocument(System.Boolean)">
            <summary>
            Moves the caret at the end of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCurrentLineToTop">
            <summary>
            Moves the current line to the top of the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCurrentLineToBottom">
            <summary>
            Moves the current line to the bottom of the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfLineAfterWhiteSpace(System.Boolean)">
            <summary>
            Moves the caret to the start of the line after all white space.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfNextLineAfterWhiteSpace(System.Boolean)">
            <summary>
            Moves the caret to the start of the next line after all white space.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            <para>
            If the caret is on the last line, this method moves it to the start of the line after all white space.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfPreviousLineAfterWhiteSpace(System.Boolean)">
            <summary>
            Moves the caret to the start of the previous line after all white space.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            <para>
            If the caret is on the first line, this method moves it to the start of the ine after all white space.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToLastNonWhiteSpaceCharacter(System.Boolean)">
            <summary>
            Moves the caret to just before the last non-white space character in the line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            If the line is blank, the caret is moved to the start of the line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToTopOfView(System.Boolean)">
            <summary>
            Moves the caret to the first fully-visible line of the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToBottomOfView(System.Boolean)">
            <summary>
            Moves the caret to the last fully-visible line of the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SwapCaretAndAnchor">
            <summary>
            Swaps the caret from its current position to the other end of the selection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Backspace">
            <summary>
            Deletes a character to the left of the current caret.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteWordToRight">
            <summary>
            Deletes the word to the right of the current caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteWordToLeft">
            <summary>
            Deletes the word to the left of the current caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteToEndOfLine">
            <summary>
            Deletes the line the caret is on, up to the line break character and the selection, if present.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteToBeginningOfLine">
            <summary>
            Deletes the line the caret is on, up to the previous line break character and the selection, if present.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteBlankLines">
            <summary>
            Deletes all empty lines or lines that contain only white space in the selection.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteHorizontalWhiteSpace">
            <summary>
            Deletes all white space from the beginnings and ends of the selected lines, and trims internal white space.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            The algorithm for this operation follows these rules:
            </para>
            <para>
            If there is no selection, the white space around the caret is trimmed so that only one space or tab remains.
            If there is only one space or tab, then this operation does nothing.
            </para>
            <para>
            If there is a selection, then the white space at the beginning or end of a line 
            contained within the selection is completely deleted.
            If there is at least one block of contiguous white space longer than one character 
            in the selection, then all white space between the first and last 
            non-white space characters is trimmed so that only one space or tab remains for each contiguous block.
            If there are only contiguous runs of a single space or tab contained within the selection,
            then all spaces and tabs in the selection are deleted.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertNewLine">
            <summary>
            Inserts a new line at the current caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.OpenLineAbove">
            <summary>
            Inserts a new line at the start of the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.OpenLineBelow">
            <summary>
            Inserts a new line at the end of the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Indent">
            <summary>
            If there is a multi-line selection indents the selection, otherwise inserts a tab at the caret location.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Unindent">
            <summary>
            If there is a multi-line selection, unindents the selection. If there is a single line selection,
            removes up to a tab's worth of white space from before the start of the selection. If there is no selection,
            removes up to a tab's worth of white space from before the caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.IncreaseLineIndent">
            <summary>
            If there is a multi-line selection, adds indentation to every line in the selection, 
            otherwise adds indentation to the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DecreaseLineIndent">
            <summary>
            If there is a multi-line selection, removes indentation from every line in the selection, 
            otherwise removes indentation from the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertText(System.String)">
            <summary>
            Inserts the given text at the current caret position.
            </summary>
            <param name="text">
            The text to be inserted in the buffer.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertTextAsBox(System.String,Microsoft.VisualStudio.Text.VirtualSnapshotPoint@,Microsoft.VisualStudio.Text.VirtualSnapshotPoint@)">
            <summary>
            Inserts the given text at the current caret position as a box.
            </summary>
            <param name="text">
            The text to be inserted in the buffer.  Each "line" from the text
            will be written out a line at a time.
            </param>
            <param name="boxStart">The start of the newly inserted box.</param>
            <param name="boxEnd">The end of the newly inserted box.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
            <remarks>
            This has the same behavior as copying and pasting a box selection.
            In order to insert the text as a box, the <paramref name="text"/> is
            split by newlines and inserted a line at a time, each one on a successive
            line below the line the caret is on (and starting at the caret's x coordinate
            on each line).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertProvisionalText(System.String)">
            <summary>
            Inserts the given text at the current caret position as provisional text.
            </summary>
            <param name="text">
            The text to be inserted in the buffer.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            Provisional text is automatically replaced by subsequent InsertText() or InsertProvisionalText() calls.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Delete">
            <summary>
            Deletes the selection if there is one, or the next character in the buffer if one exists.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteFullLine">
            <summary>
            If there is a selection, deletes all the lines touched by the selection, including line break characters.
            Otherwise, deletes the line the caret is on, including the line break characters.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceSelection(System.String)">
            <summary>
            Replaces the text selection with the new text.
            </summary>
            <param name="text">
            The new text that replaces the old selection.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeCharacter">
            <summary>
            Transposes the character at the cursor with the next character. 
            Transposes the first two characters when the cursor is at the start of the line. 
            Transposes the last two characters when the cursor is at the end of the line.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeLine">
            <summary>
            Transposes the line containing the cursor with the next line. Transposes the last two lines when the cursor at the last line.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeWord">
            <summary>
            Transposes the current word with the next one. White space and punctuation are not treated as words.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MakeLowercase">
            <summary>
            Converts uppercase letters to lowercase in the selection. If the selection is empty, makes the next character lowercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MakeUppercase">
            <summary>
            Converts lowercase letters to uppercase in the selection. If the selection is empty, makes the next character uppercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ToggleCase">
            <summary>
            Switches the case of each character in the selection. If the selection is empty, changes the case of the next character.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Capitalize">
            <summary>
            Converts all the characters in the selection to lowercase, 
            then converts the first character in each word in the selection to uppercase.
            If the selection is empty, then it makes the next character uppercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceText(Microsoft.VisualStudio.Text.Span,System.String)">
            <summary>
            Replaces text from the given span with the new text.
            </summary>
            <param name="replaceSpan">The span of text to be replaced.</param>
            <param name="text">
            The new text.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceAllMatches(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Replaces all matching occurrences of the given string.
            </summary>
            <param name="searchText">
            The text to match.
            </param>
            <param name="replaceText">
            The replacement text.
            </param>
            <param name="matchCase">
            <c>true</c> if the search should match case, otherwise <c>false</c>.
            </param>
            <param name="matchWholeWord">
            <c>true</c> if the search should match whole words, otherwise <c>false</c>.
            </param>
            <param name="useRegularExpressions">
            <c>true</c> if the search should use regular expressions, otherwise <c>false</c>.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchText"/> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="useRegularExpressions"/> is true and <paramref name="searchText"/> is an invalid regular expression.</exception>
            <returns>The number of matches found.</returns>
            <remarks>If any of the matches found is read only, none of the matches will be replaced.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertFile(System.String)">
            <summary>
            Inserts a file on disk into the text buffer.
            </summary>
            <param name="filePath">The path of the file on disk.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is a zero-length string, 
            contains only white space, or contains one or more invalid characters as defined by InvalidPathChars.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="filePath"/> specified a file that is read-only, or
            this operation is not supported on the current platform, or
            <paramref name="filePath"/> specified a directory, or
            the caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="filePath"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in an invalid format. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Tabify">
            <summary>
            Converts the leading white space to tabs on all lines touched by the selection and caret.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            If the column position of the first non-white space character is not evenly divisible by the tab size, there will be
            spaces left at the end of the line equal to the remainder of that division.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Untabify">
            <summary>
            Converts the leading white space to spaces of all lines touched by the selection and caret.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ConvertSpacesToTabs">
            <summary>
            Converts spaces to tabs in the selection, or on the line the caret is on if the selection is empty.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            Only spaces immediately preceding a tab stop will be converted to tabs.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ConvertTabsToSpaces">
            <summary>
            Converts tabs to spaces in the selection, or on the line the caret is on if the selection is empty.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            A tab is replaced by the number of spaces equal to the distance between one tab and the next.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.NormalizeLineEndings(System.String)">
            <summary>
            Replaces all line endings that do not match <paramref name="replacement"/> with <paramref name="replacement"/>.
            </summary>
            <param name="replacement">The character sequence that all line endings will match.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectCurrentWord">
            <summary>
            Selects the current word.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectEnclosing">
            <summary>
            Selects the enclosing parent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectFirstChild">
            <summary>
            Selects the first child.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectNextSibling(System.Boolean)">
            <summary>
            Selects the next sibling.
            </summary>
            <param name="extendSelection">If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectPreviousSibling(System.Boolean)">
            <summary>
            Selects the previous sibling.
            </summary>
            <param name="extendSelection">If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Boolean)">
            <summary>
            Selects the given line.
            </summary>
            <param name="viewLine">
            The line to select.
            </param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewLine"/> is
            <c>null</c></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAll">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ExtendSelection(System.Int32)">
            <summary>
            Extends the current selection span to the new selection end.
            </summary>
            <param name="newEnd">
            The new character position to which the selection is to be extended.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newEnd"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCaret(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,System.Boolean)">
            <summary>
            Moves the caret to the given <paramref name="textLine"/> at the given <paramref name="horizontalOffset"/>.
            </summary>
            <param name="textLine">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> on which to place the caret.</param>
            <param name="horizontalOffset">The horizontal location in the given <paramref name="textLine"/> to which to move the caret.</param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textLine"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ResetSelection">
            <summary>
            Resets any selection in the text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CopySelection">
            <summary>
            Copies the selected text to the clipboard.
            </summary>
            <returns>
            <c>true</c> if the clipboard operation succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InsufficientMemoryException"> is thrown if there is not sufficient memory to complete the operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CutSelection">
            <summary>
            Cuts the selected text.
            </summary>
            <returns>
            <c>true</c> if the edit and the clipboard operation both succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InsufficientMemoryException"> is thrown if there is not sufficient memory to complete the operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Paste">
            <summary>
            Pastes text from the clipboard to the text buffer.
            </summary>
            <returns>
            <c>true</c> if the edit and the clipboard operation both succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CutFullLine">
            <summary>
            If there is a selection present, deletes all lines touched by the selection,
            including line break characters, and copies the text to the clipboard.
            Otherwise, deletes the line the caret is on, including the line break characters, and copies the text to the clipboard.
            </summary>
            <returns>
            <c>true</c> if the edit and the clipboard operation both succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InsufficientMemoryException"> is thrown if there is not sufficient memory to complete the operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollUpAndMoveCaretIfNecessary">
            <summary>
            Scrolls the view up by one line and repositions the caret, 
            if it is scrolled off the page, to the last fully-visible
            line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollDownAndMoveCaretIfNecessary">
            <summary>
            Scrolls the view down by one line and repositions the caret, 
            if it is scrolled off the page, to the first fully-visible
            line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollPageUp">
            <summary>
            Scrolls the view up a page without moving the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollPageDown">
            <summary>
            Scrolls the view down a page without moving the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollColumnLeft">
            <summary>
            Scrolls the view one column to the left.
            </summary>
            <remarks>
            A column is the width of a space in the default font.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollColumnRight">
            <summary>
            Scrolls the view one column to the right.
            </summary>
            <remarks>
            A column is the width of a space in the default font.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineBottom">
            <summary>
            Scrolls the line the caret is on, so that it is the last
            fully-visible line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineTop">
            <summary>
            Scroll sthe line the caret is on, so that it is the first
            fully-visible line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineCenter">
            <summary>
            Scrolls the line the caret is on, so that it is centered in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive">
            <summary>
            Adds an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive"/> to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> for the buffer
            that will revert the selection to the current state when it is undone.
            </summary>
            <remarks>
            When performing edits that will change the selection, you can surround the edits with calls
            to <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive"/> and 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive"/> to ensure that the selection
            behaves correctly when the edits are undone and redone.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive">
            <summary>
            Adds an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive"/> to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> for the buffer
            that will revert the selection to the current state when it is redone.
            </summary>
            <remarks>
            When performing edits that will change the selection, you can surround the edits with calls
            to <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive"/> and 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive"/> to ensure that the selection
            behaves correctly when the edits are undone and redone.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomIn">
            <summary>
            Zooms in to the text view by a scaling factor of 10%
            </summary>
            <remarks>
            The maximum zooming scale is 400%
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomOut">
            <summary>
            Zooms out of the text view by a scaling factor of 10%
            </summary>
            <remarks>
            The minimum zooming scale is 20%
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomTo(System.Double)">
            <summary>
            Applies the given zoomLevel to the text view
            </summary>
            <param name="zoomLevel">The zoom level to apply between 20% to 400%</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.GetWhitespaceForVirtualSpace(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Gets a string composed of whitespace characters that would be inserted to fill the gap between
            a given <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> and the closest <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> on the same line.
            </summary>
            <param name="point">The point in virtual space</param>
            <remarks>
            Returns an empty string if the provided <paramref name="point"/> is not in virtual space.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanPaste">
            <summary>
            Determines whether a paste operation is possible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanDelete">
            <summary>
            Determines whether a delete operation is possible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanCut">
            <summary>
            Determines whether  a cut operation is possible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TextView">
            <summary>
            Gets the text view on which these operations work.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Options">
            <summary>
            Gets the options specific to this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ProvisionalCompositionSpan">
            <summary>
            Gets the span of the current provisional composition (null if there is no provisional composition).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectedText">
            <summary>
            Gets the selected text.
            </summary>
            <remarks>
            In box selection mode, this will have each span of text separated by a newline
            character, with an extra newline at the very end.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService">
            <summary>
            A service that provides <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> objects.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IEditorOperationsFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService.GetEditorOperations(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> objects for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/>. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible">
            <summary>
            Represents a span that may be collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.Extent">
            <summary>
            Gets the extent of this collapsible region.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.IsCollapsed">
            <summary>
            Determines whether this outlining region is collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.IsCollapsible">
            <summary>
            Determines whether this region can be collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.CollapsedForm">
            <summary>
            Gets the data object for the collapsed UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.CollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.Tag">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag"/> that was used to produce this collapsible region.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed">
            <summary>
            Represents a collapsed <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsed.CollapsedChildren">
            <summary>
            Enumerates the children of this collapsed region that are also collapsed.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this collapsed region has been expanded.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager">
            <summary>
            Provides outlining functionality.
            </summary>
            <remarks>
            <para>Any methods that take <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects are spans of the
            edit buffer in the view model of a view. This buffer can also be retrieved from
            the TextBuffer property of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</para>
            <para>This outlining manager is provided by <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the collapsed regions that intersect the given span.
            </summary>
            <param name="span">The span.</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Gets all the collapsed regions that intersect the given span.
            </summary>
            <param name="span">The span.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the collapsed regions that intersect the given collection of spans.
            </summary>
            <param name="spans">The collection of spans.</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Boolean)">
            <summary>
            Gets all the collapsed regions that intersect the given collection of spans.
            </summary>
            <param name="spans">The collection of spans.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the regions that intersect the given span, whether or not they are collapsed.
            </summary>
            <param name="span">The span.</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Gets all the regions that intersect the given span, whether or not they are collapsed.
            </summary>
            <param name="span">The span.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the regions that intersect the given collection of spans, whether or not they are collapsed.
            </summary>
            <param name="spans">The collection of spans.</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Boolean)">
            <summary>
            Gets all the regions that intersect the given collection of spans, whether or not they are collapsed.
            </summary>
            <param name="spans">The collection of spans.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.Expand(Microsoft.VisualStudio.Text.Outlining.ICollapsed)">
            <summary>
            Expands the collapsible span.
            </summary>
            <returns>The newly-expanded span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.TryCollapse(Microsoft.VisualStudio.Text.Outlining.ICollapsible)">
            <summary>
            Tries to collapse a given region.
            </summary>
            <returns>The newly collapsed span if successful, otherwise null.</returns>
            <remarks>
            There are two cases in which this method can fail to collapse the region:
            <para>The region is already collapsed.</para>
            <para>The region is partially obscured because another collapsed region partially covers it.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.CollapseAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsible})">
            <summary>
            Collapses all regions that match the specified predicate.
            </summary>
            <param name="span">The regions that intersect this span.</param>
            <param name="match">The predicate to match.</param>
            <returns>The newly-collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.ExpandAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsed})">
            <summary>
            Expands all the regions that match the specified predicate.
            </summary>
            <param name="match">The predicate to match.</param>
            <param name="span">The regions that intersect this span.</param>
            <returns>The newly-expanded regions.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsChanged">
            <summary>
            Occurs when the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions on the corresponding elision buffer changes.
            </summary>
            <remarks>Not raised when the collapsed state of any <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> changes.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsExpanded">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed"/> region is expanded.
            </summary>
            <remarks>This event is not raised when the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions on the corresponding
            elision buffer changes.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsCollapsed">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> reguib is collapsed.
            </summary>
            <remarks>Not raised when the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions on the corresponding
            elision buffer changes.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.OutliningEnabledChanged">
            <summary>
            Occurs when outlining has been enabled or disabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.Enabled">
            <summary>
            Determines whether outlining is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService">
            <summary>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager"/> for a given view model.
            </summary>
            <remarks>
            This is a MEF component part, and should be imported as follows:
            [Import]
            IOutliningManagerService outliningManager = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService.GetOutliningManager(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager"/> for the given view.
            </summary>
            <remarks>
            The outlining manager is available only for views that have the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured"/> role.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> from which to get the outlining manager.</param>
            <returns>A valid outlining manager if the view model supports outlining,
            otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textView"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.OutliningEnabledChanged"/> event.
            </summary>
            <remarks>
            The event is raised when outlining has been enabled or disabled.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs"/> for the specified change.
            </summary>
            <param name="enabled"><c>true</c> if outlining has been enabled, <c>false</c> if it has been disabled.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs.Enabled">
            <summary>
            Determines whether outlining has been enabled or disabled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsCollapsed"/> event.
            </summary>
            <remarks>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed"/> regions that are now collapsed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsed})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed"/> regions.
            </summary>
            <param name="collapsedRegions">The newly-collapsed regions.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs.CollapsedRegions">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed"/> regions that are now collapsed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsExpanded"/> event.
            </summary>
            <remarks>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions that are now expanded.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsible})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions, assuming that they are not also being removed.
            </summary>
            <param name="expandedRegions">The newly-expanded regions.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsible},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions.
            </summary>
            <param name="expandedRegions">The newly-expanded regions.</param>
            <param name="removalPending">If these regions are being expanded as part of being removed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.ExpandedRegions">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions which are now expanded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.RemovalPending">
            <summary>
            <c>true</c> if the regions are being expanded because they are being removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsChanged"/> event.
            </summary>
            <remarks>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> over which <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions were added or 
            removed. Call GetAllRegions to get the current set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions over the affected snapshot span.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <param name="affectedSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> over which collapsible regions have changed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs.AffectedSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> over which collapsible spans have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService">
            <summary>
            A service that creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            This is a MEF component part, and should be imported as follows:
            [Import]
            IViewLevelTagAggregatorFactoryService factory = null;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a tag aggregator for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that aggregates
            tags of the given type.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/>.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/> of the correct type for <paramref name="textView"/>.</returns>
            <remarks>The ITagAggregatorr&lt;T&gt;.DispatchedTagsChanged event will be raised on the thread used to create the tag aggregator.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions)">
            <summary>
            Creates a tag aggregator for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> and with the given options that aggregates
            tags of the given type.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/>.</param>
            <param name="options">The options to use for the newly created aggregator.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/> of the correct type for <paramref name="textView"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/> for a given buffer.
            </summary>
            <remarks>This is a MEF component part, and implementers must use the following attributes:
            [Export(nameSource=typeof(ITaggerProvider))]
            Exports must specify at least one content type attribute and at least one tag type attribute.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a tag provider for the specified view and buffer.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</param>
            <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <typeparam name="T">The type of the tag.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Strings.BufferMismatch">
            <summary>
              Looks up a localized string similar to Buffer mismatch between oldSnapsnot and newSnapshot..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Strings.VersionError">
            <summary>
              Looks up a localized string similar to oldSnapshot&apos;s version is not older than newSnapshot&apos;s version..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag">
            <summary>
            Provides a tag for outlining regions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.IsDefaultCollapsed">
            <summary>
            Determines whether the region is collapsed by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.IsImplementation">
            <summary>
            Determines whether a region is an implementation region.
            </summary>
            <remarks>
            Implementation regions are the blocks of code following a method definition. 
            They are used for commands such as the Visual Studio Collapse to Definition command, 
            which hides the implementation region and leaves only the method definition exposed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.CollapsedForm">
            <summary>
            Gets the data object for the collapsed UI. If the default is set, returns null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.CollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip. If the default is set, returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag">
            <summary>
            Represents a tag for outlining regions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag"/> with the specified objects. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor(System.Boolean,System.Boolean,System.Object,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag"/> with the specified default collapsed state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.IsDefaultCollapsed">
            <summary>
            Determines whether the region is collapsed by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.IsImplementation">
            <summary>
            Determines whether a region is an implementation region. 
            </summary>
            <remarks>
            Implementation regions are the blocks of code following a method definition. 
            They are used for commands such as the Visual Studio Collapse to Definition command, 
            which hides the implementation region and leaves only the method definition exposed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.CollapsedForm">
            <summary>
            Gets the data object for the collapsed UI. If the default is set, returns null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.CollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip. If the default is set, returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IErrorTag"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IErrorTag">
            <summary>
            Represents an error, which is used to place squiggle adornments on the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IErrorTag.ErrorType">
            <summary>
            Gets the type of error to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IErrorTag.ToolTipContent">
            <summary>
            Gets the content to use when displaying a tooltip for this error.
            This property may be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag"/> of the specified type.
            </summary>
            <param name="errorType">The type of error to use.</param>
            <param name="toolTipContent">The tooltip content to display. May be null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="errorType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag"/> of the specified type with no tooltip content.
            </summary>
            <param name="errorType">The type of error to use,</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag"/> of type SyntaxError with no tooltip content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ErrorTag.ErrorType">
            <summary>
            Gets the type of error to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ErrorTag.ToolTipContent">
            <summary>
            Gets the content to use when displaying a tooltip for this error.
            This property may be null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag">
            <summary>
            Represents the text marker tag, which is used to place text marker adornments on a view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag">
            <summary>
            Represents the text marker tag, which is used to place text marker adornments on a view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag.Type">
            <summary>
            Gets the type of adornment to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag"/> of the given type.
            </summary>
            <param name="type">The type of text marker to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.Type">
            <summary>
            Gets the type of adornment to use.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag">
            <summary>
            Represents a tag for a space-negotiating adornment. The tag is used to provide space
            for positioning the adornment in a view.
            </summary>
            <remarks>
            The units used in properties like <see cref="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Width"/> and <see cref="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TopSpace"/> are those used in the presentation technology.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualStudio.Text.PositionAffinity,System.Object,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag"/> with the specified properties.
            </summary>
            <param name="width">The width of the tag in pixels.</param>
            <param name="topSpace">The space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="baseline">The baseline of the space-negotiating adornment.</param>
            <param name="textHeight">The height in pixels of the text portion of the space-negotiating adornment.</param>
            <param name="bottomSpace">The space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="affinity">The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the space-negotiating adornment.</param>
            <param name="identityTag">A unique object associated with the space-negotiating adornment, used by <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.GetAdornmentBounds.</param>
            <param name="providerTag">A unique object identifying the provider of the adornment, used by <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)"/>).</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Width">
            <summary>
            Gets the width of the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TopSpace">
            <summary>
            Gets the amount of space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Baseline">
            <summary>
            Gets the baseline of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TextHeight">
            <summary>
            Gets the height of the text portion of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.BottomSpace">
            <summary>
            Gets the amount of space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Affinity">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the space-negotiating adornment.
            </summary>
            <remarks>
            This property is only used for adornments that do not replace text.
            An adornment does not replace text if its tag has a zero-length span on the view's text buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.IdentityTag">
            <summary>
            Gets a unique object associated with the space-negotiating adornment, which is used by <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.GetAdornmentBounds.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.ProviderTag">
            <summary>
            Gets a unique object that identifies the provider of the adornment.
            </summary>
            <remarks>
            This object is used to get adornments by calling <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)"/>.
            </remarks>
        </member>
    </members>
</doc>
