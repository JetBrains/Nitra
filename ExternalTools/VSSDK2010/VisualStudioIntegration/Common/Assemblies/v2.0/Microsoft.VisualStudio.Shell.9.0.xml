<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Shell.9.0</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.IEventHandler">
      <summary>Provides the methods necessary to add, remove, and test for the existence of handlers in an event handler collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.IEventHandler.AddHandler(System.String)">
      <summary>When implemented by a derived class, adds a named handler to an event handler collection.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.</returns>
      <param name="bstrEventName">The name of the handler.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.IEventHandler.GetHandledEvents">
      <summary>When implemented by a derived class, returns an enumerator over all the handlers added by successive calls to <see cref="M:Microsoft.VisualStudio.IEventHandler.AddHandler(System.String)" />.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.IEventHandler.HandlesEvent(System.String)">
      <summary>When implemented by a derived class, determines whether a named handler is in the event handler collection.</summary>
      <returns>true if the handler is in the underlying handler collection, otherwise false.</returns>
      <param name="bstrEventName">The name of the evaluated handler.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.IEventHandler.RemoveHandler(System.String)">
      <summary>When implemented by a derived class, removes a named handler from the collection of event handlers.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.</returns>
      <param name="bstrEventName">The name of the event handler to remove.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Win32Methods">
      <summary>Imports some Win32 window management functions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Win32Methods.#ctor">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Win32Methods.IsDialogMessageA(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG@)">
      <summary>Determines if a message is intended for the specified dialog box, and if so processes the message.</summary>
      <returns>true if the message has been processed, otherwise false.</returns>
      <param name="hDlg">A handle to the child window.</param>
      <param name="msg">The message in question.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Win32Methods.SetParent(System.IntPtr,System.IntPtr)">
      <summary>Changes the parent window of the specified child window.</summary>
      <returns>If the function succeeds, a handle to the previous parent window, otherwise null.</returns>
      <param name="hWnd">A handle to the child window that should receive a new parent.</param>
      <param name="hWndParent">A handle to the new parent window.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute">
      <summary>Defines the default registry root used to register VSPackage information. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute" /> object with the given registry root.</summary>
      <param name="root">The default registry root used to register VSPackage information.</param>
      <exception cref="T:System.ArgumentNullException">The constructor throws an <see cref="T:System.ArgumentNullException" /> if the root argument is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute.Root">
      <summary>Gets the value of the default registry root for the VSPackage.</summary>
      <returns>The value of the default registry root for the VSPackage.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar">
      <summary>Use this class to implement modal forms in Visual Studio. The implementation enables the form to host a Visual Studio command bar so that it participates in standard command routing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the class and sets the service provider.</summary>
      <param name="sp">The service provider that the window can subsequently query to retrieve Visual Studio services.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider,System.Windows.Forms.Control)">
      <summary>Initializes a new instance of the class and sets the service provider and the control that is contained by the form.</summary>
      <param name="sp">The service provider that the window can subsequently query to retrieve Visual Studio services.</param>
      <param name="contained">The control that is contained by the form.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider,System.Windows.Forms.Control,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Initializes a new instance <see cref="T:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar" /> with its contained control, and an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> implementation that is in addition to the one owned by the <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommandService" />.</summary>
      <param name="sp">The <see cref="T:System.IServiceProvider" />.</param>
      <param name="contained">The <see cref="T:System.Windows.Forms.Control" /> that is to be contained.</param>
      <param name="parentCommandTarget">The parent <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.CommandService">
      <summary>Returns the command service that is used to check the status or execute the commands on the toolbar.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IMenuCommandService" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.Dispose(System.Boolean)">
      <summary>Explicitly called to release resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.Microsoft#VisualStudio#Shell#Interop#IVsToolWindowToolbar#GetBorder(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Returns the border information for a tool window.</summary>
      <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
      <param name="rect">Pointer to the location and size of the tool window border.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.Microsoft#VisualStudio#Shell#Interop#IVsToolWindowToolbar#SetBorderSpace(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Stores toolbar information and resizes the main pane to leave room for the command bar.</summary>
      <returns>If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK;" /> otherwise, an error code.</returns>
      <param name="rect">The new desired bounds.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.SetSite(System.IServiceProvider)">
      <summary>Sets the site for this window.</summary>
      <param name="sp">The service provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ShowDialog">
      <summary>Shows a dialog.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.DialogResult" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>An object that represents the requested service.</returns>
      <param name="serviceType">The type of service requested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
      <summary>Filters mouse messages before they are dispatched.</summary>
      <returns>true if the message was filtered and not dispatched, false if it was dispatched.</returns>
      <param name="m">A message from the toolbar.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarHost">
      <summary>Returns the corresponding <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" />.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarID">
      <summary>Gets or sets the command ID of the toolbar that is contained in this dialog box.</summary>
      <returns>The command ID of the toolbar that is contained in this dialog box.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarLocation">
      <summary>Gets and sets the value of the enumeration that describes the toolbar location.</summary>
      <returns>The enumeration is defined as follows. Copy Codetypedef enum {VSTWT_LEFT, VSTWT_TOP, VSTWT_RIGHT, VSTWT_BOTTOM} VSTWT_LOCATION;
This corresponds to toolbar locations of left, top, right, and bottom.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind">
      <summary>An enumeration that describes dialog page apply behavior.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.Apply">
      <summary>Allows the changes to be applied</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.Cancel">
      <summary>Cancels the apply event and navigates to the page cancelling the event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.CancelNoNavigate">
      <summary>Cancels the apply event and returns the active page, not the page canceling the event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.EventSinkCollection">
      <summary>Maps objects to and from event "cookies" that represent a client's registration with an event provider. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.#ctor">
      <summary>Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Shell.EventSinkCollection" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Add(System.Object)">
      <summary>Adds an event and returns its cookie.</summary>
      <returns>The cookie of the added event.</returns>
      <param name="o">An object to be added to the event collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Clear">
      <summary>Removes all event cookies.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.EventSinkCollection.Count">
      <summary>Gets the total number of event cookies in the collection.</summary>
      <returns>The number of cookies in the collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.EventSinkCollection.Item(System.UInt32)">
      <summary>Gets or sets the specified cookie from the collection.</summary>
      <returns>The cookie.</returns>
      <param name="cookie">The cookie to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Remove(System.Object)">
      <summary>Removes the specified event cookie from the collection.</summary>
      <param name="obj">The event cookie to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.RemoveAt(System.UInt32)">
      <summary>Removes the event cookie.</summary>
      <param name="cookie">The event cookie. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.SetAt(System.UInt32,System.Object)">
      <summary>Updates the event associated with the given cookie.</summary>
      <param name="cookie">A cookie specifying an event.</param>
      <param name="value">The value to which the event sink is set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Microsoft Internal Only.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.IProfileManager">
      <summary>Interface implemented by classes supporting VSPackages by persisting their state information through the Visual Studio settings mechanism.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.LoadSettingsFromStorage">
      <summary>Reads a VSPackage's configuration from local storage (typically the registry) and updates its state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.LoadSettingsFromXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader)">
      <summary>Writes a VSPackage's configuration to disk using the Visual Studio settings mechanism when the export option of an Import/Export Settings feature available on the IDE’s Tools menu is selected by a user.</summary>
      <param name="reader">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader" /> interface provided by the environment to the VSPackage providing read access to the Visual Studio settings file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.ResetSettings">
      <summary>Resets the user settings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.SaveSettingsToStorage">
      <summary>Writes a VSPackage's configuration to local storage (typically the registry) following state update.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.SaveSettingsToXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
      <summary>Writes a VSPackage's configuration to disk using the Visual Studio settings mechanism when an import option of the Import/Export Settings command on the IDE’s Tools menu is selected by a user.</summary>
      <param name="writer">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter" /> interface provided by the environment to the VSPackage providing write access to the Visual Studio settings file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute">
      <summary>Defines the Windows Installer component ID. The component ID is used by the Windows Installer to indicate the installation path to the VSPackage.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute.#ctor(System.String)">
      <summary>This constructor creates a new MsiComponentIdAttribute object.</summary>
      <param name="id">The Windows Installer component ID. The MSI component registration ID is used to indicate the installation path to the component within the Windows Installer.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute.Id">
      <summary>The Id property returns a string containing the Windows Installer component registration ID.</summary>
      <returns>Returns a string containing the Windows Installer component registration ID.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.MsiTokenAttribute">
      <summary>Defines a token string for the MSI installer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.MsiTokenAttribute.#ctor(System.String,System.String)">
      <summary>Creates an MsiTokenAttribute object.</summary>
      <param name="name">Name of the MsiTokenAttribute.</param>
      <param name="value">Value of the MsiTokenAttribute.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.MsiTokenAttribute.Name">
      <summary>Returns the MsiTokenAttribute name.</summary>
      <returns>Returns a string containing the MsiTokenAttribute name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.MsiTokenAttribute.Value">
      <summary>Returns the MsiTokenAttribute value.</summary>
      <returns>Returns a string containing the MsiTokenAttribute value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs">
      <summary>The set of arguments passed to an <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand" /> object when the <see cref="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object)" /> function is called.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.#ctor(System.Object,System.IntPtr)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs" /> the specified in and out parameters.</summary>
      <param name="inParam">The input parameters to the command function.</param>
      <param name="outParam">A pointer to the parameter returned by the function.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.#ctor(System.Object,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.InValue">
      <summary>Gets the in parameters to the command.</summary>
      <returns>The in parameters to the command.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.Options"></member>
    <member name="P:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.OutValue">
      <summary>Gets a pointer to the parameter used as output by the command function.</summary>
      <returns>A pointer to the out parameter.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.OleMenuCommand">
      <summary>This class is an expansion of the <see cref="T:System.ComponentModel.Design.MenuCommand" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand" /> for the specified command.</summary>
      <param name="invokeHandler">The event handler called to execute the command.</param>
      <param name="id">ID of the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand" /> for the specified command.</summary>
      <param name="invokeHandler">The event handler called to execute the command.</param>
      <param name="id">ID of the command.</param>
      <param name="Text">The text of the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand" /> for the specified command with the specified invocation and status handlers.</summary>
      <param name="invokeHandler">The event handler called to execute the command.</param>
      <param name="changeHandler"></param>
      <param name="id">ID of the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand" /> for the specified command with the specified invocation and status handlers.</summary>
      <param name="invokeHandler">The event handler called to execute the command.</param>
      <param name="changeHandler"></param>
      <param name="id">ID of the command.</param>
      <param name="Text">The text of the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand" /> for the specified command with the specified pre-QueryStatus, invocation, and status handlers.</summary>
      <param name="invokeHandler">The event handler called to execute the command.</param>
      <param name="changeHandler"></param>
      <param name="beforeQueryStatus">Event handler called when a client requests the command status.</param>
      <param name="id">ID of the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand" /> for the specified command with the specified pre-QueryStatus, invocation, and status handlers.</summary>
      <param name="invokeHandler">The event handler called to execute the command.</param>
      <param name="changeHandler"></param>
      <param name="beforeQueryStatus">Event handler called when a client requests the command status.</param>
      <param name="id">ID of the command.</param>
      <param name="Text">The text of the command.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.OleMenuCommand.BeforeQueryStatus">
      <summary>Called when a client requests the status of the command.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.DynamicItemMatch(System.Int32)">
      <summary>Allows a dynamic item command to match the subsequent items in its list. </summary>
      <returns>true if the dynamic item found a match, otherwise false.</returns>
      <param name="cmdId">The command ID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object)">
      <summary>Executes the command.</summary>
      <param name="inArg">The parameter passed to the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object,System.IntPtr)">
      <summary>Executes the command.</summary>
      <param name="inArg">The parameter passed to the command.</param>
      <param name="outArg">The parameter returned by the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.MatchedCommandId">
      <summary>Gets or sets a the command ID.</summary>
      <returns>The command ID that was most recently used to match this command.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.OleStatus">
      <summary>Gets the OLE command status code for this menu item.</summary>
      <returns>The status flags that reflects the state of this menu item.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.ParametersDescription">
      <summary>Gets or sets the description of the parameters of the command.</summary>
      <returns>The description of the parameters of the command.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.Text">
      <summary>Gets or sets the text for the command.</summary>
      <returns>The text for the command.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.OleMenuCommandService">
      <summary>This class derives from the <see cref="T:System.ComponentModel.Design.MenuCommandService" /> class and implements <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />. <see cref="T:System.ComponentModel.Design.MenuCommandService" /> is the managed class used to add handlers for menu commands and to define verbs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.#ctor(System.IServiceProvider)">
      <summary>Creates a new menu command service.</summary>
      <param name="serviceProvider">The service provider that this service uses to obtain other services. If the service is being used with a designer, this should be the service provider for the designer (such as the <see cref="T:System.ComponentModel.Design.DesignSurface" /> instance).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Creates a new menu command service.</summary>
      <param name="serviceProvider">The service provider that this service uses to obtain other services. If the service is being used with a designer, this should be the service provider for the designer (such as the <see cref="T:System.ComponentModel.Design.DesignSurface" /> instance).</param>
      <param name="parentCommandTarget">Allows the service to defer command searching to a parent IOleCommandTarget if the command is not found in this object.</param>
      <exception cref="T:System.ArgumentNullException">Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="parentCommandTarget" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>Can be used to invoke any command within Visual Studio.</summary>
      <returns>true if the invocation succeeded; otherwise, false.</returns>
      <param name="commandID">The command ID of the command to search for and execute.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID,System.Object)">
      <summary>Can be used to invoke any command within Visual Studio.</summary>
      <returns>true if the invocation succeeded; otherwise, false.</returns>
      <param name="commandID">The command ID of the command to search for and execute.</param>
      <param name="arg">The optional command argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes the selected command.</summary>
      <returns>An HRESULT code indicating the success or failure of the call.  The following HRESULTs may be returned:ValueDescription<see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />The command was successfully invoked.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP" />The group guid did not match the commandID’s Guid property for any command or verb.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED" />The group was found, but there is no command or verb with an ID that matches.  This is also returned if the OleStatus property of a command that was found returns zero.</returns>
      <param name="guidGroup">System.Guid <paramref name="guidGroup" />. The menu group.  This implementation maps the group to CommandID.Guid.</param>
      <param name="nCmdId">System.UInt32 <paramref name="nCmdId" />. The ID code of the command.  This implementation maps nCmdId to CommandID.ID.</param>
      <param name="nCmdExcept">System.UInt32 <paramref name="nCmdExcept" />. Count of command options.  This implementation ignores this parameter.</param>
      <param name="pIn">System.Object[] <paramref name="pIn" />. Actual command options.  This implementation ignores this parameter.</param>
      <param name="vOut">System.IntPtr <paramref name="vOut" />. Output data for the command.  This implementation ignores this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Sets command status.</summary>
      <returns>An HRESULT code indicating the success or failure of the call.  The following HRESULTs may be returned:ValueDescription<see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />The command was successfully invoked.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP" />The group guid did not match the commandID’s Guid property for any command or verb.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED" />The group was found, but there is no command or verb with an ID that matches.  This is also returned if the OleStatus property of a command that was found returns zero.</returns>
      <param name="guidGroup">System.Guid <paramref name="guidGroup" />. The menu group.  This implementation maps the group to CommandID.Guid.</param>
      <param name="nCmdId">System.UInt32 <paramref name="nCmdId" />. The ID code of the command.  This implementation maps nCmdId to CommandID.ID.</param>
      <param name="oleCmd">Microsoft.OLE.Interop._tagOLECMD[] <paramref name="oleCmd" />. A command structure that contains data about the status of the command.</param>
      <param name="oleText">System.IntPtr<paramref name=" oleText" />. A pointer to a text BSTR.  If the command is a verb the name of the verb will be filled in here.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)">
      <summary>Called by a menu command when its status has changed.</summary>
      <param name="e">Signifies that there has been a change in <see cref="T:System.Windows.Forms.Design.MenuCommands" /> (added or removed) on the related object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommandService.ParentTarget"></member>
    <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommandService.ServiceProvider"></member>
    <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>Shows the shortcut menu with the given command ID at the given location.</summary>
      <param name="menuID">A command ID representing the shortcut menu to show.</param>
      <param name="x">The horizontal position, in screen coordinates, of the top, left corner of the shortcut menu. If the shortcut menu does not fit on the screen, the operating system relocates it to fit.</param>
      <param name="y">The vertical position, in screen coordinates, of the top, left corner of the shortcut menu. If the shortcut menu does not fit on the screen, the operating system relocates it to fit.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="menuID" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Package">
      <summary>Provides a managed implementation of the VSIP interfaces required to create a fully functional VSPackage.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Package" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.AddOptionKey(System.String)">
      <summary>Adds a user option key name into the list of option keys.</summary>
      <param name="name">The name of the option key to add. An option key name must not have any periods in it.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Package.ApplicationRegistryRoot">
      <summary>Gets the root registry key of the current Visual Studio registry hive.</summary>
      <returns>The root <see cref="T:Microsoft.Win32.RegistryKey" /> of the Visual Studio registry hive.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.CreateInstance(System.Guid@,System.Guid@,System.Type)">
      <summary>Creates the specified COM object using the Visual Studio's local registry CLSID object.</summary>
      <returns>An instance of the created object.</returns>
      <param name="clsid">The CLSID of the object to create.</param>
      <param name="iid">The interface IID the object implements.</param>
      <param name="type">The managed type of the object to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.CreateTool(System.Guid@)">
      <summary>Enables derived classes to provide an implementation if necessary.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.</returns>
      <param name="persistenceSlot">The GUID of the tool window that should be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type,System.Int32)">
      <summary>Creates a tool window of the specified type with the specified ID.</summary>
      <returns>An instance of the requested tool window.</returns>
      <param name="toolWindowType">The type of tool window to create.</param>
      <param name="id">The tool window ID. This is 0 for a single-instance tool window.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toolWindowType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> is less than 0.<paramref name="toolWindowType" /> is not derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /> type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Dispose(System.Boolean)">
      <summary>Releases the resources used by the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> object.</summary>
      <param name="disposing">true if the object is being disposed, false if it is being finalized.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.FindToolWindow(System.Type,System.Int32,System.Boolean)">
      <summary>Gets the tool window corresponding to the specified type and ID.</summary>
      <returns>An instance of the requested tool window. If <paramref name="create" /> is false and the tool window does not exist, null is returned.</returns>
      <param name="toolWindowType">The type of tool window to create.</param>
      <param name="id">The tool window ID. This is 0 for a single-instance tool window.</param>
      <param name="create">If true, the tool window is created if it does not exist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toolWindowType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toolWindowType" /> is not derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" />.<paramref name="toolWindowType" /> does not have a public constructor .</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.GetAutomationObject(System.String)">
      <summary>Gets the automation object for the VSPackage.</summary>
      <returns>An instance of the automation object, or null if no automation support is available.</returns>
      <param name="name">The name of the automation object to return. If <paramref name="name" /> is null, GetAutomationObject returns the default automation object for the VSPackage.</param>
      <exception cref="T:System.NotImplementedException">Thrown by the base implementation of GetAutomationObject.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.GetDialogPage(System.Type)">
      <summary>Gets the requested dialog page.</summary>
      <returns>An instance of the requested page.</returns>
      <param name="dialogPageType">The type of dialog page to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dialogPageType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dialogPageType" /> is not derived from <see cref="T:Microsoft.VisualStudio.Shell.DialogPage" />.<paramref name="dialogPageType" /> does not have a public constructor.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.GetGlobalService(System.Type)">
      <summary>Gets a service proffered globally by Visual Studio or one of its packages. This is the same as calling GetService() on an instance of a package that proffers no services itself.</summary>
      <returns>The service being requested if available, otherwise null.</returns>
      <param name="serviceType">The type of the service requested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.GetOutputPane(System.Guid,System.String)">
      <summary>Gets the requested output window.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> interface. Returns null in case of failure.</returns>
      <param name="page">The GUID corresponding to the pane. (See <see cref="T:Microsoft.VisualStudio.VSConstants" /> class for the GUIDs which correspond to output panes.)</param>
      <param name="caption">The caption to create if the pane does not exist.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.GetProviderLocale">
      <summary>Returns the locale associated with this service provider.</summary>
      <returns>Returns the locale identifier for the service provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.GetService(System.Type)">
      <summary>Gets type-based services from the VSPackage service container.</summary>
      <returns>An instance of the requested service, or null if the service could not be found.</returns>
      <param name="serviceType">The type of service to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Initialize">
      <summary>Called when the VSPackage is loaded by Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes a specified command or displays help for a command.</summary>
      <returns>This method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if it succeeds, otherwise an error code. If no instance of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> can be found, returns <see cref="F:Microsoft.VisualStudio.NativeMethods.OLECMDERR_E_NOTSUPPORTED" />.</returns>
      <param name="guidGroup">The GUID specifying the command group to which the command belongs.</param>
      <param name="nCmdId">The ID of the command.</param>
      <param name="nCmdExcept">A pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> structure specifying how the command should be executed.</param>
      <param name="pIn">A pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
      <param name="vOut">A pointer to a VARIANTARG structure to receive command output. Can be null. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Queries the object for the status of one or more commands generated by user interface events.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code. This method returns <see cref="F:Microsoft.VisualStudio.NativeMethods.OLECMDERR_E_NOTSUPPORTED" /> if no instance of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> can be found.</returns>
      <param name="guidGroup">The GUID of the command group to which the command belongs.</param>
      <param name="nCmdId">The ID of the command.</param>
      <param name="oleCmd">An array of OLECMD structures representing the commands being queried.</param>
      <param name="oleText">A pointer to an OLECMDTXT structure in which to return name and/or status information for a single command. Can be null to indicate that the caller does not need this information. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#OLE#Interop#IServiceProvider#QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
      <summary>Internal IServiceProvider implementation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.</returns>
      <param name="sid">GUID of the service.</param>
      <param name="iid">GUID of the requested interface</param>
      <param name="ppvObj">Pointer to the object requested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#Close">
      <summary>Closes and disposes the package.</summary>
      <returns>If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#GetAutomationObject(System.String,System.Object@)">
      <summary>Gets an automation-friendly object for this package.</summary>
      <returns>If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
      <param name="propName">String containing the automation property name.</param>
      <param name="auto">[out] Returns the automation object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#GetPropertyPage(System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE[])">
      <summary>Proffers access to the Tools menu Options and the property pages of the Customize Toolbox dialog boxes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.</returns>
      <param name="rguidPage">Unique identifier of the requested property page.</param>
      <param name="ppage">Specifies the property page whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#QueryClose(System.Int32@)">
      <summary>Called to ask the VSPackage if the Visual Studio shell can be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.</returns>
      <param name="close">Set <paramref name="canClose" /> to false if you want to prevent the shell from closing</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#ResetDefaults(System.UInt32)">
      <summary>Resets Toolbox defaults.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.</returns>
      <param name="grfFlags">Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS" /> enumeration</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes the VSPackage in the Visual Studio environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="sp">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPersistSolutionOpts#LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)">
      <summary>Loads user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPersistance">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> object.</param>
      <param name="options">User options whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPersistSolutionOpts#ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
      <summary>Reads user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pStream">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream" /> object from which the VSPackage should read the user-specific options</param>
      <param name="pszKey">Name of the stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPersistSolutionOpts#SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
      <summary>Saves user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPersistance">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPersistSolutionOpts#WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
      <summary>Writes user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pStream">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream" /> object to which the VSPackage writes the user-specific options.</param>
      <param name="pszKey">Name of the stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsToolWindowFactory#CreateToolWindow(System.Guid@,System.UInt32)">
      <summary>Creates a tool window of the specified type with the specified ID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="toolWindowType">Type of the window to be created.</param>
      <param name="id">Instance ID</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsUserSettings#ExportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
      <summary>This method implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings" /> Interface used to manage profiles and import/export settings to XML files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="strPageGuid">GUID of the page.</param>
      <param name="writer">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsUserSettings#ImportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,System.UInt32,System.Int32@)">
      <summary>Retrieves a VSPackage's configuration using the Visual Studio settings mechanism when a user selects the import option of the Import/Export Settings feature on the IDE’s Tools menu. This method is part of the implementation of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings" /> interface used to manage profiles and import/export settings to XML files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="strPageGuid">GUID of the page.</param>
      <param name="reader">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader" /> object.</param>
      <param name="flags">Values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__UserSettingsFlags" /> returned by the shell, specifying how the settings are to be processed.</param>
      <param name="restartRequired">true if the Visual Studio IDE must be restarted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsUserSettingsMigration#MigrateSettings(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.OnLoadOptions(System.String,System.IO.Stream)">
      <summary>Invoked by the package class when there are options to be read out of the solution file.</summary>
      <param name="key">The name of the option key to load.</param>
      <param name="stream">The stream to load the option data from.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.OnSaveOptions(System.String,System.IO.Stream)">
      <summary>Invoked by the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> class when there are options to be saved to the solution file. </summary>
      <param name="key">The name of the option key to save.</param>
      <param name="stream">The stream to save the option data to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader,System.Guid)">
      <summary>Parses an embedded text resource of appropriate format for information about which items should be added to the Toolbox.</summary>
      <param name="resourceData">A text reader that provides toolbox item data in the format described in Remarks.</param>
      <param name="packageGuid">The GUID of the VSPackage.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader,System.Resources.ResourceManager)">
      <summary>Parses an embedded text resource of appropriate format for information about which items should be added to the Toolbox.</summary>
      <param name="resourceData">A text reader that provides toolbox item data in the format described in Remarks.</param>
      <param name="localizedCategories">A resource manager that provides localized lookup names for the categories provided in the resource data. This parameter can be null, in which case the category names are directly used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.QueryClose(System.Boolean@)">
      <summary>Called to ask the package if the shell can be closed.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
      <param name="canClose">[out] Returns true if the shell can be closed, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.RegisterEditorFactory(Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory)">
      <summary>Registers an editor factory with Visual Studio.</summary>
      <param name="factory">The editor factory to register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="factory" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.RegisterProjectFactory(Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory)">
      <summary>Registers a project factory with Visual Studio.</summary>
      <param name="factory">The project factory to register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="factory" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.ShowOptionPage(System.Type)">
      <summary>Displays a specified tools options page.</summary>
      <param name="optionsPageType">The options page to open. The options page is identified by the GUID of the <paramref name="optionsPageType" /> object passed in.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="optionsPageType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Adds the given service to the VSPackage's service container.</summary>
      <param name="serviceType">Type of service to add.</param>
      <param name="callback">
        <see cref="T:System.ComponentModel.Design.ServiceCreatorCallback" /> that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Adds the given service to the service container by means of the specified <see cref="T:System.ComponentModel.Design.ServiceCreatorCallback" />.</summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback">
        <see cref="T:System.ComponentModel.Design.ServiceCreatorCallback" /> that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
      <param name="promote">true if this service should be added to any parent service containers; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.Object)">
      <summary>Adds the given service to the VSPackage's service container.</summary>
      <param name="serviceType">Type of service to add.</param>
      <param name="serviceInstance">Service object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.Object,System.Boolean)">
      <summary>Adds the given service to the VSPackage's service container.</summary>
      <param name="serviceType">Type of service to add.</param>
      <param name="serviceInstance">Service object.</param>
      <param name="promote">true if this service should be added to any parent service containers; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#RemoveService(System.Type)">
      <summary>Removes the given service type from the service container.</summary>
      <param name="serviceType">The type of service to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#RemoveService(System.Type,System.Boolean)">
      <summary>Removes the given service type from the service container, and optionally promotes the removal of the service to parent service containers.</summary>
      <param name="serviceType">The type of service to remove.</param>
      <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>An object representing the requested service, or null if none can be found.</returns>
      <param name="serviceType">The type of the service to get.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized">
      <summary>Event generated whenever Visual Studio initializes its Toolbox.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Package.ToolboxUpgraded">
      <summary>Event generated whenever Visual Studio upgrades its Toolbox.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Package.UserDataPath">
      <summary>Gets the path to user data storage for Visual Studio.</summary>
      <returns>The path to user data storage.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Package.UserLocalDataPath">
      <summary>Gets the path to local user data storage for Visual Studio.</summary>
      <returns>The path to local user data storage.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Package.UserRegistryRoot">
      <summary>Gets a registry key that can be used to store user data.</summary>
      <returns>A <see cref="T:Microsoft.Win32.RegistryKey" /> that can be used to store user data.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Package.Zombied">
      <summary>Gets a value indicating whether the package in the process of shutdown.</summary>
      <returns>true if the package is in the process of shutdown, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.PackageUtilities">
      <summary>A set of static utilities for filenames, paths, enumeration/string conversions, images, and other functions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ContainsInvalidFileNameChars(System.String)">
      <summary>Determines whether or not a string contains characters that are invalid for file names or paths.</summary>
      <returns>true if the string contains invalid characters, false if the string is a valid file name or path.</returns>
      <param name="name">The file name or path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)">
      <summary>Converts a string to an enumeration using a converter.</summary>
      <returns>The enumeration value.</returns>
      <param name="value">The string value.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> of the string.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)">
      <summary>Converts a string to an enumeration type.</summary>
      <returns>The enumeration type.</returns>
      <param name="value">The enumeration to which the string is to be converted.</param>
      <param name="typeToConvert">The value to convert.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object describing the culture to use to read localized strings.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CopyUrlToLocal(System.Uri,System.String)">
      <summary>Copies the specified file to the local project directory.  </summary>
      <param name="uri">The <see cref="T:System.Uri" /> to copy.</param>
      <param name="local">The local resource to copy it to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CreateCAUUIDFromGuidArray(System.Guid[])">
      <summary>Creates a CAUUID from a GUID array. </summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.OLE.Interop.CAUUID" /> structure.</returns>
      <param name="guids">An array of GUIDs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.EnsureOutputPath(System.String)">
      <summary>Creates the directories necessary for the given path.</summary>
      <param name="path">The path to create.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetImageList(System.IO.Stream)">
      <summary>Creates an image list from the specified stream.</summary>
      <returns>An <see cref="T:System.Windows.Forms.ImageList" /> containing a series of 16 by 16 pixel bitmaps with a magenta background color.</returns>
      <param name="imageStream">The stream from which to extract the bitmaps.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetImageList(System.Object)">
      <summary>Creates a list of bitmaps from the resource handle.</summary>
      <returns>An <see cref="T:System.Windows.Forms.ImageList" /> containing a series of bitmaps.</returns>
      <param name="imageListAsPointer">The handle of a resource.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetImageList(System.Reflection.Assembly,System.String[])">
      <summary>Creates a list of bitmaps from the specified assembly and resource names.</summary>
      <returns>An <see cref="T:System.Windows.Forms.ImageList" /> containing a series of 16 by 16 pixel bitmaps.</returns>
      <param name="assembly">The assembly from which to get the resources.</param>
      <param name="resourceNames">An array of resource names (representing bitmaps) in the assembly.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetIntPointerFromImage(System.Drawing.Image)">
      <summary>Gets a pointer from a bitmap image.</summary>
      <returns>An integer which serves as an <see cref="T:System.IntPtr" />.</returns>
      <param name="image">
        <see cref="T:System.Drawing.Image" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetPathDistance(System.Uri,System.Uri)">
      <summary>Calculates the distance between two paths.</summary>
      <returns>The relative path.</returns>
      <param name="uriBase">The base <see cref="T:System.Uri" />.</param>
      <param name="uriRelativeTo">The relative <see cref="T:System.Uri" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetSystemAssemblyPath">
      <summary>Gets the path of system assemblies.</summary>
      <returns>The base directory for system assemblies.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.IsFileNameInvalid(System.String)">
      <summary>Determines whether or not the specified file name is invalid.</summary>
      <returns>true if the file name is invalid, false if it is valid.</returns>
      <param name="fileName">The name of the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.MakeRelative(System.String,System.String)">
      <summary>Returns a path for the second file that is relative to the first.</summary>
      <returns>The relative path of the second file.</returns>
      <param name="filename">The base path.</param>
      <param name="filename2">The relative path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.MakeRelativeIfRooted(System.String,Microsoft.VisualStudio.Shell.Url)">
      <summary>Returns a relative path if the specified file path is absolute and if it is in the same folder as the URL or in a child folder of the URL.</summary>
      <returns>The relative path to the file.</returns>
      <param name="fileName">The path to convert.</param>
      <param name="url">The base URL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)">
      <summary>Returns a string from an enumeration value.</summary>
      <returns>A string value derived from the enumeration.</returns>
      <param name="enumValue">The enumeration value.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> of the string.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute">
      <summary>The class representing the attribute describing how to convert property values on property pages in a package. Use this attribute rather than <see cref="T:System.ComponentModel.TypeConverterAttribute" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute.#ctor(System.Type)">
      <summary>Creates a new instance of the class for the specified type.</summary>
      <param name="t">The type to convert.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute.ConverterType">
      <summary>The type that is to be converted.</summary>
      <returns>
        <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute">
      <summary>This attribute declares that the VSPackage provides an editor factory.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.#ctor(System.Type,System.Int16)">
      <summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute" /> object.</summary>
      <param name="factoryType">The object type that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory" />.</param>
      <param name="nameResourceID">The resource ID in the unmanaged resource file that contains the localized name of the editor factory.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.FactoryType">
      <summary>Gets the editor factory type.</summary>
      <returns>The editor factory type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.NameResourceID">
      <summary>Gets resource ID.</summary>
      <returns>Returns the editor factory esource ID specified in the resource file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context.</summary>
      <param name="context">
        <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />. Contains the location where the registration information should be placed, and also contains information about the editor type being registered, and path information.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.TrustLevel">
      <summary>Gets or sets the trust level for the editor.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSEDITORTRUSTLEVEL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to un-register this attribute with the given context.</summary>
      <param name="context">
        <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />. Contains the location where the registration information should be placed, and also contains information about the editor type being registered, and path information.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute">
      <summary>Provides a key binding table GUID. By putting this attribute on your <see cref="T:Microsoft.VisualStudio.Shell.Package" />-derived class or class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" /> you will declare that it has the given key binding (KEYBINDINGS_SECTION – KEYBINDINGS_END) table in its Command Table Configuration (.Ctc) Files.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.#ctor(System.String,System.Int16)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute" /> for the specified table and name resource ID.</summary>
      <param name="tableGuid">The GUID of the key binding table in the Command Table Configuration (.Ctc) Files.</param>
      <param name="nameResourceID">The resource ID in the unmanaged resource file that contains the localized name of the key binding table. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.AllowNavKeyBinding">
      <summary>Gets or sets whether the user is allowed to bind new commands to navigation keys.</summary>
      <returns>true if the user is allowed to bind new commands to navigation keys, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.NameResourceID">
      <summary>Gets the name resource ID.</summary>
      <returns>The name resource ID</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.TableGuid">
      <summary>Gets the GUID of the key binding table.</summary>
      <returns>The GUID of the key binding table.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute">
      <summary>Informs Visual Studio about a language service property page.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute" /> for the specified page.</summary>
      <param name="pageType">The type of the option page.</param>
      <param name="languageName">The language name.</param>
      <param name="category">The option page category.</param>
      <param name="pageName">The caption of the option page.</param>
      <param name="pageNameResourceId">The resource ID of the page.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.LanguageName">
      <summary>Gets the name of the language.</summary>
      <returns>The name of the language. This is the same string that was passed to the class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.PageGuid">
      <summary>Gets the GUID of the option page.</summary>
      <returns>The GUID of the option page.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Creates all the registry keys and entries as specified by the class constructor.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> object used to manage registry keys.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes all of the registry keys and entries.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> object used to manage registry keys.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute">
      <summary>Associates a file extension with a particular language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute" /> attribute, using the specified language service GUID.</summary>
      <param name="languageServiceGuid">[in] A string containing the GUID of the language service.</param>
      <param name="extension">[in] A string containing the file extension to associate with the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute" /> attribute, using the type of your language service class.</summary>
      <param name="languageService">[in] The type of the language service class.</param>
      <param name="extension">[in] A string containing the file extension to associate with the language service.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Extension">
      <summary>Returns the associated file extension.</summary>
      <returns>Returns the string containing the file extension that was passed to the constructor of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute" /> class.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.LanguageService">
      <summary>Returns the language GUID.</summary>
      <returns>Returns a <see cref="T:System.Guid" /> object containing the GUID of the language service that was passed to the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute" /> class constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Puts the file extension and language service GUID into the registry.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> object used to create registry keys and to log progress.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the file extension and language service GUID from the registry.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> object used to remove registry keys and to log progress.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute">
      <summary>Informs Visual Studio that a VSPackage provides a language service. Used with the managed package framework (MPF).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.#ctor(System.Object,System.String,System.Int32)">
      <summary>Initializes a new instance of the Shell.ProvideLanguageServiceAttribute class.</summary>
      <param name="languageService">[in] This is either a string containing a GUID or a type representing the class that implements the language service. The language service GUID is derived from this string or type.</param>
      <param name="strLanguageName">[in] The name of the language. This name is used in the registry for registry key and entry names.</param>
      <param name="languageResourceID">[in] The resource ID for the localized version of the language name. This is used to present the language name in dialog boxes and other user interface elements.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.AutoOutlining">
      <summary>Determines if the language service supports automatic outlining.</summary>
      <returns>Returns true if the language service supports automatic outlining; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.CodeSense">
      <summary>Determines if the language service supports IntelliSense operations.</summary>
      <returns>Returns true if the language service supports IntelliSense operations; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.CodeSenseDelay">
      <summary>Determines the amount of time before a parse operation is started to support an IntelliSense operation.</summary>
      <returns>Returns the number of milliseconds delay before a parse is started.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DebuggerLanguageExpressionEvaluator">
      <summary>Determines the expression evaluator that is used for evaluating expressions.</summary>
      <returns>Returns a string containing the GUID of an expression evaluator; otherwise, returns a null value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DefaultToInsertSpaces">
      <summary>Determines the default setting for the Insert spaces option in the Options dialog box for a language service.</summary>
      <returns>Returns true if the language service initially uses spaces for formatting; otherwise, returns false to indicate the language service uses tabs.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DefaultToNonHotURLs">
      <summary>Determines the initial setting of the Enable single-click URL navigation option in the Options dialog box.</summary>
      <returns>Returns true if the Enable single-click URL navigation should be turned off; otherwise, returns false, the option is initially turned on.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableAdvancedMembersOption">
      <summary>Determines whether the Hide Advanced Members option is enabled in the Options dialog box.</summary>
      <returns>Returns true if the Hide Advanced Members option is enabled; otherwise, returns false. </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableAsyncCompletion">
      <summary>Determines whether the language supports background parsing.</summary>
      <returns>Returns true if background parsing is allowed; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableCommenting">
      <summary>Determines whether the language service can comment and uncomment source code using a single command.</summary>
      <returns>Returns true if commenting is supported; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableFormatSelection">
      <summary>Determines if the language service supports automatic formatting of the source code.</summary>
      <returns>Returns true if formatting is supported; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableLineNumbers">
      <summary>Determines if the Line numbers option can be selected in the Options dialog box.</summary>
      <returns>Returns true if the Line numbers option is enabled for use; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.HideAdvancedMembersByDefault">
      <summary>Determines the initial state of the Hide Advanced Members option in the Options dialog box.</summary>
      <returns>Returns true if the Hide Advanced Members is initially selected; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageName">
      <summary>Returns the name of the language.</summary>
      <returns>Returns a string containing the name of the language. This is the same string that was passed to the class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageResourceID">
      <summary>Returns the resource ID used to obtain the localized version of the language name.</summary>
      <returns>Returns a number representing the resource ID. This is the same value that was passed to the class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageServiceSid">
      <summary>Returns the GUID of the language service.</summary>
      <returns>Returns the GUID of the language service. This is the value that was derived from the object passed to the class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MatchBraces">
      <summary>Determines if the language service supports matching language pairs.</summary>
      <returns>Returns true if matching language pairs is supported; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MatchBracesAtCaret">
      <summary>Determines if a language service supports matching language pairs while typing.</summary>
      <returns>Returns true if language pairs can be matched while typing; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MaxErrorMessages">
      <summary>Determines the maximum number of errors message that a language service can report for a parsing operation.</summary>
      <returns>Returns a number indicating the maximum number of errors that can be reported.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.QuickInfo">
      <summary>Determines if the language service supports the IntelliSense Quick Info.</summary>
      <returns>Returns true if the IntelliSense Quick Info is supported; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Creates all of the registry keys and entries as specified by the class constructor.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> object used to manage registry keys.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.RequestStockColors">
      <summary>Determines if the language service is using the built-in colorable items as supplied by Visual Studio.</summary>
      <returns>Returns true if the language service uses the built-in colorable items; otherwise, returns false, indicating the language service is supplying custom colorable items.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowCompletion">
      <summary>Determines if the Statement completion options are enabled in the Options dialog box.</summary>
      <returns>Returns true if the Statement completion options are enabled; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowDropDownOptions">
      <summary>Determines if the Navigation bar option is enabled in the Options dialog box.</summary>
      <returns>Returns true if the Navigation bar option is to be enabled; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowHotURLs">
      <summary>Determines if URLs are displayed in such a way as to show they can be clicked. This option is not used.</summary>
      <returns>Returns true if URLs are to be displayed "hot" or clickable; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowMatchingBrace">
      <summary>Determines if the matching language pair is shown in the status bar.</summary>
      <returns>Returns true if the matching language pair is shown in the status bar; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowSmartIndent">
      <summary>Determines if the Smart Indenting option is enabled in the Options dialog box.</summary>
      <returns>Returns true if the Smart Indenting option is enabled; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.SingleCodeWindowOnly">
      <summary>Determines if the Window -&gt; New Window command is disabled for a language service.</summary>
      <returns>Returns true if the Window -&gt; New Window command is disabled; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.SupportCopyPasteOfHTML">
      <summary>Determines if the language service supports the clipboard format HTML for copy and paste operations.</summary>
      <returns>Returns true if the HTML clipboard format is supported, otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes all of the registry keys and entries as specified by the class constructor.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> object used to manage registry keys.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute">
      <summary>This attribute provides a package load key for your package.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int16)">
      <summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute" />.</summary>
      <param name="minimumEdition">The minimum edition of Visual Studio on which the VSPackage is loaded. This must be the literal edition value provided by Microsoft when obtaining your Package Load Key (PLK).</param>
      <param name="productVersion">The version of the product that this VSPackage implements.</param>
      <param name="productName">Name of the product that this VSPackage delivers. Products comprised of multiple VSPackages each need their own PLK.</param>
      <param name="companyName">VSIP Partner/creator of the VSPackage. Must exactly match the name you provided to Microsoft when you registered for a PLK. <paramref name="companyName" /> is case-sensitive.</param>
      <param name="resourceId">Resource ID for VSPackage load key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="minimumEdition, productVersion, productName " />or<paramref name=" companyName " />are null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.CompanyName">
      <summary>Returns a string containing the CompanyName.</summary>
      <returns>The name of your company.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.MinimumEdition">
      <summary>The MinimumEdition property returns a string containing the minimum edition of Visual Studio needed to load your VSPackage.</summary>
      <returns>The minimum edition of Visual Studio needed to load your VSPackage.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ProductName">
      <summary>The ProductName property returns a string containing the name of your VSPackage.</summary>
      <returns>The name of your VSPackage.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ProductVersion">
      <summary>The ProductVersion attribute returns a string containing the version number of your VSPackage.</summary>
      <returns>The version number of your VSPackage.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Returns the registry key name for this package's load key information.</summary>
      <returns>The Registry Key name for the load key information of the VSPackage.</returns>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ResourceId">
      <summary>Gets resource ID for the Package Load Key.</summary>
      <returns>The resource ID for the Package Load Key.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.ProfileMigrationType"></member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute">
      <summary>Registers a VSPackage as providing one or more dialog pages in the Customize Toolbox dialog page of the Visual Studio IDE.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute" />, using the type of the class implementing the Customize Toolbox dialog page, and a resource ID.</summary>
      <param name="pageType">[in] The <see cref="T:System.Type" /> of the class implementing the Customize Toolbox dialog page. This type must derive from the <see cref="T:Microsoft.VisualStudio.Shell.DialogPage" /> class.</param>
      <param name="nameResourceID">[in] The native resource ID in a VSPackage's satellite dll containing the name for the tab hosting this Customize Toolbox dialog page.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16,System.Int16)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute" />, using the type of the class implementing the Customize Toolbox dialog page, a resource ID, and a page order.</summary>
      <param name="pageType">[in] The type of the class implementing the Customize Toolbox dialog page. This type must derive from the <see cref="T:Microsoft.VisualStudio.Shell.DialogPage" /> class.</param>
      <param name="nameResourceID">[in] The native resource ID in a VSPackage's satellite dll containing the name for the tab of hosting this Customize Toolbox dialog page.</param>
      <param name="pageOrder">[in] The Customize Toolbox dialog page placement in the pages of the Visual Studio Customize Toolbox Dialog. A value of 0 indicates that no order is requested. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16,System.Int16,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute" />, using the <see cref="T:System.Type" /> of the class implementing the Customize Toolbox dialog page, a resource ID, a page order, and a help string.</summary>
      <param name="pageType">[in] The type of the class implementing the Customize Toolbox dialog page. This type must derive from the <see cref="T:Microsoft.VisualStudio.Shell.DialogPage" /> class.</param>
      <param name="nameResourceID">[in] The native resource ID in a VSPackage's satellite dll containing the name for the tab of hosting this Customize Toolbox dialog page.</param>
      <param name="pageOrder">[in] The Customize Toolbox dialog page placement in the pages of the Visual Studio Customize Toolbox Dialog box. A value of zero indicates that no order is requested. </param>
      <param name="helpKeyword">[in] A help keyword used by the help system to find the correct help topic information.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.HelpKeyword">
      <summary>Gets a help keyword associated with the Customize Toolbox dialog page.</summary>
      <returns>The help keyword used to obtain information about the Customize Toolbox dialog page.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.PageOrder">
      <summary>Gets the page order requested for the Customize Toolbox dialog page</summary>
      <returns>The page order requested for the Customize Toolbox dialog page.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the toolbox page.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.TypeId">
      <summary>Gets the instance of the class implementing the Customize Toolbox dialog page.</summary>
      <returns>The current instance of the class implementing the Customize Toolbox dialog page.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the toolbox page registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideViewAttribute">
      <summary>This attribute declares that an editor factory class offers a particular logical view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideViewAttribute.#ctor(Microsoft.VisualStudio.Shell.LogicalView,System.String)">
      <summary>Creates a new attribute.</summary>
      <param name="logicalView">An enumeration of the kinds of logical views available.</param>
      <param name="physicalView">The GUID of the physical view. This can be null to indicate the default physical view.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideViewAttribute.LogicalView">
      <summary>Gets the logical view in this attribute.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.LogicalView" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideViewAttribute.PhysicalView">
      <summary>Returns the physical view that is mapped to the logical view.</summary>
      <returns>
        <see cref="P:Microsoft.VisualStudio.Shell.ProvideViewAttribute.PhysicalView" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute">
      <summary>See <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute" />. Registers a file extension with a given editor factory. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.#ctor(System.Object,System.String,System.Int32)">
      <summary>Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute" /> for the supplied factory type and extension.</summary>
      <param name="factoryType">One of following types:The type of the editor factory expressed as a string.The GUID of the editor factory.The type of the editor factory.</param>
      <param name="extension">The file extension to associate with the editor factory. This extension should include the prefix “.”.</param>
      <param name="priority">The priority of this editor factory. Editors with higher priority numbers are given a chance to read a file first. Upon failure, the next editor in priority order is used.</param>
      <exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException" /> if:Factory GUID value passed in <paramref name="factoryType" /> is null.<paramref name="extension" /> is null.</exception>
      <exception cref="T:System.ArgumentException">This method throws an <see cref="T:System.ArgumentException" /> if:The factory GUID string cannot be converted to a GUID object. Extension does not begin with a “.”.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.EditorFactoryNotify">
      <summary>Gets or sets whether or not to create the EditorFactoryNotify registry key on registration.</summary>
      <returns>true if the EditorFactoryNotify registry key should be created, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Extension">
      <summary>Gets the file extension of the file.</summary>
      <returns>The file extension for this editor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Factory">
      <summary>Gets the editor factory GUID.</summary>
      <returns>The GUID of the editor factory.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.NameResourceID">
      <summary>Gets or sets the name resource ID.</summary>
      <returns>The name resource ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Priority">
      <summary>Gets the priority of this extension registration.</summary>
      <returns>The priority for this editor for its file extension.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.ProjectGuid">
      <summary>Gets or sets the project GUID.</summary>
      <returns>The project GUID.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the editor extension.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of a registry key.</param>
      <exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.TemplateDir">
      <summary>Gets or sets the template directory.</summary>
      <returns>The template directory.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the editor extension registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of a registry key.</param>
      <exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException" /> if the <paramref name="context" /> argument is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute">
      <summary>Registers a Package load key with the VSPackage. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int16)">
      <summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute" />.</summary>
      <param name="minimumEdition">The minimum edition of Visual Studio .NET needed to load the VSPackage.</param>
      <param name="productVersion">The version number of the VSPackage.</param>
      <param name="productName">The name of the VSPackage.</param>
      <param name="companyName">The name of your company.</param>
      <param name="resourceId">The resource ID for the VSPackage load key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="minimumEdition, productVersion, productName " />or<paramref name=" companyName " />are null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.CompanyName">
      <summary>The CompanyName property returns a string containing the name of your company.</summary>
      <returns>The name of your company.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.MinimumEdition">
      <summary>The MinimumEdition property returns a string containing the minimum edition of Visual Studio needed to load your VSPackage.</summary>
      <returns>The minimum edition of Visual Studio needed to load your VSPackage.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ProductName">
      <summary>The ProductName property returns a string containing the name of your VSPackage.</summary>
      <returns>The name of your VSPackage.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ProductVersion">
      <summary>The ProductVersion attribute returns a string containing the version number of your VSPackage.</summary>
      <returns>The version number of your VSPackage.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Retrieves the registry key name for the load key information of the VSPackage.</summary>
      <returns>The Registry Key name for the load key information of the VSPackage.</returns>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ResourceId">
      <summary>Gets resource ID for the Package Load Key.</summary>
      <returns>The resource ID for the Package Load Key.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RunningDocumentInfo">
      <summary>Represents information about a document in the <see cref="T:Microsoft.VisualStudio.Shell.RunningDocumentTable" />. It includes all the information returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.DocData">
      <summary>The document object in the Running Document Table (RDT).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.EditLocks">
      <summary>The number of edit locks held on the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.Flags">
      <summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> set on the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.Hierarchy">
      <summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy node that owns the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.ItemId">
      <summary>The item ID of the node that holds the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.Moniker">
      <summary>The absolute path of the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.ReadLocks">
      <summary>The number of read locks held on the document.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Task">
      <summary>An implementation of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem" />, used to modify the appearance and functionality of a task in the task list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Task" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.#ctor(System.Exception)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Task" /> for the supplied exception.</summary>
      <param name="error">The <see cref="T:System.Exception" /> used to create the task.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.CanDelete">
      <summary>Gets or sets whether or not the task can be deleted.</summary>
      <returns>true if the task can be deleted, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.Category">
      <summary>Gets or sets the task's category.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.TaskCategory" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.Checked">
      <summary>Gets or sets whether not the task's check box is currently selected or cleared.</summary>
      <returns>true if the task is checked, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.Column">
      <summary>Gets or sets the column number within the file associated with the task.</summary>
      <returns>The column number of the task.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Task.contextNameKeyword">
      <summary>Represents the keyword for the user context. This field is constant.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Task.Deleted">
      <summary>Handles <see cref="M:Microsoft.VisualStudio.Shell.Task.OnDeleted(System.EventArgs)" /> events.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.Document">
      <summary>Gets or sets the file associated with the task.</summary>
      <returns>The name of the file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.GetUserContext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext@)">
      <summary>Creates a new user context.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppctx">[out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> that has been created.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Task.Help">
      <summary>Handles <see cref="M:Microsoft.VisualStudio.Shell.Task.OnHelp(System.EventArgs)" /> events.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.HelpKeyword">
      <summary>Gets or sets the Help keyword associated with the task.</summary>
      <returns>The Help keyword.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.ImageIndex">
      <summary>Gets or sets the index of the image associated with the task.</summary>
      <returns>The index of the image associated with the task.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.IsCheckedEditable">
      <summary>Gets or sets whether or not it is possible to edit the checked state of the task.</summary>
      <returns>true if it is possible to edit the checked state of the task, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.IsPriorityEditable">
      <summary>Gets or sets whether or not it is possible to edit the priority of a task.</summary>
      <returns>true if it is possible to edit the priority of a task, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.IsTextEditable">
      <summary>Gets or sets whether or not it is possible to edit the description of a task.</summary>
      <returns>true if it is possible to edit the description of a task, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.Line">
      <summary>Gets or sets the line number of the file associated with the task.</summary>
      <returns>The line number of the file associated with the task.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#CanDelete(System.Int32@)">
      <summary>Gets whether or not it is possible to delete the task.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="fdelete">[out] Returns true if it is possible to delete the task, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#Category(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
      <summary>Sets the task category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cat">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" /> objects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#Column(System.Int32@)">
      <summary>Gets the column number of the file associated with the task.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="col">[out] Returns the column number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#Document(System.String@)">
      <summary>Gets the name of the file associated with the task.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="doc">[out] Returns the name of the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#get_Checked(System.Int32@)">
      <summary>Determines whether the task item's check box is currently selected or cleared.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="f">[out] Returns true if the check box is selected, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#get_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])">
      <summary>Gets the priority of the task.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pri">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" /> objects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#get_Text(System.String@)">
      <summary>Gets the description of the task.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="text">[out] The description of the task.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#HasHelp(System.Int32@)">
      <summary>Determines whether or not the task has associated help.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fHelp">[out] Returns true if there is help associated with the task, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#ImageListIndex(System.Int32@)">
      <summary>Gets the index of the image associated with the task.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[out] The index of the associated image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#IsReadOnly(Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD,System.Int32@)">
      <summary>Determines whether or not the specified task field is read-only.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="field">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD" />.</param>
      <param name="fReadOnly">[out] Returns true if the field is read-only, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#Line(System.Int32@)">
      <summary>Gets the line number of the file associated with the task.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="line">[out] Returns the line number of the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#NavigateTo">
      <summary>Opens a file associated with a task and moves to the appropriate position in the file. </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#NavigateToHelp">
      <summary>Opens the Help resource associated with a task.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#OnDeleteTask">
      <summary>Raised when a task has been deleted.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#OnFilterTask(System.Int32)">
      <summary>Raised when a task has been filtered into or out of a view.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="f">If true, the task has become visible, otherwise it has become invisible.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#put_Checked(System.Int32)">
      <summary>Sets whether a task item's check box is selected or cleared.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="f">true if the check box is selected, false if it is cleared.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#put_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY)">
      <summary>Sets the priority level of a task item. </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pri">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#put_Text(System.String)">
      <summary>Sets the description of the task.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="t">The description of the task.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#SubcategoryIndex(System.Int32@)">
      <summary>Gets the index of the task in the subcategory list.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="index">[out] Returns the index.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Task.Navigate">
      <summary>Handles <see cref="M:Microsoft.VisualStudio.Shell.Task.OnNavigate(System.EventArgs)" /> events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.OnDeleted(System.EventArgs)">
      <summary>Raised when the task has been deleted.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.OnHelp(System.EventArgs)">
      <summary>Raised when the user requests Help; for example by right-clicking and selecting Show Error Help.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.OnNavigate(System.EventArgs)">
      <summary>Raised when the user attempts to navigate to the task's location in the file, for example by double-clicking on the task.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Task.OnRemoved(System.EventArgs)">
      <summary>Raised when a task has been removed from the task list.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.Priority">
      <summary>Gets or sets the priority of a task.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.TaskPriority" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Task.Removed">
      <summary>Handles <see cref="M:Microsoft.VisualStudio.Shell.Task.OnRemoved(System.EventArgs)" /> events.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.SubcategoryIndex">
      <summary>Gets or sets the index of the subcategory of the task.</summary>
      <returns>The index of the subcategory of a task.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Task.Text">
      <summary>Gets or sets the description of a task.</summary>
      <returns>The description of a task.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ToolWindowOrientation">
      <summary>This enumeration provides a number of possible tool window orientations with respect to a docking window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.none">
      <summary>No tool window orientation indicated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Top">
      <summary>Tool window initially oriented against the top of the docking window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Left">
      <summary>Tool window initially oriented to the left of the docking window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Right">
      <summary>Tool window initially oriented to the right of the docking window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Bottom">
      <summary>Tool window initially oriented against the bottom of the docking window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ToolWindowPane">
      <summary>A default implementation for a tool window. It can be subclassed to implement a customized tool window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.#ctor(System.IServiceProvider)">
      <summary>Initializes an instance of this class.</summary>
      <param name="provider">The single constructor argument is a service provider that the created window can use to obtain services.  This parameter must not be nullbecause the tool window cannot add itself to the shell.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.BitmapIndex">
      <summary>Gets or sets the index of the image in the bitmap strip to use for the window frame icon.</summary>
      <returns>The index of the image to use for the window frame icon.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.BitmapResourceID">
      <summary>Gets or sets the resource ID for the bitmap strip from which to take the window frame icon.</summary>
      <returns>The resource ID for the bitmap strip.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Caption">
      <summary>Gets or sets the caption for the tool window.</summary>
      <returns>The caption of the tool window.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Frame">
      <summary>Gets or sets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> that hosts the ToolWindowPane.</summary>
      <returns>
        <see cref=":Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.GetIVsWindowPane">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane" /> that is associated with the tool window.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnToolBarAdded">
      <summary>Called when a toolbar is added to the tool window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnToolWindowCreated">
      <summary>This method can be overridden by the derived class to execute any code that must run after the creation of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Package">
      <summary>Gets or sets the package that owns the tool window.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Package" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolBar">
      <summary>Gets or sets the <see cref="T:System.ComponentModel.Design.CommandID" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.CommandID" /> if the tool window has a toolbar; otherwise, null.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolBarLocation">
      <summary>Gets or sets the location of the toolbar in the tool window.</summary>
      <returns>A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolClsid">
      <summary>Gets or sets the CLSID of a tool that should be used for this tool window.</summary>
      <returns>The CLSID of the tool.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.VSRegistry">
      <summary>Provides utility functions for discovering the registry hive under which Visual Studio is currently running.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VSRegistry.RegistryRoot(Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType)">
      <summary>Represents the root of the registry hive under which Visual Studio is currently running, in the specified part of the registry.</summary>
      <param name="registryType">A <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType" /> enumeration specifying the part of the registry.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VSRegistry.RegistryRoot(Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType,System.Boolean)">
      <summary>Represents the root of the registry hive under which Visual Studio is currently running, in the specified part of the registry.</summary>
      <param name="registryType">A <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType" /> enumeration specifying the part of the registry.</param>
      <param name="writable">Whether or not the root is writable</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VSRegistry.RegistryRoot(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType,System.Boolean)">
      <summary>Represents the root of the registry hive under which Visual Studio is currently running, in the specified part of the registry.</summary>
      <param name="provider">The current <see cref="T:System.IServiceProvider" />.</param>
      <param name="registryType">A <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType" /> enumeration specifying the part of the registry.</param>
      <param name="writable">Whether or not the root is writable.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.VsShellUtilities">
      <summary>Provides static helper methods to use with the Visual Studio shell.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.EmptyTaskList(System.IServiceProvider)">
      <summary>Empties the task list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetDebugMode(System.IServiceProvider)">
      <summary>Gets the current debug mode of the shell, for example, design mode, running mode, or break mode.</summary>
      <returns>One of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DBGMODE" /> values.</returns>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetHierarchy(System.IServiceProvider,System.Guid)">
      <summary>Gets the hierarchy node that is specified by the project GUID.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project.</returns>
      <param name="site">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="projectGuid">The GUID of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetMiscellaneousProject(System.IServiceProvider)">
      <summary>Gets the miscellaneous project from the current solution.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3" /> interface of the miscellaneous project.</returns>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetMiscellaneousProject(System.IServiceProvider,System.Boolean)">
      <summary>Returns the miscellaneous project in a solution.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3" /> interface of the miscellaneous project.</returns>
      <param name="provider">
        <see cref="T:System.IServiceProvider" /> object used to retrieve the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution" /> object.</param>
      <param name="create">true if the project should be created; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetOutputWindowPane(System.IServiceProvider,System.Guid)">
      <summary>Gets the output window pane that is specified by the GUID.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> interface that is specified by the GUID.</returns>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="guidPane">The GUID of the output window pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetProject(System.IServiceProvider,System.String)">
      <summary>Returns a project for the specified document.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that contains the document.</returns>
      <param name="site">The <see cref="T:System.IServiceProvider" /> object that is used to retrieve the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution" /> object.</param>
      <param name="moniker">The unique identifier of the document in the project system.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetRDTDocumentInfo(System.IServiceProvider,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@,System.UInt32@)">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData" /> interface and a document cookie from the running document table for the specified document.</summary>
      <param name="site">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="documentName">The moniker of the file.</param>
      <param name="hierarchy">[out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that containa the document.</param>
      <param name="itemid">[out] The item ID of the document.</param>
      <param name="persistDocData">[out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData" /> interface for the document.</param>
      <param name="docCookie">[out] The identifier of the document that is held by the running document table.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetRunningDocumentContents(System.IServiceProvider,System.String)">
      <summary>Gets the text of the specified file, if it exists in the running document table.</summary>
      <returns>The text of the file.</returns>
      <param name="site">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="path">The absolute path of the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTaskItems(System.IServiceProvider)">
      <summary>Gets a list of tasks.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2" /> of the task items.</returns>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTextView(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Gets the text view in the specified window frame.</summary>
      <returns>The text view in an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object, or null if the window frame is a code window that is not implemented as a text view.</returns>
      <param name="windowFrame">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> that contains the text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)">
      <summary>Gets a window for the given GUID.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow" />.</returns>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="guidPersistenceSlot">The GUID of the hierarchy window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetWindowObject(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Gets the window that exists in the specified window frame.</summary>
      <returns>The <see cref="T:EnvDTE.Window" />, if there is an object of that type in the frame; otherwise, null.</returns>
      <param name="windowFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface for the window frame.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsDocumentOpen(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Determines whether the specified document is open.</summary>
      <returns>true if the document is open in the given logical view. If <paramref name="logicalView" /> is Guid.Empty, then this method returns true if any view is open; otherwise, false.</returns>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="fullPath">The full path to the document.</param>
      <param name="logicalView">The GUID of the logical view.</param>
      <param name="hierarchy">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that contains the document.</param>
      <param name="itemID">[out] Returns the item ID of the document.</param>
      <param name="windowFrame">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> in which the document is open.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsInAutomationFunction(System.IServiceProvider)">
      <summary>Determines whether the extensibility object is currently executing an automation operation.</summary>
      <returns>true if the extensibility object is executing an automation operation; otherwise, false.</returns>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsSolutionBuilding(System.IServiceProvider)">
      <summary>Determines whether the build manager is busy.</summary>
      <returns>true if the build manager is building or deploying the built application; otherwise, false.</returns>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsVisualStudioInDesignMode(System.IServiceProvider)">
      <summary>Determines whether Visual Studio is in design mode (as opposed to run mode or debug mode).</summary>
      <returns>true if Visual Studio is in design mode; otherwise, false.</returns>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.LaunchDebugger(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo)">
      <summary>Starts the debugger.</summary>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="info">A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenAsMiscellaneousFile(System.IServiceProvider,System.String,System.String,System.Guid,System.String,System.Guid)">
      <summary>Opens the specified miscellaneous file in the specified editor.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="path">The path of the file.</param>
      <param name="caption">The name of the file.</param>
      <param name="editor">The GUID of the editor in which to open the file.</param>
      <param name="physicalView">The name of the kind of window in which to open the editor.</param>
      <param name="logicalView">The logical view of the editor, for example <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String)">
      <summary>Opens the specified document.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="path">The path of the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens the specified document in the specified view.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="fullPath">The absolute path of the document.</param>
      <param name="logicalView">The GUID of the logical view in which to open the document.</param>
      <param name="hierarchy">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that contains the document.</param>
      <param name="itemID">[out] The item ID of the document.</param>
      <param name="windowFrame">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window in which the document is open.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Opens the specified document in the specified logical view.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="fullPath">The absolute path of the document.</param>
      <param name="logicalView">The GUID of the logical view in which to open the document.</param>
      <param name="hierarchy">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that contains the document.</param>
      <param name="itemID">[out] The item ID of the document.</param>
      <param name="windowFrame">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window in which the document is open.</param>
      <param name="view">[out] Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />  interface of the primary view of the window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocumentWithSpecificEditor(System.IServiceProvider,System.String,System.Guid,System.Guid)">
      <summary>Opens the specified document by using the specified editor.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window in which the document is opened.</returns>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="fullPath">The absolute path of the document.</param>
      <param name="editorType">The GUID of the type of editor to use.</param>
      <param name="logicalView">The GUID of the logical view in which to open the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocumentWithSpecificEditor(System.IServiceProvider,System.String,System.Guid,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens the specified document by using the specified editor.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="fullPath">The absolute path of the document.</param>
      <param name="editorType">The GUID of the type of editor to use.</param>
      <param name="logicalView">The GUID of the logical view in which to open the document.</param>
      <param name="hierarchy">[out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that contains the document.</param>
      <param name="itemID">[out] The item ID of the document.</param>
      <param name="windowFrame">[out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window in which the document is opened.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.PromptYesNo(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,Microsoft.VisualStudio.Shell.Interop.IVsUIShell)">
      <summary>Displays a message box that contains the specified title and prompts the user to respond (yes or no) to the specified message.</summary>
      <returns>true if the operation succeeded; otherwise, false.</returns>
      <param name="message">The message to which the user must respond.</param>
      <param name="title">The title of the message box.</param>
      <param name="icon">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON" /> that defines the kind of message.</param>
      <param name="uiShell">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell" /> interface of the shell in which to display the message box. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.RenameDocument(System.IServiceProvider,System.String,System.String)">
      <summary>Renames the specified document.</summary>
      <param name="site">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="oldName">The current absolute path of the document.</param>
      <param name="newName">The new absolute path of the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.SaveFileIfDirty(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>If the file is dirty, saves it in the specified text view.</summary>
      <param name="view">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface of the file to be saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.SaveFileIfDirty(System.IServiceProvider,System.String)">
      <summary>Saves the specified file if it is dirty.</summary>
      <param name="site">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="fullPath">The absolute path of the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ShowMessageBox(System.IServiceProvider,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON)">
      <summary>Displays a message box with the specified message.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="message">The message to display.</param>
      <param name="title">The title of the message box.</param>
      <param name="icon">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON" /> value that specifies the type of message.</param>
      <param name="msgButton">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON" /> value that specifies the set of buttons to display.</param>
      <param name="defaultButton">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON" /> value that specifies which button is to be the default button.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.WindowPane">
      <summary>A default implementation of a tool window pane. This class implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane" />, but the implementer must provide an implementation of an object that returns an <see cref="T:System.Windows.Interop.IWin32Window" />. This class also implements <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />, maps it to <see cref="T:System.ComponentModel.Design.IMenuCommandService" /> and <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite" />, and maps the site to services that can be queried through its protected <see cref="M:Microsoft.VisualStudio.Shell.WindowPane.GetService(System.Type)" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.WindowPane" /> with the specified service provider.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />. Should be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Dispose">
      <summary>Disposes the window pane and its resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Dispose(System.Boolean)">
      <summary>Disposes the resources of the window pane.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>The service.</returns>
      <param name="serviceType"> The type of the service to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Initialize">
      <summary>Initializes services after the window pane has been sited.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes the specified command.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /> if the project manager is closed or the command is not supported. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> or an error code if one of the executed commands returned an error code.</returns>
      <param name="guidGroup">The GUID of the command group to which the command belongs.</param>
      <param name="nCmdId">The ID of the command.</param>
      <param name="nCmdExcept">Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, which describe how the object should execute the command.</param>
      <param name="pIn">Pointer to a VARIANTARG structure that contains input arguments. Can be null.</param>
      <param name="vOut">Pointer to a VARIANTARG structure that contains command output. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Queries the object for the status of one or more commands that are generated by user interface events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidGroup">Unique identifier of the command group. All the commands that are passed in the <paramref name="prgCmds" /> array must belong to the group that is specified by <paramref name="guidCmdGroup" />.</param>
      <param name="nCmdId">The number of commands in the <paramref name="prgCmds" /> array.</param>
      <param name="oleCmd">A caller-allocated array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> structures that indicate the commands for which the caller requires status information. This method fills the <paramref name="cmdf " />member of each structure with values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration.</param>
      <param name="oleText">Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXTF" /> structure to return a name and/or status information of a single command. Can be null to indicate that the caller does not require this information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsBroadcastMessageEvents#OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Raised when a message is broadcast to the window. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="msg">The broadcast message.</param>
      <param name="wParam">A word-value parameter for the message.</param>
      <param name="lParam">A long-integer parameter for the message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowPane#ClosePane">
      <summary>Closes the window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowPane#CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
      <summary>Creates a window pane.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />. </returns>
      <param name="hwndParent">A pointer to the parent window.</param>
      <param name="x">The absolute x ordinate.</param>
      <param name="y">The absolute y ordinate.</param>
      <param name="cx">The width of the window.</param>
      <param name="cy">The height of the window.</param>
      <param name="pane"> [out] A pointer to the new window pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowPane#GetDefaultSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
      <summary>Gets the default size of the window pane.</summary>
      <returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="size">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.SIZE" /> structures.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowPane#LoadViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Loads the saved view state.</summary>
      <returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pstream">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream" /> from which to load the view state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowPane#SaveViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Saves the loaded view state.</summary>
      <returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pstream">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream" /> to which to save the view state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowPane#SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes this window pane with the specified service provider.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="p">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowPane#TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Handles the translation of navigation keys.</summary>
      <returns>If this method succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />; if it fails, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.E_FAIL" />.</returns>
      <param name="msg">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> structures that contain the character or character combination to be translated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.OnClose">
      <summary>Raised when the window is closed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.OnCreate">
      <summary>Raised when the window pane is created.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.PreProcessMessage(System.Windows.Forms.Message@)">
      <summary>Preprocesses the messages from navigation keys.</summary>
      <returns>true if it was possible to get a control from the message's handle; otherwise, false.</returns>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>An object that represents the service.</returns>
      <param name="serviceType">The type of the service to get.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.WindowPane.Window">
      <summary>Gets the window that is associated with this window pane.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.IWin32Window" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject">
      <summary>A project that is a subtype or flavor of an inner project. All methods by default delegate to the inner project. Non-default behaviors should be handled by the flavored project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.#ctor">
      <summary>When overridden in a derived class, initializes an instance of the <see cref="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)">
      <summary>Subscribes to hierarchy events.</summary>
      <returns>A unique value, or cookie, that is needed to disable notification of hierarchy events.</returns>
      <param name="eventSink">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Close">
      <summary>Closes and cleans up a hierarchy once the environment determines that it is no longer used. </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.DirectoryAdded">
      <summary>Raised after a directory has been added to the project.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.DirectoryRemoved">
      <summary>Raised after a directory has been removed from the project.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.DirectoryRenamed">
      <summary>Raised after a directory in the project has been renamed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes a command on a specific item within a UI hierarchy window, or on the hierarchy itself. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">The identifier of the item affected by the command. For single selection, this value is the actual item ID. For multiple selections, set <paramref name="itemid" /> equal to <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="VSITEMID_SELECTION" />.</param>
      <param name="pguidCmdGroup">Unique identifier of the command group. All the commands in <paramref name="nCmdID " />must belong to the group specified by <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdID">The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdexecopt">A member of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, describing the type of action to perform.</param>
      <param name="pvaIn">A pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
      <param name="pvaOut">A pointer to a VARIANTARG structure to receive command output. Can be null.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileAdded">
      <summary>Raised after a file has been added to the project.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileRemoved">
      <summary>Raised after a file has been removed from the project.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileRenamed">
      <summary>Raised after a file in the project has been renamed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetCanonicalName(System.UInt32,System.String@)">
      <summary>Gets the unique name associated with an item in the hierarchy. Used for workspace persistence, such as remembering window positions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemId">The ID of the hierarchy item. </param>
      <param name="name">[out] The canonical name of the hierarchy item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetGuidProperty(System.UInt32,System.Int32)">
      <summary>Gets properties whose values are GUIDs.</summary>
      <returns>The GUID value of the property.</returns>
      <param name="itemId">The item ID of the hierarchy node for which to get the property.</param>
      <param name="propId">The ID of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <summary>Determines whether or not a node is a nested hierarchy.</summary>
      <returns>If <paramref name="itemid" /> is not a nested hierarchy node, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="E_FAIL" />. If the requested interface is not supported on the hierarchy object, <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="E_NOINTERFACE" /> is returned. The caller would then treat this node as if it had no children. </returns>
      <param name="itemId">The item ID of the node.</param>
      <param name="guidHierarchyNested">The interface ID of the node.</param>
      <param name="hierarchyNested">[out] Returns a pointer to the node, if it is a nested hierarchy node. </param>
      <param name="itemIdNested">[out] Returns the item ID of the nested hierarchy node; this will always be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetProperty(System.UInt32,System.Int32,System.Object@)">
      <summary>Gets the value of a property for a given node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemId">The item ID of the node.</param>
      <param name="propId">The ID of the requested property.</param>
      <param name="property">[out] The value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetSite">
      <summary>Gets the service provider from which to access the services.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Boolean@)">
      <summary>Called by the outer project subtype to have the owned inner project subtype do its initialization work. </summary>
      <param name="fileName">The name of the project file.</param>
      <param name="location">The path of the project file.</param>
      <param name="name">The name of the project.</param>
      <param name="flags">Flags from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJECTFLAGS" /> enumeration.</param>
      <param name="guidProject">[ref] The interface ID of the project.</param>
      <param name="cancel">[out] Returns true if project creation was canceled.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerOleCommandTarget">
      <summary>The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface of the inner project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerVsAggregatableProject">
      <summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject" /> of the inner project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerVsHierarchy">
      <summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the inner project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerVsUIHierarchy">
      <summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the inner project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes a specified command or displays help for a command.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidCmdGroup">The ID of the command group to which the command belongs.</param>
      <param name="nCmdID">The ID of the command.</param>
      <param name="nCmdexecopt">A member of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, describing the type of action to take.</param>
      <param name="pvaIn">A pointer to a VARIANTARG structure containing input arguments. May be null.</param>
      <param name="pvaOut">A pointer to a VARIANTARG structure containing command output. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Queries the object for the status of one or more commands.</summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
      <param name="pguidCmdGroup">The GUID of the command group to which the commands belong.</param>
      <param name="cCmds">The number of commands in the command array.</param>
      <param name="prgCmds">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> structures that contain information about the commands.</param>
      <param name="pCmdText">Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT" /> structure in which to return name and/or status information of a single command. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#GetAggregateProjectTypeGuids(System.String@)">
      <summary>Gets the list of project type GUIDs that make up the aggregate project. This method should be delegated to the innermost project within the system of aggregated project subtypes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="projectTypeGuids">[out] A semicolon-delimited set of project type GUIDs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
      <summary>Called by the outer project subtype to have the inner project subtype do its initialization work. </summary>
      <returns>If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
      <param name="fileName">The project file name of the project to be initialized.</param>
      <param name="location">The path of the project file. </param>
      <param name="name">The name of the project.</param>
      <param name="flags">Flags that describe how a project is to be created or opened. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> enumeration.</param>
      <param name="guidProject">[ref] The interface ID of the project. It should be <see cref="F:Microsoft.VisualStudio.NativeMethods.IID_IUnknown" />.</param>
      <param name="project">[out] A pointer to the project. </param>
      <param name="canceled">[out] true if the project was canceled. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#OnAggregationComplete">
      <summary>Called to continue initialization after aggregation is complete.</summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#SetAggregateProjectTypeGuids(System.String)">
      <summary>Updates the list of GUIDs that are persisted in the project file of the base project. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />\. If it fails, it returns an error code.</returns>
      <param name="projectTypeGuids">The GUIDs to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#SetInnerProject(System.Object)">
      <summary>Sets up the inner project as well as the necessary interface pointers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="inner">The IUnknown of the inner project subtype.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
      <summary>Subscribes to hierarchy events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="eventSink">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents" /> to which to register.</param>
      <param name="cookie">[out] Returns the unique identifier used to unsubscribe for these events.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Close">
      <summary>Closes and cleans up a hierarchy once the environment determines that it is no longer used. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetCanonicalName(System.UInt32,System.String@)">
      <summary>Gets a unique name for an item in the hierarchy. Used for workspace persistence, such as remembering window positions. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemId">The ID of the hierarchy item.</param>
      <param name="name">[out] The canonical name of the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Gets properties whose values are GUIDs. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemId">The ID of the hierarchy item.</param>
      <param name="propId">The ID of the property.</param>
      <param name="guid">[out] Returns the GUID value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <summary>Determines whether or not a node is a nested hierarchy.</summary>
      <returns>If <paramref name="itemid" /> is not a nested hierarchy node, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="E_FAIL" />. If the requested interface is not supported on the hierarchy object, <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="E_NOINTERFACE" /> is returned. The caller would then treat this node as if it had no children. </returns>
      <param name="itemId">The item ID of the node.</param>
      <param name="guidHierarchyNested">The interface ID of the node.</param>
      <param name="hierarchyNested">[out] Returns a pointer to the node, if it is a nested hierarchy node. </param>
      <param name="itemIdNested">[out] Returns the item ID of the nested hierarchy node; this will always be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetProperty(System.UInt32,System.Int32,System.Object@)">
      <summary>Gets properties of a given node or of the hierarchy. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemId">The ID of the item.</param>
      <param name="propId">The ID of the property.</param>
      <param name="property">[out] The value of the property. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Gets the service provider from which to access the services. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="serviceProvider"> <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#ParseCanonicalName(System.String,System.UInt32@)">
      <summary>Returns the identifier of the hierarchy item, given its canonical name. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="name">The canonical name of the item.</param>
      <param name="itemId">[out] The ID of the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#QueryClose(System.Int32@)">
      <summary>Determines whether the hierarchy can be closed. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="canClose">[out] Returns true if the hierarchy can be closed, otherwise false. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Sets properties whose values are GUIDs. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemId">The ID of the item.</param>
      <param name="propId">The ID of the property to set.</param>
      <param name="guid">The GUID value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#SetProperty(System.UInt32,System.Int32,System.Object)">
      <summary>Sets properties of a specific node or of the hierarchy. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemId">The ID of the item.</param>
      <param name="propId">The ID of the property to set.</param>
      <param name="property">The value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Sets the service provider from which to access the services. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="serviceProvider">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#UnadviseHierarchyEvents(System.UInt32)">
      <summary>Disables client notification of hierarchy events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cookie">The unique identifier that was handed back with <see cref="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused0">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused1">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused2">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused3">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused4">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterAddDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])">
      <summary>Raised after directories have been added to a project.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="cProjects">The number of projects in the <paramref name="rgpProjects" /> array.</param>
      <param name="cDirectories">The number of directories to be added.</param>
      <param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> objects, corresponding to the projects in the solution.</param>
      <param name="rgFirstIndices">An array of indices of the directories that were affected.</param>
      <param name="rgpszMkDocuments">An array of paths of the directories that were added.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS" />. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])">
      <summary>Raised after files have been added to a project.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="cProjects">The number of projects in the <paramref name="rgpProjects" /> array.</param>
      <param name="cFiles">The number of files to be added.</param>
      <param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> objects.</param>
      <param name="rgFirstIndices">An array of indices of the files that were affected.</param>
      <param name="rgpszMkDocuments">An array of paths of the files that were affected.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS" />. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterRemoveDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])">
      <summary>Raised after a directory was removed from the project.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="cProjects">The number of projects in the <paramref name="rgpProjects" /> array.</param>
      <param name="cDirectories">The number of directories affected.</param>
      <param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> objects, corresponding to the projects in the solution.</param>
      <param name="rgFirstIndices">An array of indices of the directories that were affected.</param>
      <param name="rgpszMkDocuments">An array of paths of the directories that were affected. </param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS" />. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterRemoveFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])">
      <summary>Raised after files have been removed from the project.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="cProjects">The number of projects in the <paramref name="rgpProjects" /> array.</param>
      <param name="cFiles">The number of files that were affected.</param>
      <param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> objects, corresponding to the projects in the solution.</param>
      <param name="rgFirstIndices">An array of indices of the files that were affected.</param>
      <param name="rgpszMkDocuments">An array of paths of the files that were affected.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS" />. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterRenameDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])">
      <summary>Raised after a directory has been moved or renamed.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="cProjects">The number of projects in the <paramref name="rgpProjects" /> array. </param>
      <param name="cDirs">The number of directories affected.</param>
      <param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> objects, corresponding to the projects in the solution.</param>
      <param name="rgFirstIndices">An array of indices of the directories affected.</param>
      <param name="rgszMkOldNames">An array of the old paths of the directories.</param>
      <param name="rgszMkNewNames">An array of the new paths of the directories.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS" />. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterRenameFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])">
      <summary>Raised after files have been moved or renamed.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="cProjects">The number of projects in the <paramref name="rgpProjects" /> array. </param>
      <param name="cFiles">The number of files affected.</param>
      <param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> objects, corresponding to the projects in the solution.</param>
      <param name="rgFirstIndices">An array of the indices of the files.</param>
      <param name="rgszMkOldNames">An array of the old paths of the files.</param>
      <param name="rgszMkNewNames">An array of the new paths of the files.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS" />. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterSccStatusChanged(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])">
      <summary>This method is called by the source code control component to inform listeners that source control status has changed. Do not call this method. </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="cProjects">The number of projects in the <paramref name="rgpProjects" /> array.</param>
      <param name="cFiles">The number of files affected.</param>
      <param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> objects, corresponding to the projects in the solution.</param>
      <param name="rgFirstIndices">An array of the indices of the files.</param>
      <param name="rgpszMkDocuments">An array of paths of the files. </param>
      <param name="rgdwSccStatus">An array of SccStatus flags. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])">
      <summary>Raised by a project to determine whether directories can be added to the project. Not used.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> affected.</param>
      <param name="cDirectories">The number of directories affected.</param>
      <param name="rgpszMkDocuments">An array of paths to the directories. </param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" /> objects, which represent a summary of the yes/no values returned.</param>
      <param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
      <summary>Raised to determine whether files can be added to the project. Not used.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> affected.</param>
      <param name="cFiles">The number of files affected. </param>
      <param name="rgpszMkDocuments">An array of paths of the files.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS" />.</param>
      <param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" /> objects, which represent a summary of the yes/no values returned.</param>
      <param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
      <summary>Raised to determine whether directories can be removed from the project. Not used.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> affected.</param>
      <param name="cDirectories">The number of directories affected.</param>
      <param name="rgpszMkDocuments">An array of paths of the directories.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" /> objects, which represent a summary of the yes/no values returned.</param>
      <param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
      <summary>Raised to determine whether files can be removed from the project. Not used.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> affected. </param>
      <param name="cFiles">The number of files affected.</param>
      <param name="rgpszMkDocuments">An array of paths to the files.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS" />.</param>
      <param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" /> objects, which represent a summary of the yes/no values returned.</param>
      <param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])">
      <summary>Raised to determine whether directories can be renamed in the project. Not used.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> affected.</param>
      <param name="cDirs">The number of directories affected. </param>
      <param name="rgszMkOldNames">An array of the old paths of the files.</param>
      <param name="rgszMkNewNames">An array of the new paths of the files.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS" /> objects, which represent a summary of the yes/no values returned.</param>
      <param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])">
      <summary>Raised to determine whether files can be renamed in the project. Not used.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> affected.</param>
      <param name="cFiles">The number of files affected.</param>
      <param name="rgszMkOldNames">An array of the old paths of the files.</param>
      <param name="rgszMkNewNames">An array of the new paths of the files.</param>
      <param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS" />.</param>
      <param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" /> objects, which represent a summary of the yes/no values returned.</param>
      <param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
      <summary>Subscribes to hierarchy events.</summary>
      <returns>The cookie. </returns>
      <param name="pEventSink">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents" />.</param>
      <param name="pdwCookie">A unique value, or cookie, that is needed to disable notification of hierarchy events.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Close">
      <summary>Closes the project and cleans up its resources once the environment determines that it is no longer used.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes a command on a specific item within a UI hierarchy window, or on the hierarchy itself. </summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
      <param name="itemid">The identifier of the item affected by the command. For single selection, this value is the actual item ID. For multiple selections, set <paramref name="itemid" /> equal to <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="VSITEMID_SELECTION" />.</param>
      <param name="pguidCmdGroup">Unique identifier of the command group. All the commands in <paramref name="nCmdID " />must belong to the group specified by <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdID">The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdexecopt">A member of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, describing the type of action to perform.</param>
      <param name="pvaIn">A pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
      <param name="pvaOut">A pointer to a VARIANTARG structure to receive command output. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetCanonicalName(System.UInt32,System.String@)">
      <summary>Gets the unique name associated with an item in the hierarchy. Used for workspace persistence, such as remembering window positions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">The ID of the hierarchy item. </param>
      <param name="pbstrName">[out] The canonical name of the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Gets properties whose values are GUIDs.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="itemid">The item ID of the hierarchy node for which to get the property.</param>
      <param name="propid">The ID of the property.</param>
      <param name="pguid">[out] The GUID value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <summary>Determines whether or not a node is a nested hierarchy.</summary>
      <returns>If <paramref name="itemid" /> is not a nested hierarchy node, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="E_FAIL" />. If the requested interface is not supported on the hierarchy object, <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="E_NOINTERFACE" /> is returned. The caller would then treat this node as if it had no children. </returns>
      <param name="itemid">The item ID of the node.</param>
      <param name="iidHierarchyNested">The interface ID of the node.</param>
      <param name="ppHierarchyNested">[out] Returns a pointer to the node, if it is a nested hierarchy node. </param>
      <param name="pitemidNested">[out] Returns the item ID of the nested hierarchy node; this will always be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetProperty(System.UInt32,System.Int32,System.Object@)">
      <summary>Gets the value of a property for a given node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">The item ID of the node.</param>
      <param name="propid">The ID of the requested property.</param>
      <param name="pvar">[out] The value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Gets the service provider from which to access the services.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="ppSP">[out] <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#ParseCanonicalName(System.String,System.UInt32@)">
      <summary>Returns the identifier of the hierarchy item, given its canonical name. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszName">The canonical name of the item.</param>
      <param name="pitemid">[out] The ID of the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#QueryClose(System.Int32@)">
      <summary>Determines whether the hierarchy can be closed. </summary>
      <returns>true if the hierarchy can be closed, otherwise false.</returns>
      <param name="pfCanClose">[out] Returns true if the hierarchy can be closed, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Gets the status of the specified commands.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">The ID of the item being queried.</param>
      <param name="pguidCmdGroup">The GUID of the command group to which the commands belong.</param>
      <param name="cCmds">The number of commands in the <paramref name="prgCmds" /> array.</param>
      <param name="prgCmds">An array of command <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> structures with information on the commands.</param>
      <param name="pCmdText">A pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT" /> structure containing name and/or status information on the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Sets properties whose values are GUIDs. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">The ID of the item.</param>
      <param name="propid">The ID of the property to set.</param>
      <param name="rguid">The GUID value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#SetProperty(System.UInt32,System.Int32,System.Object)">
      <summary>Sets properties of a specific node or of the hierarchy. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">The ID of the item.</param>
      <param name="propid">The ID of the property to set.</param>
      <param name="var">The value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Sets the service provider from which to access the services. </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="psp">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#UnadviseHierarchyEvents(System.UInt32)">
      <summary>Disables client notification of hierarchy events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">The unique identifier that was handed back with <see cref="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused0">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused1">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused2">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused3">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused4">
      <summary>A placeholder for a future method.</summary>
      <returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.OnAggregationComplete">
      <summary>Subscribes to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" /> events. It is not required to flavor a project but makes it easier for derived classes to subscribe to these events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.ParseCanonicalName(System.String,System.UInt32@)">
      <summary>Returns the identifier of the hierarchy item, given its canonical name. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="name">The canonical name of the item.</param>
      <param name="itemId">[out] The ID of the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.QueryClose">
      <summary>Determines whether the hierarchy can be closed. </summary>
      <returns>true if the hierarchy can be closed, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Gets the status of the specified commands.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">The ID of the item being queried.</param>
      <param name="pguidCmdGroup">The GUID of the command group to which the commands belong.</param>
      <param name="cCmds">The number of commands in the <paramref name="prgCmds" /> array.</param>
      <param name="prgCmds">An array of command <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> structures with information on the commands.</param>
      <param name="pCmdText">A pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT" /> structure containing name and/or status information on the command.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SccStatusChanged">
      <summary>Raised after the source code control status of an item in the project has changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.serviceProvider">
      <summary>The service provider of the project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Sets properties whose values are GUIDs. </summary>
      <param name="itemId">The ID of the item.</param>
      <param name="propId">The ID of the property to set.</param>
      <param name="guid">The GUID value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetInnerProject(System.Object)">
      <summary>Sets up the interfaces and menu commands for the inner project. </summary>
      <param name="inner">The inner project subtype.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetProperty(System.UInt32,System.Int32,System.Object)">
      <summary>Sets properties of a specific node or of the hierarchy. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> . If it fails, it returns an error code.</returns>
      <param name="itemId">The ID of the item.</param>
      <param name="propId">The ID of the property to set.</param>
      <param name="property">The value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>A service of the type specified. </returns>
      <param name="serviceType">The type of the service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.UnadviseHierarchyEvents(System.UInt32)">
      <summary>Disables client notification of hierarchy events.</summary>
      <param name="cookie">The unique identifier that was handed back with <see cref="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused0">
      <summary>A placeholder for a future method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused1">
      <summary>A placeholder for a future method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused2">
      <summary>A placeholder for a future method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused3">
      <summary>A placeholder for a future method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused4">
      <summary>A placeholder for a future method.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.EventHandler`1">
      <summary>Represents the method that handles events that relate to files and folders of the flavored project.</summary>
      <param name="sender">The object that raises the event.</param>
      <param name="e">
        <see cref="T:Microsoft.VisualStudio.Package.Flavor.ProjectDocumentsChangeEventArgs" />.</param>
      <typeparam name="ProjectDocumentsChangeEventArgs"></typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.EventHandler`1">
      <typeparam name="ProjectDocumentsChangeEventArgs"></typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase">
      <summary>Base class for flavored project factories.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.CanCreateProject(System.String,System.UInt32)">
      <summary>Determines whether or not the project can be created with the supplied parameters.</summary>
      <returns>true if the project file name is valid, otherwise false.</returns>
      <param name="fileName">The name of the file.</param>
      <param name="flags">Not used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
      <summary>Creates a project.</summary>
      <param name="fileName">The name of the project file.</param>
      <param name="location">The path of the project file. </param>
      <param name="name">The name of the project.</param>
      <param name="flags">Values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" />.</param>
      <param name="projectGuid">The interface ID of the project.</param>
      <param name="project">[out] Returns a pointer to the project.</param>
      <param name="canceled">[out] Returns true if the operation was canceled, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Dispose(System.Boolean)">
      <summary>Disposes the service provider.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Initialize">
      <summary>Initializes the project factory.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectFactoryCorrected#GetAggregateProjectType(System.String,System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectFactoryCorrected#PreCreateForOuter(System.IntPtr,System.IntPtr@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#CanCreateProject(System.String,System.UInt32,System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#Close"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.PreCreateForOuter(System.IntPtr)">
      <summary>Creates an instance of the project. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="outerProjectIUnknown">The outermost project, or null if the outer project is being created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.ProjectTypeGuids(System.String)">
      <summary>Gets the set of project type GUIDs from the project file.</summary>
      <returns>When implemented by a derived class, a semicolon-delimited string containing the project type GUIDs in the project file.</returns>
      <param name="file">The project file.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.serviceProvider">
      <summary>Gets the project's service provider.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.ILocalRegistryCorrected">
      <summary>Establishes a locally-registered COM object relative to the local Visual Studio registry hive.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.ILocalRegistryCorrected.CreateInstance(System.Guid,System.IntPtr,System.Guid@,System.UInt32,System.IntPtr@)">
      <summary>Creates an instance of a class listed in the local registry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier (CLSID) of the requested object. This is the CLSID associated with the data and code that is used to create the object.</param>
      <param name="punkOuterIUnknown">[in] Pointer to the IUnknown interface of the newly created object. A value of null indicates that the object is not being created as part of an aggregate. If non-null, this is a pointer to the aggregate object's IUnknown.</param>
      <param name="riid">[in] Interface to be used to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="dwFlags">[in] Flags controlling the instance creation from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CLSCTX" /> enumeration. Specifies a value of <see cref="F:Microsoft.VisualStudio.OLE.Interop.CLSCTX.CLSCTX_INPROC_SERVER" />.</param>
      <param name="ppvObj">[out] Address of pointer variable that receives the interface pointer requested in <paramref name="riid" />. Upon successful return, <paramref name="ppvObj" /> contains the requested interface pointer. Upon failure, <paramref name="ppvObj" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.ILocalRegistryCorrected.GetClassObjectOfClsid(System.Guid@,System.UInt32,System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>Returns the class object associated with a CLSID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier (CLSID) of the requested object. This is the CLSID associated with the data and code that is used to create the object.</param>
      <param name="dwFlags">[in] Flags controlling the instance creation from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CLSCTX" /> enumeration. Specifies a value of <see cref="F:Microsoft.VisualStudio.OLE.Interop.CLSCTX.CLSCTX_INPROC_SERVER" />.</param>
      <param name="lpReserved">[in] Reserved.</param>
      <param name="riid">[in] Interface to be used to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="ppvClassObject">[in] Address of pointer variable that receives the interface pointer requested in <paramref name="riid" />. Upon successful return, <paramref name="ppvObj" /> contains the requested interface pointer. Upon failure, <paramref name="ppvObj" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.ILocalRegistryCorrected.GetTypeLibOfClsid(System.Guid,Microsoft.VisualStudio.OLE.Interop.ITypeLib@)">
      <summary>Not implemented. Do not use.</summary>
      <param name="clsid">Do not use.</param>
      <param name="pptLib">Do not use.</param>
    </member>
  </members>
</doc>