<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EnvDTE</name>
  </assembly>
  <members>
    <member name="T:EnvDTE._BuildEvents">
      <summary>Refer to <see cref="T:EnvDTE.BuildEvents" /> for this functionality. Do not instantiate from this class.</summary>
    </member>
    <member name="T:EnvDTE._CommandBarControlEvents">
      <summary>Refer to <see cref="T:EnvDTE.CommandBarEvents" /> for this functionality. Do not instantiate from this class.</summary>
    </member>
    <member name="T:EnvDTE._CommandEvents">
      <summary>Refer to <see cref="T:EnvDTE.CommandEvents" /> for this functionality. Do not instantiate from this class.</summary>
    </member>
    <member name="T:EnvDTE._DebuggerEvents">
      <summary>Refer to <see cref="T:EnvDTE.DebuggerEvents" /> for this functionality. Do not instantiate from this class.</summary>
    </member>
    <member name="T:EnvDTE._DebuggerEventsRoot">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._DebuggerEventsRoot.DebuggerEvents">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The debugger events.</returns>
    </member>
    <member name="T:EnvDTE._dispBuildEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispBuildEvents.OnBuildBegin(EnvDTE.vsBuildScope,EnvDTE.vsBuildAction)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Scope">The scope.</param>
      <param name="Action">The action.</param>
    </member>
    <member name="M:EnvDTE._dispBuildEvents.OnBuildDone(EnvDTE.vsBuildScope,EnvDTE.vsBuildAction)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Scope">The scope.</param>
      <param name="Action">The action.</param>
    </member>
    <member name="M:EnvDTE._dispBuildEvents.OnBuildProjConfigBegin(System.String,System.String,System.String,System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The name of the project.</param>
      <param name="ProjectConfig">The name of the project configuration.</param>
      <param name="Platform">The platform.</param>
      <param name="SolutionConfig">The solution configuration.</param>
    </member>
    <member name="M:EnvDTE._dispBuildEvents.OnBuildProjConfigDone(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The name of the project.</param>
      <param name="ProjectConfig">The name of the project configuration.</param>
      <param name="Platform">The name of the platform.</param>
      <param name="SolutionConfig">The name of the solution configuration.</param>
      <param name="Success">Whether or not the task was successful.</param>
    </member>
    <member name="T:EnvDTE._dispBuildEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispBuildEvents_Event.add_OnBuildBegin(EnvDTE._dispBuildEvents_OnBuildBeginEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispBuildEvents_Event.add_OnBuildDone(EnvDTE._dispBuildEvents_OnBuildDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispBuildEvents_Event.add_OnBuildProjConfigBegin(EnvDTE._dispBuildEvents_OnBuildProjConfigBeginEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispBuildEvents_Event.add_OnBuildProjConfigDone(EnvDTE._dispBuildEvents_OnBuildProjConfigDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispBuildEvents_Event.OnBuildBegin">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispBuildEvents_Event.OnBuildDone">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispBuildEvents_Event.OnBuildProjConfigBegin">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispBuildEvents_Event.OnBuildProjConfigDone">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispBuildEvents_Event.remove_OnBuildBegin(EnvDTE._dispBuildEvents_OnBuildBeginEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispBuildEvents_Event.remove_OnBuildDone(EnvDTE._dispBuildEvents_OnBuildDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispBuildEvents_Event.remove_OnBuildProjConfigBegin(EnvDTE._dispBuildEvents_OnBuildProjConfigBeginEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispBuildEvents_Event.remove_OnBuildProjConfigDone(EnvDTE._dispBuildEvents_OnBuildProjConfigDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispBuildEvents_OnBuildBeginEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Scope">The vsBuildScope.</param>
      <param name="Action">The vsBuildAction.</param>
    </member>
    <member name="T:EnvDTE._dispBuildEvents_OnBuildDoneEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Scope">The vsBuildScope.</param>
      <param name="Action">The vsBuildAction.</param>
    </member>
    <member name="T:EnvDTE._dispBuildEvents_OnBuildProjConfigBeginEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
      <param name="ProjectConfig">The project configuration.</param>
      <param name="Platform">The platform.</param>
      <param name="SolutionConfig">The solution configuration.</param>
    </member>
    <member name="T:EnvDTE._dispBuildEvents_OnBuildProjConfigDoneEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
      <param name="ProjectConfig">The project configuration.</param>
      <param name="Platform">The platform.</param>
      <param name="SolutionConfig">The solution configuration.</param>
      <param name="Success">Whether the build was successful.</param>
    </member>
    <member name="T:EnvDTE._dispCommandBarControlEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispCommandBarControlEvents.Click(System.Object,System.Boolean@,System.Boolean@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="CommandBarControl">The command bar control.</param>
      <param name="handled">Whether or not the event was handled.</param>
      <param name="CancelDefault">Whether or not to cancel the default.</param>
    </member>
    <member name="T:EnvDTE._dispCommandBarControlEvents_ClickEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="CommandBarControl">The command bar control.</param>
      <param name="handled">Whether or not the event was handled.</param>
      <param name="CancelDefault">Whether or not the action was cancelled.</param>
    </member>
    <member name="T:EnvDTE._dispCommandBarControlEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispCommandBarControlEvents_Event.add_Click(EnvDTE._dispCommandBarControlEvents_ClickEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispCommandBarControlEvents_Event.Click">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispCommandBarControlEvents_Event.remove_Click(EnvDTE._dispCommandBarControlEvents_ClickEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispCommandEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispCommandEvents.AfterExecute(System.String,System.Int32,System.Object,System.Object)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Guid">The GUID.</param>
      <param name="ID">The ID.</param>
      <param name="CustomIn">Custom input parameters.</param>
      <param name="CustomOut">Custom output parameters.</param>
    </member>
    <member name="M:EnvDTE._dispCommandEvents.BeforeExecute(System.String,System.Int32,System.Object,System.Object,System.Boolean@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Guid">The GUID.</param>
      <param name="ID">The ID.</param>
      <param name="CustomIn">Custom input parameters.</param>
      <param name="CustomOut">Custom output parameters.</param>
      <param name="CancelDefault">Whether or not to cancel.</param>
    </member>
    <member name="T:EnvDTE._dispCommandEvents_AfterExecuteEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Guid">The GUID.</param>
      <param name="ID">The command ID.</param>
      <param name="CustomIn">Custom input parameters.</param>
      <param name="CustomOut">Custom output parameters.</param>
    </member>
    <member name="T:EnvDTE._dispCommandEvents_BeforeExecuteEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Guid">The GUID.</param>
      <param name="ID">The command ID.</param>
      <param name="CustomIn">Custom input parameters.</param>
      <param name="CustomOut">Custom output parameters.</param>
      <param name="CancelDefault">Whether the command has been cancelled.</param>
    </member>
    <member name="T:EnvDTE._dispCommandEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispCommandEvents_Event.add_AfterExecute(EnvDTE._dispCommandEvents_AfterExecuteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispCommandEvents_Event.add_BeforeExecute(EnvDTE._dispCommandEvents_BeforeExecuteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispCommandEvents_Event.AfterExecute">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispCommandEvents_Event.BeforeExecute">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispCommandEvents_Event.remove_AfterExecute(EnvDTE._dispCommandEvents_AfterExecuteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispCommandEvents_Event.remove_BeforeExecute(EnvDTE._dispCommandEvents_BeforeExecuteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispDebuggerEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents.OnContextChanged(EnvDTE.Process,EnvDTE.Program,EnvDTE.Thread,EnvDTE.StackFrame)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="NewProcess">The new process.</param>
      <param name="NewProgram">The new program.</param>
      <param name="NewThread">The new thread.</param>
      <param name="NewStackFrame">The new stack frame.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents.OnEnterBreakMode(EnvDTE.dbgEventReason,EnvDTE.dbgExecutionAction@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Reason">The reason for the action.</param>
      <param name="ExecutionAction">The action.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents.OnEnterDesignMode(EnvDTE.dbgEventReason)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Reason">The reason for the action.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents.OnEnterRunMode(EnvDTE.dbgEventReason)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Reason">The reason for the action.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents.OnExceptionNotHandled(System.String,System.String,System.Int32,System.String,EnvDTE.dbgExceptionAction@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ExceptionType">The name of the exception type.</param>
      <param name="Name">The name of the exception.</param>
      <param name="Code">The type of code.</param>
      <param name="Description">The description.</param>
      <param name="ExceptionAction">The exception action.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents.OnExceptionThrown(System.String,System.String,System.Int32,System.String,EnvDTE.dbgExceptionAction@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ExceptionType">The name of the exception type.</param>
      <param name="Name">The name of the exception.</param>
      <param name="Code">The type of code.</param>
      <param name="Description">The description.</param>
      <param name="ExceptionAction">The exception action.</param>
    </member>
    <member name="T:EnvDTE._dispDebuggerEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.add_OnContextChanged(EnvDTE._dispDebuggerEvents_OnContextChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.add_OnEnterBreakMode(EnvDTE._dispDebuggerEvents_OnEnterBreakModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler. </param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.add_OnEnterDesignMode(EnvDTE._dispDebuggerEvents_OnEnterDesignModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.add_OnEnterRunMode(EnvDTE._dispDebuggerEvents_OnEnterRunModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.add_OnExceptionNotHandled(EnvDTE._dispDebuggerEvents_OnExceptionNotHandledEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.add_OnExceptionThrown(EnvDTE._dispDebuggerEvents_OnExceptionThrownEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispDebuggerEvents_Event.OnContextChanged">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDebuggerEvents_Event.OnEnterBreakMode">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDebuggerEvents_Event.OnEnterDesignMode">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDebuggerEvents_Event.OnEnterRunMode">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDebuggerEvents_Event.OnExceptionNotHandled">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDebuggerEvents_Event.OnExceptionThrown">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.remove_OnContextChanged(EnvDTE._dispDebuggerEvents_OnContextChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler. </param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.remove_OnEnterBreakMode(EnvDTE._dispDebuggerEvents_OnEnterBreakModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.remove_OnEnterDesignMode(EnvDTE._dispDebuggerEvents_OnEnterDesignModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.remove_OnEnterRunMode(EnvDTE._dispDebuggerEvents_OnEnterRunModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.remove_OnExceptionNotHandled(EnvDTE._dispDebuggerEvents_OnExceptionNotHandledEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDebuggerEvents_Event.remove_OnExceptionThrown(EnvDTE._dispDebuggerEvents_OnExceptionThrownEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispDebuggerEvents_OnContextChangedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="NewProcess">The process.</param>
      <param name="NewProgram">The new program.</param>
      <param name="NewThread">The new thread.</param>
      <param name="NewStackFrame">The new stack frame.</param>
    </member>
    <member name="T:EnvDTE._dispDebuggerEvents_OnEnterBreakModeEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Reason">The dbgEventReason.</param>
      <param name="ExecutionAction">Th dbgExecutionAction.</param>
    </member>
    <member name="T:EnvDTE._dispDebuggerEvents_OnEnterDesignModeEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Reason">The dbgEventReason.</param>
    </member>
    <member name="T:EnvDTE._dispDebuggerEvents_OnEnterRunModeEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Reason">The dbgEventReason.</param>
    </member>
    <member name="T:EnvDTE._dispDebuggerEvents_OnExceptionNotHandledEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ExceptionType">The exception type.</param>
      <param name="Name">The name of the exception.</param>
      <param name="Code">The code.</param>
      <param name="Description">The description.</param>
      <param name="ExceptionAction">The dbgExceptionAction.</param>
    </member>
    <member name="T:EnvDTE._dispDebuggerEvents_OnExceptionThrownEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ExceptionType">The exception type.</param>
      <param name="Name">The name of the exception.</param>
      <param name="Code">The code.</param>
      <param name="Description">The description.</param>
      <param name="ExceptionAction">The dbgExceptionAction.</param>
    </member>
    <member name="T:EnvDTE._dispDocumentEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents.DocumentClosing(EnvDTE.Document)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Document">The document.</param>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents.DocumentOpened(EnvDTE.Document)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Document">The document.</param>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents.DocumentOpening(System.String,System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="DocumentPath">The document path.</param>
      <param name="ReadOnly">Whether or not the document is read-only.</param>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents.DocumentSaved(EnvDTE.Document)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Document">The document.</param>
    </member>
    <member name="T:EnvDTE._dispDocumentEvents_DocumentClosingEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Document">The document.</param>
    </member>
    <member name="T:EnvDTE._dispDocumentEvents_DocumentOpenedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Document">The document.</param>
    </member>
    <member name="T:EnvDTE._dispDocumentEvents_DocumentOpeningEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="DocumentPath">The document path.</param>
      <param name="ReadOnly">Whether the document is read-only.</param>
    </member>
    <member name="T:EnvDTE._dispDocumentEvents_DocumentSavedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Document">The document.</param>
    </member>
    <member name="T:EnvDTE._dispDocumentEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents_Event.add_DocumentClosing(EnvDTE._dispDocumentEvents_DocumentClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents_Event.add_DocumentOpened(EnvDTE._dispDocumentEvents_DocumentOpenedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents_Event.add_DocumentOpening(EnvDTE._dispDocumentEvents_DocumentOpeningEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents_Event.add_DocumentSaved(EnvDTE._dispDocumentEvents_DocumentSavedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispDocumentEvents_Event.DocumentClosing">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDocumentEvents_Event.DocumentOpened">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDocumentEvents_Event.DocumentOpening">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDocumentEvents_Event.DocumentSaved">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents_Event.remove_DocumentClosing(EnvDTE._dispDocumentEvents_DocumentClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents_Event.remove_DocumentOpened(EnvDTE._dispDocumentEvents_DocumentOpenedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents_Event.remove_DocumentOpening(EnvDTE._dispDocumentEvents_DocumentOpeningEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDocumentEvents_Event.remove_DocumentSaved(EnvDTE._dispDocumentEvents_DocumentSavedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispDTEEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDTEEvents.ModeChanged(EnvDTE.vsIDEMode)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="LastMode">The last mode.</param>
    </member>
    <member name="M:EnvDTE._dispDTEEvents.OnBeginShutdown">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDTEEvents.OnMacrosRuntimeReset">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDTEEvents.OnStartupComplete">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispDTEEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDTEEvents_Event.add_ModeChanged(EnvDTE._dispDTEEvents_ModeChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDTEEvents_Event.add_OnBeginShutdown(EnvDTE._dispDTEEvents_OnBeginShutdownEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDTEEvents_Event.add_OnMacrosRuntimeReset(EnvDTE._dispDTEEvents_OnMacrosRuntimeResetEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDTEEvents_Event.add_OnStartupComplete(EnvDTE._dispDTEEvents_OnStartupCompleteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispDTEEvents_Event.ModeChanged">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDTEEvents_Event.OnBeginShutdown">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDTEEvents_Event.OnMacrosRuntimeReset">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispDTEEvents_Event.OnStartupComplete">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispDTEEvents_Event.remove_ModeChanged(EnvDTE._dispDTEEvents_ModeChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDTEEvents_Event.remove_OnBeginShutdown(EnvDTE._dispDTEEvents_OnBeginShutdownEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDTEEvents_Event.remove_OnMacrosRuntimeReset(EnvDTE._dispDTEEvents_OnMacrosRuntimeResetEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispDTEEvents_Event.remove_OnStartupComplete(EnvDTE._dispDTEEvents_OnStartupCompleteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispDTEEvents_ModeChangedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="LastMode">The previous vsIDEMode.</param>
    </member>
    <member name="T:EnvDTE._dispDTEEvents_OnBeginShutdownEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispDTEEvents_OnMacrosRuntimeResetEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispDTEEvents_OnStartupCompleteEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispFindEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispFindEvents.FindDone(EnvDTE.vsFindResult,System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Result">The result.</param>
      <param name="Cancelled">Whether or not the find was cancelled.</param>
    </member>
    <member name="T:EnvDTE._dispFindEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispFindEvents_Event.add_FindDone(EnvDTE._dispFindEvents_FindDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispFindEvents_Event.FindDone">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispFindEvents_Event.remove_FindDone(EnvDTE._dispFindEvents_FindDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispFindEvents_FindDoneEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Result">The find result.</param>
      <param name="Cancelled">Whether the find was cancelled.</param>
    </member>
    <member name="T:EnvDTE._dispOutputWindowEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispOutputWindowEvents.PaneAdded(EnvDTE.OutputWindowPane)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pPane">The window pane.</param>
    </member>
    <member name="M:EnvDTE._dispOutputWindowEvents.PaneClearing(EnvDTE.OutputWindowPane)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pPane">The window pane.</param>
    </member>
    <member name="M:EnvDTE._dispOutputWindowEvents.PaneUpdated(EnvDTE.OutputWindowPane)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pPane">The window pane.</param>
    </member>
    <member name="T:EnvDTE._dispOutputWindowEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispOutputWindowEvents_Event.add_PaneAdded(EnvDTE._dispOutputWindowEvents_PaneAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispOutputWindowEvents_Event.add_PaneClearing(EnvDTE._dispOutputWindowEvents_PaneClearingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispOutputWindowEvents_Event.add_PaneUpdated(EnvDTE._dispOutputWindowEvents_PaneUpdatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispOutputWindowEvents_Event.PaneAdded">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispOutputWindowEvents_Event.PaneClearing">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispOutputWindowEvents_Event.PaneUpdated">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispOutputWindowEvents_Event.remove_PaneAdded(EnvDTE._dispOutputWindowEvents_PaneAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispOutputWindowEvents_Event.remove_PaneClearing(EnvDTE._dispOutputWindowEvents_PaneClearingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispOutputWindowEvents_Event.remove_PaneUpdated(EnvDTE._dispOutputWindowEvents_PaneUpdatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispOutputWindowEvents_PaneAddedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pPane"> </param>
    </member>
    <member name="T:EnvDTE._dispOutputWindowEvents_PaneClearingEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pPane"> </param>
    </member>
    <member name="T:EnvDTE._dispOutputWindowEvents_PaneUpdatedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pPane"> </param>
    </member>
    <member name="T:EnvDTE._dispProjectItemsEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispProjectItemsEvents.ItemAdded(EnvDTE.ProjectItem)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ProjectItem">The project item.</param>
    </member>
    <member name="M:EnvDTE._dispProjectItemsEvents.ItemRemoved(EnvDTE.ProjectItem)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ProjectItem">The project item.</param>
    </member>
    <member name="M:EnvDTE._dispProjectItemsEvents.ItemRenamed(EnvDTE.ProjectItem,System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ProjectItem">The project item.</param>
      <param name="OldName">The old name of the item.</param>
    </member>
    <member name="T:EnvDTE._dispProjectItemsEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispProjectItemsEvents_Event.add_ItemAdded(EnvDTE._dispProjectItemsEvents_ItemAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispProjectItemsEvents_Event.add_ItemRemoved(EnvDTE._dispProjectItemsEvents_ItemRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispProjectItemsEvents_Event.add_ItemRenamed(EnvDTE._dispProjectItemsEvents_ItemRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispProjectItemsEvents_Event.ItemAdded">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispProjectItemsEvents_Event.ItemRemoved">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispProjectItemsEvents_Event.ItemRenamed">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispProjectItemsEvents_Event.remove_ItemAdded(EnvDTE._dispProjectItemsEvents_ItemAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispProjectItemsEvents_Event.remove_ItemRemoved(EnvDTE._dispProjectItemsEvents_ItemRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispProjectItemsEvents_Event.remove_ItemRenamed(EnvDTE._dispProjectItemsEvents_ItemRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispProjectItemsEvents_ItemAddedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ProjectItem"> </param>
    </member>
    <member name="T:EnvDTE._dispProjectItemsEvents_ItemRemovedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ProjectItem"> </param>
    </member>
    <member name="T:EnvDTE._dispProjectItemsEvents_ItemRenamedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ProjectItem"> </param>
      <param name="OldName"> </param>
    </member>
    <member name="T:EnvDTE._dispProjectsEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispProjectsEvents.ItemAdded(EnvDTE.Project)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
    </member>
    <member name="M:EnvDTE._dispProjectsEvents.ItemRemoved(EnvDTE.Project)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
    </member>
    <member name="M:EnvDTE._dispProjectsEvents.ItemRenamed(EnvDTE.Project,System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
      <param name="OldName">The old name of the project.</param>
    </member>
    <member name="T:EnvDTE._dispProjectsEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispProjectsEvents_Event.add_ItemAdded(EnvDTE._dispProjectsEvents_ItemAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispProjectsEvents_Event.add_ItemRemoved(EnvDTE._dispProjectsEvents_ItemRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispProjectsEvents_Event.add_ItemRenamed(EnvDTE._dispProjectsEvents_ItemRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispProjectsEvents_Event.ItemAdded">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispProjectsEvents_Event.ItemRemoved">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispProjectsEvents_Event.ItemRenamed">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispProjectsEvents_Event.remove_ItemAdded(EnvDTE._dispProjectsEvents_ItemAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispProjectsEvents_Event.remove_ItemRemoved(EnvDTE._dispProjectsEvents_ItemRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispProjectsEvents_Event.remove_ItemRenamed(EnvDTE._dispProjectsEvents_ItemRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispProjectsEvents_ItemAddedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project"> </param>
    </member>
    <member name="T:EnvDTE._dispProjectsEvents_ItemRemovedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project"> </param>
    </member>
    <member name="T:EnvDTE._dispProjectsEvents_ItemRenamedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project"> </param>
      <param name="OldName"> </param>
    </member>
    <member name="T:EnvDTE._dispSelectionEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispSelectionEvents.OnChange">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispSelectionEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispSelectionEvents_Event.add_OnChange(EnvDTE._dispSelectionEvents_OnChangeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispSelectionEvents_Event.OnChange">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispSelectionEvents_Event.remove_OnChange(EnvDTE._dispSelectionEvents_OnChangeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispSelectionEvents_OnChangeEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents.AfterClosing">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents.BeforeClosing">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents.Opened">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents.ProjectAdded(EnvDTE.Project)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents.ProjectRemoved(EnvDTE.Project)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents.ProjectRenamed(EnvDTE.Project,System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
      <param name="OldName">The old name of the project.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents.QueryCloseSolution(System.Boolean@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="fCancel">Whether or not the close was cancelled.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents.Renamed(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="OldName">The old name.</param>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents_AfterClosingEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents_BeforeClosingEventHandler">
      <summary>Handles events that are fired before a solution is closed.</summary>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.add_AfterClosing(EnvDTE._dispSolutionEvents_AfterClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.add_BeforeClosing(EnvDTE._dispSolutionEvents_BeforeClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.add_Opened(EnvDTE._dispSolutionEvents_OpenedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.add_ProjectAdded(EnvDTE._dispSolutionEvents_ProjectAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.add_ProjectRemoved(EnvDTE._dispSolutionEvents_ProjectRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.add_ProjectRenamed(EnvDTE._dispSolutionEvents_ProjectRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.add_QueryCloseSolution(EnvDTE._dispSolutionEvents_QueryCloseSolutionEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.add_Renamed(EnvDTE._dispSolutionEvents_RenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispSolutionEvents_Event.AfterClosing">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispSolutionEvents_Event.BeforeClosing">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispSolutionEvents_Event.Opened">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispSolutionEvents_Event.ProjectAdded">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispSolutionEvents_Event.ProjectRemoved">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispSolutionEvents_Event.ProjectRenamed">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispSolutionEvents_Event.QueryCloseSolution">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.remove_AfterClosing(EnvDTE._dispSolutionEvents_AfterClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.remove_BeforeClosing(EnvDTE._dispSolutionEvents_BeforeClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.remove_Opened(EnvDTE._dispSolutionEvents_OpenedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.remove_ProjectAdded(EnvDTE._dispSolutionEvents_ProjectAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.remove_ProjectRemoved(EnvDTE._dispSolutionEvents_ProjectRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.remove_ProjectRenamed(EnvDTE._dispSolutionEvents_ProjectRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.remove_QueryCloseSolution(EnvDTE._dispSolutionEvents_QueryCloseSolutionEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispSolutionEvents_Event.remove_Renamed(EnvDTE._dispSolutionEvents_RenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispSolutionEvents_Event.Renamed">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents_OpenedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents_ProjectAddedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents_ProjectRemovedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents_ProjectRenamedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Project">The project.</param>
      <param name="OldName">The old name.</param>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents_QueryCloseSolutionEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="fCancel">Whether or not the close was cancelled.</param>
    </member>
    <member name="T:EnvDTE._dispSolutionEvents_RenamedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="OldName">The old name.</param>
    </member>
    <member name="T:EnvDTE._dispTaskListEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents.TaskAdded(EnvDTE.TaskItem)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="TaskItem">The task item.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents.TaskModified(EnvDTE.TaskItem,EnvDTE.vsTaskListColumn)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="TaskItem">The task item.</param>
      <param name="ColumnModified">The task list column that was modified.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents.TaskNavigated(EnvDTE.TaskItem,System.Boolean@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="TaskItem">The task item.</param>
      <param name="NavigateHandled">Whether or not the navigation was handled.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents.TaskRemoved(EnvDTE.TaskItem)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="TaskItem">The task item.</param>
    </member>
    <member name="T:EnvDTE._dispTaskListEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents_Event.add_TaskAdded(EnvDTE._dispTaskListEvents_TaskAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents_Event.add_TaskModified(EnvDTE._dispTaskListEvents_TaskModifiedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents_Event.add_TaskNavigated(EnvDTE._dispTaskListEvents_TaskNavigatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents_Event.add_TaskRemoved(EnvDTE._dispTaskListEvents_TaskRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents_Event.remove_TaskAdded(EnvDTE._dispTaskListEvents_TaskAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents_Event.remove_TaskModified(EnvDTE._dispTaskListEvents_TaskModifiedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents_Event.remove_TaskNavigated(EnvDTE._dispTaskListEvents_TaskNavigatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispTaskListEvents_Event.remove_TaskRemoved(EnvDTE._dispTaskListEvents_TaskRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispTaskListEvents_Event.TaskAdded">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispTaskListEvents_Event.TaskModified">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispTaskListEvents_Event.TaskNavigated">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispTaskListEvents_Event.TaskRemoved">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispTaskListEvents_TaskAddedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="TaskItem">The task item.</param>
    </member>
    <member name="T:EnvDTE._dispTaskListEvents_TaskModifiedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="TaskItem">The task item.</param>
      <param name="ColumnModified">The vsTaskListColumn that was modified.</param>
    </member>
    <member name="T:EnvDTE._dispTaskListEvents_TaskNavigatedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="TaskItem">The task item.</param>
      <param name="NavigateHandled">Whether the navigation event was handled.</param>
    </member>
    <member name="T:EnvDTE._dispTaskListEvents_TaskRemovedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="TaskItem">The task item.</param>
    </member>
    <member name="T:EnvDTE._dispTextEditorEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispTextEditorEvents.LineChanged(EnvDTE.TextPoint,EnvDTE.TextPoint,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="StartPoint">The start point.</param>
      <param name="EndPoint">The end point.</param>
      <param name="Hint">The hint.</param>
    </member>
    <member name="T:EnvDTE._dispTextEditorEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispTextEditorEvents_Event.add_LineChanged(EnvDTE._dispTextEditorEvents_LineChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispTextEditorEvents_Event.LineChanged">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispTextEditorEvents_Event.remove_LineChanged(EnvDTE._dispTextEditorEvents_LineChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE._dispTextEditorEvents_LineChangedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="StartPoint">The start point.</param>
      <param name="EndPoint">The end point.</param>
      <param name="Hint">The hint.</param>
    </member>
    <member name="T:EnvDTE._dispWindowEvents">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispWindowEvents.WindowActivated(EnvDTE.Window,EnvDTE.Window)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="GotFocus">The window that got the focus.</param>
      <param name="LostFocus">The window that lost the focus.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents.WindowClosing(EnvDTE.Window)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Window">The window.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents.WindowCreated(EnvDTE.Window)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Window">The window.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents.WindowMoved(EnvDTE.Window,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Window">The window.</param>
      <param name="Top">The top of the window.</param>
      <param name="Left">The left side of the window.</param>
      <param name="Width">The width of the window.</param>
      <param name="Height">The height of the window.</param>
    </member>
    <member name="T:EnvDTE._dispWindowEvents_Event">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE._dispWindowEvents_Event.add_WindowActivated(EnvDTE._dispWindowEvents_WindowActivatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents_Event.add_WindowClosing(EnvDTE._dispWindowEvents_WindowClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents_Event.add_WindowCreated(EnvDTE._dispWindowEvents_WindowCreatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents_Event.add_WindowMoved(EnvDTE._dispWindowEvents_WindowMovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents_Event.remove_WindowActivated(EnvDTE._dispWindowEvents_WindowActivatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents_Event.remove_WindowClosing(EnvDTE._dispWindowEvents_WindowClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents_Event.remove_WindowCreated(EnvDTE._dispWindowEvents_WindowCreatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE._dispWindowEvents_Event.remove_WindowMoved(EnvDTE._dispWindowEvents_WindowMovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE._dispWindowEvents_Event.WindowActivated">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispWindowEvents_Event.WindowClosing">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispWindowEvents_Event.WindowCreated">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="E:EnvDTE._dispWindowEvents_Event.WindowMoved">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._dispWindowEvents_WindowActivatedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="GotFocus">The window that got focus.</param>
      <param name="LostFocus">The window that lost focus.</param>
    </member>
    <member name="T:EnvDTE._dispWindowEvents_WindowClosingEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Window">The window.</param>
    </member>
    <member name="T:EnvDTE._dispWindowEvents_WindowCreatedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Window">The window.</param>
    </member>
    <member name="T:EnvDTE._dispWindowEvents_WindowMovedEventHandler">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Window">The window.</param>
      <param name="Top">The top of the window.</param>
      <param name="Left">The left side of the window.</param>
      <param name="Width">The width of the window.</param>
      <param name="Height">The height of the window.</param>
    </member>
    <member name="T:EnvDTE._DocumentEvents">
      <summary>Refer to <see cref="T:EnvDTE.DocumentEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._DocumentEventsRoot">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._DocumentEventsRoot.DocumentEvents(EnvDTE.Document)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The document event.</returns>
      <param name="WindowFilter"></param>
    </member>
    <member name="T:EnvDTE._DTE">
      <summary>The top-level object in the Visual Studio automation object model. Refer to <see cref="T:EnvDTE._DTE" /> for this functionality. Do not instantiate from this class.</summary>
    </member>
    <member name="P:EnvDTE._DTE.ActiveDocument">
      <summary>Gets the active document.</summary>
      <returns>A <see cref="T:EnvDTE.Document" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.ActiveSolutionProjects">
      <summary>Gets an array of currently selected projects.</summary>
      <returns>An array of currently selected projects.</returns>
    </member>
    <member name="P:EnvDTE._DTE.ActiveWindow">
      <summary>Returns the currently active window, or the top-most window if no others are active. </summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object. Returns Nothing if no windows are open.</returns>
    </member>
    <member name="P:EnvDTE._DTE.AddIns">
      <summary>Gets the <see cref="T:EnvDTE.AddIns" /> collection, which contains all currently available Add-ins.</summary>
      <returns>A <see cref="T:EnvDTE.AddIns" /> collection.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Application">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The DTE object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.CommandBars">
      <summary>Gets a reference to the development environment's command bars.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.CommandBars,CommandBars" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.CommandLineArguments">
      <summary>Gets a string representing the command line arguments.</summary>
      <returns>A string representing the command line arguments.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Commands">
      <summary>Returns the <see cref="T:EnvDTE.Commands" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Commands" /> collection.</returns>
    </member>
    <member name="P:EnvDTE._DTE.ContextAttributes">
      <summary>Gets a <see cref="T:EnvDTE.ContextAttributes" /> collection which allows automation clients to add new attributes to the current selected items in the Dynamic Help window and provide contextual help for the additional attributes.</summary>
      <returns>A <see cref="T:EnvDTE.ContextAttributes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Debugger">
      <summary>Gets the debugger objects.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.DisplayMode">
      <summary>Gets the display mode, either MDI or Tabbed Documents.</summary>
      <returns>A <see cref="T:EnvDTE.vsDisplay" /> constant representing the display mode.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Documents">
      <summary>Gets the collection of open documents in the development environment.</summary>
      <returns>A <see cref="T:EnvDTE.Documents" /> collection.</returns>
    </member>
    <member name="P:EnvDTE._DTE.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Edition">
      <summary>Gets a description of the edition of the environment.</summary>
      <returns>A string representing the description of the environment edition.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Events">
      <summary>Gets a reference to the <see cref="T:EnvDTE.Events" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Events" /> object.</returns>
    </member>
    <member name="M:EnvDTE._DTE.ExecuteCommand(System.String,System.String)">
      <summary>Executes the specified command.</summary>
      <param name="CommandName">Required. The name of the command to invoke.</param>
      <param name="CommandArgs">Optional. A string containing the same arguments you would supply if you were invoking the command from the Command window. If a string is supplied, it is passed to the command line as the command's first argument and is parsed to form the various arguments for the command. This is similar to how commands are invoked in the Command window. </param>
    </member>
    <member name="P:EnvDTE._DTE.FileName">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The file name.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Find">
      <summary>Gets the <see cref="T:EnvDTE.Find" /> object that represents global text find operations.</summary>
      <returns>A <see cref="T:EnvDTE.Find" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A string representing the full path and name of the object's file.</returns>
    </member>
    <member name="M:EnvDTE._DTE.GetObject(System.String)">
      <summary>Gets an interface or object that is late-bound to the <see cref="T:EnvDTE.DTE" /> object and can be accessed by name at run time.</summary>
      <returns>An interface or object that is late-bound to the <see cref="T:EnvDTE.DTE" /> object.</returns>
      <param name="Name">Required. The name of the object to retrieve.</param>
    </member>
    <member name="P:EnvDTE._DTE.Globals">
      <summary>Gets the <see cref="T:EnvDTE.Globals" /> object that contains Add-in values that may be saved in the solution (.sln) file, the project file, or in the user's profile data.</summary>
      <returns>A <see cref="T:EnvDTE.Globals" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.IsOpenFile(System.String,System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the file is open, otherwise false.</returns>
      <param name="ViewKind">The kind of view.</param>
      <param name="FileName">The file name.</param>
    </member>
    <member name="P:EnvDTE._DTE.ItemOperations">
      <summary>Gets the <see cref="T:EnvDTE.ItemOperations" /> object.</summary>
      <returns>An <see cref="T:EnvDTE.ItemOperations" /> object.</returns>
    </member>
    <member name="M:EnvDTE._DTE.LaunchWizard(System.String,System.Object[]@)">
      <summary>Runs a wizard with the supplied parameters.</summary>
      <returns>A <see cref="T:EnvDTE.wizardResult" /> object.</returns>
      <param name="VSZFile">Required. The .Vsz (wizard) file containing the information required to launch the wizard.</param>
      <param name="ContextParams">Required. The parameters for the wizard. The first parameter is a GUID that uniquely identifies the launch context as distinct from Add Item or Add Project or a custom GUID. The remaining arguments are user-defined and their number and values depend on the wizard.Wizards (or templates) that come with Visual Studio — such as Visual Basic Windows Application or Visual C# Console Application—have a required set of context parameters that you must pass to them. For details on these, see Context Parameters for Launching Wizards. Wizards that you create can have more or less parameters. </param>
    </member>
    <member name="P:EnvDTE._DTE.LocaleID">
      <summary>Gets the ID of the locale in which the development environment is running.</summary>
      <returns>An integer value representing the ID of the locale in which the development environment is running.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Macros">
      <summary>Gets the <see cref="T:EnvDTE.Macros" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Macros" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.MacrosIDE">
      <summary>Gets the root of the Macros IDE's automation model.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.MainWindow">
      <summary>Gets a <see cref="T:EnvDTE.Window" /> object representing the main development environment window.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Mode">
      <summary>Gets the mode of the development environment, either debug or design.</summary>
      <returns>A <see cref="T:EnvDTE.vsIDEMode" /> value.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Name">
      <summary>Sets or gets the name of the <see cref="T:EnvDTE._DTE" /> object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE._DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.ObjectExtenders">
      <summary>Gets the <see cref="T:EnvDTE.ObjectExtenders" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ObjectExtenders" /> object.</returns>
    </member>
    <member name="M:EnvDTE._DTE.OpenFile(System.String,System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The window in which the file is open.</returns>
      <param name="ViewKind">The kind of view.</param>
      <param name="FileName">The name of the file.</param>
    </member>
    <member name="P:EnvDTE._DTE.Properties(System.String,System.String)">
      <summary>Returns a <see cref="T:EnvDTE.Properties" /> collection representing all available categories and subcategories contained in the Options dialog box on the Tools menu.</summary>
      <returns>A <see cref="T:EnvDTE.Properties" /> collection containing all available categories and subcategories in the IDE.</returns>
      <param name="Category">Required. The name of the property category, such as General or Text Editor.</param>
      <param name="Page">Optional. The name of the property page within the given <paramref name="Category" />, such as Keyboard.</param>
    </member>
    <member name="M:EnvDTE._DTE.Quit">
      <summary>Closes the environment.</summary>
    </member>
    <member name="P:EnvDTE._DTE.RegistryRoot">
      <summary>Gets a string with the path to the root of the Visual Studio registry settings.</summary>
      <returns>A string representing the path to the root of the Visual Studio registry settings.</returns>
    </member>
    <member name="M:EnvDTE._DTE.SatelliteDllPath(System.String,System.String)">
      <summary>Returns the computed path to the satellite DLL when given the installation directory for an Add-in or wizard and the file name of the DLL containing localized resources.</summary>
      <returns>A string representing the computed path to the satellite DLL.</returns>
      <param name="Path">Required. Specifies the full path to the directory where the Add-in or wizard is installed.</param>
      <param name="Name">Required. The filename for the satellite DLL, such as "MyAddinUI.DLL."</param>
    </member>
    <member name="P:EnvDTE._DTE.SelectedItems">
      <summary>Gets a collection containing the items currently selected in the environment.</summary>
      <returns>A <see cref="T:EnvDTE.SelectedItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Solution">
      <summary>Gets the <see cref="T:EnvDTE.Solution" /> object that represents all open projects in the current instance of the environment and allows access to the build objects.</summary>
      <returns>A <see cref="T:EnvDTE.Solution" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.SourceControl">
      <summary>Gets a <see cref="T:EnvDTE.SourceControl" /> object that allows you to manipulate the source code control state of the file behind the object.</summary>
      <returns>A <see cref="T:EnvDTE.SourceControl" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.StatusBar">
      <summary>Gets the <see cref="T:EnvDTE.StatusBar" /> object, representing the status bar on the main development environment window.</summary>
      <returns>A <see cref="T:EnvDTE.StatusBar" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.SuppressUI">
      <summary>Gets or sets whether UI should be displayed during the execution of automation code.</summary>
      <returns>A Boolean value indicating True if the UI is suppressed, False if not.</returns>
    </member>
    <member name="P:EnvDTE._DTE.UndoContext">
      <summary>Gets the global <see cref="T:EnvDTE.UndoContext" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.UndoContext" /> object.</returns>
    </member>
    <member name="P:EnvDTE._DTE.UserControl">
      <summary>Sets or gets a value indicating whether the environment was launched by a user or by automation.</summary>
      <returns>true if the environment is running under user control; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Version">
      <summary>Gets the host application's version number.</summary>
      <returns>The host application's version number.</returns>
    </member>
    <member name="P:EnvDTE._DTE.WindowConfigurations">
      <summary>Gets the <see cref="T:EnvDTE.WindowConfigurations" /> collection, representing all available window configurations.</summary>
      <returns>A <see cref="T:EnvDTE.WindowConfigurations" /> collection.</returns>
    </member>
    <member name="P:EnvDTE._DTE.Windows">
      <summary>Gets a <see cref="T:EnvDTE.Windows" /> collection containing the windows that display in the object.</summary>
      <returns>A <see cref="T:EnvDTE.Windows" /> collection.</returns>
    </member>
    <member name="T:EnvDTE._DTEEvents">
      <summary>Refer to <see cref="T:EnvDTE.DTEEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._EnvironmentDocuments">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._EnvironmentDocuments.AutoloadExternalChanges">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the changes are to be autoloaded, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentDocuments.DetectFileChangesOutsideIDE">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if external changes are to be detected, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentDocuments.FindReplaceInitializeFromEditor">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the find/replace operations are to be initialized from the editor, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentDocuments.FindReplaceShowMessageBoxes">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if find/replace operations are to show message boxes, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentDocuments.InitializeOpenFileFromCurrentDocument">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the open file operation should be initialized from the current document, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentDocuments.MiscFilesProjectSavesLastNItems">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the Miscellaneous Files project is to save the last dirty items, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentDocuments.ReuseSavedActiveDocWindow">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the document window is to be reused, otherwise false.</returns>
    </member>
    <member name="T:EnvDTE._EnvironmentFontsAndColors">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE._EnvironmentGeneral">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._EnvironmentGeneral.Animations">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if animations are used, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentGeneral.AnimationSpeed">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The speed of the animation.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentGeneral.AutohidePinActiveTabOnly">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if all tabs other than the active one are to be hidden, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentGeneral.CloseButtonActiveTabOnly">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if Close closes only the active tab, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentGeneral.MRUListContainsNItems">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The number Most Recently Used items to show..</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentGeneral.OnStartUp">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The startup object.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentGeneral.ShowCommandWindowCompletion">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if completion should be performed in the command window, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentGeneral.ShowStatusBar">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the status bar should be displayed, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentGeneral.WindowMenuContainsNItems">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The number of items on a window menu.</returns>
    </member>
    <member name="T:EnvDTE._EnvironmentHelp">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._EnvironmentHelp.External">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if Help is external, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentHelp.PreferredCollection">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The preferred collection.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentHelp.PreferredLanguage">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The preferred language.</returns>
    </member>
    <member name="T:EnvDTE._EnvironmentKeyboard">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._EnvironmentKeyboard.Scheme">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The keyboard scheme.</returns>
    </member>
    <member name="T:EnvDTE._EnvironmentProjectsAndSolution">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._EnvironmentProjectsAndSolution.OnRunOrPreview">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The vsSaveChanges object.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentProjectsAndSolution.ProjectsLocation">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The project location.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentProjectsAndSolution.ShowOutputWindowBeforeBuild">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the output window should be displayed before a build, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentProjectsAndSolution.ShowTaskListAfterBuild">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the task list should be displayed after a build, otherwise false.</returns>
    </member>
    <member name="T:EnvDTE._EnvironmentTaskList">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._EnvironmentTaskList.CommentTokens">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The comment tokens.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentTaskList.ConfirmTaskDeletion">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if task deletion should display a confirmation message, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentTaskList.WarnOnAddingHiddenItem">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if there should be a warning if a hidden item is added, otherwise false.</returns>
    </member>
    <member name="T:EnvDTE._EnvironmentWebBrowser">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._EnvironmentWebBrowser.HomePage">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The URL of the home page.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentWebBrowser.SearchPage">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The URL of the search page.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentWebBrowser.UseDefaultHomePage">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if a default home page should be displayed, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentWebBrowser.UseDefaultSearchPage">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if a default search page should be used, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentWebBrowser.ViewSourceExternalProgram">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The source of the external program.</returns>
    </member>
    <member name="P:EnvDTE._EnvironmentWebBrowser.ViewSourceIn">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The vsBrowserViewSource object.</returns>
    </member>
    <member name="T:EnvDTE._FindEvents">
      <summary>Refer to <see cref="T:EnvDTE.FindEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._FontsAndColors">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._FontsAndColors.FontCharacterSet">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The vsFontCharSet object.</returns>
    </member>
    <member name="P:EnvDTE._FontsAndColors.FontFamily">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The name of the font family.</returns>
    </member>
    <member name="P:EnvDTE._FontsAndColors.FontsAndColorsItems">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The FontsAndColorsItems object.</returns>
    </member>
    <member name="P:EnvDTE._FontsAndColors.FontSize">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The font size.</returns>
    </member>
    <member name="T:EnvDTE._MiscSlnFilesEventsRoot">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._MiscSlnFilesEventsRoot.MiscFilesEvents">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The Miscellaneous Files events.</returns>
    </member>
    <member name="P:EnvDTE._MiscSlnFilesEventsRoot.SolutionItemsEvents">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The solution items events.</returns>
    </member>
    <member name="T:EnvDTE._OutputWindowEvents">
      <summary>Refer to <see cref="T:EnvDTE.OutputWindowEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._OutputWindowEventsRoot">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._OutputWindowEventsRoot.OutputWindowEvents(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The output window events.</returns>
      <param name="PaneFilter"></param>
    </member>
    <member name="T:EnvDTE._ProjectItemsEvents">
      <summary>Refer to <see cref="T:EnvDTE.ProjectItemsEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._ProjectsEvents">
      <summary>Refer to <see cref="T:EnvDTE.ProjectsEvents" /> for this functionality. Do instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._SelectionEvents">
      <summary>Refer <see cref="T:EnvDTE.SelectionEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._Solution">
      <summary>Represents all projects and solution-wide properties in the integrated development environment (IDE). Refer to <see cref="T:EnvDTE.Solution" /> for this functionality. Do not instantiate from this class.</summary>
    </member>
    <member name="M:EnvDTE._Solution.AddFromFile(System.String,System.Boolean)">
      <summary>Adds a project to the solution, based on a project file already stored in the system.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
      <param name="FileName">Required. The full path and file name of the project file.</param>
      <param name="Exclusive">Optional. Indicates whether the project loads in the current solution or its own; true if the current solution is closed and the project is added to a new solution, false if the project is added to the existing open solution.</param>
    </member>
    <member name="M:EnvDTE._Solution.AddFromTemplate(System.String,System.String,System.String,System.Boolean)">
      <summary>Copies an existing project file, and any items or subdirectories it contains, to the specified location and adds it to the solution.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
      <param name="FileName">Required. The full path and file name with extension of the template project file.</param>
      <param name="Destination">Required. The full path of the directory in which to copy the contents of <paramref name="FileName" />.</param>
      <param name="ProjectName">Required. The name of the project file in the destination directory. This should include the extension. The name displayed is derived from <paramref name="ProjectName" />.</param>
      <param name="Exclusive">Optional. Indicates whether the project loads in the current solution or its own; true if the current solution is closed and the project is added to a new solution, false if the project is added to the existing open solution.</param>
    </member>
    <member name="P:EnvDTE._Solution.AddIns">
      <summary>Gets an <see cref="T:EnvDTE.AddIns" /> collection, which contains all currently available add-ins associated with the solution.</summary>
      <returns>An <see cref="T:EnvDTE.AddIns" /> collection.</returns>
    </member>
    <member name="M:EnvDTE._Solution.Close(System.Boolean)">
      <summary>Closes the current solution.</summary>
      <param name="SaveFirst">Indicates whether to save the solution before closing it; true if the solution should be saved prior to closing it, false if not.</param>
    </member>
    <member name="P:EnvDTE._Solution.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:EnvDTE._Solution.Create(System.String,System.String)">
      <summary>Creates an empty solution in the specified directory with the specified name.</summary>
      <param name="Destination">Required. The directory in which to create the .sln and .suo (solution) files.</param>
      <param name="Name">Required. The name to display in Solution Explorer. This is also the base name of the .sln and .suo files.</param>
    </member>
    <member name="P:EnvDTE._Solution.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE._Solution.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE._Solution.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A GUID representing the CATID of the object.</returns>
    </member>
    <member name="P:EnvDTE._Solution.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE._Solution.FileName">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The file name.</returns>
    </member>
    <member name="M:EnvDTE._Solution.FindProjectItem(System.String)">
      <summary>Locates an item in a project.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
      <param name="FileName">Required. The name of the project item.</param>
    </member>
    <member name="P:EnvDTE._Solution.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:EnvDTE._Solution.GetEnumerator">
      <summary>Returns an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="P:EnvDTE._Solution.Globals">
      <summary>Gets the <see cref="T:EnvDTE.Globals" /> that contains add-in values that may be saved in the solution (.sln) file, the project file, or in the user's profile data.</summary>
      <returns>A <see cref="T:EnvDTE.Globals" /> object.</returns>
    </member>
    <member name="P:EnvDTE._Solution.IsDirty">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the solution is dirty; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE._Solution.IsOpen">
      <summary>Determines if a solution is open.</summary>
      <returns>true if a solution is open; otherwise, false.</returns>
    </member>
    <member name="M:EnvDTE._Solution.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.Project" /> object in a <see cref="T:EnvDTE.Projects" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.Project" /> object to return.</param>
    </member>
    <member name="M:EnvDTE._Solution.Open(System.String)">
      <summary>Opens the solution in the specified view.</summary>
      <param name="FileName">Required. The filename of the file to open.</param>
    </member>
    <member name="P:EnvDTE._Solution.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE._Solution" />.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE._Solution.ProjectItemsTemplatePath(System.String)">
      <summary>Returns the location of project item templates for the specified project type.</summary>
      <returns>The path to the templates of the given project type.</returns>
      <param name="ProjectKind">Required. The <see cref="T:EnvDTE.Constants" />.vsProjectKind* project template representing the project type.</param>
    </member>
    <member name="P:EnvDTE._Solution.Projects">
      <summary>Gets a collection of the projects currently in the solution.</summary>
      <returns>A <see cref="T:EnvDTE.Projects" /> collection.</returns>
    </member>
    <member name="P:EnvDTE._Solution.Properties">
      <summary>Gets a collection of all properties that pertain to the <see cref="T:EnvDTE._Solution" />.</summary>
      <returns>A <see cref="T:EnvDTE.Properties" /> collection.</returns>
    </member>
    <member name="M:EnvDTE._Solution.Remove(EnvDTE.Project)">
      <summary>Removes the specified project from the solution.</summary>
      <param name="proj">Required. The project to remove from the solution.</param>
    </member>
    <member name="M:EnvDTE._Solution.SaveAs(System.String)">
      <summary>Saves the solution.</summary>
      <param name="FileName">Required. The filename in which to save the solution. If the file exists, it is overwritten.</param>
    </member>
    <member name="P:EnvDTE._Solution.Saved">
      <summary>Returns true if the object has not been modified since last being saved or opened.</summary>
      <returns>A Boolean value indicating true (default) if the object has not been modified since last being saved or opened; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE._Solution.SolutionBuild">
      <summary>Gets the <see cref="T:EnvDTE.SolutionBuild" /> object for the solution, which represents the root of the build automation model at the solution level.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionBuild" /> object.</returns>
    </member>
    <member name="P:EnvDTE._Solution.TemplatePath(System.String)">
      <summary>Gets the full path and name of the directory that contains templates for the specified type of project.</summary>
      <returns>The full path and name of the directory that contains templates for the specified type of project.</returns>
      <param name="ProjectType">Required. A GUID that identifies the type of project.</param>
    </member>
    <member name="T:EnvDTE._SolutionEvents">
      <summary>Refer to <see cref="T:EnvDTE.SolutionEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._TaskListEvents">
      <summary>Refer to <see cref="T:EnvDTE.TaskListEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._TaskListEventsRoot">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._TaskListEventsRoot.TaskListEvents">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The task list events.</returns>
    </member>
    <member name="T:EnvDTE._TextEditorEvents">
      <summary>Refer to <see cref="T:EnvDTE.TextEditorEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._TextEditorEventsRoot">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._TextEditorEventsRoot.TextEditorEvents(EnvDTE.TextDocument)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="TextDocumentFilter"></param>
    </member>
    <member name="T:EnvDTE._WindowEvents">
      <summary>Refer to <see cref="T:EnvDTE.WindowEvents" /> for this functionality. Do not instantiate this class.</summary>
    </member>
    <member name="T:EnvDTE._WindowEventsRoot">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE._WindowEventsRoot.WindowEvents(EnvDTE.Window)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="WindowFilter"></param>
    </member>
    <member name="T:EnvDTE.AddIn">
      <summary>Represents an add-in listed in the Add-In Manager dialog box and provides information about an add-in to other add-in objects.</summary>
    </member>
    <member name="P:EnvDTE.AddIn.Collection">
      <summary>Returns the collection containing the <see cref="T:EnvDTE.AddIn" /> object that supports this property.</summary>
      <returns>An <see cref="T:EnvDTE.AddIns" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.AddIn.Connected">
      <summary>Gets or sets a value indicating whether an add-in is loaded and connected.</summary>
      <returns>A Boolean value indicating whether an add-in is loaded and connected.</returns>
    </member>
    <member name="P:EnvDTE.AddIn.Description">
      <summary>Gets or sets a string that represents the description for the <see cref="T:EnvDTE.AddIn" /> object.</summary>
      <returns>A string that represents the description for the <see cref="T:EnvDTE.AddIn" /> object.</returns>
    </member>
    <member name="P:EnvDTE.AddIn.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.AddIn.Guid">
      <summary>Gets the GUID for the <see cref="T:EnvDTE.AddIn" /> object.</summary>
      <returns>A string representing the CLSID of the add-in as obtained from the add-in's registry entry.</returns>
    </member>
    <member name="P:EnvDTE.AddIn.Name">
      <summary>Gets the name of the <see cref="T:EnvDTE.AddIn" /> object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.AddIn" /> object.</returns>
    </member>
    <member name="P:EnvDTE.AddIn.Object">
      <summary>Sets or gets the object supporting the specified <see cref="T:EnvDTE.AddIn" /> object.</summary>
      <returns>An additional OLE automation object to support other add-ins.</returns>
    </member>
    <member name="P:EnvDTE.AddIn.ProgID">
      <summary>Gets the ProgID based on the add-in's registry entry.</summary>
      <returns>A string representing the ProgID.</returns>
    </member>
    <member name="M:EnvDTE.AddIn.Remove">
      <summary>Removes the add-in from the collection of add-ins and makes it unavailable.</summary>
    </member>
    <member name="P:EnvDTE.AddIn.SatelliteDllPath">
      <summary>Gets the location of a DLL containing localized resources, if available.</summary>
      <returns>A string representing the path of a DLL containing localized resources.</returns>
    </member>
    <member name="T:EnvDTE.AddIns">
      <summary>Contains all add-ins listed in the Add-In Manager dialog box if they are DTE.AddIns, or all of the add-ins loaded by a particular solution if they are ProjectSolution.AddIns.</summary>
    </member>
    <member name="M:EnvDTE.AddIns.Add(System.String,System.String,System.String,System.Boolean)">
      <summary>Adds an add-in to the collection of add-ins loaded when a particular solution loads. It fails if the collection is the DTE.AddIns collection.</summary>
      <returns>An <see cref="T:EnvDTE.AddIn" /> object.</returns>
      <param name="ProgID">Required. The ProgID of the add-in to add to the collection.</param>
      <param name="Description">Required. A description for the add-in to add to the collection.</param>
      <param name="Name">Required. The name of the add-in to add to the collection.</param>
      <param name="Connected">Required. Indicates whether the add-in is currently loaded.</param>
    </member>
    <member name="P:EnvDTE.AddIns.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.AddIns" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.AddIns" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.AddIns.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.AddIns.GetEnumerator">
      <summary>Gets an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.AddIns.Item(System.Object)">
      <summary>Returns an <see cref="T:EnvDTE.AddIn" /> object in an <see cref="T:EnvDTE.AddIns" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.AddIn" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.AddIn" /> object to return.</param>
    </member>
    <member name="P:EnvDTE.AddIns.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.AddIns" /> collection.</summary>
      <returns>The immediate parent object of a given object.</returns>
    </member>
    <member name="M:EnvDTE.AddIns.Update">
      <summary>Updates the collection as if the user opened the Add-in Manager dialog box, or sets the object's window layout to the current window layout.</summary>
    </member>
    <member name="T:EnvDTE.Breakpoint">
      <summary>The <see cref="T:EnvDTE.Breakpoint" /> object contains the properties and methods used to programmatically manipulate a <see cref="T:EnvDTE.Breakpoint" />.</summary>
    </member>
    <member name="P:EnvDTE.Breakpoint.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.Collection">
      <summary>Gets the <see cref="T:EnvDTE.Breakpoints" /> collection </summary>
      <returns>A <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.Condition">
      <summary>Specifies the condition for the breakpoint.</summary>
      <returns>A string representing the breakpoint condition for the property.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.ConditionType">
      <summary>Indicates whether the condition type will break the program execution when true or break when changed.</summary>
      <returns>A <see cref="T:EnvDTE.dbgBreakpointConditionType" /> value.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.CurrentHits">
      <summary>Indicates the number of times a breakpoint has been hit during the active debugging session.</summary>
      <returns>An integer representing the number of times this breakpoint has been hit during this debugging session.</returns>
    </member>
    <member name="M:EnvDTE.Breakpoint.Delete">
      <summary>Deletes the breakpoint.</summary>
    </member>
    <member name="P:EnvDTE.Breakpoint.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.Enabled">
      <summary>Sets or gets the enabled state of this <see cref="T:EnvDTE.Breakpoint" /> object.</summary>
      <returns>A Boolean value representing whether this T:EnvDTE.Breakpoint object is enabled or not.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.File">
      <summary>Gets the name of the file that contains the breakpoint or a declaration of the parent object.</summary>
      <returns>A string representing a file name.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.FileColumn">
      <summary>Indicates the character location within a line in a file for a file breakpoint. </summary>
      <returns>An integer that represents the character location within a line in a file that contains the breakpoint.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.FileLine">
      <summary>Indicates the line location within a file for a breakpoint.</summary>
      <returns>An integer that represents the line number in the source code, measured from the start of the function, at which the breakpoint is set.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.FunctionColumnOffset">
      <summary>Indicates the column offset from the name of a function breakpoint.</summary>
      <returns>An integer value representing the column offset from the name of a function breakpoint.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.FunctionLineOffset">
      <summary>Indicates the line offset from the name of a function breakpoint.</summary>
      <returns>An integer value representing the line offset from the name of a function breakpoint.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.FunctionName">
      <summary>Gets the name of the function where the breakpoint is set.</summary>
      <returns>A string that represents the name of the function.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.HitCountTarget">
      <summary>Gets the hit count target for any type of breakpoint. Interpreted based on the hit count type.</summary>
      <returns>An integer value representing the hit count target for any type of breakpoint.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.HitCountType">
      <summary>Describes how to interpret a hit count.</summary>
      <returns>A <see cref="T:EnvDTE.dbgHitCountType" /> value.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.Language">
      <summary>Gets the language associated with the name or conditional breakpoint.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.LocationType">
      <summary>Indicates the location type this breakpoint represents.</summary>
      <returns>A <see cref="T:EnvDTE.dbgBreakpointLocationType" /> value.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.Name">
      <summary>Sets or gets the name of the Breakpoint.</summary>
      <returns>A string representing the name of the Breakpoint.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Breakpoint" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.Program">
      <summary>Gets a reference to a <see cref="T:EnvDTE.Program" /> object. </summary>
      <returns>A reference to a <see cref="T:EnvDTE.Program" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.Tag">
      <summary>Sets or gets a user-defined string identifying the Breakpoint.</summary>
      <returns>A string value representing the Breakpoint.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoint.Type">
      <summary>Gets a constant indicating the <see cref="T:EnvDTE.Breakpoint" /> type.</summary>
      <returns>A <see cref="T:EnvDTE.dbgBreakpointType" /> constant, specifying the type of breakpoint.</returns>
    </member>
    <member name="T:EnvDTE.Breakpoints">
      <summary>Provides a list of pending breakpoints.</summary>
    </member>
    <member name="M:EnvDTE.Breakpoints.Add(System.String,System.String,System.Int32,System.Int32,System.String,EnvDTE.dbgBreakpointConditionType,System.String,System.String,System.Int32,System.String,System.Int32,EnvDTE.dbgHitCountType)">
      <summary>Creates and enables a new breakpoint.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
      <param name="Function">Optional. A function breakpoint. The name of the function on which the breakpoint is set.</param>
      <param name="File">Optional. A file breakpoint. The name and optional path of the file in which the breakpoint is set.</param>
      <param name="Line">Optional. A file breakpoint. The source-code line number, measured from the start of the function, at which the breakpoint is set. If this value is 1, the breakpoint is set at the start of the function.</param>
      <param name="Column">Optional. A file breakpoint. The character at which the breakpoint is set. In most cases, you can leave this value set to 1, which sets the breakpoint at the start of the line.</param>
      <param name="Condition">Optional. The breakpoint <see cref="P:EnvDTE.Breakpoint.Condition" />. Use with <paramref name="ConditionType" />.</param>
      <param name="ConditionType">Optional. The condition type. A <see cref="T:EnvDTE.dbgBreakpointConditionType" /> value. Use with <paramref name="Condition" />.</param>
      <param name="Language">Optional. The programming language in which the function is written.</param>
      <param name="Data">Optional. A data breakpoint. If the breakpoint is set on a variable, you can specify the name of the variable. You can use the Context Operator (C/C++ Language Expressions) to specify a variable outside the current scope.</param>
      <param name="DataCount">Optional. A data breakpoint. If the breakpoint is set on a variable, and if the variable is an array or dereferenced pointer, this value specifies the number of elements to watch.</param>
      <param name="Address">Optional. An address breakpoint. The memory address where the breakpoint is set, in decimal or hexadecimal format.</param>
      <param name="HitCount">Optional. The Hit Count property for the breakpoint. If you specify no hit count, program execution breaks each time the breakpoint is hit. If you specify a hit count, program execution breaks only on the specified number of hits.</param>
      <param name="HitCountType">Optional. The hit count type. A <see cref="T:EnvDTE.dbgHitCountType" /> value.</param>
    </member>
    <member name="P:EnvDTE.Breakpoints.Count">
      <summary>Returns a value indicating the number of <see cref="T:EnvDTE.Breakpoint" /> objects in the <see cref="T:EnvDTE.Breakpoints" /> collection.</summary>
      <returns>An integer value representing the number of <see cref="T:EnvDTE.Breakpoint" /> objects in the collection.</returns>
    </member>
    <member name="P:EnvDTE.Breakpoints.DTE">
      <summary>Returns the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Breakpoints.GetEnumerator">
      <summary>Gets an enumerator.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Breakpoints.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.Breakpoint" /> object in a <see cref="T:EnvDTE.Breakpoints" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoint" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.Breakpoint" /> object to return.</param>
    </member>
    <member name="P:EnvDTE.Breakpoints.Parent">
      <summary>Returns the parent <see cref="T:EnvDTE.Debugger" /> object of a given <see cref="T:EnvDTE.Breakpoints" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="T:EnvDTE.BuildDependencies">
      <summary>Represents all of the projects that the specified project depends on.</summary>
    </member>
    <member name="P:EnvDTE.BuildDependencies.Count">
      <summary>Returns a value indicating the number of objects in the <see cref="T:EnvDTE.BuildDependencies" /> collection.</summary>
      <returns>An integer value representing the number of objects in the <see cref="T:EnvDTE.BuildDependencies" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.BuildDependencies.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.BuildDependencies.GetEnumerator">
      <summary>Gets an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.BuildDependencies.Item(System.Object)">
      <summary>Gets an indexed member of a <see cref="T:EnvDTE.BuildDependencies" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.BuildDependency" /> object.</returns>
      <param name="index">Required. The index of the item to return. </param>
    </member>
    <member name="P:EnvDTE.BuildDependencies.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.BuildDependencies" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionBuild" /> object.</returns>
    </member>
    <member name="T:EnvDTE.BuildDependency">
      <summary>Represents all of the projects that the specified project depends on to complete a build.</summary>
    </member>
    <member name="M:EnvDTE.BuildDependency.AddProject(System.String)">
      <summary>Adds a project to the list of projects that must be built first.</summary>
      <param name="ProjectUniqueName">Required. The name of the project from the <see cref="P:EnvDTE.Project.UniqueName" /> property to add as a dependency.</param>
    </member>
    <member name="P:EnvDTE.BuildDependency.Collection">
      <summary>Returns the <see cref="T:EnvDTE.BuildDependencies" /> collection containing the <see cref="T:EnvDTE.BuildDependency" /> object that supports this property.</summary>
      <returns>A <see cref="T:EnvDTE.BuildDependencies" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.BuildDependency.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.BuildDependency.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="M:EnvDTE.BuildDependency.RemoveAllProjects">
      <summary>Removes all projects from the list of projects that must be built first.</summary>
    </member>
    <member name="M:EnvDTE.BuildDependency.RemoveProject(System.String)">
      <summary>Removes a project from the list that specifies the order in which projects are built.</summary>
      <param name="ProjectUniqueName">Required. The name of the project from the <see cref="P:EnvDTE.Project.UniqueName" /> property to add as a dependency.</param>
    </member>
    <member name="P:EnvDTE.BuildDependency.RequiredProjects">
      <summary>Gets a list of the projects that must be built before the BuildDependency.Project project is built.</summary>
      <returns>
        <see cref="P:EnvDTE.BuildDependency.RequiredProjects" /> returns a SafeArray of dependent projects.</returns>
    </member>
    <member name="T:EnvDTE.BuildEvents">
      <summary>Provides a list of events for solution builds. Use this object for functionality and refer to <see cref="T:EnvDTE.BuildEventsClass" /> for this object’s documentation.</summary>
    </member>
    <member name="T:EnvDTE.BuildEventsClass">
      <summary>Refer to <see cref="T:EnvDTE.BuildEvents" /> for this functionality. Do not instantiate from this class.</summary>
    </member>
    <member name="M:EnvDTE.BuildEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.BuildEventsClass.add_OnBuildBegin(EnvDTE._dispBuildEvents_OnBuildBeginEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.BuildEventsClass.add_OnBuildDone(EnvDTE._dispBuildEvents_OnBuildDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.BuildEventsClass.add_OnBuildProjConfigBegin(EnvDTE._dispBuildEvents_OnBuildProjConfigBeginEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.BuildEventsClass.add_OnBuildProjConfigDone(EnvDTE._dispBuildEvents_OnBuildProjConfigDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.BuildEventsClass.OnBuildBegin">
      <summary>Occurs before the solution builds, before a batch build begins, or just before a project begins to build.</summary>
    </member>
    <member name="E:EnvDTE.BuildEventsClass.OnBuildDone">
      <summary>Occurs after a solution build completes.</summary>
    </member>
    <member name="E:EnvDTE.BuildEventsClass.OnBuildProjConfigBegin">
      <summary>Occurs when a project configuration build begins.</summary>
    </member>
    <member name="E:EnvDTE.BuildEventsClass.OnBuildProjConfigDone">
      <summary>Occurs after a project configuration build completes.</summary>
    </member>
    <member name="M:EnvDTE.BuildEventsClass.remove_OnBuildBegin(EnvDTE._dispBuildEvents_OnBuildBeginEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.BuildEventsClass.remove_OnBuildDone(EnvDTE._dispBuildEvents_OnBuildDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.BuildEventsClass.remove_OnBuildProjConfigBegin(EnvDTE._dispBuildEvents_OnBuildProjConfigBeginEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.BuildEventsClass.remove_OnBuildProjConfigDone(EnvDTE._dispBuildEvents_OnBuildProjConfigDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.CodeAttribute">
      <summary>Allows manipulation of a code element's attribute.</summary>
    </member>
    <member name="P:EnvDTE.CodeAttribute.Children">
      <summary>Returns a collection of objects contained within this code's <see cref="T:EnvDTE.CodeAttribute" /> construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.CodeAttribute" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.CodeAttribute.Delete">
      <summary>Removes the current <see cref="T:EnvDTE.CodeAttribute" />.</summary>
    </member>
    <member name="P:EnvDTE.CodeAttribute.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.EndPoint">
      <summary>Gets the text point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.Extender(System.String)">
      <summary>Returns the requested Extender object.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeAttribute.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A string value representing a CATID in GUID format.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.FullName">
      <summary>Gets the full path and name of the <see cref="T:EnvDTE.CodeAttribute" /> object's file.</summary>
      <returns>A string containing the full path and name of the <see cref="T:EnvDTE.CodeAttribute" /> object's file.</returns>
    </member>
    <member name="M:EnvDTE.CodeAttribute.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeAttribute.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> that specifies the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeAttribute.InfoLocation">
      <summary>Describes the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.IsCodeType">
      <summary>Indicates whether or not a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this <see cref="T:EnvDTE.CodeAttribute" /> object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained, otherwise returned false.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.Name">
      <summary>Sets or gets the name of the CodeAttribute.</summary>
      <returns>A string representing the name of the CodeAttribute.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.Parent">
      <summary>Gets the immediate parent object of a given <see cref="T:EnvDTE.CodeAttribute" /> object.</summary>
      <returns>A parent object.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> associated with the <see cref="T:EnvDTE.CodeAttribute" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeAttribute.Value">
      <summary>Sets or gets the data value for the object.</summary>
      <returns>A string representing the data value for the object.</returns>
    </member>
    <member name="T:EnvDTE.CodeClass">
      <summary>Represents a class in source code.</summary>
    </member>
    <member name="P:EnvDTE.CodeClass.Access">
      <summary>Sets or gets the access attributes of the <see cref="T:EnvDTE.CodeClass" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeClass.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddAttribute(System.String,System.String,System.Object)" />  indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation. For <see cref="T:EnvDTE.CodeClass" /> objects, this is either a <see cref="T:EnvDTE.CodeClass" /> or a fully qualified type name. Visual C++ requires the colon-separated (::) format for its fully qualified type names. All other languages support the period-separated format.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" />  indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" />  indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as whether the function is a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" />  indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. The location.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.AddImplementedInterface(System.Object,System.Object)">
      <summary>Adds an interface to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Base">Required. The interface the class will implement. This is either a <see cref="T:EnvDTE.CodeInterface" /> or a fully-qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddImplementedInterface(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeClass.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new property code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeProperty" /> object.</returns>
      <param name="GetterName">Required. The name of the function that gets the property's value.</param>
      <param name="PutterName">Required. The name of the function that sets the property.</param>
      <param name="Type">Required. The type of property. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> value, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. The access. A <see cref="T:EnvDTE.vsCMAccess" /> constant value.</param>
      <param name="Location">Optional. The location.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE.CodeClass.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. The path and file name for the new variable definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeClass.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> fails.</param>
    </member>
    <member name="P:EnvDTE.CodeClass.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Bases">
      <summary>Gets a collection of classes from which this item derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Children">
      <summary>Gets a collection of <see cref="T:EnvDTE.CodeElements" /> contained within the <see cref="T:EnvDTE.CodeClass" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Collection">
      <summary>Gets a <see cref="T:EnvDTE.CodeElements" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Comment">
      <summary>Gets or sets the comment associated with the <see cref="T:EnvDTE.CodeClass" /> object.</summary>
      <returns>A string representing the comments associated with the <see cref="T:EnvDTE.CodeClass" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.DerivedTypes">
      <summary>Gets a collection of objects derived from this <see cref="T:EnvDTE.CodeClass" /> object. Not implemented in Visual C#.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.DocComment">
      <summary>Sets or gets the document comment for the current code model element.</summary>
      <returns>A string containing special documentation comment or attribute.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.EndPoint">
      <summary>Gets the text point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Extender(System.String)">
      <summary>Gets the requested Extender object. Not implemented in Visual C#.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeClass.ExtenderCATID">
      <summary>Returns the Extender category ID (CATID) for the object. Not implemented in Visual C#.</summary>
      <returns>Returns the GUID representing the CATID of the object as a string.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.ExtenderNames">
      <summary>Gets a list of available Extenders for the <see cref="T:EnvDTE.CodeClass" /> object. Not implemented in Visual C#.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.FullName">
      <summary>Gets the full path and name of the <see cref="T:EnvDTE.CodeClass" /> object's source file.</summary>
      <returns>A string representing the full path and name of the <see cref="T:EnvDTE.CodeClass" /> object's source file.</returns>
    </member>
    <member name="M:EnvDTE.CodeClass.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeClass.ImplementedInterfaces">
      <summary>Gets a collection of interfaces implemented by a <see cref="T:EnvDTE.CodeClass" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.IsAbstract">
      <summary>Sets or gets whether or not an item is declared as abstract.</summary>
      <returns>A Boolean value indicating true if the item is declared as abstract; false otherwise.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.IsCodeType">
      <summary>Gets whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained, otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.IsDerivedFrom(System.String)">
      <summary>Returns whether a <see cref="T:EnvDTE.CodeClass" /> object has another object as a base.</summary>
      <returns>A Boolean value indicating true if a CodeClass object has another object as a base; false if otherwise.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:EnvDTE.CodeClass.Kind">
      <summary>Returns an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Members">
      <summary>Gets a collection of items contained by this element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Name">
      <summary>Sets or gets the name of the <see cref="T:EnvDTE.CodeClass" /> object.</summary>
      <returns>A string containing the name of the <see cref="T:EnvDTE.CodeClass" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Namespace">
      <summary>Gets an object defining the parent namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeClass" /> object.</summary>
      <returns>The immediate parent object of a <see cref="T:EnvDTE.CodeClass" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeClass.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CodeClass.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.RemoveInterface(System.Object)">
      <summary>Removes an interface from the list of implemented interfaces.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:EnvDTE.CodeClass.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:EnvDTE.CodeClass.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeDelegate">
      <summary>Object representing a delegate in source code.</summary>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Access">
      <summary>Sets or gets the access attributes of this delegate.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeDelegate.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a property that has parameters, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If <paramref name="Value" /> is a Long, then AddAttribute indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeDelegate.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The delegate from which to derive implementation.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element.If <paramref name="Value" /> is a Long, then <see cref="M:EnvDTE.CodeDelegate.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new delegate.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeDelegate.AddParameter(System.String,System.Object,System.Object)">
      <summary>Creates a new parameter for the delegate and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the parameter.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If <paramref name="Value" /> is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If <paramref name="Value" /> is a Long, then <see cref="M:EnvDTE.CodeDelegate.AddParameter(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Attributes">
      <summary>Gets a collection of all of the attributes for the delegate.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.BaseClass">
      <summary>Gets the class from which this <see cref="T:EnvDTE.CodeDelegate" /> object is derived.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Bases">
      <summary>Gets a collection of classes from which this delegate is derived.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Children">
      <summary>Gets a collection of objects contained within this <see cref="T:EnvDTE.CodeDelegate" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Collection">
      <summary>Returns the collection containing the <see cref="T:EnvDTE.CodeDelegate" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Comment">
      <summary>Gets or sets the comment associated with the <see cref="T:EnvDTE.CodeDelegate" />.</summary>
      <returns>A string containing comments associated with the <see cref="T:EnvDTE.CodeDelegate" />.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.DerivedTypes">
      <summary>Gets a collection of objects derived from the <see cref="T:EnvDTE.CodeDelegate" /> object. Not implemented in Visual C#.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.DocComment">
      <summary>Sets or gets the documentation comments for <see cref="T:EnvDTE.CodeDelegate" /> element.</summary>
      <returns>A string containing the documentation comments for the delegate.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.EndPoint">
      <summary>Gets the text point that is the location of the end of the delegate.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Extender(System.String)">
      <summary>Returns the requested Extender object for the delegate. Not implemented in Visual C#.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeDelegate.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the <see cref="T:EnvDTE.CodeDelegate" /> object. Not implemented in Visual C#.</summary>
      <returns>A string containing the GUID that represents the Extender CATID.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.ExtenderNames">
      <summary>Gets a list of available Extenders for the delegate. Not implemented in Visual C#.</summary>
      <returns>An object containing an automation-compliant array of strings, each one the name of an Extender for the delegate.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.FullName">
      <summary>Gets the full path and name of the delegate's file.</summary>
      <returns>A string representing the full path and name of the delegate's file.</returns>
    </member>
    <member name="M:EnvDTE.CodeDelegate.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the delegate definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the delegate to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeDelegate.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the delegate definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the delegate to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeDelegate.InfoLocation">
      <summary>Gets the capabilities of the code model for the delegate.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.IsCodeType">
      <summary>Indicates whether or not a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this delegate.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained, otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.IsDerivedFrom(System.String)">
      <summary>Indicates whether or not a <see cref="T:EnvDTE.CodeDelegate" /> object has another object as a base.</summary>
      <returns>A Boolean value indicating true if an object has another object as a base; otherwise returns false.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this delegate.</param>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Kind">
      <summary>Gets an enumeration that defines the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Members">
      <summary>Gets the collection of items this <see cref="T:EnvDTE.CodeDelegate" /> element contains.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Name">
      <summary>Sets or gets the name of the <see cref="T:EnvDTE.CodeDelegate" /> object.</summary>
      <returns>A string containing the name of the <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Namespace">
      <summary>Gets an object defining the parent namespace of the delegate.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Parameters">
      <summary>Gets a collection of parameters for this <see cref="T:EnvDTE.CodeDelegate" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection, each element representing a parameter for the delegate.NoteThe values of code model elements such as classes, structs, functions, attributes, delegates, and so forth can be non-deterministic after making certain kinds of edits, meaning that their values cannot be relied upon to always remain the same. For more information, see the section Code Model Element Values Can Change in Discovering Code by Using the Code Model (Visual Basic).</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeDelegate" /> object.</summary>
      <returns>The <see cref="P:EnvDTE.CodeDelegate.Parent" /> property returns the immediate parent to the <see cref="T:EnvDTE.CodeDelegate" /> object. If you want to get the containing collection, then use the <see cref="P:EnvDTE.CodeDelegate.Collection" /> property.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.CodeDelegate" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Prototype(System.Int32)">
      <summary>Returns a string holding the stub definition of this delegate.</summary>
      <returns>A string holding the stub definition of this delegate.</returns>
      <param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype" /> value that indicates what the string contents should be, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
    </member>
    <member name="M:EnvDTE.CodeDelegate.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:EnvDTE.CodeDelegate.RemoveMember(System.Object)">
      <summary>Removes a member from the delegate.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="M:EnvDTE.CodeDelegate.RemoveParameter(System.Object)">
      <summary>Removes a parameter from the delegate's argument list.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:EnvDTE.CodeDelegate.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the delegate.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeDelegate.Type">
      <summary>Sets or gets an object representing the programmatic type of the delegate.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeElement">
      <summary>Represents a code element or construct in a source file.</summary>
    </member>
    <member name="P:EnvDTE.CodeElement.Children">
      <summary>Returns a collection of objects contained within this <see cref="T:EnvDTE.CodeElement" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.Collection">
      <summary>Gets the <see cref="T:EnvDTE.CodeElements" /> collection containing the CodeElement that supports this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.EndPoint">
      <summary>Gets the text point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.Extender(System.String)">
      <summary>Gets the requested Extender if it is available for this CodeElement object.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeElement.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A string representing the Extender category ID (CATID) for the object.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.FullName">
      <summary>Gets a fully-qualified name of the specified code element. </summary>
      <returns>A string containing a fully-qualified name of the specified code element. </returns>
    </member>
    <member name="M:EnvDTE.CodeElement.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeElement.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeElement.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.IsCodeType">
      <summary>Indicates whether or not a <see cref="T:EnvDTE.CodeType" /> object can be obtained from the <see cref="T:EnvDTE.CodeElement" /> object.</summary>
      <returns>A Boolean value indicating whether or not a <see cref="T:EnvDTE.CodeType" /> object can be obtained from the <see cref="T:EnvDTE.CodeElement" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.Kind">
      <summary>Gets an enumeration that defines the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.Language">
      <summary>Gets the programming language that is used to author the code.</summary>
      <returns>A string representing a <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.Name">
      <summary>Sets or gets the name of the object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.CodeElement" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.CodeElement" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeElement.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeElements">
      <summary>A collection of objects representing code constructs in a source file.</summary>
    </member>
    <member name="P:EnvDTE.CodeElements.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.CodeElements" /> collection.</summary>
      <returns>An integer value representing the number of objects in the <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.CodeElements.CreateUniqueID(System.String,System.String@)">
      <summary>Creates a programmatic identifier that does not collide with other identifiers in the scope and that follows the current language naming rules.</summary>
      <returns>A Boolean value indicating true if the name is a unique identifier; otherwise returns false.</returns>
      <param name="Prefix">Required. The prefix string or whole name to check to see whether or not it is unique for the collection of code elements.</param>
      <param name="NewName">Optional. If supplied, this returns with a guaranteed unique name.</param>
    </member>
    <member name="P:EnvDTE.CodeElements.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CodeElements.GetEnumerator">
      <summary>Returns an enumerator for items in the <see cref="T:EnvDTE.CodeElements" /> collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.CodeElements.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.CodeElement" /> object in a <see cref="T:EnvDTE.CodeElements" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.CodeElement" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.CodeElements.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeElements" /> collection.</summary>
      <returns>A parent object.</returns>
    </member>
    <member name="M:EnvDTE.CodeElements.Reserved1(System.Object)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Element">The element.</param>
    </member>
    <member name="T:EnvDTE.CodeEnum">
      <summary>Object representing an enumeration in source code.</summary>
    </member>
    <member name="P:EnvDTE.CodeEnum.Access">
      <summary>Defines the access modifier of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeEnum.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeEnum.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeEnum.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation. For <see cref="T:EnvDTE.CodeEnum" /> objects, <paramref name="Base" /> is a variant containing a fully qualified type name or <see cref="T:EnvDTE.CodeType" /> object upon which the new enum is based. For C#, this is the underlying type of enum. </param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeEnum.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeEnum.AddMember(System.String,System.Object,System.Object)">
      <summary>Creates a new member code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new member.</param>
      <param name="Value">Optional. The <see cref="P:EnvDTE.CodeVariable.InitExpression" /> of the returned <see cref="T:EnvDTE.CodeVariable" /> object. It can be passed in either as a string or as an expression object.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeEnum.AddMember(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:EnvDTE.CodeEnum.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Bases">
      <summary>Gets a collection of classes from which this item derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Children">
      <summary>Gets a collection of objects contained within this <see cref="T:EnvDTE.CodeEnum" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.CodeEnum" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>A string representing the comment associated with the code element.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.DerivedTypes">
      <summary>Gets a collection of objects derived from this <see cref="T:EnvDTE.CodeEnum" /> object. This property is not implemented in Visual C#.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.DocComment">
      <summary>Gets the document comment for the <see cref="T:EnvDTE.CodeEnum" /> element.</summary>
      <returns>A string representing the document comment.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.EndPoint">
      <summary>Gets the text point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object. This property is not implemented in Visual C#.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeEnum.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object. This property is not implemented in Visual C#.</summary>
      <returns>A string representing the CATID of the object as a GUID.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.ExtenderNames">
      <summary>Gets a list of available Extenders for the object. This property is not implemented in Visual C#.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A string representing the full path and name of the object's file.</returns>
    </member>
    <member name="M:EnvDTE.CodeEnum.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeEnum.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>A <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeEnum.InfoLocation">
      <summary>Describes the capabilities of the code model object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.IsCodeType">
      <summary>Gets values indicating whether or not a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.IsDerivedFrom(System.String)">
      <summary>Specifies whether or not a <see cref="T:EnvDTE.CodeEnum" /> object has another object as a base.</summary>
      <returns>A Boolean value indicating True if an object has another object as a base; otherwise returns False.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:EnvDTE.CodeEnum.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Members">
      <summary>Gets a collection of items contained by this <see cref="T:EnvDTE.CodeEnum" /> element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Name">
      <summary>Sets or gets the name of the object.</summary>
      <returns>A string representing the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Namespace">
      <summary>Gets an object defining the parent namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeEnum" /> object.</summary>
      <returns>An object.</returns>
    </member>
    <member name="P:EnvDTE.CodeEnum.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.CodeEnum" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CodeEnum.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:EnvDTE.CodeEnum.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:EnvDTE.CodeEnum.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeFunction">
      <summary>An object defining a function construct in a source file.</summary>
    </member>
    <member name="P:EnvDTE.CodeFunction.Access">
      <summary>Sets or gets the access modifier of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeFunction.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeFunction.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeFunction.AddParameter(System.String,System.Object,System.Object)">
      <summary>Creates a new parameter code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the parameter.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeFunction.AddParameter(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="P:EnvDTE.CodeFunction.Attributes">
      <summary>Gets a collection of all attributes for the <see cref="T:EnvDTE.CodeFunction" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.CanOverride">
      <summary>Sets or gets whether or not the function can be overridden.</summary>
      <returns>A Boolean value indicating true if the function can be overriden; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.CodeFunction" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>A string representing the comment associated with the code element.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>A string representing the document comment.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.EndPoint">
      <summary>Gets the text point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeFunction.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A string representing the CATID of the object in GUID form.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.ExtenderNames">
      <summary>Gets a list of available Extenders for the object. </summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A string representing the full path and name of the object's file.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.FunctionKind">
      <summary>Gets an enumeration describing how a function is used.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMFunction" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeFunction.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeFunction.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeFunction.InfoLocation">
      <summary>Gets the capabilities of the code model object..</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.IsCodeType">
      <summary>Returns whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.IsOverloaded">
      <summary>Gets whether or not a function is overloaded.</summary>
      <returns>A Boolean value indicating true if a function is overloaded; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.IsShared">
      <summary>Sets or gets whether or not the item is statically defined, that is, whether the item is common to all instances of this object type or only to this object specifically.</summary>
      <returns>A Boolean value indicating true if the method is shared; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Kind">
      <summary>Returns an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Language">
      <summary>Returns the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.MustImplement">
      <summary>Sets or gets whether or not the item is declared abstract and thus requires an implementation.</summary>
      <returns>A Boolean value indicating true if the method is declared abstract and thus requires an implementation; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Name">
      <summary>Sets or gets the name of the object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Overloads">
      <summary>Gets a collection of overloaded methods for this item.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Parameters">
      <summary>Gets a collection of parameters for this item.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeFunction" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.CodeFunction" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Prototype(System.Int32)">
      <summary>Returns a string holding the stub definition of this object.</summary>
      <returns>A string representing the stub definition of this <see cref="T:EnvDTE.CodeFunction" />.</returns>
      <param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype" /> value that indicates the contents of the string, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
    </member>
    <member name="M:EnvDTE.CodeFunction.RemoveParameter(System.Object)">
      <summary>Removes a parameter from the argument list.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:EnvDTE.CodeFunction.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeFunction.Type">
      <summary>Sets or gets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeInterface">
      <summary>Object representing an interface in source code.</summary>
    </member>
    <member name="P:EnvDTE.CodeInterface.Access">
      <summary>Sets or gets the access modifier of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeInterface.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeInterface.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeInterface.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeInterface.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeInterface.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as a property-get or a method.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeInterface.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeInterface.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new property code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeProperty" /> object.</returns>
      <param name="GetterName">Required. The name of the function that gets the property's value.</param>
      <param name="PutterName">Required. The name of the function that sets the property.</param>
      <param name="Type">Required. The type of property. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> value, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeInterface.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. The access. A <see cref="T:EnvDTE.vsCMAccess" /> constant value.</param>
      <param name="Location">Optional. The location.</param>
    </member>
    <member name="P:EnvDTE.CodeInterface.Attributes">
      <summary>Gets a collection of all attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Bases">
      <summary>Gets a collection of classes from which this item is derived.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Children">
      <summary>Gets a collection of objects contained within this <see cref="T:EnvDTE.CodeInterface" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.CodeInterface" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Comment">
      <summary>Gets or sets the comment associated with the <see cref="T:EnvDTE.CodeInterface" />.</summary>
      <returns>A string representing the comment associated with the code element.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.DerivedTypes">
      <summary>Gets a collection of objects derived from this object. This property is not implemented in Visual C#.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>A string representing the document comment.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.EndPoint">
      <summary>Gets the text point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object. This property is not implemented in Visual C#.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeInterface.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object. This property is not implemented in Visual C#.</summary>
      <returns>A string representing the CATID.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.ExtenderNames">
      <summary>Gets a list of available Extenders for the object. This property is not implemented in Visual C#.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A string representing the full path and name of the object's file.</returns>
    </member>
    <member name="M:EnvDTE.CodeInterface.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeInterface.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeInterface.InfoLocation">
      <summary>Gets the capabilities of the code model object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.IsCodeType">
      <summary>Gets whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.IsDerivedFrom(System.String)">
      <summary>Returns whether an object has another object as a base.</summary>
      <returns>A Boolean value indicating true if an object has another object as a base; false if otherwise.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:EnvDTE.CodeInterface.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Members">
      <summary>Gets a collection of items contained by this <see cref="T:EnvDTE.CodeInterface" /> element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Name">
      <summary>Sets or gets the name of the object.</summary>
      <returns>A string representing the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Namespace">
      <summary>Gets an object defining the parent namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeInterface" /> object.</summary>
      <returns>An object.</returns>
    </member>
    <member name="P:EnvDTE.CodeInterface.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.CodeInterface" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CodeInterface.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:EnvDTE.CodeInterface.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:EnvDTE.CodeInterface.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeModel">
      <summary>Allows access to programmatic constructs in a source code file.</summary>
    </member>
    <member name="M:EnvDTE.CodeModel.AddAttribute(System.String,System.Object,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Location">Required. The path and file name for the new attribute. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeModel.AddAttribute(System.String,System.Object,System.String,System.Object)" /> fails.</param>
      <param name="Value">Required. The value of the attribute, which may be a comma-separated list of parameters for a parameterized property.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeModel.AddAttribute(System.String,System.Object,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeModel.AddClass(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Location">Required. The path and file name for the new class definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeModel.AddClass(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeModel.AddClass(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Bases">Required. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Required. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeModel.AddDelegate(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Location">Required. The path and file name for the new delegate definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeModel.AddDelegate(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This value can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeModel.AddDelegate(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeModel.AddEnum(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Location">Required. The path and file name for the new enum definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeModel.AddEnum(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeModel.AddEnum(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeModel.AddFunction(System.String,System.Object,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Location">Required. The path and file name for the new function definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeModel.AddFunction(System.String,System.Object,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as whether the function is a property-get or a method.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeModel.AddFunction(System.String,System.Object,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeModel.AddInterface(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new interface code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Name">Required. The name of the interface to add.</param>
      <param name="Location">Required. The path and file name for the new interface definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeModel.AddInterface(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeModel.AddInterface(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Bases">Optional. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeModel.AddNamespace(System.String,System.Object,System.Object)">
      <summary>Creates a new namespace code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
      <param name="Name">Required. The name of the new namespace.</param>
      <param name="Location">Required. The path and file name for the new namespace definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeModel.AddNamespace(System.String,System.Object,System.Object)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeModel.AddNamespace(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Location">Required. The path and file name for the new structure definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or<see cref="T:EnvDTE.CodeInterface" /> objects representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeModel.AddVariable(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Location">Optional. The path and file name for the new variable definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeModel.AddVariable(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeModel.AddVariable(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="P:EnvDTE.CodeModel.CodeElements">
      <summary>Gets a collection of <see cref="T:EnvDTE.CodeElements" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.CodeModel.CodeTypeFromFullName(System.String)">
      <summary>Returns a code element based on a fully qualified name.</summary>
      <returns>A <see cref="T:EnvDTE.CodeType" /> object.</returns>
      <param name="Name">Required. A fully qualified symbol name, such as Namespace1.Namespace2.Class1.Member1.</param>
    </member>
    <member name="M:EnvDTE.CodeModel.CreateCodeTypeRef(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.CodeTypeRef" /> object based on the data type indicator passed.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
    </member>
    <member name="P:EnvDTE.CodeModel.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeModel.IsCaseSensitive">
      <summary>Gets whether the current language is case-sensitive.</summary>
      <returns>A Boolean value indicating true if the current language is case-sensitive; false if otherwise.</returns>
    </member>
    <member name="M:EnvDTE.CodeModel.IsValidID(System.String)">
      <summary>Returns whether a specified name is a valid programmatic identifier for the current language.</summary>
      <returns>A Boolean value indicating True when the identifier is valid; False when it is not, such as when it is a keyword.NoteThe values of code model elements such as classes, structs, functions, attributes, delegates, and so forth can be non-deterministic after making certain kinds of edits, meaning that their values cannot be relied upon to always remain the same. For more information, see the section Code Model Element Values Can Change in Discovering Code by Using the Code Model (Visual Basic).</returns>
      <param name="Name">Required. The name of the identifier to check.</param>
    </member>
    <member name="P:EnvDTE.CodeModel.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeModel.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeModel" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CodeModel.Remove(System.Object)">
      <summary>Removes the specified code element from the source file.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of a code element to remove from the source code.</param>
    </member>
    <member name="T:EnvDTE.CodeModelLanguageConstants">
      <summary>A constant specifying the language used to author the code.</summary>
    </member>
    <member name="F:EnvDTE.CodeModelLanguageConstants.vsCMLanguageCSharp">
      <summary>Visual C# constant.</summary>
    </member>
    <member name="F:EnvDTE.CodeModelLanguageConstants.vsCMLanguageIDL">
      <summary>Microsoft IDL constant.</summary>
    </member>
    <member name="F:EnvDTE.CodeModelLanguageConstants.vsCMLanguageMC">
      <summary>Visual C++ constant.</summary>
    </member>
    <member name="F:EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB">
      <summary>Visual Basic constant.</summary>
    </member>
    <member name="F:EnvDTE.CodeModelLanguageConstants.vsCMLanguageVC">
      <summary>Visual C++ constant.</summary>
    </member>
    <member name="T:EnvDTE.CodeNamespace">
      <summary>Represents a namespace construct in a source file.</summary>
    </member>
    <member name="M:EnvDTE.CodeNamespace.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeNamespace.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeNamespace.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeNamespace.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeNamespace.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enumeration to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeNamespace.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enumeration.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeNamespace.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new interface code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Name">Required. The name of the new interface.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeNamespace.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end.</param>
      <param name="Bases">Optional. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeNamespace.AddNamespace(System.String,System.Object)">
      <summary>Creates a new namespace code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
      <param name="Name">Required. The name of the new namespace.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeNamespace.AddNamespace(System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeNamespace.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeNamespace.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end.</param>
      <param name="Bases">Required. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="P:EnvDTE.CodeNamespace.Children">
      <summary>Returns a <see cref="T:EnvDTE.CodeElements" /> collection contained within this <see cref="T:EnvDTE.CodeNamespace" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.Collection">
      <summary>GGets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.Comment">
      <summary>Gets or sets the comment associated with the <see cref="T:EnvDTE.CodeNamespace" />.</summary>
      <returns>A string representing a comment associated with this <see cref="T:EnvDTE.CodeNamespace" />.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>A string representing the document comment.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.EndPoint">
      <summary>Gets the edit point that is the location of the end of the <see cref="T:EnvDTE.CodeNamespace" /> item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.Extender(System.String)">
      <summary>Returns the requested Extender if it is available for this <see cref="T:EnvDTE.CodeNamespace" />.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeNamespace.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A string in GUID format representing the CATID.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.FullName">
      <summary>Gets the fully qualified name of the <see cref="T:EnvDTE.CodeNamespace" />.</summary>
      <returns>A string representing the full name of the <see cref="T:EnvDTE.CodeNamespace" /> file.</returns>
    </member>
    <member name="M:EnvDTE.CodeNamespace.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeNamespace.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeNamespace.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.IsCodeType">
      <summary>Gets whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained, otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.Members">
      <summary>Gets a collection of items contained by this <see cref="T:EnvDTE.CodeNamespace" /> element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.Name">
      <summary>Sets or gets the name of the <see cref="T:EnvDTE.CodeNamespace" /> object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.CodeNamespace" />.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeNamespace" /> object.</summary>
      <returns>The parent object.</returns>
    </member>
    <member name="P:EnvDTE.CodeNamespace.ProjectItem">
      <summary>Returns the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given <see cref="T:EnvDTE.CodeNamespace" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CodeNamespace.Remove(System.Object)">
      <summary>Removes the specified code element from the source file.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of a code element to remove from the source code.</param>
    </member>
    <member name="P:EnvDTE.CodeNamespace.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeParameter">
      <summary>An object defining a parameter to a function, property, and so on, in a source file.</summary>
    </member>
    <member name="M:EnvDTE.CodeParameter.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a comma-separated list of parameters for a parameterized property.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeParameter.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="P:EnvDTE.CodeParameter.Attributes">
      <summary>Gets a collection of all attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.CodeParameter" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.DocComment">
      <summary>Returns the document comment for the current code model element.</summary>
      <returns>A string representing the document comment.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.Extender(System.String)">
      <summary>Returns the requested Extender if it is available for the <see cref="T:EnvDTE.CodeParameter" /> object.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeParameter.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the <see cref="T:EnvDTE.CodeParameter" /> object.</summary>
      <returns>Returns the GUID representing the CATID of the <see cref="T:EnvDTE.CodeParameter" /> object as a string.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A string representing the full path and name of the <see cref="T:EnvDTE.CodeParameter" /> object's file.</returns>
    </member>
    <member name="M:EnvDTE.CodeParameter.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeParameter.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeParameter.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.IsCodeType">
      <summary>Gets whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this <see cref="T:EnvDTE.CodeParameter" /> object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.Name">
      <summary>Sets or gets the name of the object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeParameter" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeParameter.Type">
      <summary>Sets or gets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeProperty">
      <summary>An object defining a property construct in a source file.</summary>
    </member>
    <member name="P:EnvDTE.CodeProperty.Access">
      <summary>Sets or gets the access modifier of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeProperty.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeProperty.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="P:EnvDTE.CodeProperty.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Children">
      <summary>Gets a collection of objects contained within this <see cref="T:EnvDTE.CodeProperty" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.CodeProperty" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>A string representing the comment associated with the code element.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.DocComment">
      <summary>Gets the document comment for the current code model element.</summary>
      <returns>A string representing the document comment.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Extender(System.String)">
      <summary>Gets the requested Extender if it is available for this object.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeProperty.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A GUID string representing the CATID of the object.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A string representing the full path and name of the object's file.</returns>
    </member>
    <member name="M:EnvDTE.CodeProperty.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeProperty.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeProperty.Getter">
      <summary>Sets or gets an object defining the code to return a property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.InfoLocation">
      <summary>Gets the capabilities of the code model object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.IsCodeType">
      <summary>Gets whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Name">
      <summary>Sets or gets the name of the object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.CodeProperty" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeProperty" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Prototype(System.Int32)">
      <summary>Returns a string holding the stub definition of this object.</summary>
      <returns>A string describing the element.</returns>
      <param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype" /> value that indicates the contents of the string, such as only parameter names, parameter types, or whole unique signature. All flags are set to Off by default.</param>
    </member>
    <member name="P:EnvDTE.CodeProperty.Setter">
      <summary>Sets or gets an object defining the code to set a property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.StartPoint">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeProperty.Type">
      <summary>Sets or gets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeStruct">
      <summary>Object representing a structure in source code.</summary>
    </member>
    <member name="P:EnvDTE.CodeStruct.Access">
      <summary>Defines the access modifier of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation. For <see cref="T:EnvDTE.CodeClass" /> objects, this is either a <see cref="T:EnvDTE.CodeClass" /> or a fully qualified type name. Native Visual C++ requires the colon-separated (::) format for its fully qualified type names. All other languages support the period-separated format.For <see cref="T:EnvDTE.CodeEnum" /> objects, <paramref name="Base" /> is a variant containing a fully qualified type name or <see cref="T:EnvDTE.CodeType" /> object upon which the new enum is based. For C#, this is the underlying type of enum. </param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end.</param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as a property-get or a method.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. The path and file name for the new definition. Depending on the language, the path to the project file is either relative or absolute. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeStruct.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> fails.</param>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddImplementedInterface(System.Object,System.Object)">
      <summary>Adds an interface to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Base">Required. The interface the class implements. This is either a <see cref="T:EnvDTE.CodeInterface" /> or a fully-qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddImplementedInterface(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new property code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeProperty" /> object.</returns>
      <param name="GetterName">Required. The name of the function that gets the property's value.</param>
      <param name="PutterName">Required. The name of the function that sets the property.</param>
      <param name="Type">Required. The type of property. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> value, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. The access. A <see cref="T:EnvDTE.vsCMAccess" /> constant value.</param>
      <param name="Location">Optional. The location.</param>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.CodeStruct.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeStruct.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means that the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. The path and file name for the new variable definition. Depending on the language, the path to the project file is either relative or absolute. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE.CodeStruct.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> fails.</param>
    </member>
    <member name="P:EnvDTE.CodeStruct.Attributes">
      <summary>Gets a collection of <see cref="T:EnvDTE.CodeElements" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Bases">
      <summary>Gets a collection of classes from which this <see cref="T:EnvDTE.CodeStruct" /> derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Children">
      <summary>Gets a collection of <see cref="T:EnvDTE.CodeElements" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Collection">
      <summary>Gets a <see cref="T:EnvDTE.CodeElements" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Comment">
      <summary>Gets or sets the comment associated with the <see cref="T:EnvDTE.CodeStruct" />.</summary>
      <returns>A string representing the comment associated with the <see cref="T:EnvDTE.CodeStruct" />.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.DerivedTypes">
      <summary>Gets a collection of objects derived from this <see cref="T:EnvDTE.CodeStruct" />. Not implemented in Visual C#.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.DocComment">
      <summary>Gets or sets the document comment for the current <see cref="T:EnvDTE.CodeStruct" />.</summary>
      <returns>A string representing the document comment for the current <see cref="T:EnvDTE.CodeStruct" />.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object. Not implemented in Visual C#.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeStruct.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object. This property is not implemented in Visual C#.</summary>
      <returns>A string in GUID format representing the CATID of the object as a string.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.ExtenderNames">
      <summary>Gets a list of available Extenders for the object. This property is not implemented in Visual C#.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A string representing the full path and name of the <see cref="T:EnvDTE.CodeStruct" />'s file.</returns>
    </member>
    <member name="M:EnvDTE.CodeStruct.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeStruct.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeStruct.ImplementedInterfaces">
      <summary>Gets a collection of interfaces implemented by this <see cref="T:EnvDTE.CodeStruct" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.InfoLocation">
      <summary>Gets the capabilities of the code model object..</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.IsAbstract">
      <summary>Sets or gets whether or not an item is declared as abstract.</summary>
      <returns>A Boolean value indicating true if the item is declared as abstract; false otherwise.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.IsCodeType">
      <summary>Gets whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise it returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.IsDerivedFrom(System.String)">
      <summary>Returns whether a <see cref="T:EnvDTE.CodeStruct" /> has another object as a base.</summary>
      <returns>A Boolean value indicating true if an object has another object as a base; false if otherwise.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:EnvDTE.CodeStruct.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A string representing a <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Members">
      <summary>Gets a collection of <see cref="T:EnvDTE.CodeElements" /> contained by this <see cref="T:EnvDTE.CodeStruct" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Name">
      <summary>Sets or gets the name of the <see cref="T:EnvDTE.CodeStruct" />.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.CodeStruct" /></returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Namespace">
      <summary>Gets a <see cref="T:EnvDTE.CodeNamespace" /> object defining the parent namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeStruct" /> object.</summary>
      <returns>A parent object.</returns>
    </member>
    <member name="P:EnvDTE.CodeStruct.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.CodeStruct" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CodeStruct.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:EnvDTE.CodeStruct.RemoveInterface(System.Object)">
      <summary>Removes an interface from the list of implemented interfaces.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:EnvDTE.CodeStruct.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:EnvDTE.CodeStruct.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeType">
      <summary>Represents a class construct in a source file.</summary>
    </member>
    <member name="P:EnvDTE.CodeType.Access">
      <summary>Sets or gets the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeType.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeType.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
    </member>
    <member name="M:EnvDTE.CodeType.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeType.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
    </member>
    <member name="P:EnvDTE.CodeType.Attributes">
      <summary>Gets a collection of all attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Bases">
      <summary>Gets a collection of classes from which this item derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Children">
      <summary>Gets a collection of objects contained within this <see cref="T:EnvDTE.CodeType" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.CodeType" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Comment">
      <summary>Gets or sets the comment associated with the <see cref="T:EnvDTE.CodeType" />.</summary>
      <returns>A string representing the comment associated with the <see cref="T:EnvDTE.CodeType" />.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.DerivedTypes">
      <summary>Gets a collection of objects derived from this <see cref="T:EnvDTE.CodeType" /> object. This property is not implemented in Visual C#.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.DocComment">
      <summary>Gets or sets the document comment for the <see cref="T:EnvDTE.CodeType" /> element.</summary>
      <returns>A string representing the document comment.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object. This property is not implemented in Visual C#.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeType.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object. This property is not implemented in Visual C#.</summary>
      <returns>A GUID in string format representing the CATID.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.ExtenderNames">
      <summary>Gets a list of available Extenders for the object. This property is not implemented in Visual C#.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A string representing the full path and name of the object's file.</returns>
    </member>
    <member name="M:EnvDTE.CodeType.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeType.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeType.InfoLocation">
      <summary>Gets the capabilities of the code model object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.IsCodeType">
      <summary>Gets whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained, otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.IsDerivedFrom(System.String)">
      <summary>Returns whether an <see cref="T:EnvDTE.CodeType" /> object has another object as a base.</summary>
      <returns>A Boolean value indicating True if an object has another object as a base; False if otherwise.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:EnvDTE.CodeType.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Members">
      <summary>Gets a collection of items contained by this <see cref="T:EnvDTE.CodeType" /> element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Name">
      <summary>Sets or gets the name of the <see cref="T:EnvDTE.CodeType" /> object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.CodeType" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Namespace">
      <summary>Gets an object defining the parent namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeType" /> object.</summary>
      <returns>A parent object.</returns>
    </member>
    <member name="P:EnvDTE.CodeType.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.CodeType" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CodeType.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:EnvDTE.CodeType.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:EnvDTE.CodeType.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="T:EnvDTE.CodeTypeRef">
      <summary>An object defining the type of a construct in a source file.</summary>
    </member>
    <member name="P:EnvDTE.CodeTypeRef.AsFullName">
      <summary>Gets the fully qualified name of the <see cref="T:EnvDTE.CodeTypeRef" /> object.</summary>
      <returns>A string representing the fully qualified name of the <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeTypeRef.AsString">
      <summary>Gets a string to use for displaying the <see cref="T:EnvDTE.CodeTypeRef" /> object.</summary>
      <returns>A string used for displaying the <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeTypeRef.CodeType">
      <summary>Sets or gets information describing this item's kind of <see cref="T:EnvDTE.CodeTypeRef" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeType" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CodeTypeRef.CreateArrayType(System.Int32)">
      <summary>Creates an array of a specified type, and inserts it into the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
      <param name="Rank">Optional. Default value = 1. The number of dimensions in the type array.</param>
    </member>
    <member name="P:EnvDTE.CodeTypeRef.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeTypeRef.ElementType">
      <summary>Sets or gets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeTypeRef.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeTypeRef" /> object.</summary>
      <returns>A parent object.</returns>
    </member>
    <member name="P:EnvDTE.CodeTypeRef.Rank">
      <summary>If this item is an array, sets or gets the number of dimensions in this array.</summary>
      <returns>An integer representing the number of dimensions of the array if the <see cref="P:EnvDTE.CodeTypeRef.TypeKind" /> is <see cref="F:EnvDTE.vsCMTypeRef.vsCMTypeRefArray" />.</returns>
    </member>
    <member name="P:EnvDTE.CodeTypeRef.TypeKind">
      <summary>Gets the base type of the <see cref="T:EnvDTE.CodeTypeRef" />.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMTypeRef" /> value.</returns>
    </member>
    <member name="T:EnvDTE.CodeVariable">
      <summary>An object defining a variable construct in a source file.</summary>
    </member>
    <member name="P:EnvDTE.CodeVariable.Access">
      <summary>Defines the access modifier of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:EnvDTE.CodeVariable.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.CodeVariable.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
    </member>
    <member name="P:EnvDTE.CodeVariable.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Children">
      <summary>Gets a collection of objects contained within this <see cref="T:EnvDTE.CodeVariable" />.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.CodeVariable" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>A string representing the comment associated with the code element.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>A string representing the document comment.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.CodeVariable.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A string GUID representing the CATID.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.FullName">
      <summary>Gets the full path and name of the <see cref="T:EnvDTE.CodeVariable" /> object's file.</summary>
      <returns>A string representing the full path name of the <see cref="T:EnvDTE.CodeVariable" /> object's file.</returns>
    </member>
    <member name="M:EnvDTE.CodeVariable.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:EnvDTE.CodeVariable.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:EnvDTE.CodeVariable.InfoLocation">
      <summary>Gets the capabilities of the code model object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.InitExpression">
      <summary>Sets or gets an object defining the initialization code for an element.</summary>
      <returns>An object defining the initialization expression for the code variable.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.IsCodeType">
      <summary>Gets whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>A Boolean value indicating true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained, otherwise returns false.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.IsConstant">
      <summary>Gets or sets whether or not the item is a constant.</summary>
      <returns>A Boolean value indicating true if the item is a constant; false otherwise.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.IsShared">
      <summary>Sets or gets whether or not the item is statically defined, that is, whether the item is common to all instances of this object type or only to this object specifically.</summary>
      <returns>A Boolean value indicating true if the method is shared; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Name">
      <summary>Sets or gets the name of the object.</summary>
      <returns>A string representing the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeVariable" /> object.</summary>
      <returns>A parent object.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.CodeVariable" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Prototype(System.Int32)">
      <summary>Returns a string holding the stub definition of this object.</summary>
      <returns>A string describing the element.</returns>
      <param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype" /> value that indicates the contents of the string, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
    </member>
    <member name="P:EnvDTE.CodeVariable.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.CodeVariable.Type">
      <summary>Sets or gets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="T:EnvDTE.ColorableItems">
      <summary>Represents the portions of an item that can be colored, such as the foreground and  background.</summary>
    </member>
    <member name="P:EnvDTE.ColorableItems.Background">
      <summary>Sets or gets the background color of the item.</summary>
      <returns>A unit specifying the color of the item.</returns>
    </member>
    <member name="P:EnvDTE.ColorableItems.Bold">
      <summary>Sets or gets whether or not the item should appear in bold.</summary>
      <returns>A Boolean value indicating true if the item is bold, false if not.</returns>
    </member>
    <member name="P:EnvDTE.ColorableItems.Foreground">
      <summary>Sets or gets the foreground color of the item.</summary>
      <returns>A unit specifying the color of the item.</returns>
    </member>
    <member name="P:EnvDTE.ColorableItems.Name">
      <summary>Sets or gets the name of the <see cref="T:EnvDTE.ColorableItems" /> object.</summary>
      <returns>A string representing the name of <see cref="T:EnvDTE.ColorableItems" /> object.</returns>
    </member>
    <member name="T:EnvDTE.Command">
      <summary>Represents a command in the environment.</summary>
    </member>
    <member name="M:EnvDTE.Command.AddControl(System.Object,System.Int32)">
      <summary>Creates a persistent command bar control for the command.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.CommandBars.CommandBarControl" /> object.</returns>
      <param name="Owner">Required. A <see cref="T:Microsoft.VisualStudio.CommandBars.CommandBar" /> object to which the new command bar control is to be added.</param>
      <param name="Position">Optional. The index position, starting at one, in the command bar to place the new control.</param>
    </member>
    <member name="P:EnvDTE.Command.Bindings">
      <summary>Sets or gets the list of keystrokes used to invoke the command.</summary>
      <returns>A <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> of objects.</returns>
    </member>
    <member name="P:EnvDTE.Command.Collection">
      <summary>Gets the <see cref="T:EnvDTE.Commands" /> collection containing the <see cref="T:EnvDTE.Command" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Commands" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.Command.Delete">
      <summary>Removes a named command that was created with the <see cref="M:EnvDTE.Commands.AddNamedCommand(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Int32,System.Object[]@,System.Int32)" /> method.</summary>
    </member>
    <member name="P:EnvDTE.Command.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Command.Guid">
      <summary>Gets the GUID for the given object.</summary>
      <returns>A string representing the command group GUID used to represent the command.</returns>
    </member>
    <member name="P:EnvDTE.Command.ID">
      <summary>Gets the ID within a command group GUID used to represent the command.</summary>
      <returns>An integer representing the command ID.</returns>
    </member>
    <member name="P:EnvDTE.Command.IsAvailable">
      <summary>Gets a value indicating whether or not the <see cref="T:EnvDTE.Command" /> is currently enabled.</summary>
      <returns>A Boolean value indicating true if the command is currently enabled; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.Command.LocalizedName">
      <summary>Gets the localized name of the command.</summary>
      <returns>A string representing the localized name of the command.</returns>
    </member>
    <member name="P:EnvDTE.Command.Name">
      <summary>Gets  the name of the object.</summary>
      <returns>A string representing the name of the object.</returns>
    </member>
    <member name="T:EnvDTE.CommandBarEvents">
      <summary>Causes a <see cref="E:EnvDTE.CommandBarEventsClass.Click" /> event to occur when a control on the command bar is clicked. Use this object for functionality, and refer to <see cref="T:EnvDTE.CommandBarEventsClass" /> for this object's documentation.</summary>
    </member>
    <member name="T:EnvDTE.CommandBarEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.CommandBarEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.CommandBarEventsClass.add_Click(EnvDTE._dispCommandBarControlEvents_ClickEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.CommandBarEventsClass.Click">
      <summary>Occurs when the OnAction property for the corresponding CommandBarControl object is set or returned.</summary>
    </member>
    <member name="M:EnvDTE.CommandBarEventsClass.remove_Click(EnvDTE._dispCommandBarControlEvents_ClickEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.CommandEvents">
      <summary>Provides command events for automation clients. Use this object for functionality, and refer to <see cref="T:EnvDTE.CommandEventsClass" /> for this object's documentation.</summary>
    </member>
    <member name="T:EnvDTE.CommandEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.CommandEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.CommandEventsClass.add_AfterExecute(EnvDTE._dispCommandEvents_AfterExecuteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.CommandEventsClass.add_BeforeExecute(EnvDTE._dispCommandEvents_BeforeExecuteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.CommandEventsClass.AfterExecute">
      <summary>Occurs after a command executes.</summary>
    </member>
    <member name="E:EnvDTE.CommandEventsClass.BeforeExecute">
      <summary>Occurs before a command executes.</summary>
    </member>
    <member name="M:EnvDTE.CommandEventsClass.remove_AfterExecute(EnvDTE._dispCommandEvents_AfterExecuteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.CommandEventsClass.remove_BeforeExecute(EnvDTE._dispCommandEvents_BeforeExecuteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.Commands">
      <summary>Contains all of the commands in the environment, as <see cref="T:EnvDTE.Command" /> objects.</summary>
    </member>
    <member name="M:EnvDTE.Commands.Add(System.String,System.Int32,System.Object@)">
      <summary>Microsoft Internal Only.</summary>
      <param name="Guid">The GUID of the command.</param>
      <param name="ID">The command ID.</param>
      <param name="Control">The control.</param>
    </member>
    <member name="M:EnvDTE.Commands.AddCommandBar(System.String,EnvDTE.vsCommandBarType,Microsoft.Office.Core.CommandBar,System.Int32)"></member>
    <member name="M:EnvDTE.Commands.AddNamedCommand(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Int32,System.Object[]@,System.Int32)">
      <summary>Creates a named command that is saved by the environment and made available the next time the environment starts, even if the Add-in is not loaded on environment startup.</summary>
      <returns>A <see cref="T:EnvDTE.Command" /> object.</returns>
      <param name="AddInInstance">Required. The <see cref="T:EnvDTE.AddIn" /> Object is adding the new command.</param>
      <param name="Name">Required. The short form of the name for your new command. <see cref="M:EnvDTE.Commands.AddNamedCommand(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Int32,System.Object[]@,System.Int32)" /> uses the preface Addins.Progid. to create a unique name.</param>
      <param name="ButtonText">Required. The name to use if the command is bound to a button that is displayed by name rather than by icon.</param>
      <param name="Tooltip">Required. The text displayed when a user hovers the mouse pointer over any control bound to the new command.</param>
      <param name="MSOButton">Required. Indicates whether the named command's button picture is an Office picture. True = button. If <paramref name="MSOButton" /> is False, then <paramref name="Bitmap" /> is the ID of a 16x16 bitmap resource (but not an icon resource) in a Visual C++ resource DLL that must reside in a folder with the language's locale identifier (1033 for English).</param>
      <param name="Bitmap">Optional. The ID of a bitmap to display on the button.</param>
      <param name="ContextUIGUIDs">Optional. A SafeArray of GUIDs that determines which environment contexts (that is, debug mode, design mode, and so on) show the command. See <see cref="T:EnvDTE.vsCommandDisabledFlags" />..</param>
      <param name="vsCommandDisabledFlagsValue"></param>
    </member>
    <member name="M:EnvDTE.Commands.CommandInfo(System.Object,System.String@,System.Int32@)">
      <summary>Returns the command GUID and ID associated with the given Microsoft.VisualStudio.CommandBars.CommandBar control.</summary>
      <param name="CommandBarControl">Required. The Microsoft.VisualStudio.CommandBars.CommandBar control associated with the command.</param>
      <param name="Guid">Required. The command's GUID.</param>
      <param name="ID">Required. The command's ID.</param>
    </member>
    <member name="P:EnvDTE.Commands.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.Commands" /> collection.</summary>
      <returns>The number of objects in the <see cref="T:EnvDTE.Commands" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Commands.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Commands.GetEnumerator">
      <summary>Returns an enumerator for items in the <see cref="T:EnvDTE.Commands" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:EnvDTE.Commands.Item(System.Object,System.Int32)">
      <summary>Returns the indexed <see cref="T:EnvDTE.Command" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Command" /> object.</returns>
      <param name="index">Required. An absolute index, GUID string, or the command's full name.</param>
      <param name="ID">Optional. The command ID in the specified command set.</param>
    </member>
    <member name="P:EnvDTE.Commands.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Commands" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Commands.Raise(System.String,System.Int32,System.Object@,System.Object@)">
      <summary>Executes the specified command.</summary>
      <param name="Guid">Required. The command's GUID.</param>
      <param name="ID">Required. The command's ID.</param>
      <param name="CustomIn">Required. Arguments in a SafeArray passed in from the OLECommandTarget.</param>
      <param name="CustomOut">Required. Arguments in a SafeArray passed out to be returned by the OLECommandTarget.</param>
    </member>
    <member name="M:EnvDTE.Commands.RemoveCommandBar(Microsoft.Office.Core.CommandBar)"></member>
    <member name="T:EnvDTE.CommandWindow">
      <summary>Represents the Command window in the environment.</summary>
    </member>
    <member name="M:EnvDTE.CommandWindow.Clear">
      <summary>Clears all text from the window.</summary>
    </member>
    <member name="P:EnvDTE.CommandWindow.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CommandWindow.OutputString(System.String)">
      <summary>Sends a text string to the Command window.</summary>
      <param name="Text">Required. The text characters to send to the window.</param>
    </member>
    <member name="P:EnvDTE.CommandWindow.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="M:EnvDTE.CommandWindow.SendInput(System.String,System.Boolean)">
      <summary>Sends a line of input to the Command window that is processed as if you typed it.</summary>
      <param name="Command">Required. The command string to send to the Command window.</param>
      <param name="Execute">Required. True means, add a newline character and execute the line of input, False means, do not execute the command line.</param>
    </member>
    <member name="P:EnvDTE.CommandWindow.TextDocument">
      <summary>Gets the <see cref="T:EnvDTE.TextDocument" /> for the window or pane.</summary>
      <returns>A <see cref="T:EnvDTE.TextDocument" /> object.</returns>
    </member>
    <member name="T:EnvDTE.Configuration">
      <summary>Represents a project or project item's build configuration dependent properties.</summary>
    </member>
    <member name="P:EnvDTE.Configuration.Collection">
      <summary>Returns the collection containing the <see cref="T:EnvDTE.Configuration" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.ConfigurationManager" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.ConfigurationName">
      <summary>Gets the project configuration to be built.</summary>
      <returns>A string representing the name of the project configuration to be built.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.Extender(System.String)">
      <summary>Returns the requested Extender if it is available for this object.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.Configuration.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A string GUID representing the CATID.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.IsBuildable">
      <summary>Gets whether the project or project item configuration can be built.</summary>
      <returns>A Boolean value indicating true if a project or project item should be built, false if not.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.IsDeployable">
      <summary>Gets whether the project or project item configuration can be deployed.</summary>
      <returns>A Boolean value indicating true if a project or project item can be deployed, false if not.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.IsRunable">
      <summary>Returns whether the project or project item configuration can be run.</summary>
      <returns>A Boolean value indicating true if a project or project item can be run, false if not.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.Object">
      <summary>Gets an object that can be accessed by name at run time.</summary>
      <returns>An object that can be accessed by name at run time.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.OutputGroups">
      <summary>Gets a collection of <see cref="T:EnvDTE.OutputGroup" /> objects that contains the names of the files that are outputs for the project.</summary>
      <returns>A <see cref="T:EnvDTE.OutputGroups" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.Owner">
      <summary>Gets the project or project item for the configuration.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.PlatformName">
      <summary>Gets the name of the platform supported by this assignment.</summary>
      <returns>A string representing the name of the platform supported by this assignment.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.Properties">
      <summary>Gets a collection of all properties that pertain to the <see cref="T:EnvDTE.Configuration" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Properties" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Configuration.Type">
      <summary>Gets a constant indicating the object type.</summary>
      <returns>A <see cref="T:EnvDTE.vsConfigurationType" /> constant, specifying the type of configuration.</returns>
    </member>
    <member name="T:EnvDTE.ConfigurationManager">
      <summary>Represents a matrix of <see cref="T:EnvDTE.Configuration" /> objects, one for each combination of configuration name and platform name.</summary>
    </member>
    <member name="P:EnvDTE.ConfigurationManager.ActiveConfiguration">
      <summary>Gets the current solution configuration that will be used if a solution build operation occurs.</summary>
      <returns>A <see cref="T:EnvDTE.Configuration" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ConfigurationManager.AddConfigurationRow(System.String,System.String,System.Boolean)">
      <summary>Creates a new project or project item configuration row based on the <see cref="T:EnvDTE.Configuration" /> object of an existing project or project item configuration row.</summary>
      <returns>A <see cref="T:EnvDTE.Configurations" /> collection.</returns>
      <param name="NewName">Required. A unique name for the new project or project item configuration row.</param>
      <param name="ExistingName">Required. The name of the project or project item configuration row to copy in order to create the new one.</param>
      <param name="Propagate">Required. true if the project or project item configuration row should be propagated, false if not.</param>
    </member>
    <member name="M:EnvDTE.ConfigurationManager.AddPlatform(System.String,System.String,System.Boolean)">
      <summary>Creates build settings for a new operating system platform based on the <see cref="T:EnvDTE.Configuration" /> object of an existing platform.</summary>
      <returns>A <see cref="T:EnvDTE.Configurations" /> collection.</returns>
      <param name="NewName">Required. The name of the new platform as found in the <see cref="P:EnvDTE.ConfigurationManager.SupportedPlatforms" /> property.</param>
      <param name="ExistingName">Required. The name of the platform to copy in order to create the new one.</param>
      <param name="Propagate">Required. true if the platform should be propagated, false if not.</param>
    </member>
    <member name="M:EnvDTE.ConfigurationManager.ConfigurationRow(System.String)">
      <summary>Returns a collection of items representing build configurations for one configuration name, such as "Debug" or "Retail."</summary>
      <returns>A <see cref="T:EnvDTE.Configurations" /> collection.</returns>
      <param name="Name">Required. The name of the project or project item configuration to return.</param>
    </member>
    <member name="P:EnvDTE.ConfigurationManager.ConfigurationRowNames">
      <summary>Gets an array of all defined configuration names for the project or project item.</summary>
      <returns>An array of all defined configuration names for the project or project item.</returns>
    </member>
    <member name="P:EnvDTE.ConfigurationManager.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer representing the number of objects in the collection.</returns>
    </member>
    <member name="M:EnvDTE.ConfigurationManager.DeleteConfigurationRow(System.String)">
      <summary>Deletes a row of build configurations, such as for "Debug" or "Retail."</summary>
      <param name="Name">Required. The name of the project/project item configuration row to delete.</param>
    </member>
    <member name="M:EnvDTE.ConfigurationManager.DeletePlatform(System.String)">
      <summary>Removes a column of platform configurations, such as "WinCE PalmSize."</summary>
      <param name="Name">Required. The name of the platform to delete.</param>
    </member>
    <member name="P:EnvDTE.ConfigurationManager.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ConfigurationManager.GetEnumerator">
      <summary>Returns an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.ConfigurationManager.Item(System.Object,System.String)">
      <summary>Returns a <see cref="T:EnvDTE.Configuration" /> object of a <see cref="T:EnvDTE.ConfigurationManager" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Configuration" /> object.</returns>
      <param name="index">Required. An absolute index, GUID string, or the name of a configuration.</param>
      <param name="Platform">Optional. The name of the platform.</param>
    </member>
    <member name="P:EnvDTE.ConfigurationManager.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.ConfigurationManager" /> object.</summary>
      <returns>An object.</returns>
    </member>
    <member name="M:EnvDTE.ConfigurationManager.Platform(System.String)">
      <summary>Returns the <see cref="T:EnvDTE.Configurations" /> for this configuration.</summary>
      <returns>A <see cref="T:EnvDTE.Configurations" /> collection.</returns>
      <param name="Name">Required. The name of the platform's settings to return.</param>
    </member>
    <member name="P:EnvDTE.ConfigurationManager.PlatformNames">
      <summary>Gets a list of all available platforms.</summary>
      <returns>An object.</returns>
    </member>
    <member name="P:EnvDTE.ConfigurationManager.SupportedPlatforms">
      <summary>Gets a list of platform names that can be added to this project and which may be added to create build configurations.</summary>
      <returns>A SafeArray of strings.</returns>
    </member>
    <member name="T:EnvDTE.Configurations">
      <summary>Contains a set of <see cref="T:EnvDTE.Configuration" /> objects. Each collection represents a row of <see cref="T:EnvDTE.Configuration" /> objects for a given configuration name and for each platform, or a column of each <see cref="T:EnvDTE.Configuration" /> object for a given platform name, one for each configuration name.</summary>
    </member>
    <member name="P:EnvDTE.Configurations.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.Configurations" /> collection.</summary>
      <returns>An integer indicating the number of objects in the collection.</returns>
    </member>
    <member name="P:EnvDTE.Configurations.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Configurations.GetEnumerator">
      <summary>Gets an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Configurations.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.Configuration" /> object in a <see cref="T:EnvDTE.Configurations" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Configuration" /> object.</returns>
      <param name="index">Required. The index of a <see cref="T:EnvDTE.Configuration" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.Configurations.Name">
      <summary>Gets the name of the object.</summary>
      <returns>A string representing the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.Configurations.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Configurations" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Configurations.Type">
      <summary>Gets a constant indicating the Configurations type.</summary>
      <returns>A <see cref="T:EnvDTE.vsConfigurationType" /> constant, specifying the type of configuration.</returns>
    </member>
    <member name="T:EnvDTE.Constants">
      <summary>Constants that are common to all Visual Studio programming languages.</summary>
    </member>
    <member name="F:EnvDTE.Constants.dsCPP">
      <summary>Deprecated in Visual Studio. They are available only for backward compatibility with earlier versions of Visual Studio. For details, see the documentation for the previous version.</summary>
    </member>
    <member name="F:EnvDTE.Constants.dsFortran_Fixed">
      <summary>Deprecated in Visual Studio. They are available only for backward compatibility with earlier versions of Visual Studio. For details, see the documentation for the previous version.</summary>
    </member>
    <member name="F:EnvDTE.Constants.dsFortran_Free">
      <summary>Deprecated in Visual Studio. They are available only for backward compatibility with earlier versions of Visual Studio. For details, see the documentation for the previous version.</summary>
    </member>
    <member name="F:EnvDTE.Constants.dsHTML_IE3">
      <summary>Deprecated in Visual Studio. They are available only for backward compatibility with earlier versions of Visual Studio. For details, see the documentation for the previous version.</summary>
    </member>
    <member name="F:EnvDTE.Constants.dsHTML_RFC1866">
      <summary>Deprecated in Visual Studio. They are available only for backward compatibility with earlier versions of Visual Studio. For details, see the documentation for the previous version.</summary>
    </member>
    <member name="F:EnvDTE.Constants.dsIDL">
      <summary>Deprecated in Visual Studio. They are available only for backward compatibility with earlier versions of Visual Studio. For details, see the documentation for the previous version.</summary>
    </member>
    <member name="F:EnvDTE.Constants.dsJava">
      <summary>Deprecated in Visual Studio. They are available only for backward compatibility with earlier versions of Visual Studio. For details, see the documentation for the previous version.</summary>
    </member>
    <member name="F:EnvDTE.Constants.dsVBSMacro">
      <summary>Deprecated in Visual Studio. They are available only for backward compatibility with earlier versions of Visual Studio. For details, see the documentation for the previous version.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsAddInCmdGroup">
      <summary>The GUID that is used for a command when you call <see cref="M:EnvDTE.Commands.AddNamedCommand(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Int32,System.Object[]@,System.Int32)" />. Each command has a GUID and an ID associated with it, and this is the GUID for all add-in created commands.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsCATIDDocument">
      <summary>The CATID for documents.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsCATIDGenericProject">
      <summary>The CATID for generic projects — that is, projects without a specific object model.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsCATIDMiscFilesProject">
      <summary>The CATID for the miscellaneous files project.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsCATIDMiscFilesProjectItem">
      <summary>The CATID for the miscellaneous files project item.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsCATIDSolution">
      <summary>The CATID for the solution.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsCATIDSolutionBrowseObject">
      <summary>The CATID for items in the Property window when the solution node is selected in Solution Explorer.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextDebugging">
      <summary>Indicates that the IDE is in Debugging mode.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextDesignMode">
      <summary>Indicates that the IDE is in Design view.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextEmptySolution">
      <summary>Indicates that the solution has no projects.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextFullScreenMode">
      <summary>Indicates that the view of the integrated development environment (IDE) is full screen.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextMacroRecording">
      <summary>Indicates that a macro is being recorded.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextMacroRecordingToolbar">
      <summary>Indicates that the Macro Recorder toolbar is displayed.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextNoSolution">
      <summary>Indicates that the integrated development environment (IDE) has no solution.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextSolutionBuilding">
      <summary>Indicates that a solution is currently being built.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextSolutionHasMultipleProjects">
      <summary>Indicates that the solution contains multiple projects.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsContextSolutionHasSingleProject">
      <summary>Indicates that the solution contains only one project.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsDocumentKindBinary">
      <summary>A binary file, opened with a binary file editor.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsDocumentKindHTML">
      <summary>An HTML document. Can get the IHTMLDocument2 interface, also known as the Document Object Model (DOM).</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsDocumentKindResource">
      <summary>A resource file, opened with the resource editor.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsDocumentKindText">
      <summary>A text document, opened with a text editor.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_GUID_AddItemWizard">
      <summary>See <see cref="F:EnvDTE.Constants.vsWizardAddItem" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_GUID_NewProjectWizard">
      <summary>See <see cref="F:EnvDTE.Constants.vsWizardNewProject" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_vk_Code">
      <summary>See <see cref="F:EnvDTE.Constants.vsViewKindCode" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_vk_Debugging">
      <summary>See <see cref="F:EnvDTE.Constants.vsViewKindDebugging" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_vk_Designer">
      <summary>See <see cref="F:EnvDTE.Constants.vsViewKindDesigner" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_vk_Primary">
      <summary>See <see cref="F:EnvDTE.Constants.vsViewKindPrimary" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_vk_TextView">
      <summary>See <see cref="F:EnvDTE.Constants.vsViewKindTextView" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_AutoLocalsWindow">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindAutoLocals" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_CallStackWindow">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindCallStack" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_ClassView">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindClassView" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_ContextWindow">
      <summary>Refers to the Dynamic Help window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_ImmedWindow">
      <summary>Refers to the Immediate window, used to execute commands in Debug mode.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_LocalsWindow">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindLocals" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_ObjectBrowser">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindObjectBrowser" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_OutputWindow">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindOutput" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_PropertyBrowser">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindProperties" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_SProjectWindow">
      <summary>The Project window, where the solution and its projects display.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_TaskList">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindTaskList" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_ThreadWindow">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindThread" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_Toolbox">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindToolbox" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsext_wk_WatchWindow">
      <summary>See <see cref="F:EnvDTE.Constants.vsWindowKindWatch" />.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsMiscFilesProjectUniqueName">
      <summary>The unique name for the Miscellaneous files project. Can be used to index the Solution.Projects object, such as: DTE.Solution.Projects.Item(vsMiscFilesProjectUniqueName).</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectItemKindMisc">
      <summary>A project item in the miscellaneous files folder of the solution.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectItemKindPhysicalFile">
      <summary>A file in the system.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectItemKindPhysicalFolder">
      <summary>A folder in the system.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectItemKindSolutionItems">
      <summary>A project item type in the solution.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectItemKindSubProject">
      <summary>A subproject under the project. If returned by <see cref="P:EnvDTE.ProjectItem.Kind" />, then <see cref="P:EnvDTE.ProjectItem.SubProject" /> returns as a <see cref="T:EnvDTE.Project" /> object.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectItemKindVirtualFolder">
      <summary>Indicates that the folder in the project does not physically appear on disk.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectItemsKindMisc">
      <summary>A project item located in the miscellaneous files folder of the solution.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectItemsKindSolutionItems">
      <summary>A collection of items in the solution items folder of the solution.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectKindMisc">
      <summary>A miscellaneous files project.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectKindSolutionItems">
      <summary>A solution items project.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectKindUnmodeled">
      <summary>An unmodeled project.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsProjectsKindSolution">
      <summary>The <see cref="T:EnvDTE.Projects" /> collection's <see cref="P:EnvDTE.Projects.Kind" /> property returns a GUID identifying the collection of project types that it contains.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsSolutionItemsProjectUniqueName">
      <summary>The unique name for projects in the solution. Can be used to index the <see cref="T:EnvDTE.SolutionClass" /> object's <see cref="P:EnvDTE.SolutionClass.Projects" /> collection, such as: DTE.Solution.Projects.Item(vsProjectsKindSolution).</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsViewKindAny">
      <summary>Use the view that was last used.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsViewKindCode">
      <summary>View in code editor.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsViewKindDebugging">
      <summary>View in debugger.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsViewKindDesigner">
      <summary>View in Visual Designer (forms designer).</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsViewKindPrimary">
      <summary>View in default viewer.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsViewKindTextView">
      <summary>View in text editor.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindAutoLocals">
      <summary>The Debugger window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindCallStack">
      <summary>The Call Stack window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindClassView">
      <summary>The Class View window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindCommandWindow">
      <summary>The Command window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindDocumentOutline">
      <summary>The Document Outline window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindDynamicHelp">
      <summary>The Dynamic Help window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindFindReplace">
      <summary>The Find Replace dialog box.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindFindResults1">
      <summary>The Find Results 1 window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindFindResults2">
      <summary>The Find Results 2 window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindFindSymbol">
      <summary>The Find Symbol dialog box.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindFindSymbolResults">
      <summary>The Find Symbol Results window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindLinkedWindowFrame">
      <summary>A linked window frame.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindLocals">
      <summary>The Debugger window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindMacroExplorer">
      <summary>The Macro Explorer window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindMainWindow">
      <summary>The Visual Studio IDE window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindObjectBrowser">
      <summary>The Object Browser window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindOutput">
      <summary>The Output window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindProperties">
      <summary>The Properties window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindResourceView">
      <summary>The Resource Editor.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindServerExplorer">
      <summary>The Server Explorer.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindSolutionExplorer">
      <summary>The Solution Explorer.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindTaskList">
      <summary>The Task List window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindThread">
      <summary>The Debugger window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindToolbox">
      <summary>The Toolbox.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindWatch">
      <summary>The Watch window.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWindowKindWebBrowser">
      <summary>A Web browser window hosted in Visual Studio.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWizardAddItem">
      <summary>Represents the "AddItem" wizard type.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWizardAddSubProject">
      <summary>Represents the "AddSubProject" wizard type.</summary>
    </member>
    <member name="F:EnvDTE.Constants.vsWizardNewProject">
      <summary>Represents the "NewProject" wizard type.</summary>
    </member>
    <member name="T:EnvDTE.ContextAttribute">
      <summary>Represents a single attribute associated with a global context or window's context in the Dynamic Help window.</summary>
    </member>
    <member name="P:EnvDTE.ContextAttribute.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.ContextAttribute" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.ContextAttributes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.ContextAttribute.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ContextAttribute.Name">
      <summary>Gets the name of the object.</summary>
      <returns>A string representing the name of object.</returns>
    </member>
    <member name="M:EnvDTE.ContextAttribute.Remove">
      <summary>Removes the attribute from its parent <see cref="T:EnvDTE.ContextAttributes" /> collection.</summary>
    </member>
    <member name="P:EnvDTE.ContextAttribute.Values">
      <summary>Gets a collection of values for the attribute.</summary>
      <returns>An object representing a SafeArray of strings containing the values of the attribute.</returns>
    </member>
    <member name="T:EnvDTE.ContextAttributes">
      <summary>Contains all attributes associated with a global context or window's context in the Dynamic Help window.</summary>
    </member>
    <member name="M:EnvDTE.ContextAttributes.Add(System.String,System.String,EnvDTE.vsContextAttributeType)">
      <summary>Adds an attribute name/value pair to the <see cref="T:EnvDTE.ContextAttributes" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.ContextAttribute" /> object.</returns>
      <param name="AttributeName">Required. The name of the new attribute.</param>
      <param name="AttributeValue">Required. The value of the new attribute.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsContextAttributeType" /> constant specifying the type of new attribute.</param>
    </member>
    <member name="P:EnvDTE.ContextAttributes.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.ContextAttributes" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.ContextAttributes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.ContextAttributes.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ContextAttributes.GetEnumerator">
      <summary>Returns an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="P:EnvDTE.ContextAttributes.HighPriorityAttributes">
      <summary>Gets the High Priority attributes collection.</summary>
      <returns>A <see cref="T:EnvDTE.ContextAttributes" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.ContextAttributes.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.ContextAttribute" /> object that is an item of the <see cref="T:EnvDTE.ContextAttributes" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.ContextAttribute" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.ContextAttribute" /> object to return.</param>
    </member>
    <member name="P:EnvDTE.ContextAttributes.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.ContextAttributes" /> collection.</summary>
      <returns>An object.</returns>
    </member>
    <member name="M:EnvDTE.ContextAttributes.Refresh">
      <summary>Refresh the contents of this attribute collection.</summary>
    </member>
    <member name="P:EnvDTE.ContextAttributes.Type">
      <summary>Gets a constant indicating the object type.</summary>
      <returns>A <see cref="T:EnvDTE.vsContextAttributes" /> constant, specifying the context attribute.</returns>
    </member>
    <member name="T:EnvDTE.dbgBreakpointConditionType">
      <summary>For conditional breakpoints. Indicates a break when the condition is true, or when it has changed. Used by the <see cref="P:EnvDTE.Breakpoint.ConditionType" /> property in the <see cref="T:EnvDTE.Breakpoint" /> object and by the <see cref="M:EnvDTE.Breakpoints.Add(System.String,System.String,System.Int32,System.Int32,System.String,EnvDTE.dbgBreakpointConditionType,System.String,System.String,System.Int32,System.String,System.Int32,EnvDTE.dbgHitCountType)" /> method in the <see cref="T:EnvDTE.Breakpoints" /> collection.</summary>
    </member>
    <member name="F:EnvDTE.dbgBreakpointConditionType.dbgBreakpointConditionTypeWhenTrue">
      <summary>Breaks when the condition is true.</summary>
    </member>
    <member name="F:EnvDTE.dbgBreakpointConditionType.dbgBreakpointConditionTypeWhenChanged">
      <summary>Breaks when the condition has changed.</summary>
    </member>
    <member name="T:EnvDTE.dbgBreakpointLocationType">
      <summary>The breakpoint location type that is used by the <see cref="P:EnvDTE.Breakpoint.LocationType" /> property.</summary>
    </member>
    <member name="F:EnvDTE.dbgBreakpointLocationType.dbgBreakpointLocationTypeNone">
      <summary>There is no breakpoint.</summary>
    </member>
    <member name="F:EnvDTE.dbgBreakpointLocationType.dbgBreakpointLocationTypeFunction">
      <summary>Breakpoint is a function.</summary>
    </member>
    <member name="F:EnvDTE.dbgBreakpointLocationType.dbgBreakpointLocationTypeFile">
      <summary>Breakpoint is a file.</summary>
    </member>
    <member name="F:EnvDTE.dbgBreakpointLocationType.dbgBreakpointLocationTypeData">
      <summary>Breakpoint is a data element.</summary>
    </member>
    <member name="F:EnvDTE.dbgBreakpointLocationType.dbgBreakpointLocationTypeAddress">
      <summary>Breakpoint is an address.</summary>
    </member>
    <member name="T:EnvDTE.dbgBreakpointType">
      <summary>Indicatesthe type or state of a breakpoint.</summary>
    </member>
    <member name="F:EnvDTE.dbgBreakpointType.dbgBreakpointTypePending">
      <summary>Breakpoint indicated a set of points in code.</summary>
    </member>
    <member name="F:EnvDTE.dbgBreakpointType.dbgBreakpointTypeBound">
      <summary>Breakpoint is at a specific point in code.</summary>
    </member>
    <member name="T:EnvDTE.dbgDebugMode">
      <summary>The current state of the debugger within the development environment. <see cref="T:EnvDTE.dbgDebugMode" /> is used by the <see cref="P:EnvDTE.Debugger.CurrentMode" /> property of the <see cref="T:EnvDTE.Debugger" /> object.</summary>
    </member>
    <member name="F:EnvDTE.dbgDebugMode.dbgDesignMode">
      <summary>Design mode specifies changes in code editing. </summary>
    </member>
    <member name="F:EnvDTE.dbgDebugMode.dbgBreakMode">
      <summary>Break mode specifies that the debugger is running and has stopped at a break point.</summary>
    </member>
    <member name="F:EnvDTE.dbgDebugMode.dbgRunMode">
      <summary>Run mode specifies that the application being debugged is running.</summary>
    </member>
    <member name="T:EnvDTE.dbgEventReason">
      <summary>Specifies the reason for most debugging events.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonNone">
      <summary>No reason.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonGo">
      <summary>Execution started.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonAttachProgram">
      <summary>Attached to program.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonDetachProgram">
      <summary>Program detached.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonLaunchProgram">
      <summary>Program launched.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonEndProgram">
      <summary>Program ended.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonStopDebugging">
      <summary>Debugging stopped.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonStep">
      <summary>Execution step.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonBreakpoint">
      <summary>Breakpoint encountered.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonExceptionThrown">
      <summary>Exception thrown.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonExceptionNotHandled">
      <summary>Unhandled exception encountered.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonUserBreak">
      <summary>Execution interrupted by user.</summary>
    </member>
    <member name="F:EnvDTE.dbgEventReason.dbgEventReasonContextSwitch">
      <summary>Switch in context.</summary>
    </member>
    <member name="T:EnvDTE.dbgExceptionAction">
      <summary>Specifies the action to take in the event of an exception</summary>
    </member>
    <member name="F:EnvDTE.dbgExceptionAction.dbgExceptionActionDefault">
      <summary>Perform the default action, either prompt or not.</summary>
    </member>
    <member name="F:EnvDTE.dbgExceptionAction.dbgExceptionActionIgnore">
      <summary>Ignore the exception.</summary>
    </member>
    <member name="F:EnvDTE.dbgExceptionAction.dbgExceptionActionBreak">
      <summary>Halt execution.</summary>
    </member>
    <member name="F:EnvDTE.dbgExceptionAction.dbgExceptionActionContinue">
      <summary>Continue execution.</summary>
    </member>
    <member name="T:EnvDTE.dbgExecutionAction">
      <summary>Specifies an action to take in a debug session.</summary>
    </member>
    <member name="F:EnvDTE.dbgExecutionAction.dbgExecutionActionDefault">
      <summary>Perform the default execution action</summary>
    </member>
    <member name="F:EnvDTE.dbgExecutionAction.dbgExecutionActionGo">
      <summary>Start execution.</summary>
    </member>
    <member name="F:EnvDTE.dbgExecutionAction.dbgExecutionActionStopDebugging">
      <summary>Stop debugging.</summary>
    </member>
    <member name="F:EnvDTE.dbgExecutionAction.dbgExecutionActionStepInto">
      <summary>Step into the next function.</summary>
    </member>
    <member name="F:EnvDTE.dbgExecutionAction.dbgExecutionActionStepOut">
      <summary>Step out of the current function.</summary>
    </member>
    <member name="F:EnvDTE.dbgExecutionAction.dbgExecutionActionStepOver">
      <summary>Step over the next function</summary>
    </member>
    <member name="F:EnvDTE.dbgExecutionAction.dbgExecutionActionRunToCursor">
      <summary>Continue execution, stopping at the cursor.</summary>
    </member>
    <member name="T:EnvDTE.dbgHitCountType">
      <summary>Specifies a hit count condition.</summary>
    </member>
    <member name="F:EnvDTE.dbgHitCountType.dbgHitCountTypeNone">
      <summary>There is no hit count.</summary>
    </member>
    <member name="F:EnvDTE.dbgHitCountType.dbgHitCountTypeEqual">
      <summary>Hit count is equal to specified value.</summary>
    </member>
    <member name="F:EnvDTE.dbgHitCountType.dbgHitCountTypeGreaterOrEqual">
      <summary>Hit count is greater than or equal to the specified value.</summary>
    </member>
    <member name="F:EnvDTE.dbgHitCountType.dbgHitCountTypeMultiple">
      <summary>There are multiple hit count conditions.</summary>
    </member>
    <member name="T:EnvDTE.Debugger">
      <summary>The <see cref="T:EnvDTE.Debugger" /> object is used to interrogate and manipulate the state of the debugger and the program being debugged.</summary>
    </member>
    <member name="P:EnvDTE.Debugger.AllBreakpointsLastHit">
      <summary>Gets a collection of bound breakpoints that were last simultaneously hit. </summary>
      <returns>A <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.Debugger.Break(System.Boolean)">
      <summary>Causes the given process to pause its execution so that its current state can be analyzed.</summary>
      <param name="WaitForBreakMode">Set to true to return only when the debugger has entered break mode. Set to false to break and return immediately. See How to: Break Execution for more information.</param>
    </member>
    <member name="P:EnvDTE.Debugger.BreakpointLastHit">
      <summary>Gets the last breakpoint hit.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.Breakpoints">
      <summary>Gets a collection of breakpoints.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.CurrentMode">
      <summary>Gets the current mode of the debugger within the context of the integrated development environment (IDE).</summary>
      <returns>A <see cref="T:EnvDTE.dbgDebugMode" /> value.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.CurrentProcess">
      <summary>Sets or gets the active process.</summary>
      <returns>A <see cref="T:EnvDTE.Process" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.CurrentProgram">
      <summary>Sets or gets the active program.</summary>
      <returns>The active <see cref="T:EnvDTE.Program" />.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.CurrentStackFrame">
      <summary>Sets or gets the current stack frame.</summary>
      <returns>A <see cref="T:EnvDTE.StackFrame" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.CurrentThread">
      <summary>Sets or gets the current thread being debugged.</summary>
      <returns>A <see cref="T:EnvDTE.Thread" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.DebuggedProcesses">
      <summary>Gets the list of processes currently being debugged.</summary>
      <returns>A <see cref="T:EnvDTE.Processes" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.Debugger.DetachAll">
      <summary>Detaches from all attached programs.</summary>
    </member>
    <member name="P:EnvDTE.Debugger.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Debugger.ExecuteStatement(System.String,System.Int32,System.Boolean)">
      <summary>Executes the specified statement. If the <paramref name="TreatAsExpression" /> flag is true, then the string is interpreted as an expression, and output is sent to the Command Window.</summary>
      <param name="Statement">The statement to execute.</param>
      <param name="Timeout">The timeout period, in milliseconds.</param>
      <param name="TreatAsExpression">The treat as expression. True if the string is to be interpreted as an expression; otherwise False.</param>
    </member>
    <member name="M:EnvDTE.Debugger.GetExpression(System.String,System.Boolean,System.Int32)">
      <summary>Evaluates an expression based on the current stack frame. If the expression can be parsed but not evaluated, an object is returned but will not contain a valid value.</summary>
      <returns>A <see cref="T:EnvDTE.Expression" /> object.</returns>
      <param name="ExpressionText">The expression text to be evaluated.</param>
      <param name="UseAutoExpandRules">true if the auto expand rules should be used; otherwise, false.</param>
      <param name="Timeout">The timeout period, in milliseconds.</param>
    </member>
    <member name="M:EnvDTE.Debugger.Go(System.Boolean)">
      <summary>Starts executing the program from the current statement.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return, the debugger could be in Design, Break, or Run modes. See Execution Control for more information.</param>
    </member>
    <member name="P:EnvDTE.Debugger.HexDisplayMode">
      <summary>Gets or sets whether expressions are output in hexadecimal or decimal format.</summary>
      <returns>true if hexadecimal format, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.HexInputMode">
      <summary>Gets or sets whether expressions are evaluated in hexadecimal or decimal format.</summary>
      <returns>true if hexadecimal format, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.Languages">
      <summary>Gets a list of languages that the debugger supports.</summary>
      <returns>A <see cref="T:EnvDTE.Languages" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.LastBreakReason">
      <summary>Gets the last reason that a program was broken. If the program is running it returns DBG_REASON_NONE.</summary>
      <returns>A <see cref="T:EnvDTE.dbgEventReason" /> value.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.LocalProcesses">
      <summary>Gets the list of processes currently running on this machine.</summary>
      <returns>A <see cref="T:EnvDTE.Processes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Debugger.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Debugger" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Debugger.RunToCursor(System.Boolean)">
      <summary>Executes the program to the current position of the source file cursor.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.See Code Stepping Overview for more information.</param>
    </member>
    <member name="M:EnvDTE.Debugger.SetNextStatement">
      <summary>Sets the next instruction to be executed, according to the cursor position in the current source file.</summary>
    </member>
    <member name="M:EnvDTE.Debugger.StepInto(System.Boolean)">
      <summary>Steps into the next function call, if possible.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.</param>
    </member>
    <member name="M:EnvDTE.Debugger.StepOut(System.Boolean)">
      <summary>Steps out of the current function.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.</param>
    </member>
    <member name="M:EnvDTE.Debugger.StepOver(System.Boolean)">
      <summary>Steps over the next function call.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.</param>
    </member>
    <member name="M:EnvDTE.Debugger.Stop(System.Boolean)">
      <summary>Stops debugging, terminating, or detaching from all attached processes.</summary>
      <param name="WaitForDesignMode">Set to true if the debugging session should stop only when it reaches design mode. Set to false if you intend to stop debugging, but you need to perform other tasks in the macro even before the debugger enters Design mode.</param>
    </member>
    <member name="T:EnvDTE.DebuggerEvents">
      <summary>Defines events supported by the debugger. Use this object for functionality and refer to <see cref="T:EnvDTE.DebuggerEventsClass" /> for this object's members' documentation.</summary>
    </member>
    <member name="T:EnvDTE.DebuggerEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.add_OnContextChanged(EnvDTE._dispDebuggerEvents_OnContextChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.add_OnEnterBreakMode(EnvDTE._dispDebuggerEvents_OnEnterBreakModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.add_OnEnterDesignMode(EnvDTE._dispDebuggerEvents_OnEnterDesignModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.add_OnEnterRunMode(EnvDTE._dispDebuggerEvents_OnEnterRunModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.add_OnExceptionNotHandled(EnvDTE._dispDebuggerEvents_OnExceptionNotHandledEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.add_OnExceptionThrown(EnvDTE._dispDebuggerEvents_OnExceptionThrownEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.DebuggerEventsClass.OnContextChanged">
      <summary>Fired whenever the current process, program, thread, or stack has been changed through the user interface or through the automation model.</summary>
    </member>
    <member name="E:EnvDTE.DebuggerEventsClass.OnEnterBreakMode">
      <summary>Fired when entering break mode.</summary>
    </member>
    <member name="E:EnvDTE.DebuggerEventsClass.OnEnterDesignMode">
      <summary>Fired when leaving run mode or debug mode, and when the debugger establishes design mode after debugging.</summary>
    </member>
    <member name="E:EnvDTE.DebuggerEventsClass.OnEnterRunMode">
      <summary>Fired when the debugger enters run mode.</summary>
    </member>
    <member name="E:EnvDTE.DebuggerEventsClass.OnExceptionNotHandled">
      <summary>Thrown before <see cref="E:EnvDTE.DebuggerEventsClass.OnEnterBreakMode" />. Setting this action allows the handler to affect the development environment's user interface when the handler exits. The parameter is set initially to the value set by any prior handlers.</summary>
    </member>
    <member name="E:EnvDTE.DebuggerEventsClass.OnExceptionThrown">
      <summary>Thrown before <see cref="E:EnvDTE.DebuggerEventsClass.OnEnterBreakMode" />. Setting this action allows the handler to affect the developer environment's user interface upon exiting the handler. The parameter is initially set to the value set by any prior handlers.</summary>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.remove_OnContextChanged(EnvDTE._dispDebuggerEvents_OnContextChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.remove_OnEnterBreakMode(EnvDTE._dispDebuggerEvents_OnEnterBreakModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.remove_OnEnterDesignMode(EnvDTE._dispDebuggerEvents_OnEnterDesignModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.remove_OnEnterRunMode(EnvDTE._dispDebuggerEvents_OnEnterRunModeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.remove_OnExceptionNotHandled(EnvDTE._dispDebuggerEvents_OnExceptionNotHandledEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DebuggerEventsClass.remove_OnExceptionThrown(EnvDTE._dispDebuggerEvents_OnExceptionThrownEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.Document">
      <summary>Represents a document in the environment open for editing.</summary>
    </member>
    <member name="M:EnvDTE.Document.Activate">
      <summary>Moves the focus to the current item.</summary>
    </member>
    <member name="P:EnvDTE.Document.ActiveWindow">
      <summary>Gets the currently active window, or the topmost window if no others are active. Returns Nothing if no windows are open.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Document.ClearBookmarks">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.Document.Close(EnvDTE.vsSaveChanges)">
      <summary>Closes the open document and optionally saves it, or closes and destroys the window.</summary>
      <param name="Save">Optional. A <see cref="T:EnvDTE.vsSaveChanges" /> constant that determines whether to save an item or items.</param>
    </member>
    <member name="P:EnvDTE.Document.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.Document" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Documents" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Document.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Document.Extender(System.String)">
      <summary>Returns the requested Extender if it is available for this object.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.Document.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A string GUID representing the CATID.</returns>
    </member>
    <member name="P:EnvDTE.Document.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.Document.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A string representing the full path and name of the object's file.</returns>
    </member>
    <member name="P:EnvDTE.Document.IndentSize">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.Document.Kind">
      <summary>Gets a GUID string indicating the kind or type of the object.</summary>
      <returns>A GUID string indicating the kind or type of object.</returns>
    </member>
    <member name="P:EnvDTE.Document.Language">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.Document.MarkText(System.String,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Pattern">The text pattern.</param>
      <param name="Flags">The flags.</param>
    </member>
    <member name="P:EnvDTE.Document.Name">
      <summary>Gets the name of the <see cref="T:EnvDTE.Document" />.</summary>
      <returns>A string representing the file name of the <see cref="T:EnvDTE.Document" /> without the path.</returns>
    </member>
    <member name="M:EnvDTE.Document.NewWindow">
      <summary>Creates a new window in which to view the document.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Document.Object(System.String)">
      <summary>Returns an interface or object that can be accessed at run time by name.</summary>
      <returns>An object.</returns>
      <param name="ModelKind">Optional. The type of data model.</param>
    </member>
    <member name="P:EnvDTE.Document.Path">
      <summary>Gets the path, without file name, for the directory containing the document.</summary>
      <returns>A string representing the path, without file name, for the directory containing the document.</returns>
    </member>
    <member name="M:EnvDTE.Document.PrintOut">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.Document.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.Document" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Document.ReadOnly">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.Document.Redo">
      <summary>Re-executes the last action that was undone by the <see cref="M:EnvDTE.Document.Undo" /> method or the user.</summary>
      <returns>A Boolean value indicating true if there is an undo action to redo, false if not.</returns>
    </member>
    <member name="M:EnvDTE.Document.ReplaceText(System.String,System.String,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the text was replaced, otherwise false.</returns>
      <param name="FindText">The text to find.</param>
      <param name="ReplaceText">The replacement text. </param>
      <param name="Flags">The flags.</param>
    </member>
    <member name="M:EnvDTE.Document.Save(System.String)">
      <summary>Saves the document.</summary>
      <returns>A <see cref="T:EnvDTE.vsSaveStatus" /> constant indicating whether or not the save was successful.</returns>
      <param name="FileName">Optional. The name in which to save the document. Defaults to the path associated with this document. That is, if an empty string is passed, the document is saved with its current name.</param>
    </member>
    <member name="P:EnvDTE.Document.Saved">
      <summary>Returns true if the object has not been modified since last being saved or opened.</summary>
      <returns>A Boolean value indicating true (default) if the object has not been modified since last being saved or opened; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.Document.Selection">
      <summary>Gets an object representing the current selection on the <see cref="T:EnvDTE.Document" />.</summary>
      <returns>An object representing the current selection on the <see cref="T:EnvDTE.Document" />.</returns>
    </member>
    <member name="P:EnvDTE.Document.TabSize">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.Document.Type">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.Document.Undo">
      <summary>Reverses the action last performed by the user in the document.</summary>
      <returns>A Boolean value indicating true if the last action can be reversed, false if not.</returns>
    </member>
    <member name="P:EnvDTE.Document.Windows">
      <summary>Gets a <see cref="T:EnvDTE.Windows" /> collection containing the windows that display in the object.</summary>
      <returns>A <see cref="T:EnvDTE.Windows" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.DocumentEvents">
      <summary>Provides document events. Use this object for functionality and refer to <see cref="T:EnvDTE.DocumentEventsClass" /> for this object's documentation.</summary>
    </member>
    <member name="T:EnvDTE.DocumentEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.DocumentEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.DocumentEventsClass.add_DocumentClosing(EnvDTE._dispDocumentEvents_DocumentClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DocumentEventsClass.add_DocumentOpened(EnvDTE._dispDocumentEvents_DocumentOpenedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DocumentEventsClass.add_DocumentOpening(EnvDTE._dispDocumentEvents_DocumentOpeningEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DocumentEventsClass.add_DocumentSaved(EnvDTE._dispDocumentEvents_DocumentSavedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.DocumentEventsClass.DocumentClosing">
      <summary>Occurs just before a document is closed.</summary>
    </member>
    <member name="E:EnvDTE.DocumentEventsClass.DocumentOpened">
      <summary>Occurs after a document is opened.</summary>
    </member>
    <member name="E:EnvDTE.DocumentEventsClass.DocumentOpening">
      <summary>Occurs before a document is opened.</summary>
    </member>
    <member name="E:EnvDTE.DocumentEventsClass.DocumentSaved">
      <summary>Occurs when a document is saved.</summary>
    </member>
    <member name="M:EnvDTE.DocumentEventsClass.remove_DocumentClosing(EnvDTE._dispDocumentEvents_DocumentClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DocumentEventsClass.remove_DocumentOpened(EnvDTE._dispDocumentEvents_DocumentOpenedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DocumentEventsClass.remove_DocumentOpening(EnvDTE._dispDocumentEvents_DocumentOpeningEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DocumentEventsClass.remove_DocumentSaved(EnvDTE._dispDocumentEvents_DocumentSavedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.Documents">
      <summary>Contains all <see cref="T:EnvDTE.Document" /> objects in the environment, each representing an open document.</summary>
    </member>
    <member name="M:EnvDTE.Documents.Add(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The document.</returns>
      <param name="Kind">The kind of document.</param>
    </member>
    <member name="M:EnvDTE.Documents.CloseAll(EnvDTE.vsSaveChanges)">
      <summary>Closes all open documents in the environment and optionally saves them.</summary>
      <param name="Save">Optional. A <see cref="T:EnvDTE.vsSaveChanges" /> constant representing how to react to changes made to documents.</param>
    </member>
    <member name="P:EnvDTE.Documents.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.Documents" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.Documents" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Documents.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Documents.GetEnumerator">
      <summary>Returns an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Documents.Item(System.Object)">
      <summary>Returns an indexed member of a <see cref="T:EnvDTE.Documents" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Document" /> object.</returns>
      <param name="index">Required. The index of the item to return. </param>
    </member>
    <member name="M:EnvDTE.Documents.Open(System.String,System.String,System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The document.</returns>
      <param name="PathName">The path of the file.</param>
      <param name="Kind">The kind of file.</param>
      <param name="ReadOnly">Whether or not the file is read-only.</param>
    </member>
    <member name="P:EnvDTE.Documents.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Documents" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Documents.SaveAll">
      <summary>Saves all documents currently open in the environment.</summary>
    </member>
    <member name="T:EnvDTE.DsCaseOptions">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.DsCaseOptions.dsLowercase">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsCaseOptions.dsUppercase">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsCaseOptions.dsCapitalize">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.DsGoToLineOptions">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.DsGoToLineOptions.dsLastLine">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.DsMovementOptions">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.DsMovementOptions.dsMove">
      <summary />
    </member>
    <member name="F:EnvDTE.DsMovementOptions.dsExtend">
      <summary />
    </member>
    <member name="T:EnvDTE.DsSaveChanges">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.DsSaveChanges.dsSaveChangesYes">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsSaveChanges.dsSaveChangesNo">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsSaveChanges.dsSaveChangesPrompt">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.dsSaveStatus">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.dsSaveStatus.dsSaveCancelled">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.dsSaveStatus.dsSaveSucceeded">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.DsStartOfLineOptions">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.DsStartOfLineOptions.dsFirstColumn">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsStartOfLineOptions.dsFirstText">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.DsTextSearchOptions">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchWord">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchCase">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchNoRegExp">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchRegExp">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchRegExpB">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchRegExpE">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchRegExpCur">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchForward">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchBackward">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsTextSearchOptions.dsMatchFromStart">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.DsWhitespaceOptions">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.DsWhitespaceOptions.dsHorizontal">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.DsWhitespaceOptions.dsVertical">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.DTE">
      <summary>The top-level object in the Visual Studio automation object model. Use this object for functionality and refer to <see cref="T:EnvDTE._DTE" /> for this object’s documentation.</summary>
    </member>
    <member name="T:EnvDTE.DTEClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.DTEClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.DTEClass.ActiveDocument">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.ActiveDocument" />.</summary>
      <returns>The active document.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.ActiveSolutionProjects">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.ActiveSolutionProjects" />.</summary>
      <returns>The active solution projects.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.ActiveWindow">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.ActiveWindow" />.</summary>
      <returns>The active window.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.AddIns">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.AddIns" />.</summary>
      <returns>The addins.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Application">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Application" />.</summary>
      <returns>The application.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.CommandBars">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.CommandBars" />.</summary>
      <returns>The command bars.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.CommandLineArguments">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.CommandLineArguments" />.</summary>
      <returns>The command line arguments.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Commands">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Commands" />.</summary>
      <returns>The commands.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.ContextAttributes">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.ContextAttributes" />.</summary>
      <returns>The context attributes.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Debugger">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Debugger" />.</summary>
      <returns>The debugger.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.DisplayMode">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.DisplayMode" />.</summary>
      <returns>The display mode.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Documents">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Documents" />.</summary>
      <returns>The documents.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.DTE">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.DTE" />.</summary>
      <returns>The application.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Edition">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Edition" />.</summary>
      <returns>The edition.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Events">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Events" />.</summary>
      <returns>The events.</returns>
    </member>
    <member name="M:EnvDTE.DTEClass.ExecuteCommand(System.String,System.String)">
      <summary>For more information on this method, refer to <see cref="M:EnvDTE._DTE.ExecuteCommand(System.String,System.String)" />.</summary>
      <param name="CommandName">The name of the command.</param>
      <param name="CommandArgs">The command line arguments.</param>
    </member>
    <member name="P:EnvDTE.DTEClass.FileName">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.FileName" />.</summary>
      <returns>The file name.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Find">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Find" />.</summary>
      <returns>The find object.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.FullName">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.FullName" />.</summary>
      <returns>The full name.</returns>
    </member>
    <member name="M:EnvDTE.DTEClass.GetObject(System.String)">
      <summary>For more information on this method, refer to <see cref="M:EnvDTE._DTE.GetObject(System.String)" />.</summary>
      <returns>The object.</returns>
      <param name="Name">The name of the object.</param>
    </member>
    <member name="P:EnvDTE.DTEClass.Globals">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Globals" />.</summary>
      <returns>The global variables.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.IsOpenFile(System.String,System.String)">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.IsOpenFile(System.String,System.String)" />.</summary>
      <returns>true if the file is open, otherwise false.</returns>
      <param name="ViewKind">The kind of view.</param>
      <param name="FileName">The file name</param>
    </member>
    <member name="P:EnvDTE.DTEClass.ItemOperations">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.ItemOperations" />.</summary>
      <returns>The item operations.</returns>
    </member>
    <member name="M:EnvDTE.DTEClass.LaunchWizard(System.String,System.Object[]@)">
      <summary>For more information on this method, refer to <see cref="M:EnvDTE._DTE.LaunchWizard(System.String,System.Object[]@)" />.</summary>
      <returns>The wizard result.</returns>
      <param name="VSZFile">The wizard file.</param>
      <param name="ContextParams">The context parameters</param>
    </member>
    <member name="P:EnvDTE.DTEClass.LocaleID">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.LocaleID" />.</summary>
      <returns>The locale ID.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Macros">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Macros" />.</summary>
      <returns>The macros.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.MacrosIDE">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.MacrosIDE" />.</summary>
      <returns>The application for the macros.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.MainWindow">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.MainWindow" />.</summary>
      <returns>The main window.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Mode">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Mode" />.</summary>
      <returns>The application mode.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Name">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Name" />.</summary>
      <returns>The name.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.ObjectExtenders">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.ObjectExtenders" />.</summary>
      <returns>The object extenders.</returns>
    </member>
    <member name="M:EnvDTE.DTEClass.OpenFile(System.String,System.String)">
      <summary>For more information on this method, refer to <see cref="M:EnvDTE._DTE.OpenFile(System.String,System.String)" />.</summary>
      <returns>The window in which the file was opened.</returns>
      <param name="ViewKind">The kind of view.</param>
      <param name="FileName">The file name.</param>
    </member>
    <member name="P:EnvDTE.DTEClass.Properties(System.String,System.String)">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Properties(System.String,System.String)" />.</summary>
      <returns>The properties.</returns>
      <param name="Category">The category.</param>
      <param name="Page">The property page.</param>
    </member>
    <member name="M:EnvDTE.DTEClass.Quit">
      <summary>For more information on this method, refer to <see cref="M:EnvDTE._DTE.Quit" />.</summary>
    </member>
    <member name="P:EnvDTE.DTEClass.RegistryRoot">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.RegistryRoot" />.</summary>
      <returns>The registry root.</returns>
    </member>
    <member name="M:EnvDTE.DTEClass.SatelliteDllPath(System.String,System.String)">
      <summary>For more information on this method, refer to <see cref="M:EnvDTE._DTE.SatelliteDllPath(System.String,System.String)" />.</summary>
      <returns>The path of the satellite dll.</returns>
      <param name="Path">The satellite dll path.</param>
      <param name="Name">The name of the satellite dll.</param>
    </member>
    <member name="P:EnvDTE.DTEClass.SelectedItems">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.SelectedItems" />.</summary>
      <returns>The selected items.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Solution">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Solution" />.</summary>
      <returns>The solution.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.SourceControl">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.SourceControl" />.</summary>
      <returns>The source control module.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.StatusBar">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.StatusBar" />.</summary>
      <returns>The status bar.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.SuppressUI">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.SuppressUI" />.</summary>
      <returns>true if the UI is not visible, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.UndoContext">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.UndoContext" />.</summary>
      <returns>The undo context.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.UserControl">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.UserControl" />.</summary>
      <returns>The user control.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Version">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Version" />.</summary>
      <returns>The version.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.WindowConfigurations">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.WindowConfigurations" />.</summary>
      <returns>The window configurations.</returns>
    </member>
    <member name="P:EnvDTE.DTEClass.Windows">
      <summary>For more information on this property, refer to <see cref="P:EnvDTE._DTE.Windows" />.</summary>
      <returns>The windows.</returns>
    </member>
    <member name="T:EnvDTE.DTEEvents">
      <summary>Provides events relating to the state of the environment. Use this object for functionality and refer to <see cref="T:EnvDTE.DTEEventsClass" /> for this object's documentation.</summary>
    </member>
    <member name="T:EnvDTE.DTEEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.DTEEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.DTEEventsClass.add_ModeChanged(EnvDTE._dispDTEEvents_ModeChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DTEEventsClass.add_OnBeginShutdown(EnvDTE._dispDTEEvents_OnBeginShutdownEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DTEEventsClass.add_OnMacrosRuntimeReset(EnvDTE._dispDTEEvents_OnMacrosRuntimeResetEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DTEEventsClass.add_OnStartupComplete(EnvDTE._dispDTEEvents_OnStartupCompleteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.DTEEventsClass.ModeChanged">
      <summary>Occurs when the mode of the development environment (build, run, or debug) is changed.</summary>
    </member>
    <member name="E:EnvDTE.DTEEventsClass.OnBeginShutdown">
      <summary>Occurs when the development environment is closing.</summary>
    </member>
    <member name="E:EnvDTE.DTEEventsClass.OnMacrosRuntimeReset">
      <summary>Occurs when the common language runtime resets, clearing all global variable data and losing all event connections.</summary>
    </member>
    <member name="E:EnvDTE.DTEEventsClass.OnStartupComplete">
      <summary>Occurs when the environment has completed initializing.</summary>
    </member>
    <member name="M:EnvDTE.DTEEventsClass.remove_ModeChanged(EnvDTE._dispDTEEvents_ModeChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DTEEventsClass.remove_OnBeginShutdown(EnvDTE._dispDTEEvents_OnBeginShutdownEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DTEEventsClass.remove_OnMacrosRuntimeReset(EnvDTE._dispDTEEvents_OnMacrosRuntimeResetEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.DTEEventsClass.remove_OnStartupComplete(EnvDTE._dispDTEEvents_OnStartupCompleteEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.EditPoint">
      <summary>Allows you to manipulate text as data in text buffers.</summary>
    </member>
    <member name="P:EnvDTE.EditPoint.AbsoluteCharOffset">
      <summary>Gets the one-based character offset of the <see cref="T:EnvDTE.EditPoint" /> object.</summary>
      <returns>The one-based character offset from the beginning of the document to the <see cref="T:EnvDTE.EditPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.EditPoint.AtEndOfDocument">
      <summary>Gets a value indicating whether or not the object is at the end of the document.</summary>
      <returns>true if you are at the end of the document; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.EditPoint.AtEndOfLine">
      <summary>Gets a value indicating whether or not the object is at the end of a line.</summary>
      <returns>true if you are at the end of a line; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.EditPoint.AtStartOfDocument">
      <summary>Gets a value indicating whether or not the object is at the beginning of the document.</summary>
      <returns>true if you are at the start of a document; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.EditPoint.AtStartOfLine">
      <summary>Gets a value indicating whether or not the <see cref="T:EnvDTE.EditPoint" /> object is at the beginning of a line.</summary>
      <returns>true if you are at the start of a line; otherwise, False if otherwise.</returns>
    </member>
    <member name="M:EnvDTE.EditPoint.ChangeCase(System.Object,EnvDTE.vsCaseOptions)">
      <summary>Changes the case of the selected text.</summary>
      <param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint" /> object or a number of characters.</param>
      <param name="How">Required. A <see cref="T:EnvDTE.vsCaseOptions" /> constant indicating the case of the text.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.CharLeft(System.Int32)">
      <summary>Moves the edit point the specified number of characters to the left.</summary>
      <param name="Count">Optional. The number of characters to move to the left. The default is 1 character.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.CharRight(System.Int32)">
      <summary>Moves the edit point the specified number of characters to the right.</summary>
      <param name="Count">Optional. The number of characters to move to the right. The default is one character.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.ClearBookmark">
      <summary>Clears any unnamed bookmarks in the current text buffer line.</summary>
    </member>
    <member name="P:EnvDTE.EditPoint.CodeElement(EnvDTE.vsCMElement)">
      <summary>Gets the code element at the <see cref="T:EnvDTE.EditPoint" /> location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Scope">Required. A <see cref="T:EnvDTE.vsCMElement" /> constant indicating the code element with the specified kind that contains the editor location.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.Copy(System.Object,System.Boolean)">
      <summary>Copies the specified range of text to the clipboard.</summary>
      <param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint" /> object or a number of characters.</param>
      <param name="Append">Optional. Indicates whether to append the selected text to the clipboard. The default is false.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.CreateEditPoint">
      <summary>Creates and returns an <see cref="T:EnvDTE.EditPoint" /> object at the location of the calling object.</summary>
      <returns>A <see cref="T:EnvDTE.EditPoint" /> object.</returns>
    </member>
    <member name="M:EnvDTE.EditPoint.Cut(System.Object,System.Boolean)">
      <summary>Copies the specified range of text to the clipboard and deletes it from the document.</summary>
      <param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint" /> object or a number of characters.</param>
      <param name="Append">Optional. Indicates whether to append the selected text to the clipboard. The default is false.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.Delete(System.Object)">
      <summary>Deletes the specified range of text.</summary>
      <param name="PointOrCount">Required. Represents either a <see cref="T:EnvDTE.TextPoint" /> object or a number of characters.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.DeleteWhitespace(EnvDTE.vsWhitespaceOptions)">
      <summary>Deletes the empty characters (white space) horizontally or vertically around the current location in the text buffer.</summary>
      <param name="Direction">Optional. A <see cref="T:EnvDTE.vsWhitespaceOptions" /> constant that determines how and where to remove empty spaces.</param>
    </member>
    <member name="P:EnvDTE.EditPoint.DisplayColumn">
      <summary>Gets the number of the column number of the <see cref="T:EnvDTE.EditPoint" /> object.</summary>
      <returns>The number of the currently displayed column containing the <see cref="T:EnvDTE.EditPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.EditPoint.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.EditPoint.EndOfDocument">
      <summary>Moves the edit point to the end of the document.</summary>
    </member>
    <member name="M:EnvDTE.EditPoint.EndOfLine">
      <summary>Moves the edit point to the end of the current line in the buffer.</summary>
    </member>
    <member name="M:EnvDTE.EditPoint.EqualTo(EnvDTE.TextPoint)">
      <summary>Returns a value indicating whether the value of the given point object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset" /> is equal to that of the calling <see cref="T:EnvDTE.EditPoint" /> object.</summary>
      <returns>true if <paramref name="Point" /> has the same <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property value as the calling <see cref="T:EnvDTE.EditPoint" /> point object; otherwise, false. </returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> object to compare to the calling <see cref="T:EnvDTE.EditPoint" /> point object.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.FindPattern(System.String,System.Int32,EnvDTE.EditPoint@,EnvDTE.TextRanges@)">
      <summary>Finds a given matching pattern in the selected text.</summary>
      <returns>true if the pattern is found; otherwise, false.</returns>
      <param name="Pattern">Required. The text you want to find.</param>
      <param name="vsFindOptionsValue">Optional. A <see cref="T:EnvDTE.vsFindOptions" /> constant indicating the type of search to perform. The <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsMatchInHiddenText" /> constant value does not apply to this method because <see cref="M:EnvDTE.EditPoint.FindPattern(System.String,System.Int32,EnvDTE.EditPoint@,EnvDTE.TextRanges@)" /> searches all text, including hidden text.</param>
      <param name="EndPoint">Optional. An <see cref="T:EnvDTE.EditPoint" /> object representing the point that is to be moved to the end of the matched pattern.</param>
      <param name="Tags">Optional. If the matched pattern is a regular expression containing tagged subexpressions, then the <paramref name="Tags" /> argument contains a collection of <see cref="T:EnvDTE.TextRange" /> objects, one for each tagged subexpression.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.GetLines(System.Int32,System.Int32)">
      <summary>Gets a string representing the text between two given lines.</summary>
      <returns>The text between two given lines.</returns>
      <param name="Start">Optional. The last line number to include the text.</param>
      <param name="ExclusiveEnd">Required. The first line number to include the text.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.GetText(System.Object)">
      <summary>Gets the text between the current location and the specified location in the buffer.</summary>
      <returns>A string of text located between the current location and the specified location in the buffer.</returns>
      <param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint" /> object or a number of characters.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.GreaterThan(EnvDTE.TextPoint)">
      <summary>Returns whether the value of the <see cref="T:EnvDTE.EditPoint" /> object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset" /> property is greater than that of the given <see cref="T:EnvDTE.TextPoint" /> object.</summary>
      <returns>true if <paramref name="Point" /> has a smaller <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property value compared to the calling <see cref="T:EnvDTE.EditPoint" /> object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset" /> property; otherwise, false.</returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> to compare to the calling point object.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.Indent(EnvDTE.TextPoint,System.Int32)">
      <summary>Indents the selected lines by the given number of indentation levels.</summary>
      <param name="Point">Optional. A <see cref="T:EnvDTE.TextPoint" /> object endpoint for indentation. The default is the current line in the buffer, causing the current line in the buffer to be indented.</param>
      <param name="Count">Optional. The number of displayed columns to indent the lines. The default value is 1.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.Insert(System.String)">
      <summary>Inserts the given string at the edit point's current position in the buffer.</summary>
      <param name="Text">Required. The text to insert into the text buffer. Must be a Unicode string.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.InsertFromFile(System.String)">
      <summary>Inserts the contents of the specified file at the current location in the buffer.</summary>
      <param name="File">Required. The name of the file to insert into the text buffer.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.LessThan(EnvDTE.TextPoint)">
      <summary>Returns whether the value of the called <see cref="T:EnvDTE.EditPoint" /> object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset" /> is less than that of the given <see cref="T:EnvDTE.TextPoint" /> object.</summary>
      <returns>A Boolean value indicating true if <paramref name="Point" /> has a greater <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property value compared to the calling point object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset" /> property. </returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> to compare to the calling point object.</param>
    </member>
    <member name="P:EnvDTE.EditPoint.Line">
      <summary>Gets the <see cref="T:EnvDTE.EditPoint" /> object's line number.</summary>
      <returns>The line number of the <see cref="T:EnvDTE.EditPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.EditPoint.LineCharOffset">
      <summary>Gets the character offset of the <see cref="T:EnvDTE.EditPoint" /> object.</summary>
      <returns>An integer value indicating the character offset of the <see cref="T:EnvDTE.EditPoint" /> object.</returns>
    </member>
    <member name="M:EnvDTE.EditPoint.LineDown(System.Int32)">
      <summary>Moves the edit point down the specified number of lines.</summary>
      <param name="Count">Optional. The number of lines to move the edit point. The default is 1.</param>
    </member>
    <member name="P:EnvDTE.EditPoint.LineLength">
      <summary>Gets the number of characters in a line.</summary>
      <returns>The number of characters in a line containing the <see cref="T:EnvDTE.EditPoint" /> object, excluding the new line character.</returns>
    </member>
    <member name="M:EnvDTE.EditPoint.LineUp(System.Int32)">
      <summary>Moves the edit point up the specified number of lines.</summary>
      <param name="Count">Optional. The number of lines to move the edit point. The default is 1.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.MoveToAbsoluteOffset(System.Int32)">
      <summary>Moves the active point to the given 1-based absolute character offset.</summary>
      <param name="Offset">Required. A character index from the start of the document, beginning at one.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.MoveToLineAndOffset(System.Int32,System.Int32)">
      <summary>Moves the document to the specified line and character offset position in that line.</summary>
      <param name="Line">Required. The line number, starting at one. <paramref name="Line" /> may also be one of the constants from <see cref="T:EnvDTE.vsGoToLineOptions" />.</param>
      <param name="Offset">Required. The character index position in the line, starting at one.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.MoveToPoint(EnvDTE.TextPoint)">
      <summary>Moves the active point to the given position.</summary>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> object representing the location in which to move the character.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.NextBookmark">
      <summary>Moves to the location of the next bookmark in the document.</summary>
      <returns>true if the insertion point moves to the next bookmark; otherwise, false.</returns>
    </member>
    <member name="M:EnvDTE.EditPoint.OutlineSection(System.Object)">
      <summary>Creates an outlining section based on an edit point and the given text point or value.</summary>
      <param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint" /> object or an integer representing the number of characters.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.PadToColumn(System.Int32)">
      <summary>Fills the current line in the buffer with empty characters (white space) to the given column.</summary>
      <param name="Column">Required. The number of columns to pad, starting at one.</param>
    </member>
    <member name="P:EnvDTE.EditPoint.Parent">
      <summary>Gets the immediate parent object of the <see cref="T:EnvDTE.EditPoint" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.TextDocument" /> object.</returns>
    </member>
    <member name="M:EnvDTE.EditPoint.Paste">
      <summary>Inserts the clipboard contents at the current location.</summary>
    </member>
    <member name="M:EnvDTE.EditPoint.PreviousBookmark">
      <summary>Moves the edit point to the location of the previous bookmark in the document.</summary>
      <returns>A Boolean value indicating true if the edit point moves to a previous bookmark, false if not.</returns>
    </member>
    <member name="M:EnvDTE.EditPoint.ReadOnly(System.Object)">
      <summary>Returns a value indicating whether any of the specified range contains read-only text.</summary>
      <returns>true if the selection contains read-only text; otherwise, false.</returns>
      <param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint" /> object or a number of characters.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.ReplacePattern(EnvDTE.TextPoint,System.String,System.String,System.Int32,EnvDTE.TextRanges@)">
      <summary>Finds a pattern in the specified range of text and replaces it with the specified text.</summary>
      <returns>true if replacement occurs successfully; otherwise, false.</returns>
      <param name="Point">Required. The endpoint of the specified range of text. The edit point and <paramref name="Point" /> are the boundaries for replacement.</param>
      <param name="Pattern">Required. The string to find.</param>
      <param name="Replace">Required. The replacement string for <paramref name="Pattern" />.</param>
      <param name="vsFindOptionsValue">Optional. A <see cref="T:EnvDTE.vsFindOptions" /> constant indicating the type of search to perform.</param>
      <param name="Tags">Optional. If the matched pattern is a regular expression containing tagged sub-expressions, then <paramref name="Tags" /> contains a collection of <see cref="T:EnvDTE.TextRange" /> objects, one for each tagged subexpression.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.ReplaceText(System.Object,System.String,System.Int32)">
      <summary>Replaces the selected text with the given text.</summary>
      <param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint" /> object or an integer that determines the text to replace.</param>
      <param name="Text">Required. The text to insert.</param>
      <param name="Flags">Required. A <see cref="T:EnvDTE.vsEPReplaceTextOptions" /> constant representing an editor action.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.SetBookmark">
      <summary>Sets an unnamed bookmark on the current line in the buffer.</summary>
    </member>
    <member name="M:EnvDTE.EditPoint.SmartFormat(EnvDTE.TextPoint)">
      <summary>Formats the specified range of text based on the current language.</summary>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> object representing the end of the specified range of text.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.StartOfDocument">
      <summary>Moves the object to the beginning of the document.</summary>
    </member>
    <member name="M:EnvDTE.EditPoint.StartOfLine">
      <summary>Moves the edit point to the beginning of the current line in the buffer.</summary>
    </member>
    <member name="M:EnvDTE.EditPoint.TryToShow(EnvDTE.vsPaneShowHow,System.Object)">
      <summary>Attempts to display the text point's location.</summary>
      <returns>true if the span of text fits within the current code editor; otherwise, false.</returns>
      <param name="How">Optional. A <see cref="T:EnvDTE.vsPaneShowHow" /> constant that determines how the code is displayed.</param>
      <param name="PointOrCount">Optional. The endpoint of the selected range of text to be displayed. It can be either a <see cref="T:EnvDTE.TextPoint" /> or an integer.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.Unindent(EnvDTE.TextPoint,System.Int32)">
      <summary>Removes the indent characters from the selected lines by the given number of indentation levels.</summary>
      <param name="Point">Optional. The endpoint. Defaults to the endpoint, causing the current line in the buffer to be outdented. The default value is one indentation level.</param>
      <param name="Count">Optional. The number of display columns to indent each line. The default is 1.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.WordLeft(System.Int32)">
      <summary>Moves the object the specified number of words to the left.</summary>
      <param name="Count">Optional. Specifies how many words to move the edit point to the left of its current position in the buffer.</param>
    </member>
    <member name="M:EnvDTE.EditPoint.WordRight(System.Int32)">
      <summary>Moves the object the specified number of words to the right.</summary>
      <param name="Count">Optional. The number of words to move the edit point to the right of its current position in the buffer.</param>
    </member>
    <member name="T:EnvDTE.Events">
      <summary>Allows access to all events in the extensibility model. Events may also be exposed from specific objects within the extensibility model.</summary>
    </member>
    <member name="P:EnvDTE.Events.BuildEvents">
      <summary>Gets the <see cref="T:EnvDTE.BuildEvents" /> object, which provides events for solution builds.</summary>
      <returns>A <see cref="T:EnvDTE.BuildEvents" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Events.CommandBarEvents(System.Object)">
      <summary>Gets an object providing events fired when the supplied CommandBarControl object is clicked.</summary>
      <returns>A <see cref="T:EnvDTE.CommandBarEvents" /> object.</returns>
      <param name="CommandBarControl">Required. The CommandBar control that causes the event to fire.</param>
    </member>
    <member name="P:EnvDTE.Events.CommandEvents(System.String,System.Int32)">
      <summary>Gets the <see cref="T:EnvDTE.CommandEvents" /> for the specified command.</summary>
      <returns>A <see cref="T:EnvDTE.CommandEvents" /> object.</returns>
      <param name="Guid">Required. The GUID for the command group. If <paramref name="Guid" /> is Null or Nothing, then <see cref="P:EnvDTE.Events.CommandEvents(System.String,System.Int32)" /> returns a <see cref="T:EnvDTE.CommandEvents" /> object representing all commands in the environment.</param>
      <param name="ID">Required. An index into the command group for the particular command. If <paramref name="ID" /> is Null or Nothing, then <see cref="P:EnvDTE.Events.CommandEvents(System.String,System.Int32)" /> returns a <see cref="T:EnvDTE.CommandEvents" /> object representing all commands in the group.</param>
    </member>
    <member name="P:EnvDTE.Events.DebuggerEvents">
      <summary>Gets the object that provides events from the debugger.</summary>
      <returns>A <see cref="T:EnvDTE.DebuggerEvents" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Events.DocumentEvents(EnvDTE.Document)">
      <summary>Gets the <see cref="T:EnvDTE.DocumentEvents" /> that provides events for the document.</summary>
      <returns>A <see cref="T:EnvDTE.DocumentEvents" /> object.</returns>
      <param name="Document">Optional. Specifies a particular document to provide events for.</param>
    </member>
    <member name="P:EnvDTE.Events.DTEEvents">
      <summary>Gets the <see cref="T:EnvDTE.DTEEvents" /> that provides events for the development environment.</summary>
      <returns>A <see cref="T:EnvDTE.DTEEvents" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Events.FindEvents">
      <summary>Gets the <see cref="T:EnvDTE.FindEvents" /> for the Find operation.</summary>
      <returns>A <see cref="T:EnvDTE.FindEvents" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Events.GetObject(System.String)">
      <summary>Gets an interface or object that is late-bound to the <see cref="T:EnvDTE.DTE" /> object and can be accessed by name at run time.</summary>
      <returns>An object.</returns>
      <param name="Name">Required. The name of the object to retrieve.</param>
    </member>
    <member name="P:EnvDTE.Events.MiscFilesEvents">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItemsEvents" /> for the solution.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItemsEvents" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Events.OutputWindowEvents(System.String)">
      <summary>Gets the <see cref="T:EnvDTE.OutputWindowEvents" /> for the window events.</summary>
      <returns>An <see cref="T:EnvDTE.OutputWindowEvents" /> object.</returns>
      <param name="Pane">Optional. The name of an Output windowpane. If <paramref name="Pane" /> is supplied, the <see cref="T:EnvDTE.OutputWindowEvents" /> object only provides events for that pane.</param>
    </member>
    <member name="P:EnvDTE.Events.SelectionEvents">
      <summary>Gets the <see cref="T:EnvDTE.SelectionEvents" /> for the selection.</summary>
      <returns>A <see cref="T:EnvDTE.SelectionEvents" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Events.SolutionEvents">
      <summary>Gets the <see cref="T:EnvDTE.SolutionEvents" /> object for the solution.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionEvents" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Events.SolutionItemsEvents">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItemsEvents" /> object for the solution.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItemsEvents" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Events.TaskListEvents(System.String)">
      <summary>Gets the <see cref="T:EnvDTE.TaskListEvents" /> for the development environment.</summary>
      <returns>A <see cref="T:EnvDTE.TaskListEvents" /> object.</returns>
      <param name="Filter">Optional. The name of the task category. If Filter is supplied, the TaskListEvents object only provides events for that category. If Filter does not supply a valid category, the <see cref="P:EnvDTE.Events.TaskListEvents(System.String)" /> property fails.</param>
    </member>
    <member name="P:EnvDTE.Events.TextEditorEvents(EnvDTE.TextDocument)">
      <summary>Gets the <see cref="T:EnvDTE.TextEditorEvents" /> object for the IDE.</summary>
      <returns>A <see cref="T:EnvDTE.TextEditorEvents" /> object.</returns>
      <param name="TextDocumentFilter">Optional. A <see cref="T:EnvDTE.TextDocument" /> object that serves as the source for the events.</param>
    </member>
    <member name="P:EnvDTE.Events.WindowEvents(EnvDTE.Window)">
      <summary>Gets the <see cref="T:EnvDTE.WindowEvents" /> object that provides events for windows in the development environment.</summary>
      <returns>A <see cref="T:EnvDTE.WindowEvents" /> object.</returns>
      <param name="WindowFilter">Optional. If supplied, window events occur only for the specified <see cref="T:EnvDTE.Window" />.</param>
    </member>
    <member name="T:EnvDTE.Expression">
      <summary>The <see cref="T:EnvDTE.Expression" /> object contains properties used to examine items returned by an expression evaluation.</summary>
    </member>
    <member name="P:EnvDTE.Expression.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>An <see cref="T:EnvDTE.Expressions" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Expression.DataMembers">
      <summary>If the expression represents a class or a structure, this property gets a list of member variables as an <see cref="T:EnvDTE.Expressions" /> collection.</summary>
      <returns>An <see cref="T:EnvDTE.Expressions" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Expression.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Expression.IsValidValue">
      <summary>Indicates whether the specified value in an expression is valid.</summary>
      <returns>A Boolean value.</returns>
    </member>
    <member name="P:EnvDTE.Expression.Name">
      <summary>Gets the name of the object.</summary>
      <returns>A string representing the object's name.</returns>
    </member>
    <member name="P:EnvDTE.Expression.Parent">
      <summary>Gets the immediate parent object of an <see cref="T:EnvDTE.Expression" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Expression.Type">
      <summary>Gets a constant indicating the object type.</summary>
      <returns>A string constant representing the object type.</returns>
    </member>
    <member name="P:EnvDTE.Expression.Value">
      <summary>Sets or gets the data for the object.</summary>
      <returns>A string representing the value of the object.</returns>
    </member>
    <member name="T:EnvDTE.Expressions">
      <summary>A collection of <see cref="T:EnvDTE.Expression" /> objects.</summary>
    </member>
    <member name="P:EnvDTE.Expressions.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer indicating the number of objects in the collection.</returns>
    </member>
    <member name="P:EnvDTE.Expressions.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object. </returns>
    </member>
    <member name="M:EnvDTE.Expressions.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Expressions.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.Expression" /> object in a <see cref="T:EnvDTE.Expressions" /> collection.</summary>
      <returns>An <see cref="T:EnvDTE.Expression" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.Expression" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.Expressions.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Expressions" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="T:EnvDTE.FileCodeModel">
      <summary>Allows access to programmatic constructs in a source file.</summary>
    </member>
    <member name="M:EnvDTE.FileCodeModel.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.FileCodeModel.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:EnvDTE.FileCodeModel.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.FileCodeModel.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.FileCodeModel.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.FileCodeModel.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.FileCodeModel.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.FileCodeModel.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enumeration.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.FileCodeModel.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.FileCodeModel.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.FileCodeModel.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new interface code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Name">Required. The name of the new interface.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.FileCodeModel.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.FileCodeModel.AddNamespace(System.String,System.Object)">
      <summary>Creates a new namespace code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
      <param name="Name">Required. The name of the new namespace.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.FileCodeModel.AddNamespace(System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
    </member>
    <member name="M:EnvDTE.FileCodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.FileCodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
      <param name="Bases">Required. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.FileCodeModel.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE.FileCodeModel.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:EnvDTE.FileCodeModel.CodeElementFromPoint(EnvDTE.TextPoint,EnvDTE.vsCMElement)">
      <summary>Returns a code element at a specific location in a source file.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> object representing the editor location for which you want a code element.</param>
      <param name="Scope">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the code element of the specified type that contains the editor location.</param>
    </member>
    <member name="P:EnvDTE.FileCodeModel.CodeElements">
      <summary>Gets a collection of code elements.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.FileCodeModel.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.FileCodeModel.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.FileCodeModel.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.FileCodeModel" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:EnvDTE.FileCodeModel.Remove(System.Object)">
      <summary>Removes the specified code element from the source file.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of a code element to remove from the source code.</param>
    </member>
    <member name="T:EnvDTE.Find">
      <summary>Supports general text <see cref="T:EnvDTE.Find" /> operations in the environment for documents and files.</summary>
    </member>
    <member name="P:EnvDTE.Find.Action">
      <summary>Gets or sets how to find, such as find next match, find all, replace and find, and so forth.</summary>
      <returns>A <see cref="T:EnvDTE.vsFindAction" /> constant representing the type of find action to take.</returns>
    </member>
    <member name="P:EnvDTE.Find.Backwards">
      <summary>Gets or sets a value indicating whether the search is performed backwards from the current position.</summary>
      <returns>true if search is performed backwards; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.Find.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Find.Execute">
      <summary>Performs a search based on the options set for the <see cref="T:EnvDTE.Find" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.vsFindResult" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.Find.FilesOfType">
      <summary>Gets or sets the file extension for the files to be searched.</summary>
      <returns>The file extension for the files to be searched.</returns>
    </member>
    <member name="M:EnvDTE.Find.FindReplace(EnvDTE.vsFindAction,System.String,System.Int32,System.String,EnvDTE.vsFindTarget,System.String,System.String,EnvDTE.vsFindResultsLocation)">
      <summary>Performs a Find or Replacement operation based on the arguments to the method, without affecting the options set for the <see cref="T:EnvDTE.Find" />.</summary>
      <returns>A <see cref="T:EnvDTE.vsFindResult" /> constant.</returns>
      <param name="Action">Required. A <see cref="T:EnvDTE.vsFindAction" /> constant that indicates the search action to take.</param>
      <param name="FindWhat">Optional. The pattern to search for. The default is "".</param>
      <param name="vsFindOptionsValue">Optional. A bit field indicating several aspects of the search to perform.For matching, you can supply <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsMatchCase" />, <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsMatchWholeWord" />, or <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsMatchInHiddenText" />.Flags that can be turned on for files, project, and solution targets are <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsSearchSubfolders" /> and <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsKeepModifiedDocumentsOpen" />.Flags for the <see cref="P:EnvDTE.Find.FindWhat" /> property syntax are <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsRegularExpression" /> and <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsWildcards" />. If neither of these is supplied, then <see cref="P:EnvDTE.Find.FindWhat" /> is matched literally.<paramref name="vsFindOptionsValue" /> defaults to all flags turned off. </param>
      <param name="ReplaceWith">Optional. A string with which to replace the matched text when <paramref name="Action" /> is set to <see cref="F:EnvDTE.vsFindAction.vsFindActionReplace" /> or <see cref="F:EnvDTE.vsFindAction.vsFindActionReplaceAll" />. Default value is "".</param>
      <param name="Target">Optional. A <see cref="T:EnvDTE.vsFindTarget" /> constant that indicates the target for the search operation, such as the current document or find-in-files.</param>
      <param name="SearchPath">Optional. A semicolon-separated list of directories and file names to search. The default value is "".</param>
      <param name="FilesOfType">Optional. A semicolon-separated list of file types to include in the search. Other file types encountered in the specified targets are ignored. The default value is "", meaning all files are searched.</param>
      <param name="ResultsLocation">Optional. A <see cref="T:EnvDTE.vsFindResultsLocation" /> constant. There are two possible results lists where <see cref="T:EnvDTE.Find" /> results can display. You can perform two searches without overwriting the results of the first search. Using <paramref name="ResultsLocation" />, you can determine the result list in which to place the <see cref="T:EnvDTE.Find" /> results.</param>
    </member>
    <member name="P:EnvDTE.Find.FindWhat">
      <summary>Gets or sets the text or pattern to find.</summary>
      <returns>The text or pattern to find.</returns>
    </member>
    <member name="P:EnvDTE.Find.KeepModifiedDocumentsOpen">
      <summary>Gets or sets a value indicating whether or not modified documents remain open after a Replace operation.</summary>
      <returns>true means the modified document was kept open; false means the modified document was closed.</returns>
    </member>
    <member name="P:EnvDTE.Find.MatchCase">
      <summary>Gets or sets a value indicating whether the search is case-sensitive.</summary>
      <returns>true means the search was case-sensitive; false means the search was not case-sensitive.</returns>
    </member>
    <member name="P:EnvDTE.Find.MatchInHiddenText">
      <summary>Gets or sets a value indicating whether hidden text is included in the search.</summary>
      <returns>true means the search was performed in hidden text; false means the search was not performed in hidden text.</returns>
    </member>
    <member name="P:EnvDTE.Find.MatchWholeWord">
      <summary>Gets or sets a value indicating whether the search matches whole words only.</summary>
      <returns>true means the search matched entire words only; false means the search matched partial as well as entire words.</returns>
    </member>
    <member name="P:EnvDTE.Find.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Find" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Find.PatternSyntax">
      <summary>Gets or sets the syntax used to specify the search pattern.</summary>
      <returns>A <see cref="T:EnvDTE.vsFindPatternSyntax" /> constant representing the type of syntax used for the search pattern.</returns>
    </member>
    <member name="P:EnvDTE.Find.ReplaceWith">
      <summary>Gets or sets the replacement text for a replacement operation.</summary>
      <returns>The text to be used in the replacement operation.</returns>
    </member>
    <member name="P:EnvDTE.Find.ResultsLocation">
      <summary>Gets or sets the location where the results are shown in a bulk search operation.</summary>
      <returns>A <see cref="T:EnvDTE.vsFindResultsLocation" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.Find.SearchPath">
      <summary>Gets or sets a list of directories to use for a find-in-files operation.</summary>
      <returns>The search paths to use for a Find-in-files operation.</returns>
    </member>
    <member name="P:EnvDTE.Find.SearchSubfolders">
      <summary>Gets or sets a value indicating whether subfolders are included in a Search operation.</summary>
      <returns>true if the search includes subfolders; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:EnvDTE.Find.Target">
      <summary>Gets or sets the target of the search operation, such as all open docs, files, the active document, and so forth.</summary>
      <returns>A <see cref="T:EnvDTE.vsFindTarget" /> constant that indicates the target for the search operation, such as the current document or files on disk (or, find-in-files).</returns>
    </member>
    <member name="T:EnvDTE.FindEvents">
      <summary>Provides events for Find-in-Files operations.</summary>
    </member>
    <member name="T:EnvDTE.FindEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.FindEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.FindEventsClass.add_FindDone(EnvDTE._dispFindEvents_FindDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.FindEventsClass.FindDone">
      <summary>Occurs after a Find-in-files with a results list operation completes.</summary>
    </member>
    <member name="M:EnvDTE.FindEventsClass.remove_FindDone(EnvDTE._dispFindEvents_FindDoneEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.FontsAndColorsItems">
      <summary>Contains <see cref="T:EnvDTE.ColorableItems" /> objects that define the color, appearance, and other attributes of items.</summary>
    </member>
    <member name="P:EnvDTE.FontsAndColorsItems.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.FontsAndColorsItems" /> collection.</summary>
      <returns>An integer value indicating the numbers of objects in the <see cref="T:EnvDTE.FontsAndColorsItems" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.FontsAndColorsItems.GetEnumerator">
      <summary>Gets an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.FontsAndColorsItems.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.ColorableItems" /> object in a <see cref="T:EnvDTE.FontsAndColorsItems" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.ColorableItems" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.ColorableItems" /> object to return. </param>
    </member>
    <member name="T:EnvDTE.Globals">
      <summary>The <see cref="T:EnvDTE.Globals" /> object is a cache for storing data for the duration of each session of the Visual Studio environment, as well as across sessions using the <see cref="P:EnvDTE.Globals.VariablePersists(System.String)" /> property.</summary>
    </member>
    <member name="P:EnvDTE.Globals.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Globals.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Globals" /> object.</summary>
      <returns>An object representing the parent object.</returns>
    </member>
    <member name="P:EnvDTE.Globals.VariableExists(System.String)">
      <summary>Returns whether the specified variable exists.</summary>
      <returns>A Boolean value indicating true if the variable exists, false if it does not.</returns>
      <param name="Name">Required. Represents the name of the variable.</param>
    </member>
    <member name="P:EnvDTE.Globals.VariableNames">
      <summary>Gets a list of all current global variable names.</summary>
      <returns>An object representing all of the current global variable names.</returns>
    </member>
    <member name="P:EnvDTE.Globals.VariablePersists(System.String)">
      <summary>The <see cref="P:EnvDTE.Globals.VariablePersists(System.String)" /> property applies to several types of <see cref="T:EnvDTE.Globals" /> objects. For the DTE.Globals object, it gets or sets whether the variable is retained by the environment and is available between sessions of the environment. For the Solution.Globals object, it gets or sets whether the variable is retained by the environment and is available between sessions of the environment and between loading and unloading of a solution. For the Project.Globals object, it gets or sets whether the variable is retained by the environment in the project file.</summary>
      <returns>A Boolean value indicating whether or not a variable exists. <see cref="P:EnvDTE.Globals.VariablePersists(System.String)" /> returns true if a variable exists, otherwise returns false.</returns>
      <param name="VariableName">Required. Represents the name of the variable to retain.</param>
    </member>
    <member name="P:EnvDTE.Globals.VariableValue(System.String)">
      <summary>Returns or sets the variable with the specified name.</summary>
      <returns>An object representing the variable.</returns>
      <param name="VariableName">Required. A string representing the name of the variable to retrieve.</param>
    </member>
    <member name="T:EnvDTE.HTMLWindow">
      <summary>Represents an HTML document window.</summary>
    </member>
    <member name="P:EnvDTE.HTMLWindow.CurrentTab">
      <summary>Gets or sets the state (active or inactive) of the Source or the Designer tab in the HTML edit window.</summary>
      <returns>A <see cref="T:EnvDTE.vsHTMLTabs" /> constant indicating the active tab:</returns>
    </member>
    <member name="P:EnvDTE.HTMLWindow.CurrentTabObject">
      <summary>Gets the state (active or inactive) of the Source or the Designer tab in the HTML edit window.</summary>
      <returns>An object.</returns>
    </member>
    <member name="P:EnvDTE.HTMLWindow.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.HTMLWindow.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.HTMLWindow" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="T:EnvDTE.IDTCommandTarget">
      <summary>Allows you to create named commands. You must implement this interface to handle new named commands.</summary>
    </member>
    <member name="M:EnvDTE.IDTCommandTarget.Exec(System.String,EnvDTE.vsCommandExecOption,System.Object@,System.Object@,System.Boolean@)">
      <summary>Executes the specified named command.</summary>
      <param name="CmdName">The name of the command to execute.</param>
      <param name="ExecuteOption">A <see cref="T:EnvDTE.vsCommandExecOption" /> constant specifying the execution options.</param>
      <param name="VariantIn">A value passed to the command.</param>
      <param name="VariantOut">A value passed back to the invoker Exec method after the command executes.</param>
      <param name="handled">true indicates that the command was implemented. false indicates that it was not.</param>
    </member>
    <member name="M:EnvDTE.IDTCommandTarget.QueryStatus(System.String,EnvDTE.vsCommandStatusTextWanted,EnvDTE.vsCommandStatus@,System.Object@)">
      <summary>Returns the current status (enabled, disabled, hidden, and so forth) of the specified named command.</summary>
      <param name="CmdName">The name of the command to check.</param>
      <param name="NeededText">A <see cref="T:EnvDTE.vsCommandStatusTextWanted" /> constant specifying if information is returned from the check, and if so, what type of information is returned.</param>
      <param name="StatusOption">A <see cref="T:EnvDTE.vsCommandStatus" /> specifying the current status of the command.</param>
      <param name="CommandText">The text to return if <see cref="F:EnvDTE.vsCommandStatusTextWanted.vsCommandStatusTextWantedStatus" /> is specified.</param>
    </member>
    <member name="T:EnvDTE.IDTToolsOptionsPage">
      <summary>Implemented when constructing a custom tools options page.</summary>
    </member>
    <member name="M:EnvDTE.IDTToolsOptionsPage.GetProperties(System.Object@)">
      <summary>Returns an object containing all properties contained on the specified custom Tools Options page.</summary>
      <param name="PropertiesObject">The Tools Options object.</param>
    </member>
    <member name="M:EnvDTE.IDTToolsOptionsPage.OnAfterCreated(EnvDTE.DTE)">
      <summary>Occurs immediately after a custom Tools Options page is created for the first time.</summary>
      <param name="DTEObject">The parent object of the Tools Options page, namely, a <see cref="T:EnvDTE.DTE" /> object.</param>
    </member>
    <member name="M:EnvDTE.IDTToolsOptionsPage.OnCancel">
      <summary>Occurs if the user clicks the Cancel button in the Options dialog box.</summary>
    </member>
    <member name="M:EnvDTE.IDTToolsOptionsPage.OnHelp">
      <summary>Occurs when a user clicks the Help button in a custom ToolsOptions page.</summary>
    </member>
    <member name="M:EnvDTE.IDTToolsOptionsPage.OnOK">
      <summary>Occurs when a user clicks OK in a custom Tools Options page.</summary>
    </member>
    <member name="T:EnvDTE.IDTWizard">
      <summary>This interface must be implemented in a component for it to act as a wizard.</summary>
    </member>
    <member name="M:EnvDTE.IDTWizard.Execute(System.Object,System.Int32,System.Object[]@,System.Object[]@,EnvDTE.wizardResult@)">
      <summary>Occurs when a wizard is launched from either the Add Item or the New Project dialog box.</summary>
      <param name="Application">A dispatch pointer to the highest level automation object for the Visual Studio environment.</param>
      <param name="hwndOwner">The hWnd handle for the parent of the wizard's window.</param>
      <param name="ContextParams">An array of elements that vary depending on whether your wizard is launched from the Add Items or the New Project dialog box. See Context Parameters for Launching Wizards for available values.</param>
      <param name="CustomParams">An array of user-defined parameters, determined by the param= statements in the wizard's .vsz file. You can use the parameters passed in this array to customize a wizard's behavior and role.</param>
      <param name="retval">A <see cref="T:EnvDTE.wizardResult" /> constant specifying the results of the wizard.</param>
    </member>
    <member name="T:EnvDTE.IExtenderProvider">
      <summary>An object that represents an IDispatch-based Extender Provider.</summary>
    </member>
    <member name="M:EnvDTE.IExtenderProvider.CanExtend(System.String,System.String,System.Object)">
      <summary>Returns whether or not the provider can provide an Extender for the given object in the specified category.</summary>
      <returns>A Boolean value indicating true if the provider can provide an Extender for the given object in the specified category and name.</returns>
      <param name="ExtenderCATID">The CATID for the Extender being requested.</param>
      <param name="ExtenderName">The name for the Extender being requested.</param>
      <param name="ExtendeeObject">The Extendee object.</param>
    </member>
    <member name="M:EnvDTE.IExtenderProvider.GetExtender(System.String,System.String,System.Object,EnvDTE.IExtenderSite,System.Int32)">
      <summary>Gets an Extender for the given object under the specified category.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderCATID">The CATID for the Extender being requested.</param>
      <param name="ExtenderName">The name for the Extender being requested.</param>
      <param name="ExtendeeObject">The Extendee object.</param>
      <param name="ExtenderSite">The Extender site, represented by an <see cref="T:EnvDTE.IExtenderSite" /> interface.</param>
      <param name="Cookie">The cookie identifying the Extender.</param>
    </member>
    <member name="T:EnvDTE.IExtenderProviderUnk">
      <summary>Represents an IUnknown-based Extender provider.</summary>
    </member>
    <member name="M:EnvDTE.IExtenderProviderUnk.CanExtend(System.String,System.String,System.Object)">
      <summary>Returns whether or not the provider can provide an Extender for the given object in the specified category.</summary>
      <returns>A Boolean value indicating true if the provider can provide an Extender for the given object in the specified category and name.</returns>
      <param name="ExtenderCATID">The CATID for the Extender being requested.</param>
      <param name="ExtenderName">The name for the Extender being requested.</param>
      <param name="ExtendeeObject">The Extendee object.</param>
    </member>
    <member name="M:EnvDTE.IExtenderProviderUnk.GetExtender(System.String,System.String,System.Object,EnvDTE.IExtenderSite,System.Int32)">
      <summary>Returns an Extender for the given object under the specified category.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderCATID">The CATID for the Extender being requested.</param>
      <param name="ExtenderName">The name for the Extender being requested.</param>
      <param name="ExtendeeObject">The Extendee object.</param>
      <param name="ExtenderSite">The Extender site, represented by an <see cref="T:EnvDTE.IExtenderSite" /> interface.</param>
      <param name="Cookie">The cookie identifying the Extender.</param>
    </member>
    <member name="T:EnvDTE.IExtenderSite">
      <summary>Site object for an Automation Extender.</summary>
    </member>
    <member name="M:EnvDTE.IExtenderSite.GetObject(System.String)">
      <summary>Returns an interface or object that is late-bound to the <see cref="T:EnvDTE.DTE" /> object and that can be accessed by name at run time.</summary>
      <returns>An object.</returns>
      <param name="Name">Required. The name of the object to retrieve.</param>
    </member>
    <member name="M:EnvDTE.IExtenderSite.NotifyDelete(System.Int32)">
      <summary>A method that an Automation Extender is expected to call to notify its site when it is being destroyed.</summary>
      <param name="Cookie">Required. The cookie identifying the Extender. This is passed to the Extender provider when it is asked for the Extender.</param>
    </member>
    <member name="T:EnvDTE.IExtensibleObject">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IExtensibleObject.GetAutomationObject(System.String,EnvDTE.IExtensibleObjectSite,System.Object@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Name">The name of the object.</param>
      <param name="pParent">The parent of the object.</param>
      <param name="ppDisp">The dispatch interface.</param>
    </member>
    <member name="T:EnvDTE.IExtensibleObjectSite">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IExtensibleObjectSite.NotifyDelete(System.Object)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="punkObj">The IUnknown object.</param>
    </member>
    <member name="T:EnvDTE.IFilterProperties">
      <summary>Allows an Extender to hide or override properties in the Properties window.</summary>
    </member>
    <member name="M:EnvDTE.IFilterProperties.IsPropertyHidden(System.String)">
      <summary>Returns whether the specified property is filtered (hidden or overridden) in the Properties window.</summary>
      <returns>A <see cref="T:EnvDTE.vsFilterProperties" /> constant indicating whether or not the property is hidden or overridden.</returns>
      <param name="PropertyName">The name of the property being queried to determine whether or not it is hidden or overridden in the Properties window.</param>
    </member>
    <member name="T:EnvDTE.ISupportVSProperties">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.ISupportVSProperties.NotifyPropertiesDelete">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE.ItemOperations">
      <summary>Object for performing common file actions.</summary>
    </member>
    <member name="M:EnvDTE.ItemOperations.AddExistingItem(System.String)">
      <summary>Adds an existing item to the current project.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
      <param name="FileName">Required. The full path and file name of the item to be added.</param>
    </member>
    <member name="M:EnvDTE.ItemOperations.AddNewItem(System.String,System.String)">
      <summary>Adds a new item to the current project.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
      <param name="Item">Optional. The virtual path to the item based on either the UI resource string (defined in the Remarks section below) or occasionally as displayed in the contents of the New File dialog box in "<paramref name="category" />\<paramref name="templatename" />" format. <paramref name="Category" /> comes from the left pane of the dialog box and <paramref name="templatename" /> from the right pane. For example, to add a new HTML file to a Visual Basic project, you would use "General\HTML Page." See the Remarks section for more information.</param>
      <param name="Name">Optional. The display name to use for the item when it is added to a project.</param>
    </member>
    <member name="P:EnvDTE.ItemOperations.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ItemOperations.IsFileOpen(System.String,System.String)">
      <summary>Indicates whether or not the specified saved file is currently open in the specified view.</summary>
      <returns>A Boolean value indicating true if the file is open in the specified view, false if not.</returns>
      <param name="FileName">Required. The absolute path to the specified saved file. If the file has just been created but not yet saved, then <see cref="M:EnvDTE.ItemOperations.IsFileOpen(System.String,System.String)" /> returns false.</param>
      <param name="ViewKind">Optional. A <see cref="T:EnvDTE.Constants" />.vsViewKind* constant representing the type of view in which the saved file is currently open.</param>
    </member>
    <member name="M:EnvDTE.ItemOperations.Navigate(System.String,EnvDTE.vsNavigateOptions)">
      <summary>Goes to the given URL.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
      <param name="URL">Optional. URL of the file to open. If <paramref name="URL" /> is not specified, the default home page is opened. The default value of <paramref name="URL" /> is "".</param>
      <param name="Options">Optional. A <see cref="T:EnvDTE.vsNavigateOptions" /> constant that determines whether the browsed content displays in an external Web browser window or in a new window.</param>
    </member>
    <member name="M:EnvDTE.ItemOperations.NewFile(System.String,System.String,System.String)">
      <summary>Creates a file as though you invoked a New File command in the integrated development environment (IDE).</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
      <param name="Item">Required. The virtual path to the item based on the tree nodes from the left pane of the dialog box and the item name from the right pane.</param>
      <param name="Name">Optional. The name you type in the Default Name box in the dialog box. This name also becomes the suggested Save As name when you save the document.</param>
      <param name="ViewKind">Optional. A <see cref="T:EnvDTE.Constants" />vsViewKind* constant specifying the type of view in which to create the file.</param>
    </member>
    <member name="M:EnvDTE.ItemOperations.OpenFile(System.String,System.String)">
      <summary>Opens a file as though you invoked an Open File command in the integrated development environment (IDE).</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
      <param name="FileName">Required. The full path and name of the file to be opened.</param>
      <param name="ViewKind">Optional. A <see cref="T:EnvDTE.Constants" />vsViewKind* constant specifying the type of view in which to create the file.</param>
    </member>
    <member name="P:EnvDTE.ItemOperations.Parent">
      <summary>Gets the immediate parent object of an <see cref="T:EnvDTE.ItemOperations" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ItemOperations.PromptToSave">
      <summary>Gets all unsaved files and allows the user to save one or more of them.</summary>
      <returns>A <see cref="T:EnvDTE.vsPromptResult" /> value describing the user's action after displaying a dialog box.</returns>
    </member>
    <member name="T:EnvDTE.IVsExtensibility">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.EnterAutomationFunction">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.ExitAutomationFunction">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.FireMacroReset">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.get_Properties(EnvDTE.ISupportVSProperties,System.Object,EnvDTE.Properties@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pParent">The parent properties.</param>
      <param name="pdispPropObj">The dispatch interface object.</param>
      <param name="ppProperties">The properties.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.Get_TextBuffer(System.Object,EnvDTE.IExtensibleObjectSite)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The text buffer.</returns>
      <param name="pVsTextStream">The text stream.</param>
      <param name="pParent">The parent.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.GetConfigMgr(System.Object,System.UInt32)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The configuration manager.</returns>
      <param name="pIVsProject">The project.</param>
      <param name="itemid">The item ID.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.GetDocumentFromDocCookie(System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The document.</returns>
      <param name="lDocCookie">The doc cookie.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.GetGlobalsObject(System.Object)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The globals.</returns>
      <param name="ExtractFrom">The globals object.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.GetLockCount">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The number of locks.</returns>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.GetSuppressUI(System.Boolean@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pOut">Whether or not to suppress the UI.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.GetUserControl(System.Boolean@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="fUserControl">Whether or not there is a user control.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.IsInAutomationFunction">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the application is executing an automation function, otherwise false.</returns>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.IsMethodDisabled(System.Guid@,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pGUID">The GUID.</param>
      <param name="dispid">The dispatch ID.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.LockServer(System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="__MIDL_0010">Whether or not the server is locked.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.RunWizardFile(System.String,System.Int32,System.Object[]@)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The wizard result.</returns>
      <param name="bstrWizFilename">The name of the wizard file.</param>
      <param name="hwndOwner">The owner of the window handle.</param>
      <param name="vContextParams">The context parameters.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.SetSuppressUI(System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="In">Whether or not the UI should be suppressed.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.SetUserControl(System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="fUserControl">Whether or not there is a user control.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.SetUserControlUnlatched(System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="fUserControl">Whether or not there is a user control.</param>
    </member>
    <member name="M:EnvDTE.IVsExtensibility.TestForShutdown">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if we should test for shutdown, otherwise false.</returns>
    </member>
    <member name="T:EnvDTE.IVsGlobals">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsGlobals.Empty">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsGlobals.Load">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsGlobals.Save">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE.IVsGlobalsCallback">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsGlobalsCallback.CanModifySource">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsGlobalsCallback.ClearVariables">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsGlobalsCallback.GetParent(System.Object@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ppOut">The parent.</param>
    </member>
    <member name="M:EnvDTE.IVsGlobalsCallback.ReadData(EnvDTE.Globals)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pGlobals">The Globals object.</param>
    </member>
    <member name="M:EnvDTE.IVsGlobalsCallback.VariableChanged">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsGlobalsCallback.WriteVariablesToData(System.String,System.Object@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pVariableName">The variable name.</param>
      <param name="varData">The data.</param>
    </member>
    <member name="T:EnvDTE.IVsProfferCommands">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.IVsProfferCommands.AddCommandBar(System.String,EnvDTE.vsCommandBarType,System.Object,System.UInt32,System.Object@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pszCmdBarName">The name of the command bar.</param>
      <param name="dwType">The vsCommandBarType.</param>
      <param name="pCmdBarParent">The parent of the command bar.</param>
      <param name="dwIndex">The index of the command bar.</param>
      <param name="ppCmdBar">[out] The command bar.</param>
    </member>
    <member name="M:EnvDTE.IVsProfferCommands.AddCommandBarControl(System.String,System.Object,System.UInt32,System.UInt32,System.Object@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pszCmdNameCanonical">The name of the command.</param>
      <param name="pCmdBarParent">The parent of the command bar.</param>
      <param name="dwIndex">The index of the command bar.</param>
      <param name="dwCmdType">The type of the command.</param>
      <param name="ppCmdBarCtrl">[out] The command bar control.</param>
    </member>
    <member name="M:EnvDTE.IVsProfferCommands.AddNamedCommand(System.Guid@,System.Guid@,System.String,System.UInt32@,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Guid@)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pguidPackage">The GUID of the package.</param>
      <param name="pguidCmdGroup">The GUID of the command group.</param>
      <param name="pszCmdNameCanonical">The name of the command.</param>
      <param name="pdwCmdId">The command ID of the command.</param>
      <param name="pszCmdNameLocalized">The localized name of the command.</param>
      <param name="pszBtnText">The button text.</param>
      <param name="pszCmdTooltip">The tooltip information about the command.</param>
      <param name="pszSatelliteDLL">The name of the satellite assembly.</param>
      <param name="dwBitmapResourceId">The bitmap resource ID.</param>
      <param name="dwBitmapImageIndex">The index of the bitmap resource.</param>
      <param name="dwCmdFlagsDefault">The default flags.</param>
      <param name="cUIContexts">The UI contexts.</param>
      <param name="rgguidUIContexts">The GUID of the UI contexts.</param>
    </member>
    <member name="M:EnvDTE.IVsProfferCommands.FindCommandBar(System.IntPtr,System.Guid@,System.UInt32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pToolbarSet">The toolbar set.</param>
      <param name="pguidCmdGroup">The GUID of the command group.</param>
      <param name="dwMenuId">The ID of the command group.</param>
    </member>
    <member name="M:EnvDTE.IVsProfferCommands.RemoveCommandBar(System.Object)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pCmdBar">The command bar.</param>
    </member>
    <member name="M:EnvDTE.IVsProfferCommands.RemoveCommandBarControl(System.Object)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pCmdBarCtrl">The command bar control.</param>
    </member>
    <member name="M:EnvDTE.IVsProfferCommands.RemoveNamedCommand(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pszCmdNameCanonical">The canonical name of the command.</param>
    </member>
    <member name="M:EnvDTE.IVsProfferCommands.RenameNamedCommand(System.String,System.String,System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="pszCmdNameCanonical">The current canonical name of the command.</param>
      <param name="pszCmdNameCanonicalNew">The new canonical name of the command.</param>
      <param name="pszCmdNameLocalizedNew">The localized name of the command.</param>
    </member>
    <member name="T:EnvDTE.IVsTextEditFonts">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditFonts.FontCharacterSet">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditFonts.FontFamily">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditFonts.FontSize">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE.IVsTextEditGeneral">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditGeneral.AutoDelimiterHighlighting">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditGeneral.DragNDropTextEditing">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditGeneral.GoToAnchorAfterEscape">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditGeneral.HorizontalScrollBar">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditGeneral.MarginIndicatorBar">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditGeneral.SelectionMargin">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditGeneral.UndoCaretActions">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditGeneral.VerticalScrollBar">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE.IVsTextEditPerLanguage">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.AutoListMembers">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.AutoListParams">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.EnableLeftClickForURLs">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.HideAdvancedMembers">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.IndentSize">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.IndentStyle">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.InsertTabs">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.ShowLineNumbers">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.ShowNavigationBar">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.TabSize">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.VirtualSpace">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.IVsTextEditPerLanguage.WordWrap">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE.Language">
      <summary>The <see cref="T:EnvDTE.Language" /> object contains properties used to examine the language specified by the debugger.</summary>
    </member>
    <member name="P:EnvDTE.Language.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.Languages" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Language.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Language.Name">
      <summary>Gets the name of the object.</summary>
      <returns>A string representing the name of the Language object.</returns>
    </member>
    <member name="P:EnvDTE.Language.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Language" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="T:EnvDTE.Languages">
      <summary>A collection of <see cref="T:EnvDTE.Language" /> objects.</summary>
    </member>
    <member name="P:EnvDTE.Languages.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer indicating the number of objects in the collection.</returns>
    </member>
    <member name="P:EnvDTE.Languages.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Languages.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Languages.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.Language" /> object in the <see cref="T:EnvDTE.Languages" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Language" /> object.</returns>
      <param name="index">Required. The index or name of the <see cref="T:EnvDTE.Language" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.Languages.Parent">
      <summary>Gets the immediate parent object of a given <see cref="T:EnvDTE.Languages" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="T:EnvDTE.LinkedWindows">
      <summary>The <see cref="T:EnvDTE.LinkedWindows" /> collection contains all windows that have been linked together in the environment.</summary>
    </member>
    <member name="M:EnvDTE.LinkedWindows.Add(EnvDTE.Window)">
      <summary>Adds a window to the collection of currently linked windows.</summary>
      <param name="Window">Required. The <see cref="T:EnvDTE.Window" /> object to add to the <see cref="T:EnvDTE.LinkedWindows" /> collection.</param>
    </member>
    <member name="P:EnvDTE.LinkedWindows.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.LinkedWindows" /> collection.</summary>
      <returns>An integer indicating the number of objects in the <see cref="T:EnvDTE.LinkedWindows" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.LinkedWindows.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.LinkedWindows.GetEnumerator">
      <summary>Gets an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.LinkedWindows.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.Window" /> object in a <see cref="T:EnvDTE.LinkedWindows" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.Window" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.LinkedWindows.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.LinkedWindows" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="M:EnvDTE.LinkedWindows.Remove(EnvDTE.Window)">
      <summary>Removes a window from the collection of currently linked windows.</summary>
      <param name="Window">Required. The <see cref="T:EnvDTE.Window" /> object to be removed from the collection of linked windows.</param>
    </member>
    <member name="T:EnvDTE.Macros">
      <summary>Represents the Visual Studio macro recorder.</summary>
    </member>
    <member name="P:EnvDTE.Macros.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Macros.EmitMacroCode(System.String)">
      <summary>Writes the line of code to the macro being recorded. This method should not be used from within a macro.</summary>
      <param name="Code">Required. The line of code to add to the macro.</param>
    </member>
    <member name="P:EnvDTE.Macros.IsRecording">
      <summary>Returns whether the macro recorder is currently recording actions. This property should not be used from within a macro.</summary>
      <returns>A Boolean value of true indicates that the macro recorder is currently recording actions; false indicates that it is not.</returns>
    </member>
    <member name="P:EnvDTE.Macros.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Macros" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Macros.Pause">
      <summary>Pauses the macro recorder so that no code is written to the macro currently being recorded. This method should not be used from within a macro.</summary>
    </member>
    <member name="M:EnvDTE.Macros.Resume">
      <summary>Resumes macro recording if it has been paused. This method should not be used from within a macro.</summary>
    </member>
    <member name="T:EnvDTE.ObjectExtenders">
      <summary>Object that provides access to Automation Extenders.</summary>
    </member>
    <member name="P:EnvDTE.ObjectExtenders.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ObjectExtenders.GetContextualExtenderCATIDs">
      <summary>Gets all CATIDs for the current selection.</summary>
      <returns>An object containing an automation-compliant array of GUID-valued strings.</returns>
    </member>
    <member name="M:EnvDTE.ObjectExtenders.GetExtender(System.String,System.String,System.Object)">
      <summary>Gets an Extender for the given object under the specified category.</summary>
      <returns>An Extender.</returns>
      <param name="ExtenderCATID">Required. The Extender's CATID.</param>
      <param name="ExtenderName">Required. The Extender's name.</param>
      <param name="ExtendeeObject">Required. Represents the Extendee object instance.</param>
    </member>
    <member name="M:EnvDTE.ObjectExtenders.GetExtenderNames(System.String,System.Object)">
      <summary>Gets all Extenders for the given object under the specified category.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
      <param name="ExtenderCATID">Required. The specified Extender CATID.</param>
      <param name="ExtendeeObject">Required. Represents the Extendee object instance.</param>
    </member>
    <member name="M:EnvDTE.ObjectExtenders.GetLocalizedExtenderName(System.String,System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The localized name of the extender.</returns>
      <param name="ExtenderCATID">The CATID of the extender.</param>
      <param name="ExtenderName">The name of the extender.</param>
    </member>
    <member name="P:EnvDTE.ObjectExtenders.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.ObjectExtenders" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ObjectExtenders.RegisterExtenderProvider(System.String,System.String,EnvDTE.IExtenderProvider,System.String)">
      <summary>Registers an Extender Provider for a specific Extender category.</summary>
      <returns>An integer-valued cookie that identifies the registration. This cookie must be passed back during <see cref="M:EnvDTE.ObjectExtenders.UnregisterExtenderProvider(System.Int32)" />.</returns>
      <param name="ExtenderCATID">Required. The Extender CATID.</param>
      <param name="ExtenderName">Required. The Extender name. This is the programmatic name for the Extender and is used in the call to <see cref="M:EnvDTE.ObjectExtenders.GetExtender(System.String,System.String,System.Object)" />.</param>
      <param name="ExtenderProvider">Required. The Extender Provider which implements the <see cref="T:EnvDTE.IExtenderProvider" /> interface.</param>
      <param name="LocalizedName">Optional. The localized display name for the Extender.</param>
    </member>
    <member name="M:EnvDTE.ObjectExtenders.RegisterExtenderProviderUnk(System.String,System.String,EnvDTE.IExtenderProviderUnk,System.String)">
      <summary>Registers an Extender Provider for an IUnknown-based Extender category.</summary>
      <returns>An integer-valued cookiethat identifies the registration. This cookie must be passed back during <see cref="M:EnvDTE.ObjectExtenders.UnregisterExtenderProvider(System.Int32)" />.</returns>
      <param name="ExtenderCATID">Required. The Extender CATID.</param>
      <param name="ExtenderName">Required. The Extender name. This is the programmatic name for the Extender and is used in the call to <see cref="M:EnvDTE.ObjectExtenders.GetExtender(System.String,System.String,System.Object)" />.</param>
      <param name="ExtenderProvider">Required. The Extender Provider which implements the <see cref="T:EnvDTE.IExtenderProviderUnk" /> interface.</param>
      <param name="LocalizedName">Optional. The localized display name for the Extender.</param>
    </member>
    <member name="M:EnvDTE.ObjectExtenders.UnregisterExtenderProvider(System.Int32)">
      <summary>Unregister a previously registered Extender Provider.</summary>
      <param name="Cookie">Required. The cookie identifying the Extender. This is the cookie returned to the Extender Provider when it calls the <see cref="M:EnvDTE.ObjectExtenders.RegisterExtenderProvider(System.String,System.String,EnvDTE.IExtenderProvider,System.String)" /> method.</param>
    </member>
    <member name="T:EnvDTE.OutputGroup">
      <summary>Contains the file names for a given named output group.</summary>
    </member>
    <member name="P:EnvDTE.OutputGroup.CanonicalName">
      <summary>Gets the unique name used for this output group.</summary>
      <returns>A string representing the name used for the output group.</returns>
    </member>
    <member name="P:EnvDTE.OutputGroup.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>An <see cref="T:EnvDTE.OutputGroup" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.OutputGroup.Description">
      <summary>Gets a string that represents the use of the output group.</summary>
      <returns>A string representing the use of the output group.</returns>
    </member>
    <member name="P:EnvDTE.OutputGroup.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>A string representing the name used in the user interface for this output group.</returns>
    </member>
    <member name="P:EnvDTE.OutputGroup.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.OutputGroup.FileCount">
      <summary>Gets the number of files associated with an <see cref="T:EnvDTE.OutputGroup" /> .</summary>
      <returns>An integer indicating the number of files associated with an <see cref="T:EnvDTE.OutputGroup" />.</returns>
    </member>
    <member name="P:EnvDTE.OutputGroup.FileNames">
      <summary>Gets a list of all of the file names in the output group.</summary>
      <returns>An object containing a list of all the file names in the output group.</returns>
    </member>
    <member name="P:EnvDTE.OutputGroup.FileURLs">
      <summary>Gets the list of files built in this output group.</summary>
      <returns>An object containing the list of files built in this output group.</returns>
    </member>
    <member name="T:EnvDTE.OutputGroups">
      <summary>Contains a collection of <see cref="T:EnvDTE.OutputGroup" /> objects.</summary>
    </member>
    <member name="P:EnvDTE.OutputGroups.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.OutputGroups" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.OutputGroups" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.OutputGroups.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.OutputGroups.GetEnumerator">
      <summary>Gets an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.OutputGroups.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.OutputGroup" /> object in a <see cref="T:EnvDTE.OutputGroups" /> collection.</summary>
      <returns>An <see cref="T:EnvDTE.OutputGroup" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.OutputGroup" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.OutputGroups.Parent">
      <summary>Gets the immediate parent object of an <see cref="T:EnvDTE.OutputGroups" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Configuration" /> object.</returns>
    </member>
    <member name="T:EnvDTE.OutputWindow">
      <summary>Represents the Output window in the integrated development environment (IDE).</summary>
    </member>
    <member name="P:EnvDTE.OutputWindow.ActivePane">
      <summary>Gets the most recently active pane in the <see cref="T:EnvDTE.OutputWindow" />.</summary>
      <returns>An <see cref="T:EnvDTE.OutputWindowPane" /> object.</returns>
    </member>
    <member name="P:EnvDTE.OutputWindow.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.OutputWindow.OutputWindowPanes">
      <summary>Gets the <see cref="T:EnvDTE.OutputWindowPanes" /> collection for the <see cref="T:EnvDTE.OutputWindow" /> object.</summary>
      <returns>An <see cref="T:EnvDTE.OutputWindowPanes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.OutputWindow.Parent">
      <summary>Gets the immediate parent object of an <see cref="T:EnvDTE.OutputWindow" /> object.</summary>
      <returns>A Window object.</returns>
    </member>
    <member name="T:EnvDTE.OutputWindowEvents">
      <summary>Provides events for changes to the Output window.</summary>
    </member>
    <member name="T:EnvDTE.OutputWindowEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.OutputWindowEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.OutputWindowEventsClass.add_PaneAdded(EnvDTE._dispOutputWindowEvents_PaneAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.OutputWindowEventsClass.add_PaneClearing(EnvDTE._dispOutputWindowEvents_PaneClearingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.OutputWindowEventsClass.add_PaneUpdated(EnvDTE._dispOutputWindowEvents_PaneUpdatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.OutputWindowEventsClass.PaneAdded">
      <summary>Occurs when a new Output window pane is created.</summary>
    </member>
    <member name="E:EnvDTE.OutputWindowEventsClass.PaneClearing">
      <summary>Occurs when all text in an Output window pane is deleted.</summary>
    </member>
    <member name="E:EnvDTE.OutputWindowEventsClass.PaneUpdated">
      <summary>Occurs when new text is added to a pane in the Output window.</summary>
    </member>
    <member name="M:EnvDTE.OutputWindowEventsClass.remove_PaneAdded(EnvDTE._dispOutputWindowEvents_PaneAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.OutputWindowEventsClass.remove_PaneClearing(EnvDTE._dispOutputWindowEvents_PaneClearingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.OutputWindowEventsClass.remove_PaneUpdated(EnvDTE._dispOutputWindowEvents_PaneUpdatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.OutputWindowPane">
      <summary>Represents a pane in the Output window.</summary>
    </member>
    <member name="M:EnvDTE.OutputWindowPane.Activate">
      <summary>Moves the focus to the current item.</summary>
    </member>
    <member name="M:EnvDTE.OutputWindowPane.Clear">
      <summary>Clears all text from the <see cref="T:EnvDTE.OutputWindowPane" /> .</summary>
    </member>
    <member name="P:EnvDTE.OutputWindowPane.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.OutputWindowPane" /> object supporting this property.</summary>
      <returns>An <see cref="T:EnvDTE.OutputWindowPanes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.OutputWindowPane.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.OutputWindowPane.ForceItemsToTaskList">
      <summary>Sends all task items not yet added to the task list.</summary>
    </member>
    <member name="P:EnvDTE.OutputWindowPane.Guid">
      <summary>Gets the GUID for the <see cref="T:EnvDTE.OutputWindowPane" /> object.</summary>
      <returns>A string that uniquely identifies the <see cref="T:EnvDTE.OutputWindowPane" /> .</returns>
    </member>
    <member name="P:EnvDTE.OutputWindowPane.Name">
      <summary>Gets the name of the <see cref="T:EnvDTE.OutputWindowPane" /> object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.OutputWindowPane" /> object.</returns>
    </member>
    <member name="M:EnvDTE.OutputWindowPane.OutputString(System.String)">
      <summary>Sends a text string to the <see cref="T:EnvDTE.OutputWindowPane" /> window.</summary>
      <param name="Text">Required. The text characters to send to the window.</param>
    </member>
    <member name="M:EnvDTE.OutputWindowPane.OutputTaskItemString(System.String,EnvDTE.vsTaskPriority,System.String,EnvDTE.vsTaskIcon,System.String,System.Int32,System.String,System.Boolean)">
      <summary>Displays a string in the Output window and adds a corresponding item to the Task List.</summary>
      <param name="Text">Required. The text to add to the Output window.</param>
      <param name="Priority">Required. A <see cref="T:EnvDTE.vsTaskPriority" /> constant representing the priority for the new task item.</param>
      <param name="SubCategory">Required. The subcategory to use for the new task item.</param>
      <param name="Icon">Required. A <see cref="T:EnvDTE.vsTaskIcon" /> constant representing the icon to use for the new task item.</param>
      <param name="FileName">Required. The file name to associate with the new task item. Can be an empty string.</param>
      <param name="Line">Required. The line of code to which the new task item relates.</param>
      <param name="Description">Required. The description of the new task item.</param>
      <param name="Force">Optional. Indicates whether the Output window should immediately update the Task List. The default value is True. If you are adding several items, set Force to False, and then set Force to True on the last item.</param>
    </member>
    <member name="P:EnvDTE.OutputWindowPane.TextDocument">
      <summary>Gets the <see cref="T:EnvDTE.TextDocument" /> object for the <see cref="T:EnvDTE.OutputWindowPane" /> .</summary>
      <returns>A <see cref="T:EnvDTE.TextDocument" /> object.</returns>
    </member>
    <member name="T:EnvDTE.OutputWindowPanes">
      <summary>Contains all Output window panes in the integrated development environment (IDE).</summary>
    </member>
    <member name="M:EnvDTE.OutputWindowPanes.Add(System.String)">
      <summary>Creates a new Output window pane and adds it to the collection.</summary>
      <returns>An <see cref="T:EnvDTE.OutputWindowPane" /> object.</returns>
      <param name="Name">Required. The caption for the new pane.</param>
    </member>
    <member name="P:EnvDTE.OutputWindowPanes.Count">
      <summary>Gets a value indicating the number of <see cref="T:EnvDTE.OutputWindowPane" /> objects in the collection.</summary>
      <returns>An integer value indicating the number of <see cref="T:EnvDTE.OutputWindowPane" /> objects in the collection.</returns>
    </member>
    <member name="P:EnvDTE.OutputWindowPanes.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.OutputWindowPanes.GetEnumerator">
      <summary>Returns an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.OutputWindowPanes.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.OutputWindowPane" /> object in a <see cref="T:EnvDTE.OutputWindowPanes" /> collection.</summary>
      <returns>An <see cref="T:EnvDTE.OutputWindowPane" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.OutputWindowPane" /> object to return.</param>
    </member>
    <member name="P:EnvDTE.OutputWindowPanes.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.OutputWindowPanes" /> collection.</summary>
      <returns>An <see cref="T:EnvDTE.OutputWindow" /> object.</returns>
    </member>
    <member name="T:EnvDTE.Process">
      <summary>Used to examine and manipulate processes.</summary>
    </member>
    <member name="M:EnvDTE.Process.Attach">
      <summary>Causes the debugger to attach this process.</summary>
    </member>
    <member name="M:EnvDTE.Process.Break(System.Boolean)">
      <summary>Causes the given process to pause its execution so that its current state can be analyzed.</summary>
      <param name="WaitForBreakMode">Set to true to return only when the debugger has entered break mode. Set to false to break and return immediately. For more information, see How to: Break Execution.</param>
    </member>
    <member name="P:EnvDTE.Process.Collection">
      <summary>Returns the collection that contains the object that supports this property or is contained in this code construct. Returns null for an object that is not obtained from a collection.</summary>
      <returns>A <see cref="T:EnvDTE.Processes" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.Process.Detach(System.Boolean)">
      <summary>Causes the debugger to detach from this process.</summary>
      <param name="WaitForBreakOrEnd">Set to true if the debugging session should stop only when it reaches a break or the end. Set to false if you intend to stop debugging, but you have to perform other tasks in the macro even before the debugger breaks or ends. For more information, see How to: Break Execution.</param>
    </member>
    <member name="P:EnvDTE.Process.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Process.Name">
      <summary>Gets the name of the object.</summary>
      <returns>A string that represents the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.Process.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Process" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Process.ProcessID">
      <summary>Gets the Win32 ID number assigned to this process.</summary>
      <returns>An integer that represents the Win32 ID number assigned to this process.</returns>
    </member>
    <member name="P:EnvDTE.Process.Programs">
      <summary>Gets the collection of programs that are being managed by this process.</summary>
      <returns>A <see cref="T:EnvDTE.Programs" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.Process.Terminate(System.Boolean)">
      <summary>Terminates this process.</summary>
      <param name="WaitForBreakOrEnd">Set to true if the debugging session should stop only when it reaches a break or the end. Set to false if you intend to stop debugging, but you have to perform other tasks in the macro before the debugger breaks or ends. For more information, see How to: Break Execution.</param>
    </member>
    <member name="T:EnvDTE.Processes">
      <summary>A collection of <see cref="T:EnvDTE.Process" /> objects.</summary>
    </member>
    <member name="P:EnvDTE.Processes.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.Processes" /> collection.</summary>
      <returns>An integer representing the number of <see cref="T:EnvDTE.Process" /> objects in the collection.</returns>
    </member>
    <member name="P:EnvDTE.Processes.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Processes.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Processes.Item(System.Object)">
      <summary>Returns an indexed member of a <see cref="T:EnvDTE.Processes" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Process" /> object.</returns>
      <param name="index">Required. The index of the item to return. </param>
    </member>
    <member name="P:EnvDTE.Processes.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Processes" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="T:EnvDTE.Program">
      <summary>Important   Do not use this object for new applications. It has been superseded by the <see cref="T:EnvDTE80.Process2" /> object, which we recommend instead. However, this object will continue to work in existing code. </summary>
    </member>
    <member name="P:EnvDTE.Program.Collection">
      <summary>Gets the collection that contains the object that supports this property or is contained in this code construct. Returns null for an object that is not obtained from a collection. </summary>
      <returns>A <see cref="T:EnvDTE.Programs" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Program.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Program.IsBeingDebugged">
      <summary>Gets whether a program is being debugged when this property is called.</summary>
      <returns>The  Boolean value, true, if the program is being debugged; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.Program.Name">
      <summary>Gets the name of the object.</summary>
      <returns>A string that represents the name of the Program object.</returns>
    </member>
    <member name="P:EnvDTE.Program.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Program" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Program.Process">
      <summary>Gets the process by which this program is managed.</summary>
      <returns>A <see cref="T:EnvDTE.Process" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Program.Threads">
      <summary>Gets the collection of threads that are being managed by this program.</summary>
      <returns>A <see cref="T:EnvDTE.Threads" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.Programs">
      <summary>A collection of <see cref="T:EnvDTE.Program" /> objects.</summary>
    </member>
    <member name="P:EnvDTE.Programs.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer indicating the number of objects in the <see cref="P:EnvDTE.Program.Collection" /></returns>
    </member>
    <member name="P:EnvDTE.Programs.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Programs.GetEnumerator">
      <summary>Returns an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Programs.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.Program" /> object in a <see cref="T:EnvDTE.Programs" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Program" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.Program" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.Programs.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Programs" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="T:EnvDTE.Project">
      <summary>Represents a project in the integrated development environment (IDE).</summary>
    </member>
    <member name="P:EnvDTE.Project.CodeModel">
      <summary>Gets the <see cref="T:EnvDTE.CodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModel" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Project.Collection">
      <summary>Gets the <see cref="T:EnvDTE.Projects" /> collection containing the <see cref="T:EnvDTE.Project" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.Projects" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Project.ConfigurationManager">
      <summary>Gets the <see cref="T:EnvDTE.ConfigurationManager" /> object for this <see cref="T:EnvDTE.Project" /> .</summary>
      <returns>A <see cref="T:EnvDTE.ConfigurationManager" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Project.Delete">
      <summary>Removes the project from the current solution.</summary>
    </member>
    <member name="P:EnvDTE.Project.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Project.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.Project.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A string representing the CATID of the object in GUID form.</returns>
    </member>
    <member name="P:EnvDTE.Project.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.Project.FileName">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.Project.FullName">
      <summary>Gets the full path and name of the <see cref="T:EnvDTE.Project" /> object's file.</summary>
      <returns>A string representing the full path and name of the <see cref="T:EnvDTE.Project" /> object's file.</returns>
    </member>
    <member name="P:EnvDTE.Project.Globals">
      <summary>Gets the <see cref="T:EnvDTE.Globals" /> object containing add-in values that may be saved in the solution (.sln) file, the project file, or in the user's profile data.</summary>
      <returns>A <see cref="T:EnvDTE.Globals" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Project.IsDirty">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.Project.Kind">
      <summary>Gets a GUID string indicating the kind or type of the object.</summary>
      <returns>A GUID string representing the type of object.</returns>
    </member>
    <member name="P:EnvDTE.Project.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>A string representing the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.Project.Object">
      <summary>Gets an interface or object that can be accessed by name at run time.</summary>
      <returns>An object.</returns>
    </member>
    <member name="P:EnvDTE.Project.ParentProjectItem">
      <summary>Gets a <see cref="T:EnvDTE.ProjectItem" /> object for the nested project in the host project. </summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Project.ProjectItems">
      <summary>Gets a <see cref="T:EnvDTE.ProjectItems" /> collection for the <see cref="T:EnvDTE.Project" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Project.Properties">
      <summary>Gets a collection of all properties that pertain to the <see cref="T:EnvDTE.Project" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Properties" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.Project.Save(System.String)">
      <summary>Saves the project or project item.</summary>
      <param name="FileName">Optional. The name in which to save the project or project item.</param>
    </member>
    <member name="M:EnvDTE.Project.SaveAs(System.String)">
      <summary>Saves the solution, project, or project item.</summary>
      <param name="NewFileName">Required. The file name with which to save the solution, project, or project item. If the file exists, it is overwritten.</param>
    </member>
    <member name="P:EnvDTE.Project.Saved">
      <summary>Gets or sets a value indicating whether the object has not been modified since last being saved or opened.</summary>
      <returns>A Boolean value indicating true (default) if the object has not been modified since last being saved or opened; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.Project.UniqueName">
      <summary>Gets a unique string value that allows you to differentiate between similarly named projects.</summary>
      <returns>A string representing a unique value that is used to differentiate between similarly named projects.</returns>
    </member>
    <member name="T:EnvDTE.ProjectItem">
      <summary>Represents an item in a project.</summary>
    </member>
    <member name="P:EnvDTE.ProjectItem.Collection">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItems" /> collection containing the <see cref="T:EnvDTE.ProjectItem" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.ConfigurationManager">
      <summary>Gets the <see cref="T:EnvDTE.ConfigurationManager" /> object for this <see cref="T:EnvDTE.ProjectItem" />.</summary>
      <returns>A <see cref="T:EnvDTE.ConfigurationManager" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.ContainingProject">
      <summary>Gets the project hosting the <see cref="T:EnvDTE.ProjectItem" />.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ProjectItem.Delete">
      <summary>Removes the item from its project and its storage.</summary>
    </member>
    <member name="P:EnvDTE.ProjectItem.Document">
      <summary>Gets the <see cref="T:EnvDTE.Document" /> associated with the item, if one exists.</summary>
      <returns>A <see cref="T:EnvDTE.Document" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ProjectItem.ExpandView">
      <summary>Expands the view of Solution Explorer to show project items.</summary>
    </member>
    <member name="P:EnvDTE.ProjectItem.Extender(System.String)">
      <summary>Gets the requested Extender if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:EnvDTE.ProjectItem.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>A string representing the CATID of the object in GUID form.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An object containing an automation-compliant array of strings.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.FileCodeModel">
      <summary>Gets the <see cref="T:EnvDTE.FileCodeModel" /> object for the project item.</summary>
      <returns>A <see cref="T:EnvDTE.FileCodeModel" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.FileCount">
      <summary>Gets the number of files associated with a <see cref="T:EnvDTE.ProjectItem" />.</summary>
      <returns>A short integer indicating the number of files associated with a <see cref="T:EnvDTE.ProjectItem" />.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.FileNames(System.Int16)">
      <summary>Gets the full path and names of the files associated with a project item.</summary>
      <returns>A string representing the full path and names of the files associated with a project item.</returns>
      <param name="index">Required. The index of file names from 1 to <see cref="P:EnvDTE.ProjectItem.FileCount" /> for the project item.</param>
    </member>
    <member name="P:EnvDTE.ProjectItem.IsDirty">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.ProjectItem.IsOpen(System.String)">
      <summary>Gets a value indicating whether the project item is open in a particular view type.</summary>
      <returns>A Boolean value indicating true if the project is open in the given view type; false if not.</returns>
      <param name="ViewKind">Required. A <see cref="T:EnvDTE.Constants" />.vsViewKind* indicating the type of view to check.</param>
    </member>
    <member name="P:EnvDTE.ProjectItem.Kind">
      <summary>Gets a GUID string indicating the kind or type of the object.</summary>
      <returns>A GUID string representing the type of object.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>A string representing the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.Object">
      <summary>Gets an object that can be accessed by name at run time.</summary>
      <returns>An object that can be accessed by name at run time.</returns>
    </member>
    <member name="M:EnvDTE.ProjectItem.Open(System.String)">
      <summary>Opens the <see cref="T:EnvDTE.ProjectItem" /> in the specified view.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
      <param name="ViewKind">Required. A <see cref="T:EnvDTE.Constants" />. vsViewKind indicating the type of view to use.</param>
    </member>
    <member name="P:EnvDTE.ProjectItem.ProjectItems">
      <summary>Gets a <see cref="T:EnvDTE.ProjectItems" /> for the object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.Properties">
      <summary>Gets a collection of all properties that pertain to the object.</summary>
      <returns>A <see cref="T:EnvDTE.Properties" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.ProjectItem.Remove">
      <summary>Removes the project item from the collection.</summary>
    </member>
    <member name="M:EnvDTE.ProjectItem.Save(System.String)">
      <summary>Saves the project or project item.</summary>
      <param name="FileName">Optional. The name with which to save the project or project item.</param>
    </member>
    <member name="M:EnvDTE.ProjectItem.SaveAs(System.String)">
      <summary>Saves the project item.</summary>
      <returns>A Boolean value indicating true if the project item was saved; otherwise, false.</returns>
      <param name="NewFileName">Required. The file name with which to save the solution, project, or project item. If the file exists, it is overwritten.</param>
    </member>
    <member name="P:EnvDTE.ProjectItem.Saved">
      <summary>Gets or sets a value indicating whether or not the object has been modified since last being saved or opened.</summary>
      <returns>A Boolean value indicating true (default) if the object has not been modified since last being saved or opened; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItem.SubProject">
      <summary>If the project item is the root of a subproject, then the <see cref="P:EnvDTE.ProjectItem.SubProject" /> property returns the <see cref="T:EnvDTE.Project" /> object for the subproject.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="T:EnvDTE.ProjectItems">
      <summary>Contains <see cref="T:EnvDTE.ProjectItem" /> objects, each representing items in the project.</summary>
    </member>
    <member name="M:EnvDTE.ProjectItems.AddFolder(System.String,System.String)">
      <summary>Creates a new folder in Solution Explorer.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
      <param name="Name">Required. The name of the folder node in Solution Explorer.</param>
      <param name="Kind">Optional. The type of folder to add.</param>
    </member>
    <member name="M:EnvDTE.ProjectItems.AddFromDirectory(System.String)">
      <summary>Adds one or more <see cref="T:EnvDTE.ProjectItem" /> objects from a directory to the <see cref="T:EnvDTE.ProjectItems" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
      <param name="Directory">Required. The directory from which to add the project item.</param>
    </member>
    <member name="M:EnvDTE.ProjectItems.AddFromFile(System.String)">
      <summary>Adds a project item from a file that is installed in a project directory structure.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
      <param name="FileName">Required. The file name of the item to add as a project item. </param>
    </member>
    <member name="M:EnvDTE.ProjectItems.AddFromFileCopy(System.String)">
      <summary>Copies a source file and adds it to the project.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
      <param name="FilePath">Required. The path and file name of the project item to be added.</param>
    </member>
    <member name="M:EnvDTE.ProjectItems.AddFromTemplate(System.String,System.String)">
      <summary>Creates a new project item from an existing item template file and adds it to the project.</summary>
      <returns>A null reference.</returns>
      <param name="FileName">Required. The full path and file name of the template project file.</param>
      <param name="Name">Required. The file name to use for the new project item.</param>
    </member>
    <member name="P:EnvDTE.ProjectItems.ContainingProject">
      <summary>Gets the project hosting the project item or items.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItems.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer value indicating the number of objects in the collection.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItems.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ProjectItems.GetEnumerator">
      <summary>Returns an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.ProjectItems.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.ProjectItem" /> object in a <see cref="T:EnvDTE.ProjectItems" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.ProjectItem" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.ProjectItems.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:EnvDTE.ProjectItems.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.ProjectItems" /> collection.</summary>
      <returns>An object.</returns>
    </member>
    <member name="T:EnvDTE.ProjectItemsEvents">
      <summary>The base interface from which projects derive event interfaces of their specific project items. Use this object for functionality and refer to <see cref="T:EnvDTE.ProjectItemsEventsClass" /> for this object's documentation.</summary>
    </member>
    <member name="T:EnvDTE.ProjectItemsEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.ProjectItemsEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.ProjectItemsEventsClass.add_ItemAdded(EnvDTE._dispProjectItemsEvents_ItemAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.ProjectItemsEventsClass.add_ItemRemoved(EnvDTE._dispProjectItemsEvents_ItemRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.ProjectItemsEventsClass.add_ItemRenamed(EnvDTE._dispProjectItemsEvents_ItemRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.ProjectItemsEventsClass.ItemAdded">
      <summary>Occurs immediately after you add a project to a solution or an item to a project.</summary>
    </member>
    <member name="E:EnvDTE.ProjectItemsEventsClass.ItemRemoved">
      <summary>Occurs immediately after you remove a project from a solution or a project item from a project.</summary>
    </member>
    <member name="E:EnvDTE.ProjectItemsEventsClass.ItemRenamed">
      <summary>Occurs immediately after you rename a project in a solution or a project item in a project.</summary>
    </member>
    <member name="M:EnvDTE.ProjectItemsEventsClass.remove_ItemAdded(EnvDTE._dispProjectItemsEvents_ItemAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.ProjectItemsEventsClass.remove_ItemRemoved(EnvDTE._dispProjectItemsEvents_ItemRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.ProjectItemsEventsClass.remove_ItemRenamed(EnvDTE._dispProjectItemsEvents_ItemRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.Projects">
      <summary>Represents all of the projects of a given kind.</summary>
    </member>
    <member name="P:EnvDTE.Projects.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.Projects" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.Projects" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Projects.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Projects.GetEnumerator">
      <summary>Gets an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Projects.Item(System.Object)">
      <summary>Returns an indexed member of a <see cref="T:EnvDTE.Projects" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
      <param name="index">Required. The index of the item to return. </param>
    </member>
    <member name="P:EnvDTE.Projects.Kind">
      <summary>Gets a GUID String indicating the kind or type of the object.</summary>
      <returns>A GUID string representing the type of object.</returns>
    </member>
    <member name="P:EnvDTE.Projects.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Projects" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Projects.Properties">
      <summary>Gets a collection of all properties that pertain to the <see cref="T:EnvDTE.Projects" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Properties" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.ProjectsEvents">
      <summary>The base interface from which the various projects derive the events that are associated with their specific project interfaces. Use this object for functionality, and refer to <see cref="T:EnvDTE.ProjectsEventsClass" /> for this object's documentation.</summary>
    </member>
    <member name="T:EnvDTE.ProjectsEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.ProjectsEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.ProjectsEventsClass.add_ItemAdded(EnvDTE._dispProjectsEvents_ItemAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1"> </param>
    </member>
    <member name="M:EnvDTE.ProjectsEventsClass.add_ItemRemoved(EnvDTE._dispProjectsEvents_ItemRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1"> </param>
    </member>
    <member name="M:EnvDTE.ProjectsEventsClass.add_ItemRenamed(EnvDTE._dispProjectsEvents_ItemRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1"> </param>
    </member>
    <member name="E:EnvDTE.ProjectsEventsClass.ItemAdded">
      <summary>Occurs immediately after you add a project to a solution or an item to a project.</summary>
    </member>
    <member name="E:EnvDTE.ProjectsEventsClass.ItemRemoved">
      <summary>Occurs immediately after you remove a project from a solution or a project item from a project.</summary>
    </member>
    <member name="E:EnvDTE.ProjectsEventsClass.ItemRenamed">
      <summary>Occurs immediately after you rename a project in a solution or a project item in a project.</summary>
    </member>
    <member name="M:EnvDTE.ProjectsEventsClass.remove_ItemAdded(EnvDTE._dispProjectsEvents_ItemAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1"> </param>
    </member>
    <member name="M:EnvDTE.ProjectsEventsClass.remove_ItemRemoved(EnvDTE._dispProjectsEvents_ItemRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1"> </param>
    </member>
    <member name="M:EnvDTE.ProjectsEventsClass.remove_ItemRenamed(EnvDTE._dispProjectsEvents_ItemRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1"> </param>
    </member>
    <member name="T:EnvDTE.Properties">
      <summary>Contains all of the properties of a given object that are contained in a generic collection of properties.</summary>
    </member>
    <member name="P:EnvDTE.Properties.Application">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.Properties.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer value indicating the number of objects in the collection.</returns>
    </member>
    <member name="P:EnvDTE.Properties.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Properties.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Properties.Item(System.Object)">
      <summary>Returns an indexed member of a <see cref="T:EnvDTE.Properties" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Property" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.Property" /> object to return.</param>
    </member>
    <member name="P:EnvDTE.Properties.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Properties" /> collection.</summary>
      <returns>An object.</returns>
    </member>
    <member name="T:EnvDTE.Property">
      <summary>Represents one property in a generic collection of properties for a given object.</summary>
    </member>
    <member name="P:EnvDTE.Property.Application">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.Property.Collection">
      <summary>Gets the <see cref="P:EnvDTE.Property.Collection" /> containing the <see cref="T:EnvDTE.Property" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.Properties" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Property.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Property.IndexedValue(System.Object,System.Object,System.Object,System.Object)">
      <summary>Returns one element of a list.</summary>
      <returns>An object.</returns>
      <param name="Index1">Required. The index of the item to display.</param>
      <param name="Index2">Optional. The index of the item to display. Reserved for future use.</param>
      <param name="Index3">Optional. The index of the item to display. Reserved for future use.</param>
      <param name="Index4">Optional. The index of the item to display. Reserved for future use.</param>
    </member>
    <member name="M:EnvDTE.Property.let_Value(System.Object)">
      <summary>Setter function to set properties values.</summary>
      <param name="lppvReturn">An object representing a value to set for a property</param>
    </member>
    <member name="P:EnvDTE.Property.Name">
      <summary>Gets the name of the object.</summary>
      <returns>A string value representing the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.Property.NumIndices">
      <summary>Gets the number of indices required to access the value.</summary>
      <returns>A short integer representing the number of indices required to access the value.</returns>
    </member>
    <member name="P:EnvDTE.Property.Object">
      <summary>Sets or gets the object supporting the <see cref="T:EnvDTE.Property" /> object.</summary>
      <returns>An object representing the value of the <see cref="T:EnvDTE.Property" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Property.Parent">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.Property.Value">
      <summary>Gets or sets the value of the property returned by the <see cref="T:EnvDTE.Property" /> object.</summary>
      <returns>An object.</returns>
    </member>
    <member name="T:EnvDTE.SelectedItem">
      <summary>Represents selected project(s) or project item(s) in the Visual Studio integrated development environment (IDE).</summary>
    </member>
    <member name="P:EnvDTE.SelectedItem.Collection">
      <summary>Gets the <see cref="T:EnvDTE.SelectedItems" /> collection containing the <see cref="T:EnvDTE.SelectedItem" /> object supporting this.</summary>
      <returns>A <see cref="T:EnvDTE.SelectedItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.SelectedItem.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.SelectedItem.Info(System.Int16)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="index"> </param>
    </member>
    <member name="P:EnvDTE.SelectedItem.InfoCount">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.SelectedItem.Name">
      <summary>Gets the name of the <see cref="T:EnvDTE.SelectedItem" /> object.</summary>
      <returns>A string representing the name of the <see cref="T:EnvDTE.SelectedItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.SelectedItem.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the <see cref="T:EnvDTE.SelectedItem" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:EnvDTE.SelectedItem.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="T:EnvDTE.SelectedItems">
      <summary>Contains <see cref="T:EnvDTE.SelectedItem" /> objects, which represent selected projects or project items.</summary>
    </member>
    <member name="P:EnvDTE.SelectedItems.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.SelectedItems" /> collection.</summary>
      <returns>An integer value representing the number of objects in the <see cref="T:EnvDTE.SelectedItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.SelectedItems.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.SelectedItems.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.SelectedItems.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.SelectedItem" /> object in the <see cref="T:EnvDTE.SelectedItems" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.SelectedItem" /> object.</returns>
      <param name="index">Required. The index or name of the selected item to return. </param>
    </member>
    <member name="P:EnvDTE.SelectedItems.MultiSelect">
      <summary>Gets whether or not the current selection includes multiple items.</summary>
      <returns>A Boolean value indicating True if the selection contains multiple items, False if not.</returns>
    </member>
    <member name="P:EnvDTE.SelectedItems.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.SelectedItems" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.SelectedItems.SelectionContainer">
      <summary>Gets a <see cref="T:EnvDTE.SelectionContainer" /> object that represents the designer hosting the selected item(s).</summary>
      <returns>A <see cref="T:EnvDTE.SelectionContainer" /> object.</returns>
    </member>
    <member name="T:EnvDTE.SelectionContainer">
      <summary>Represents the selection context with objects that model the selection below the project item level.</summary>
    </member>
    <member name="P:EnvDTE.SelectionContainer.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer.</returns>
    </member>
    <member name="P:EnvDTE.SelectionContainer.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.SelectionContainer.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.SelectionContainer.Item(System.Object)">
      <summary>Returns an object in the <see cref="T:EnvDTE.SelectionContainer" /> collection.</summary>
      <returns>An object.</returns>
      <param name="index">Required. The index of the object to return. </param>
    </member>
    <member name="P:EnvDTE.SelectionContainer.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.SelectionContainer" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.SelectedItems" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.SelectionEvents">
      <summary>Provides events for changes to a selection. Use this object for functionality, and refer to <see cref="T:EnvDTE.SelectionEventsClass" /> for this object's documentation.</summary>
    </member>
    <member name="T:EnvDTE.SelectionEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SelectionEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SelectionEventsClass.add_OnChange(EnvDTE._dispSelectionEvents_OnChangeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.SelectionEventsClass.OnChange">
      <summary>Occurs after the selection model changes.</summary>
    </member>
    <member name="M:EnvDTE.SelectionEventsClass.remove_OnChange(EnvDTE._dispSelectionEvents_OnChangeEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.Solution">
      <summary>Represents all projects and solution-wide properties in the integrated development environment (IDE). Use this object for functionality and refer to <see cref="T:EnvDTE._Solution" /> for documentation.</summary>
    </member>
    <member name="T:EnvDTE.SolutionBuild">
      <summary>Represents the root of the build automation model at the solution level.</summary>
    </member>
    <member name="P:EnvDTE.SolutionBuild.ActiveConfiguration">
      <summary>Gets the currently active <see cref="T:EnvDTE.SolutionConfiguration" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionConfiguration" /> object.</returns>
    </member>
    <member name="M:EnvDTE.SolutionBuild.Build(System.Boolean)">
      <summary>Causes the active solution configuration to begin building.</summary>
      <param name="WaitForBuildToFinish">Optional. Determines whether <see cref="M:EnvDTE.SolutionBuild.Build(System.Boolean)" /> retains control until the build operation is complete. Default value is false.</param>
    </member>
    <member name="P:EnvDTE.SolutionBuild.BuildDependencies">
      <summary>Gets a <see cref="T:EnvDTE.BuildDependencies" /> collection that allows you to specify which projects depend on which other projects.</summary>
      <returns>A <see cref="T:EnvDTE.BuildDependencies" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.SolutionBuild.BuildProject(System.String,System.String,System.Boolean)">
      <summary>Builds the specified project and its dependencies in the context of the specified solution configuration.</summary>
      <param name="SolutionConfiguration">Required. The name of the new solution configuration that provides the context in which to build the project.</param>
      <param name="ProjectUniqueName">Required. The project to build.</param>
      <param name="WaitForBuildToFinish">Optional. Determines whether to wait for the build to complete. If true, then waits, otherwise, no.</param>
    </member>
    <member name="P:EnvDTE.SolutionBuild.BuildState">
      <summary>Gets whether a build has ever been started in the current environment session, whether a build is currently in progress, or whether a build has been completed.</summary>
      <returns>A <see cref="T:EnvDTE.vsBuildState" /> value representing the status of the build operation.</returns>
    </member>
    <member name="M:EnvDTE.SolutionBuild.Clean(System.Boolean)">
      <summary>Deletes all compiler-generated support files for marked projects.</summary>
      <param name="WaitForCleanToFinish">Optional. Determines whether <see cref="M:EnvDTE.SolutionBuild.Build(System.Boolean)" /> retains control until the build operation is complete. Default value is false.</param>
    </member>
    <member name="M:EnvDTE.SolutionBuild.Debug">
      <summary>Starts debugging the solution.</summary>
    </member>
    <member name="M:EnvDTE.SolutionBuild.Deploy(System.Boolean)">
      <summary>Causes each project in the active solution configuration that is marked for deployment to deploy.</summary>
      <param name="WaitForDeployToFinish">Optional. Determines whether <see cref="M:EnvDTE.SolutionBuild.Build(System.Boolean)" /> retains control until the deployment operation is complete. Default value is false.</param>
    </member>
    <member name="P:EnvDTE.SolutionBuild.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.SolutionBuild.LastBuildInfo">
      <summary>Gets the number of projects that failed to build.</summary>
      <returns>The number of projects that failed to build.</returns>
    </member>
    <member name="P:EnvDTE.SolutionBuild.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.SolutionBuild" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Solution" /> object.</returns>
    </member>
    <member name="M:EnvDTE.SolutionBuild.Run">
      <summary>Causes the active solution configuration to execute.</summary>
    </member>
    <member name="P:EnvDTE.SolutionBuild.SolutionConfigurations">
      <summary>Gets a collection of <see cref="T:EnvDTE.SolutionConfiguration" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionConfigurations" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.SolutionBuild.StartupProjects">
      <summary>Gets or sets the names of projects that are entry points for the application.</summary>
      <returns>An object containing the names of projects that are the entry points for the application.</returns>
    </member>
    <member name="T:EnvDTE.SolutionClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SolutionClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SolutionClass.AddFromFile(System.String,System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="FileName"></param>
      <param name="Exclusive"></param>
    </member>
    <member name="M:EnvDTE.SolutionClass.AddFromTemplate(System.String,System.String,System.String,System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="FileName"></param>
      <param name="Destination"></param>
      <param name="ProjectName"></param>
      <param name="Exclusive"></param>
    </member>
    <member name="P:EnvDTE.SolutionClass.AddIns">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The addins.</returns>
    </member>
    <member name="M:EnvDTE.SolutionClass.Close(System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="SaveFirst"></param>
    </member>
    <member name="P:EnvDTE.SolutionClass.Count">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The number of solutions.</returns>
    </member>
    <member name="M:EnvDTE.SolutionClass.Create(System.String,System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Destination"></param>
      <param name="Name"></param>
    </member>
    <member name="P:EnvDTE.SolutionClass.DTE">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The DTE object.</returns>
    </member>
    <member name="P:EnvDTE.SolutionClass.Extender(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The extender.</returns>
      <param name="ExtenderName">The name of the extender.</param>
    </member>
    <member name="P:EnvDTE.SolutionClass.ExtenderCATID">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The CATID of the extender.</returns>
    </member>
    <member name="P:EnvDTE.SolutionClass.ExtenderNames">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.SolutionClass.FileName">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SolutionClass.FindProjectItem(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="FileName"></param>
    </member>
    <member name="P:EnvDTE.SolutionClass.FullName">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SolutionClass.GetEnumerator">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.SolutionClass.Globals">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.SolutionClass.IsDirty">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.SolutionClass.IsOpen">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SolutionClass.Item(System.Object)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="index"></param>
    </member>
    <member name="M:EnvDTE.SolutionClass.Open(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="FileName"></param>
    </member>
    <member name="P:EnvDTE.SolutionClass.Parent">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SolutionClass.ProjectItemsTemplatePath(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ProjectKind"></param>
    </member>
    <member name="P:EnvDTE.SolutionClass.Projects">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.SolutionClass.Properties">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SolutionClass.Remove(EnvDTE.Project)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="proj"></param>
    </member>
    <member name="M:EnvDTE.SolutionClass.SaveAs(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="FileName"></param>
    </member>
    <member name="P:EnvDTE.SolutionClass.Saved">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.SolutionClass.SolutionBuild">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.SolutionClass.TemplatePath(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ProjectType"></param>
    </member>
    <member name="T:EnvDTE.SolutionConfiguration">
      <summary>Represents information about a particular way to build the solution.</summary>
    </member>
    <member name="M:EnvDTE.SolutionConfiguration.Activate">
      <summary>Moves the focus to the current item.</summary>
    </member>
    <member name="P:EnvDTE.SolutionConfiguration.Collection">
      <summary>Gets the <see cref="T:EnvDTE.SolutionConfigurations" /> collection containing the <see cref="T:EnvDTE.SolutionConfiguration" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionConfigurations" /> collections.</returns>
    </member>
    <member name="M:EnvDTE.SolutionConfiguration.Delete">
      <summary>Removes the <see cref="T:EnvDTE.SolutionConfiguration" /> object from the collection.</summary>
    </member>
    <member name="P:EnvDTE.SolutionConfiguration.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.SolutionConfiguration.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:EnvDTE.SolutionConfiguration.SolutionContexts">
      <summary>Gets a collection of <see cref="T:EnvDTE.SolutionContext" /> objects.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionContexts" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.SolutionConfigurations">
      <summary>Contains all of the <see cref="T:EnvDTE.SolutionConfiguration" /> in the solution.</summary>
    </member>
    <member name="M:EnvDTE.SolutionConfigurations.Add(System.String,System.String,System.Boolean)">
      <summary>Creates a new solution configuration based on an existing one.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionConfiguration" /> object.</returns>
      <param name="NewName">Required. The name of the new solution configuration.</param>
      <param name="ExistingName">Required. A <see cref="T:EnvDTE.SolutionConfiguration" /> object on which to base the new solution configuration.</param>
      <param name="Propagate">Required. True if the new solution configuration should be propagated, False if not. If <paramref name="Propagate" /> is set to True, then the newly added solution configuration will be automatically added to all of the projects under that solution, as well as to the solution itself.</param>
    </member>
    <member name="P:EnvDTE.SolutionConfigurations.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.SolutionConfigurations" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.SolutionConfigurations" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.SolutionConfigurations.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.SolutionConfigurations.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.SolutionConfigurations.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.SolutionConfiguration" /> object in a <see cref="T:EnvDTE.SolutionConfigurations" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionConfiguration" /> object.</returns>
      <param name="index"></param>
    </member>
    <member name="P:EnvDTE.SolutionConfigurations.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.SolutionConfigurations" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionBuild" /> object.</returns>
    </member>
    <member name="T:EnvDTE.SolutionContext">
      <summary>Represents all projects in the solution, some of which will be built, and the project configuration and platform that will have context when you select a particular <see cref="T:EnvDTE.SolutionConfiguration" /> object.</summary>
    </member>
    <member name="P:EnvDTE.SolutionContext.Collection">
      <summary>Returns the <see cref="T:EnvDTE.SolutionContexts" /> collection containing the <see cref="T:EnvDTE.SolutionContext" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionContexts" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.SolutionContext.ConfigurationName">
      <summary>Sets or gets the project configuration name that provides context when this solution context is selected.</summary>
      <returns>A string representing the project configuration name that provides context when this solution context is selected.</returns>
    </member>
    <member name="P:EnvDTE.SolutionContext.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.SolutionContext.PlatformName">
      <summary>Gets the name of the platform supported by this assignment.</summary>
      <returns>A string representing the platform name supported by this assignment.</returns>
    </member>
    <member name="P:EnvDTE.SolutionContext.ProjectName">
      <summary>Gets the unique name of the project for which this <see cref="T:EnvDTE.SolutionContext" /> object provides context.</summary>
      <returns>A string representing the unique name of the project for which this <see cref="T:EnvDTE.SolutionContext" /> object provides context.</returns>
    </member>
    <member name="P:EnvDTE.SolutionContext.ShouldBuild">
      <summary>Sets or returns whether the current project is built when the solution configuration associated with this <see cref="T:EnvDTE.SolutionContext" /> is selected.</summary>
      <returns>A Boolean value indicating true if the project should be built, false if not.</returns>
    </member>
    <member name="P:EnvDTE.SolutionContext.ShouldDeploy">
      <summary>Sets or returns whether the current project is deployed when the solution configuration associated with this <see cref="T:EnvDTE.SolutionContext" /> is selected.</summary>
      <returns>A Boolean value indicating false if the project does not support being built.</returns>
    </member>
    <member name="T:EnvDTE.SolutionContexts">
      <summary>Contains all of the <see cref="T:EnvDTE.SolutionContext" /> objects for a solution configuration.</summary>
    </member>
    <member name="P:EnvDTE.SolutionContexts.Count">
      <summary>Gets a value indicating the number of <see cref="T:EnvDTE.SolutionContext" /> objects in the collection.</summary>
      <returns>An integer value indicating the number of <see cref="T:EnvDTE.SolutionContext" /> objects in the collection.</returns>
    </member>
    <member name="P:EnvDTE.SolutionContexts.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.SolutionContexts.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.SolutionContexts.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.SolutionContext" /> object in a <see cref="T:EnvDTE.SolutionContexts" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionContext" /> object.</returns>
      <param name="index"></param>
    </member>
    <member name="P:EnvDTE.SolutionContexts.Parent">
      <summary>Returns the immediate parent object of a <see cref="T:EnvDTE.SolutionContexts" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.SolutionConfiguration" /> object.</returns>
    </member>
    <member name="T:EnvDTE.SolutionEvents">
      <summary>Provides events for changes to a solution. Use this object for functionality and refer to <see cref="T:EnvDTE.SolutionEventsClass" /> for this object's documentation.</summary>
    </member>
    <member name="T:EnvDTE.SolutionEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.add_AfterClosing(EnvDTE._dispSolutionEvents_AfterClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.add_BeforeClosing(EnvDTE._dispSolutionEvents_BeforeClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.add_Opened(EnvDTE._dispSolutionEvents_OpenedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.add_ProjectAdded(EnvDTE._dispSolutionEvents_ProjectAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.add_ProjectRemoved(EnvDTE._dispSolutionEvents_ProjectRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.add_ProjectRenamed(EnvDTE._dispSolutionEvents_ProjectRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.add_QueryCloseSolution(EnvDTE._dispSolutionEvents_QueryCloseSolutionEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.add_Renamed(EnvDTE._dispSolutionEvents_RenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.SolutionEventsClass.AfterClosing">
      <summary>Occurs immediately after closing a solution.</summary>
    </member>
    <member name="E:EnvDTE.SolutionEventsClass.BeforeClosing">
      <summary>Occurs immediately before closing a solution.</summary>
    </member>
    <member name="E:EnvDTE.SolutionEventsClass.Opened">
      <summary>Occurs immediately after opening a solution or project.</summary>
    </member>
    <member name="E:EnvDTE.SolutionEventsClass.ProjectAdded">
      <summary>Occurs immediately after adding a project to the solution.</summary>
    </member>
    <member name="E:EnvDTE.SolutionEventsClass.ProjectRemoved">
      <summary>Occurs after you remove a project from the solution.</summary>
    </member>
    <member name="E:EnvDTE.SolutionEventsClass.ProjectRenamed">
      <summary>Occurs after you rename a project in the solution.</summary>
    </member>
    <member name="E:EnvDTE.SolutionEventsClass.QueryCloseSolution">
      <summary>Occurs before the <see cref="E:EnvDTE.SolutionEventsClass.BeforeClosing" />.</summary>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.remove_AfterClosing(EnvDTE._dispSolutionEvents_AfterClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.remove_BeforeClosing(EnvDTE._dispSolutionEvents_BeforeClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.remove_Opened(EnvDTE._dispSolutionEvents_OpenedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.remove_ProjectAdded(EnvDTE._dispSolutionEvents_ProjectAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.remove_ProjectRemoved(EnvDTE._dispSolutionEvents_ProjectRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.remove_ProjectRenamed(EnvDTE._dispSolutionEvents_ProjectRenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.remove_QueryCloseSolution(EnvDTE._dispSolutionEvents_QueryCloseSolutionEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.SolutionEventsClass.remove_Renamed(EnvDTE._dispSolutionEvents_RenamedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.SolutionEventsClass.Renamed">
      <summary>Occurs after you rename a solution.</summary>
    </member>
    <member name="T:EnvDTE.SourceControl">
      <summary>Used to interact with current source control system.</summary>
    </member>
    <member name="M:EnvDTE.SourceControl.CheckOutItem(System.String)">
      <summary>Checks the specified item out of source control.</summary>
      <returns>A Boolean value indicating true if the item was successfully checked out; otherwise, false.</returns>
      <param name="ItemName">The full path to the file to check out.</param>
    </member>
    <member name="M:EnvDTE.SourceControl.CheckOutItems(System.Object[]@)">
      <summary>Checks the specified items out of source control.</summary>
      <returns>A Boolean value indicating true if the items were successfully checked out; otherwise, false.</returns>
      <param name="ItemNames">An array of strings that identify the items to be checked out.</param>
    </member>
    <member name="P:EnvDTE.SourceControl.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.SourceControl.ExcludeItem(System.String,System.String)">
      <summary>Excludes the specified item from the source control project.</summary>
      <param name="ProjectFile">The name of the project file that references the item.</param>
      <param name="ItemName">The name of the item.</param>
    </member>
    <member name="M:EnvDTE.SourceControl.ExcludeItems(System.String,System.Object[]@)">
      <summary>Excludes the specified items from the specified project.</summary>
      <param name="ProjectFile">The name of the project file that references the files to be excluded.</param>
      <param name="ItemNames">An array of strings that identifies the items to be excluded.</param>
    </member>
    <member name="M:EnvDTE.SourceControl.IsItemCheckedOut(System.String)">
      <summary>Retrieves a Boolean value that indicates whether the specified item is checked out.</summary>
      <returns>A Boolean value indicating true if the specified file is checked out; otherwise, false.</returns>
      <param name="ItemName">The name of the file to check for checked-out status.</param>
    </member>
    <member name="M:EnvDTE.SourceControl.IsItemUnderSCC(System.String)">
      <summary>Retrieves a Boolean value that indicates whether the specified item is under source control.</summary>
      <returns>A Boolean value indicating true if the item is under source control; otherwise false.</returns>
      <param name="ItemName">The name of the file.</param>
    </member>
    <member name="P:EnvDTE.SourceControl.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.SourceControl" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="T:EnvDTE.StackFrame">
      <summary>Used to examine and manipulate stack frames. A stack frame is essentially the same thing as a function call.</summary>
    </member>
    <member name="P:EnvDTE.StackFrame.Arguments">
      <summary>Gets a collection of expressions that represent the arguments passed to this frame.</summary>
      <returns>An <see cref="T:EnvDTE.Expressions" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.StackFrame.Collection">
      <summary>Gets the collection that contains the object that supports this property or is contained in this code construct. Returns null for an object that is not obtained from a collection.</summary>
      <returns>A <see cref="T:EnvDTE.StackFrames" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.StackFrame.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.StackFrame.FunctionName">
      <summary>Gets the function name of this stack frame.</summary>
      <returns>The function name of this stack frame.</returns>
    </member>
    <member name="P:EnvDTE.StackFrame.Language">
      <summary>Gets the programming language that is associated with the stack frame.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE.StackFrame.Locals">
      <summary>Gets a collection of expressions that represent the locals that are currently known by this frame.</summary>
      <returns>An <see cref="T:EnvDTE.Expressions" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.StackFrame.Module">
      <summary>Gets the module name for this stack frame. A module is a group of functions.</summary>
      <returns>A string that represents a module name for this stack frame.</returns>
    </member>
    <member name="P:EnvDTE.StackFrame.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.StackFrame" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Thread" /> object.</returns>
    </member>
    <member name="P:EnvDTE.StackFrame.ReturnType">
      <summary>Gets a string that contains the return type for the stack property.</summary>
      <returns>A string that containing the return type for the stack property.</returns>
    </member>
    <member name="T:EnvDTE.StackFrames">
      <summary>A collection of <see cref="T:EnvDTE.StackFrame" /> objects.</summary>
    </member>
    <member name="P:EnvDTE.StackFrames.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.StackFrames" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.StackFrames.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.StackFrames.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.StackFrames.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.StackFrame" /> object in a <see cref="T:EnvDTE.StackFrames" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.StackFrame" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.StackFrame" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.StackFrames.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.StackFrames" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="T:EnvDTE.StatusBar">
      <summary>Represents the Status Bar in the Visual Studio integrated development environment (IDE).</summary>
    </member>
    <member name="M:EnvDTE.StatusBar.Animate(System.Boolean,System.Object)">
      <summary>Displays an animated picture in the <see cref="T:EnvDTE.StatusBar" />.</summary>
      <param name="On">Required. Indicates whether to turn the animation on (True) or off (False).</param>
      <param name="AnimationType">Required. A <see cref="T:EnvDTE.vsStatusAnimation" /> constant indicating an animated icon to display.Alternatively, <paramref name="AnimationType" /> can also take an IPicture or IPictureDisp which is a bitmap 16 pixels high and a multiple of 16 pixels wide. To turn off the custom animation, you must pass the same exact IPicture or IPictureDisp. </param>
    </member>
    <member name="M:EnvDTE.StatusBar.Clear">
      <summary>Clears all text from the <see cref="T:EnvDTE.StatusBar" />.</summary>
    </member>
    <member name="P:EnvDTE.StatusBar.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.StatusBar.Highlight(System.Boolean)">
      <summary>Toggles highlighting of text within the <see cref="T:EnvDTE.StatusBar" />.</summary>
      <param name="Highlight">Required. Indicates whether text in the <see cref="T:EnvDTE.StatusBar" /> is highlighted. True means the text is highlighted.</param>
    </member>
    <member name="P:EnvDTE.StatusBar.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.StatusBar" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.StatusBar.Progress(System.Boolean,System.String,System.Int32,System.Int32)">
      <summary>Creates, modifies, and clears the meter control inside the <see cref="T:EnvDTE.StatusBar" /> .</summary>
      <param name="InProgress">Required. Indicates whether the meter is displayed. If <paramref name="InProgress" /> is set to False, the meter is turned off. Otherwise, the meter is displayed.</param>
      <param name="Label">Optional. The label to display on the meter control.</param>
      <param name="AmountCompleted">Optional. The number of steps of the operation that have completed.</param>
      <param name="Total">Optional. The total number of steps in the operation.</param>
    </member>
    <member name="M:EnvDTE.StatusBar.SetLineColumnCharacter(System.Int32,System.Int32,System.Int32)">
      <summary>Sets the text column and character indicators in the <see cref="T:EnvDTE.StatusBar" /> .</summary>
      <param name="Line">Required. The line number to display in the <see cref="T:EnvDTE.StatusBar" /> .</param>
      <param name="Column">Required. The column number to display in the <see cref="T:EnvDTE.StatusBar" /> .</param>
      <param name="Character">Required. The character position number to display in the <see cref="T:EnvDTE.StatusBar" />.</param>
    </member>
    <member name="M:EnvDTE.StatusBar.SetXYWidthHeight(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the x, y, width, and height coordinate indicators in the <see cref="T:EnvDTE.StatusBar" />.</summary>
      <param name="X">Required. The x-coordinate number to display in the <see cref="T:EnvDTE.StatusBar" />.</param>
      <param name="Y">Required. The y-coordinate number to display in the <see cref="T:EnvDTE.StatusBar" />.</param>
      <param name="Width">Required. The width number to display in the <see cref="T:EnvDTE.StatusBar" />.</param>
      <param name="Height">Required. The height number to display in the <see cref="T:EnvDTE.StatusBar" />.</param>
    </member>
    <member name="M:EnvDTE.StatusBar.ShowTextUpdates(System.Boolean)">
      <summary>Determines whether the <see cref="T:EnvDTE.StatusBar" /> shows text updates.</summary>
      <returns>A Boolean value indicating whether the <see cref="T:EnvDTE.StatusBar" /> shows text updates.</returns>
      <param name="TextUpdates">Required. Indicates whether to show text updates.</param>
    </member>
    <member name="P:EnvDTE.StatusBar.Text">
      <summary>Sets or gets the selected text.</summary>
      <returns>A string representing the selected text.</returns>
    </member>
    <member name="T:EnvDTE.TaskItem">
      <summary>The <see cref="T:EnvDTE.TaskItem" /> object represents a task item in the Task List window.</summary>
    </member>
    <member name="P:EnvDTE.TaskItem.Category">
      <summary>Gets a string representing the category of the task item.</summary>
      <returns>A string representing the category of the task item.</returns>
    </member>
    <member name="P:EnvDTE.TaskItem.Checked">
      <summary>Sets or gets whether a task item in the Task List window has a check in the check box column.</summary>
      <returns>A Boolean value indicating true if the task item is checked, false if not.</returns>
    </member>
    <member name="P:EnvDTE.TaskItem.Collection">
      <summary>Returns the collection containing the <see cref="T:EnvDTE.TaskItem" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.TaskItems" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.TaskItem.Delete">
      <summary>Removes the task item from the collection.</summary>
    </member>
    <member name="P:EnvDTE.TaskItem.Description">
      <summary>Sets or gets a string that represents the description for the <see cref="T:EnvDTE.TaskItem" /> object.</summary>
      <returns>A string representing the description for the <see cref="T:EnvDTE.TaskItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TaskItem.Displayed">
      <summary>Gets whether the task item is currently visible in the Task List window.</summary>
      <returns>A Boolean value indicating true if the item is visible, false if not.</returns>
    </member>
    <member name="P:EnvDTE.TaskItem.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TaskItem.FileName">
      <summary>Sets or gets a string representing the file name that was passed to the Task List window when the task item was created.</summary>
      <returns>A string representing the file name that was passed to the Task List window when the task item was created.</returns>
    </member>
    <member name="P:EnvDTE.TaskItem.IsSettable(EnvDTE.vsTaskListColumn)">
      <summary>Returns whether a given column of a task item can be edited.</summary>
      <returns>A Boolean value indicating true if the column can be edited, false if not.</returns>
      <param name="Column">A <see cref="T:EnvDTE.vsTaskListColumn" /> constant indicating the column for the task item.</param>
    </member>
    <member name="P:EnvDTE.TaskItem.Line">
      <summary>Sets or gets the line number of the <see cref="T:EnvDTE.TaskItem" /> object.</summary>
      <returns>An integer indicating the line number of the <see cref="T:EnvDTE.TaskItem" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TaskItem.Navigate">
      <summary>Requests that the task item navigate to its location and display it, if that is meaningful to the task.</summary>
    </member>
    <member name="P:EnvDTE.TaskItem.Priority">
      <summary>Sets or gets a constant that indicates the priority of the task item.</summary>
      <returns>A <see cref="T:EnvDTE.vsTaskPriority" /> constant.</returns>
    </member>
    <member name="M:EnvDTE.TaskItem.Select">
      <summary>Causes this item to become active in the integrated development environment (IDE).</summary>
    </member>
    <member name="P:EnvDTE.TaskItem.SubCategory">
      <summary>Gets a string representing the task item's subcategory.</summary>
      <returns>A string representing the task item's subcategory.</returns>
    </member>
    <member name="T:EnvDTE.TaskItems">
      <summary>The <see cref="T:EnvDTE.TaskItems" /> collection contains all of the tasks in the Task List window.</summary>
    </member>
    <member name="M:EnvDTE.TaskItems.Add(System.String,System.String,System.String,EnvDTE.vsTaskPriority,System.Object,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>Adds a new task item to the <see cref="T:EnvDTE.TaskList" />.</summary>
      <returns>A <see cref="T:EnvDTE.TaskItem" /> object.</returns>
      <param name="Category">Required. Represents the category name of the task item.</param>
      <param name="SubCategory">Required. Represents the subcategory name of the task item.</param>
      <param name="Description">Required. Describes the task item.</param>
      <param name="Priority">Optional. A <see cref="T:EnvDTE.vsTaskPriority" /> constant denoting the priority of the task item (high, medium, or low). If the value is <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityHigh" />, an exclamation point icon is displayed in the first column of the Task List. If the value is <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium" />, nothing is displayed. If the value is <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityLow" />, a down arrow icon is displayed.</param>
      <param name="Icon">Optional. Determines the type of icon that represents the new task item. The setting must be either <see cref="T:EnvDTE.vsTaskIcon" /> or an IPictureDisp.</param>
      <param name="Checkable">Optional. Indicates whether or not you want the task item to provide a checkbox that users can check to indicate the task is complete. The default value is false.</param>
      <param name="File">Optional. Indicates the file or path associated with the new task item. The default value is an empty string (""), and if this is used, <see cref="P:EnvDTE.TaskItem.IsSettable(EnvDTE.vsTaskListColumn)" />(<see cref="F:EnvDTE.vsTaskListColumn.vsTaskListColumnFile" />) returns false. The file name can be a full path name, a relative path name, or simply a file name. Note that associating a file or path with an item does not necessarily mean that it will perform any actions.</param>
      <param name="Line">Optional. Indicates the line in the source code associated with the new task item. The default value is 0, and if this is used, <see cref="P:EnvDTE.TaskItem.IsSettable(EnvDTE.vsTaskListColumn)" />(<see cref="F:EnvDTE.vsTaskListColumn.vsTaskListColumnLine" />) returns false. Note that associating a line number with an item does not necessarily mean that it will perform any actions.</param>
      <param name="CanUserDelete">Optional. Indicates whether a user can delete the new task item by pressing DELETE when the item is selected in the environment. The default value is true.</param>
      <param name="FlushItem">Optional. Indicates whether a new item is immediately visible in the Task List. When <paramref name="FlushItem" /> is set to True, the Task List is updated immediately after Add is called. When <paramref name="FlushItem" /> is set to false, the Task List is updated later after all updates are made. A false setting is used primarily to enhance performance when you are adding a large number of items at a time to the Task List. The default value is true.</param>
    </member>
    <member name="P:EnvDTE.TaskItems.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>The number of objects in the <see cref="T:EnvDTE.TaskItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.TaskItems.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TaskItems.ForceItemsToTaskList">
      <summary>Sends all task items not yet added to the task list.</summary>
    </member>
    <member name="M:EnvDTE.TaskItems.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.TaskItems.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.TaskItem" /> object in a <see cref="T:EnvDTE.TaskItems" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.TaskItem" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.TaskItem" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.TaskItems.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.TaskItems" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.TaskList" /> object.</returns>
    </member>
    <member name="T:EnvDTE.TaskList">
      <summary>The <see cref="T:EnvDTE.TaskList" /> object represents the items in the Task List window in the Visual Studio integrated development environment (IDE).</summary>
    </member>
    <member name="P:EnvDTE.TaskList.DefaultCommentToken">
      <summary>Gets the default string for adding tasks to the Task List window.</summary>
      <returns>The default string for adding tasks to the Task List window.</returns>
    </member>
    <member name="P:EnvDTE.TaskList.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TaskList.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.TaskList" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TaskList.SelectedItems">
      <summary>Gets a collection of all of the items currently selected in the Task List.</summary>
      <returns>An object containing a collection of all of the currently selected items.</returns>
    </member>
    <member name="P:EnvDTE.TaskList.TaskItems">
      <summary>Gets a collection of all tasks currently in the Task List window in the indicated categories.</summary>
      <returns>A <see cref="T:EnvDTE.TaskItems" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.TaskListEvents">
      <summary>Provides events for changes made to the Task List. </summary>
    </member>
    <member name="T:EnvDTE.TaskListEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.TaskListEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.TaskListEventsClass.add_TaskAdded(EnvDTE._dispTaskListEvents_TaskAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.TaskListEventsClass.add_TaskModified(EnvDTE._dispTaskListEvents_TaskModifiedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.TaskListEventsClass.add_TaskNavigated(EnvDTE._dispTaskListEvents_TaskNavigatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.TaskListEventsClass.add_TaskRemoved(EnvDTE._dispTaskListEvents_TaskRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.TaskListEventsClass.remove_TaskAdded(EnvDTE._dispTaskListEvents_TaskAddedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.TaskListEventsClass.remove_TaskModified(EnvDTE._dispTaskListEvents_TaskModifiedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.TaskListEventsClass.remove_TaskNavigated(EnvDTE._dispTaskListEvents_TaskNavigatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.TaskListEventsClass.remove_TaskRemoved(EnvDTE._dispTaskListEvents_TaskRemovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.TaskListEventsClass.TaskAdded">
      <summary>Occurs when a new item is added to the Task List.</summary>
    </member>
    <member name="E:EnvDTE.TaskListEventsClass.TaskModified">
      <summary>Occurs when an item in the Task List is modified.</summary>
    </member>
    <member name="E:EnvDTE.TaskListEventsClass.TaskNavigated">
      <summary>Occurs immediately before you navigate to the source of an item in the Task List.</summary>
    </member>
    <member name="E:EnvDTE.TaskListEventsClass.TaskRemoved">
      <summary>Occurs when a task is removed from the Task List.</summary>
    </member>
    <member name="T:EnvDTE.TextBuffer">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.TextBuffer.AddFromFile(System.String,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="FileName">The name of the file.</param>
      <param name="StartLine">The line at which to start.</param>
    </member>
    <member name="M:EnvDTE.TextBuffer.AddFromString(System.String,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="String">The string.</param>
      <param name="StartLine">The line from which to start.</param>
    </member>
    <member name="P:EnvDTE.TextBuffer.CountOfLines">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The number of lines</returns>
    </member>
    <member name="M:EnvDTE.TextBuffer.DeleteLines(System.Int32,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="StartLine">The line from which to start.</param>
      <param name="Count">The number of lines.</param>
    </member>
    <member name="P:EnvDTE.TextBuffer.DTE">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The DTE object.</returns>
    </member>
    <member name="M:EnvDTE.TextBuffer.Find(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the find operation found the string, otherwise false.</returns>
      <param name="Target">The string to find.</param>
      <param name="StartLine">The line from which to start.</param>
      <param name="StartColumn">The column from which to start.</param>
      <param name="EndLine">The line at which to stop.</param>
      <param name="EndColumn">The column at which to stop.</param>
      <param name="WholeWord">true if the find operation should match on a word, otherwise false.</param>
      <param name="MatchCase">true if the find operation should match the case of the target, otherwise false.</param>
      <param name="PatternSearch">true if the find operation should match the target pattern, otherwise false.</param>
    </member>
    <member name="P:EnvDTE.TextBuffer.Lines(System.Int32,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>A string containing the specified lines.</returns>
      <param name="StartLine">The first line.</param>
      <param name="Count">The number of lines.</param>
    </member>
    <member name="P:EnvDTE.TextBuffer.Parent">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The parent window.</returns>
    </member>
    <member name="T:EnvDTE.TextDocument">
      <summary>Represents a text file open in the editor.</summary>
    </member>
    <member name="M:EnvDTE.TextDocument.ClearBookmarks">
      <summary>Removes all unnamed bookmarks in the text document.</summary>
    </member>
    <member name="M:EnvDTE.TextDocument.CreateEditPoint(EnvDTE.TextPoint)">
      <summary>Creates an <see cref="T:EnvDTE.EditPoint" /> object at the specified location and returns it. The default location is the beginning of the document.</summary>
      <returns>A <see cref="T:EnvDTE.EditPoint" /> object.</returns>
      <param name="TextPoint">Optional. A <see cref="T:EnvDTE.TextPoint" /> object to copy. If a value is supplied to <paramref name="TextPoint" />, then the new point is at the same Line and <see cref="P:EnvDTE.EditPoint.LineCharOffset" /> as <paramref name="TextPoint" />.</param>
    </member>
    <member name="P:EnvDTE.TextDocument.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextDocument.EndPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that is the location of the end of the document.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextDocument.IndentSize">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The size of the indent.</returns>
    </member>
    <member name="P:EnvDTE.TextDocument.Language">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>A vsCMLanguage constant.</returns>
    </member>
    <member name="M:EnvDTE.TextDocument.MarkText(System.String,System.Int32)">
      <summary>Indicates whether or not the indicated text was found in the text document and creates unnamed bookmarks wherever matching text is found.</summary>
      <returns>A Boolean value true if the marked text was found in the text document, otherwise returns false.</returns>
      <param name="Pattern">Required. The text pattern to find.</param>
      <param name="vsFindOptionsValue">Optional. A <see cref="T:EnvDTE.vsFindOptions" /> constant that specifies the search text options.</param>
    </member>
    <member name="P:EnvDTE.TextDocument.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.TextDocument" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Document" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextDocument.PrintOut">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.TextDocument.ReplacePattern(System.String,System.String,System.Int32,EnvDTE.TextRanges@)">
      <summary>Replaces matching text throughout an entire text document.</summary>
      <returns>A Boolean value.</returns>
      <param name="Pattern">Required. The string to find.</param>
      <param name="Replace">Required. The text to replace each occurrence of <paramref name="Pattern" />.</param>
      <param name="vsFindOptionsValue">Optional. A <see cref="T:EnvDTE.vsFindOptions" /> constant indicating the behavior of <see cref="M:EnvDTE.TextDocument.ReplacePattern(System.String,System.String,System.Int32,EnvDTE.TextRanges@)" />, such as how to search, where to begin the search, whether to search forward or backward, and whether the search is case-sensitive.</param>
      <param name="Tags">Optional. A <see cref="T:EnvDTE.TextRanges" /> collection. If the matched text pattern is a regular expression and contains tagged subexpressions, then <paramref name="Tags" /> contains a collection of <see cref="T:EnvDTE.EditPoint" /> objects, one for each tagged subexpression.</param>
    </member>
    <member name="M:EnvDTE.TextDocument.ReplaceText(System.String,System.String,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>A Boolean value.</returns>
      <param name="FindText">The text to find.</param>
      <param name="ReplaceText">The text with which to replace the found text.</param>
      <param name="vsFindOptionsValue">The find options.</param>
    </member>
    <member name="P:EnvDTE.TextDocument.Selection">
      <summary>Gets an object representing the current selection on the <see cref="T:EnvDTE.TextDocument" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.TextSelection" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextDocument.StartPoint">
      <summary>Gets the <see cref="T:EnvDTE.TextPoint" /> object representing the beginning of the text document, or the first displayed character of the pane.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextDocument.TabSize">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The tab size.</returns>
    </member>
    <member name="P:EnvDTE.TextDocument.Type">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="T:EnvDTE.TextEditor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.TextEditor.Application">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.TextEditor.Emulation">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.TextEditor.Overtype">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.TextEditor.Parent">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.TextEditor.VisibleWhitespace">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="T:EnvDTE.TextEditorEvents">
      <summary>Provides events for changes made in the Text/Code Editor. Use this interface for functionality and refer to <see cref="T:EnvDTE.TextEditorEventsClass" /> for this object's documentation.</summary>
    </member>
    <member name="T:EnvDTE.TextEditorEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.TextEditorEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.TextEditorEventsClass.add_LineChanged(EnvDTE._dispTextEditorEvents_LineChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.TextEditorEventsClass.LineChanged">
      <summary>Occurs when changes are made to a line in the Text/Code Editor that moves the insertion point.</summary>
    </member>
    <member name="M:EnvDTE.TextEditorEventsClass.remove_LineChanged(EnvDTE._dispTextEditorEvents_LineChangedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="T:EnvDTE.TextPane">
      <summary>Represents a pane within a text editor window.</summary>
    </member>
    <member name="M:EnvDTE.TextPane.Activate">
      <summary>Moves the focus to the current item.</summary>
    </member>
    <member name="P:EnvDTE.TextPane.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.TextPane" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.TextPanes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.TextPane.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextPane.Height">
      <summary>Gets the height of the text pane in character units.</summary>
      <returns>The height of the text pane in character units.</returns>
    </member>
    <member name="M:EnvDTE.TextPane.IsVisible(EnvDTE.TextPoint,System.Object)">
      <summary>Returns a value indicating whether the character or specified characters are visible in the text pane.</summary>
      <returns>true if the point is visible; otherwise, false.</returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> location used to determine if a character is visible. Since a <paramref name="Point" /> is situated between two characters, the default interpretation (that is, when no value is given for the <paramref name="PointOrCount" /> argument) is the first character immediately to the right of the text point. If the character after the text point is visible, then the <paramref name="Point" /> is visible as well.</param>
      <param name="PointOrCount">Optional. Another point that works with the first <paramref name="Point" /> argument to indicate a range of text. <see cref="M:EnvDTE.TextPane.IsVisible(EnvDTE.TextPoint,System.Object)" /> determines whether or not this range of text is visible. <paramref name="PointOrCount" /> can also be set to a number of characters that follow <paramref name="Point" /> to indicate the range of text.If a value is not supplied to the <paramref name="PointOrCount" /> argument, <see cref="M:EnvDTE.TextPane.IsVisible(EnvDTE.TextPoint,System.Object)" /> checks for the visibility of the character immediately to the right of <paramref name="Point" />, because <paramref name="PointOrCount" /> has a default value of 1. </param>
    </member>
    <member name="P:EnvDTE.TextPane.Selection">
      <summary>Gets an object representing the current selection on the <see cref="T:EnvDTE.TextPane" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.TextSelection" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextPane.StartPoint">
      <summary>Gets the <see cref="T:EnvDTE.TextPoint" /> object representing the first displayed character of the pane.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextPane.TryToShow(EnvDTE.TextPoint,EnvDTE.vsPaneShowHow,System.Object)">
      <summary>Adjusts the location of the view in the text buffer so that the indicated range of text is shown in the text pane, if possible. You can control where in the pane the text displays.</summary>
      <returns>true if the text can be displayed; otherwise, false.</returns>
      <param name="Point">Required. The <see cref="T:EnvDTE.TextPoint" /> location you want to attempt to show.</param>
      <param name="How">Required. A <see cref="T:EnvDTE.vsPaneShowHow" /> constant indicating how to display the text.</param>
      <param name="PointOrCount">Optional. A variant representing the end of a range of text to show. If <paramref name="PointOrCount" /> is a number of characters, the characters follow <paramref name="Point" />. If <paramref name="PointOrCount" /> is a point before <paramref name="Point" />, then it will be at the top of the text pane if <paramref name="How" /> is set to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowTop" />.If <paramref name="How" /> is set to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowCentered" />, and the number of lines in the selected text is greater than the height of the pane, then the top line of the selected text is placed at the top of the pane. </param>
    </member>
    <member name="P:EnvDTE.TextPane.Width">
      <summary>Gets the width of the pane in character units.</summary>
      <returns>The width of the pane in character units.</returns>
    </member>
    <member name="P:EnvDTE.TextPane.Window">
      <summary>Gets the <see cref="T:EnvDTE.Window" /> object that contains the pane.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="T:EnvDTE.TextPanes">
      <summary>Contains all of the <see cref="T:EnvDTE.TextPane" /> objects in a text editor window.</summary>
    </member>
    <member name="P:EnvDTE.TextPanes.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.TextPanes" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.TextPanes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.TextPanes.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextPanes.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.TextPanes.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.TextPane" /> object in a <see cref="T:EnvDTE.TextPanes" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.TextPane" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.TextPane" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.TextPanes.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.TextPanes" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.TextWindow" /> object.</returns>
    </member>
    <member name="T:EnvDTE.TextPoint">
      <summary>Represents a location of text in a text document.</summary>
    </member>
    <member name="P:EnvDTE.TextPoint.AbsoluteCharOffset">
      <summary>Gets the one-based character offset from the beginning of the document to the <see cref="T:EnvDTE.TextPoint" /> object.</summary>
      <returns>An integer value indicating the one-based character offset from the beginning of the document to the <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.AtEndOfDocument">
      <summary>Gets whether the object is at the end of the document.</summary>
      <returns>A Boolean value indicating true if you are at the end of the document; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.AtEndOfLine">
      <summary>Gets whether or not object is at the end of a line.</summary>
      <returns>A Boolean value indicating true if you are at the end of a line; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.AtStartOfDocument">
      <summary>Gets whether or not the object is at the beginning of the document.</summary>
      <returns>A Boolean true if you are at the start of a document; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.AtStartOfLine">
      <summary>Gets whether or not the object is at the beginning of a line.</summary>
      <returns>A Boolean value indicating True if you are at the start of a line; False if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.CodeElement(EnvDTE.vsCMElement)">
      <summary>Returns the code element at the <see cref="T:EnvDTE.TextPoint" /> location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Scope">Required. A <see cref="T:EnvDTE.vsCMElement" /> constant indicating the code element with the specified kind that contains the editor location.</param>
    </member>
    <member name="M:EnvDTE.TextPoint.CreateEditPoint">
      <summary>Creates and returns an <see cref="T:EnvDTE.EditPoint" /> object at the location of the calling object.</summary>
      <returns>An <see cref="T:EnvDTE.EditPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.DisplayColumn">
      <summary>Gets the number of the current displayed column containing the <see cref="T:EnvDTE.TextPoint" /> object.</summary>
      <returns>An integer value indicating the number of the current displayed column containing the <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextPoint.EqualTo(EnvDTE.TextPoint)">
      <summary>Returns whether the value of the given point object's <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property is equal to that of the calling <see cref="T:EnvDTE.TextPoint" /> object.</summary>
      <returns>A Boolean value indicating true if <paramref name="Point" /> has the same <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property value as the calling point object. </returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> object to compare to the calling point object.</param>
    </member>
    <member name="M:EnvDTE.TextPoint.GreaterThan(EnvDTE.TextPoint)">
      <summary>Indicates whether or not the value of the calling object's <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property is greater than that of the given point object.</summary>
      <returns>A Boolean value indicating true if <paramref name="Point" /> has a smaller <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property value compared to the calling point object's <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property. </returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> object to compare to the calling point object.</param>
    </member>
    <member name="M:EnvDTE.TextPoint.LessThan(EnvDTE.TextPoint)">
      <summary>Indicates whether or not the value of the called object's <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property is less than that of the given object.</summary>
      <returns>A Boolean value indicating true if <paramref name="Point" /> has a greater <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property value compared to the calling point object's <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property. </returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> to compare to the calling point object.</param>
    </member>
    <member name="P:EnvDTE.TextPoint.Line">
      <summary>Gets the line number of the object.</summary>
      <returns>An integer value indicating the line number of the object.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.LineCharOffset">
      <summary>Gets the character offset of the object.</summary>
      <returns>An integer value indicating the character offset of the object.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.LineLength">
      <summary>Gets the number of characters in a line containing the object, excluding the new line character.</summary>
      <returns>An integer value indicating the number of characters in a line containing the <see cref="T:EnvDTE.TextPoint" /> object, excluding the new line character.</returns>
    </member>
    <member name="P:EnvDTE.TextPoint.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.TextPoint" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.TextDocument" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextPoint.TryToShow(EnvDTE.vsPaneShowHow,System.Object)">
      <summary>Attempts to display the text point's location.</summary>
      <returns>A Boolean value indicating true if the span of text fits within the current code editor, false if not.</returns>
      <param name="How">Optional. A <see cref="T:EnvDTE.vsPaneShowHow" /> constant that determines how the code is displayed.</param>
      <param name="PointOrCount">Optional. The endpoint of the selected range of text to be displayed. It can be either a <see cref="T:EnvDTE.TextPoint" /> or an integer.</param>
    </member>
    <member name="T:EnvDTE.TextRange">
      <summary>Represents a single, contiguous section of text in a text document.</summary>
    </member>
    <member name="P:EnvDTE.TextRange.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.TextRange" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.TextRanges" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.TextRange.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextRange.EndPoint">
      <summary>Gets an <see cref="T:EnvDTE.EditPoint" /> that is the location of the end of the range.</summary>
      <returns>A <see cref="T:EnvDTE.EditPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextRange.StartPoint">
      <summary>Gets the <see cref="T:EnvDTE.EditPoint" /> object representing the beginning of the text document, or the first displayed character of the pane.</summary>
      <returns>A <see cref="T:EnvDTE.EditPoint" /> object.</returns>
    </member>
    <member name="T:EnvDTE.TextRanges">
      <summary>Contains a <see cref="T:EnvDTE.TextRange" /> object for each of the tagged subexpressions from a search pattern. <see cref="T:EnvDTE.TextRanges" />  is also used to find where a box selection intersects each line of text.</summary>
    </member>
    <member name="P:EnvDTE.TextRanges.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer value indicating the number of <see cref="T:EnvDTE.TextRange" /> objects in the <see cref="T:EnvDTE.TextRanges" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.TextRanges.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextRanges.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.TextRanges.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.TextRange" /> object in a <see cref="T:EnvDTE.TextRanges" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.TextRange" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.TextRange" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.TextRanges.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.TextRanges" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.TextDocument" /> object.</returns>
    </member>
    <member name="T:EnvDTE.TextSelection">
      <summary>Provides access to view-based editing operations and selected text.</summary>
    </member>
    <member name="P:EnvDTE.TextSelection.ActivePoint">
      <summary>Gets the current endpoint of the selection.</summary>
      <returns>A <see cref="T:EnvDTE.VirtualPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextSelection.AnchorColumn">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The anchor column</returns>
    </member>
    <member name="P:EnvDTE.TextSelection.AnchorPoint">
      <summary>Gets the origin point of the selection.</summary>
      <returns>A <see cref="T:EnvDTE.VirtualPoint" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.Backspace(System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Count">The number of spaces.</param>
    </member>
    <member name="P:EnvDTE.TextSelection.BottomLine">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The bottom line.</returns>
    </member>
    <member name="P:EnvDTE.TextSelection.BottomPoint">
      <summary>Gets the point at the end of the selection.</summary>
      <returns>A <see cref="T:EnvDTE.VirtualPoint" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.Cancel">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.ChangeCase(EnvDTE.vsCaseOptions)">
      <summary>Changes the case of the selected text.</summary>
      <param name="How">Required. A <see cref="T:EnvDTE.vsCaseOptions" /> constant representing the text to insert.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.CharLeft(System.Boolean,System.Int32)">
      <summary>Moves the object the specified number of characters to the left.</summary>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is False.</param>
      <param name="Count">Optional. Represents the number of characters to move to the left. The default is 1.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.CharRight(System.Boolean,System.Int32)">
      <summary>Moves the object the specified number of characters to the right.</summary>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is false.</param>
      <param name="Count">Optional. Represents the number of characters to move to the right. The default is 1.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.ClearBookmark">
      <summary>Clears any unnamed bookmarks in the current text buffer line.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.Collapse">
      <summary>Collapses the selected text to the active point.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.Copy">
      <summary>Copies the selected text to the clipboard.</summary>
    </member>
    <member name="P:EnvDTE.TextSelection.CurrentColumn">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The current column.</returns>
    </member>
    <member name="P:EnvDTE.TextSelection.CurrentLine">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The current line.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.Cut">
      <summary>Copies the selected text to the clipboard and deletes it from its original location.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.Delete(System.Int32)">
      <summary>Deletes the selected text.</summary>
      <param name="Count">Optional. Represents the number of characters to delete.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.DeleteLeft(System.Int32)">
      <summary>Deletes a specified number of characters to the left of the active point.</summary>
      <param name="Count">Optional. Represents the number of characters to delete.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.DeleteWhitespace(EnvDTE.vsWhitespaceOptions)">
      <summary>Deletes the empty characters (white space) horizontally or vertically around the current location in the text buffer.</summary>
      <param name="Direction">Optional. A <see cref="T:EnvDTE.vsWhitespaceOptions" /> constant that determines how and where to remove empty spaces.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.DestructiveInsert(System.String)">
      <summary>Inserts text, overwriting the existing text.</summary>
      <param name="Text">Required. Represents the text to insert.</param>
    </member>
    <member name="P:EnvDTE.TextSelection.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.EndOfDocument(System.Boolean)">
      <summary>Moves the object to the end of the document.</summary>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is false.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.EndOfLine(System.Boolean)">
      <summary>Moves the object to the end of the current line.</summary>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is false.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.FindPattern(System.String,System.Int32,EnvDTE.TextRanges@)">
      <summary>Searches for the given pattern from the active point to the end of the document.</summary>
      <returns>A Boolean value indicating true if the pattern is found, false if not.</returns>
      <param name="Pattern">Required. The text to find.</param>
      <param name="vsFindOptionsValue">One of the <see cref="T:EnvDTE.vsFindOptions" /> values.</param>
      <param name="Tags">Optional. If the matched pattern is a regular expression containing tagged subexpressions, then the <paramref name="Tags" /> argument contains a collection of <see cref="T:EnvDTE.TextRange" /> objects, one for each tagged subexpression.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.FindText(System.String,System.Int32)">
      <summary>Searches for the given text from the active point to the end of the document.</summary>
      <returns>A Boolean value indicating true if the text is found, false if not.</returns>
      <param name="Pattern">Required. The text to find.</param>
      <param name="vsFindOptionsValue">Optional. A <see cref="T:EnvDTE.vsFindOptions" /> constant indicating the search options to use.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.GotoLine(System.Int32,System.Boolean)">
      <summary>Moves to the beginning of the indicated line and selects the line if requested.</summary>
      <param name="Line">Required. The line number to go to, beginning at one.</param>
      <param name="Select">Optional. Indicates whether the target line should be selected. The default is false.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.Indent(System.Int32)">
      <summary>Indents the selected lines by the given number of indentation levels.</summary>
      <param name="Count">Optional. The number of display indent levels to indent each line in the selected text. The default is 1.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.Insert(System.String,System.Int32)">
      <summary>Inserts the given string at the current insertion point.</summary>
      <param name="Text">The text to insert.</param>
      <param name="vsInsertFlagsCollapseToEndValue">One of the <see cref="T:EnvDTE.vsInsertFlags" /> values indicating how to insert the text. </param>
    </member>
    <member name="M:EnvDTE.TextSelection.InsertFromFile(System.String)">
      <summary>Inserts the contents of the specified file at the current location in the buffer.</summary>
      <param name="File">Required. The name of the file to insert into the text buffer.</param>
    </member>
    <member name="P:EnvDTE.TextSelection.IsActiveEndGreater">
      <summary>Gets whether the active point is equal to the bottom point.</summary>
      <returns>A Boolean value indicating True if the selected text's active end is at a greater absolute character offset than the anchor in the text document, False if not.</returns>
    </member>
    <member name="P:EnvDTE.TextSelection.IsEmpty">
      <summary>Gets whether the anchor point is equal to the active point.</summary>
      <returns>A Boolean value indicating True if the anchor point is equal to the active point, False if not.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.LineDown(System.Boolean,System.Int32)">
      <summary>Moves the insertion point of the text selection down the specified number of lines.</summary>
      <param name="Extend">Optional. Determines whether the line in which the insertion point is moved is highlighted. The default is false.</param>
      <param name="Count">Optional. Indicates how many lines down to move the insertion point. The default value is 1.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.LineUp(System.Boolean,System.Int32)">
      <summary>Moves the insertion point of the text selection up the specified number of lines.</summary>
      <param name="Extend">Optional. Determines whether the line in which the insertion point is moved is highlighted. The default is false.</param>
      <param name="Count">Optional. Indicates how many lines up to move the insertion point. The default is 1.</param>
    </member>
    <member name="P:EnvDTE.TextSelection.Mode">
      <summary>Sets or gets a value determining whether dragging the mouse selects in stream or block mode.</summary>
      <returns>A <see cref="T:EnvDTE.vsSelectionMode" /> constant.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.MoveTo(System.Int32,System.Int32,System.Boolean)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Line">The line number.</param>
      <param name="Column">The column number.</param>
      <param name="Extend">true if the move is extended, otherwise false.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.MoveToAbsoluteOffset(System.Int32,System.Boolean)">
      <summary>Moves the active point to the given 1-based absolute character offset.</summary>
      <param name="Offset">Required. A character index from the start of the document, starting at one</param>
      <param name="Extend">Optional. Default = false. A Boolean value to extend the current selection. If <paramref name="Extend" /> is true, then the active end of the selection moves to the location while the anchor end remains where it is. Otherwise, both ends are moved to the specified location. This argument applies only to the <see cref="T:EnvDTE.TextSelection" /> object.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.MoveToDisplayColumn(System.Int32,System.Int32,System.Boolean)">
      <summary>Moves the active point to the indicated display column.</summary>
      <param name="Line">Required. A <see cref="T:EnvDTE.vsGoToLineOptions" /> constant representing the line offset, starting at one, from the beginning of the buffer.</param>
      <param name="Column">Required. Represents the virtual display column, starting at one, that is the new column location.</param>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is false.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.MoveToLineAndOffset(System.Int32,System.Int32,System.Boolean)">
      <summary>Moves the active point to the given position.</summary>
      <param name="Line">Required. The line number to move to, beginning at one. <paramref name="Line" /> may also be one of the constants from <see cref="T:EnvDTE.vsGoToLineOptions" />.</param>
      <param name="Offset">Required. The character index position in the line, starting at one.</param>
      <param name="Extend">Optional. Default = false. A Boolean value to extend the current selection. If <paramref name="Extend" /> is true, then the active end of the selection moves to the location, while the anchor end remains where it is. Otherwise, both ends are moved to the specified location. This argument applies only to the <see cref="T:EnvDTE.TextSelection" /> object.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.MoveToPoint(EnvDTE.TextPoint,System.Boolean)">
      <summary>Moves the active point to the given position.</summary>
      <param name="Point">Required. The location in which to move the character.</param>
      <param name="Extend">Optional. Default = false. Determines whether to extend the current selection. If <paramref name="Extend" /> is true, then the active end of the selection moves to the location, while the anchor end remains where it is. Otherwise, both ends are moved to the specified location. This argument applies only to the <see cref="T:EnvDTE.TextSelection" /> object.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.NewLine(System.Int32)">
      <summary>Inserts a line break character at the active point.</summary>
      <param name="Count">Optional. Represents the number of NewLine characters to insert.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.NextBookmark">
      <summary>Moves to the location of the next bookmark in the document.</summary>
      <returns>A Boolean value indicating true if the insertion point moves to the next bookmark, false if otherwise.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.OutlineSection">
      <summary>Creates an outlining section based on the current selection.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.PadToColumn(System.Int32)">
      <summary>Fills the current line in the buffer with empty characters (white space) to the given column.</summary>
      <param name="Column">Required. The number of columns to pad, starting at one.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.PageDown(System.Boolean,System.Int32)">
      <summary>Moves the active point a specified number of pages down in the document, scrolling the view.</summary>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is false.</param>
      <param name="Count">Optional. Represents the number of pages to move down. The default value is 1.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.PageUp(System.Boolean,System.Int32)">
      <summary>Moves the active point a specified number of pages up in the document, scrolling the view.</summary>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is false.</param>
      <param name="Count">Optional. Represents the number of pages to move up. The default value is 1.</param>
    </member>
    <member name="P:EnvDTE.TextSelection.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.TextSelection" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.TextDocument" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.Paste">
      <summary>Inserts the clipboard contents at the current location. </summary>
    </member>
    <member name="M:EnvDTE.TextSelection.PreviousBookmark">
      <summary>Moves the text selection to the location of the previous bookmark in the document.</summary>
      <returns>A Boolean true if the text selection moves to a previous bookmark, false if not.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.ReplacePattern(System.String,System.String,System.Int32,EnvDTE.TextRanges@)">
      <summary>Replaces matching text throughout an entire text document.</summary>
      <returns>A Boolean value.</returns>
      <param name="Pattern">Required. The string to find.</param>
      <param name="Replace">Required. The text to replace each occurrence of <paramref name="Pattern" />.</param>
      <param name="vsFindOptionsValue">Optional. A <see cref="T:EnvDTE.vsFindOptions" /> constant indicating the behavior of <see cref="M:EnvDTE.TextSelection.ReplacePattern(System.String,System.String,System.Int32,EnvDTE.TextRanges@)" />, such as how to search, where to begin the search, whether to search forward or backward, and the case sensitivity.</param>
      <param name="Tags">Optional. A <see cref="T:EnvDTE.TextRanges" /> collection. If the matched text pattern is a regular expression and contains tagged subexpressions, then <paramref name="Tags" /> contains a collection of <see cref="T:EnvDTE.EditPoint" /> objects, one for each tagged subexpression.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.ReplaceText(System.String,System.String,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>true if the text was replaced, otherwise false.</returns>
      <param name="Pattern">The pattern to find.</param>
      <param name="Replace">The string with which to replace the found text.</param>
      <param name="vsFindOptionsValue">The find flags.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.SelectAll">
      <summary>Selects the entire document.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.SelectLine">
      <summary>Selects the line containing the active point.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.SetBookmark">
      <summary>Sets an unnamed bookmark on the current line in the buffer.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.SmartFormat">
      <summary>Formats the selected lines of text based on the current language.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.StartOfDocument(System.Boolean)">
      <summary>Moves the insertion point to the beginning of the document.</summary>
      <param name="Extend">Optional. Determines whether the text between the current location of the insertion point and the beginning of the document is highlighted or not. The default value is false.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.StartOfLine(EnvDTE.vsStartOfLineOptions,System.Boolean)">
      <summary>Moves the object to the beginning of the current line.</summary>
      <param name="Where">Optional. A <see cref="T:EnvDTE.vsStartOfLineOptions" /> constant representing where the line starts.</param>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is false.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.SwapAnchor">
      <summary>Exchanges the position of the active and the anchor points.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.Tabify">
      <summary>Converts spaces to tabs in the selection according to your tab settings.</summary>
    </member>
    <member name="P:EnvDTE.TextSelection.Text">
      <summary>Sets or gets the selected text.</summary>
      <returns>A string representing the selected text.</returns>
    </member>
    <member name="P:EnvDTE.TextSelection.TextPane">
      <summary>Gets the text pane that contains the selected text.</summary>
      <returns>A <see cref="T:EnvDTE.TextPane" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextSelection.TextRanges">
      <summary>Gets a <see cref="T:EnvDTE.TextRanges" /> collection with one <see cref="T:EnvDTE.TextRange" /> object for each line or partial line in the selection.</summary>
      <returns>A <see cref="T:EnvDTE.TextRanges" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.TextSelection.TopLine">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The top line.</returns>
    </member>
    <member name="P:EnvDTE.TextSelection.TopPoint">
      <summary>Gets the top end of the selection.</summary>
      <returns>A <see cref="T:EnvDTE.VirtualPoint" /> object.</returns>
    </member>
    <member name="M:EnvDTE.TextSelection.Unindent(System.Int32)">
      <summary>Removes indents from the selected text by the number of indentation levels given.</summary>
      <param name="Count">Optional. The number of display indent levels to remove from each line in the selected text. The default is 1.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.Untabify">
      <summary>Converts tabs to spaces in the selection according to the user's tab settings.</summary>
    </member>
    <member name="M:EnvDTE.TextSelection.WordLeft(System.Boolean,System.Int32)">
      <summary>Moves the selected text left the specified number of words.</summary>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is false.</param>
      <param name="Count">Optional. Represents the number of words to move left. The default value is 1.</param>
    </member>
    <member name="M:EnvDTE.TextSelection.WordRight(System.Boolean,System.Int32)">
      <summary>Moves the selected text right the specified number of words.</summary>
      <param name="Extend">Optional. Determines whether the moved text is collapsed or not. The default is false.</param>
      <param name="Count">Optional. Represents the number of words to move right. The default value is 1.</param>
    </member>
    <member name="T:EnvDTE.TextWindow">
      <summary>Represents a window containing a text document.</summary>
    </member>
    <member name="P:EnvDTE.TextWindow.ActivePane">
      <summary>Gets the most recently active pane in the Text window.</summary>
      <returns>A <see cref="T:EnvDTE.OutputWindowPane" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextWindow.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextWindow.Panes">
      <summary>Gets the collection of panes in the <see cref="T:EnvDTE.TextWindow" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPanes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.TextWindow.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.TextWindow" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="P:EnvDTE.TextWindow.Selection">
      <summary>Gets an object representing the current selection on the <see cref="T:EnvDTE.TextWindow" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.TextSelection" /> object.</returns>
    </member>
    <member name="T:EnvDTE.Thread">
      <summary>Used to examine and manipulate threads.</summary>
    </member>
    <member name="P:EnvDTE.Thread.Collection">
      <summary>Gets the collection that contains the object that supports this property or that is contained in this code construct. Returns null for an object that is not obtained from a collection.</summary>
      <returns>A <see cref="T:EnvDTE.Threads" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Thread.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Thread.Freeze">
      <summary>Stops the thread from executing.</summary>
    </member>
    <member name="P:EnvDTE.Thread.ID">
      <summary>Gets the thread ID.</summary>
      <returns>An integer that represents the thread ID.</returns>
    </member>
    <member name="P:EnvDTE.Thread.IsAlive">
      <summary>Gets whether the referenced thread is still alive.</summary>
      <returns>A Boolean value.</returns>
    </member>
    <member name="P:EnvDTE.Thread.IsFrozen">
      <summary>Gets whether the thread is frozen by the debugger.</summary>
      <returns>A Boolean value of true if the thread is frozen by the debugger; otherwise, false. </returns>
    </member>
    <member name="P:EnvDTE.Thread.Location">
      <summary>Gets the address at which the thread was executing code when the process was stopped for debugging.</summary>
      <returns>A string value that represents the address at which the thread was executing code whenthe process was stopped for debugging.</returns>
    </member>
    <member name="P:EnvDTE.Thread.Name">
      <summary>Gets the name of the object.</summary>
      <returns>A string that represents the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.Thread.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Thread" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Thread.Priority">
      <summary>Gets the scheduling priority of the thread. </summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:EnvDTE.Thread.Program">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="P:EnvDTE.Thread.StackFrames">
      <summary>Gets the collection of stack frames through which this thread is executing.</summary>
      <returns>A <see cref="T:EnvDTE.StackFrames" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Thread.SuspendCount">
      <summary>Gets the number of times this thread has been suspended by the debugger.</summary>
      <returns>An integer that represents the number of times this thread has been suspended by the debugger.</returns>
    </member>
    <member name="M:EnvDTE.Thread.Thaw">
      <summary>Enables the thread to execute.</summary>
    </member>
    <member name="T:EnvDTE.Threads">
      <summary>A collection of <see cref="T:EnvDTE.Thread" /> objects.</summary>
    </member>
    <member name="P:EnvDTE.Threads.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.Threads" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.Threads" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Threads.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Threads.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Threads.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.Thread" /> object in a <see cref="T:EnvDTE.Threads" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Thread" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.Thread" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.Threads.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Threads" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="T:EnvDTE.ToolBox">
      <summary>Represents the ToolBox in the integrated development environment (IDE).</summary>
    </member>
    <member name="P:EnvDTE.ToolBox.ActiveTab">
      <summary>Gets the currently selected item in the ToolBox.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxTab" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ToolBox.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ToolBox.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.ToolBox" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ToolBox.ToolBoxTabs">
      <summary>Gets the collection of all tabs in the ToolBox.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxTabs" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.ToolBoxItem">
      <summary>Represents an item in the ToolBox.</summary>
    </member>
    <member name="P:EnvDTE.ToolBoxItem.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.ToolBoxItem" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxItems" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.ToolBoxItem.Delete">
      <summary>Removes the <see cref="T:EnvDTE.ToolBoxItem" /> object from the collection.</summary>
    </member>
    <member name="P:EnvDTE.ToolBoxItem.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ToolBoxItem.Name">
      <summary>Gets or sets the name of the <see cref="T:EnvDTE.ToolBoxItem" /> object.</summary>
      <returns>The name of the <see cref="T:EnvDTE.ToolBoxItem" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ToolBoxItem.Select">
      <summary>Causes this item to become active in the integrated development environment (IDE).</summary>
    </member>
    <member name="T:EnvDTE.ToolBoxItems">
      <summary>Contains all items in a ToolBox tab.</summary>
    </member>
    <member name="M:EnvDTE.ToolBoxItems.Add(System.String,System.Object,EnvDTE.vsToolBoxItemFormat)">
      <summary>Creates a new item and adds it to the ToolBox.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxItem" /> object.</returns>
      <param name="Name">Required. A string representing the caption of the new item.</param>
      <param name="Data">Required. A variant representing the string, control, or other item to be added to the ToolBox.</param>
      <param name="Format">Optional. A <see cref="T:EnvDTE.vsToolBoxItemFormat" /> constant indicating the format of the new item.</param>
    </member>
    <member name="P:EnvDTE.ToolBoxItems.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.ToolBoxItems" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.ToolBoxItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.ToolBoxItems.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ToolBoxItems.GetEnumerator">
      <summary>Gets an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.ToolBoxItems.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.ToolBoxItem" /> object in a <see cref="T:EnvDTE.ToolBoxItems" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxItem" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.ToolBoxItem" /> object to return.</param>
    </member>
    <member name="P:EnvDTE.ToolBoxItems.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.ToolBoxItems" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxTab" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ToolBoxItems.SelectedItem">
      <summary>Gets the item currently selected in the tab of the ToolBox, if any exist.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxItem" /> object.</returns>
    </member>
    <member name="T:EnvDTE.ToolBoxTab">
      <summary>Represents a tab in the ToolBox, along with any objects the tab contains.</summary>
    </member>
    <member name="M:EnvDTE.ToolBoxTab.Activate">
      <summary>Moves the focus to the current item.</summary>
    </member>
    <member name="P:EnvDTE.ToolBoxTab.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.ToolBoxTab" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxTabs" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.ToolBoxTab.Delete">
      <summary>Removes the <see cref="T:EnvDTE.ToolBoxTab" /> from a collection.</summary>
    </member>
    <member name="P:EnvDTE.ToolBoxTab.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.ToolBoxTab.ListView">
      <summary>Gets or sets a value indicating whether items in a particular ToolBox tab display in List view or Icon view format.</summary>
      <returns>true if the ToolBox tab is in List view; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.ToolBoxTab.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:EnvDTE.ToolBoxTab.ToolBoxItems">
      <summary>Gets the collection of <see cref="T:EnvDTE.ToolBoxItems" /> associated with a <see cref="T:EnvDTE.ToolBoxTab" />.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxItems" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.ToolBoxTabs">
      <summary>Contains all tabs in the Toolbox.</summary>
    </member>
    <member name="M:EnvDTE.ToolBoxTabs.Add(System.String)">
      <summary>Creates a new tab in the <see cref="T:EnvDTE.ToolBox" /> and adds it to the <see cref="T:EnvDTE.ToolBoxTabs" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxTab" /> object.</returns>
      <param name="Name">Required. The name of the tab.</param>
    </member>
    <member name="P:EnvDTE.ToolBoxTabs.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.ToolBoxTabs" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.ToolBoxTabs.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.ToolBoxTabs.GetEnumerator">
      <summary>Gets an enumerator for items in the collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.ToolBoxTabs.Item(System.Object)">
      <summary>Returns an indexed member of a <see cref="T:EnvDTE.ToolBoxTabs" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBoxTab" /> object.</returns>
      <param name="index">Required. The index of the item to return.</param>
    </member>
    <member name="P:EnvDTE.ToolBoxTabs.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.ToolBoxTabs" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.ToolBox" /> object.</returns>
    </member>
    <member name="T:EnvDTE.UIHierarchy">
      <summary>Represents standard tool windows in the integrated development environment (IDE) that use hierarchical trees of data, such as Solution Explorer, Server Explorer, and Macro Explorer.</summary>
    </member>
    <member name="M:EnvDTE.UIHierarchy.DoDefaultAction">
      <summary>In the hierarchy, performs the same action as if the user had double-clicked or pressed ENTER.</summary>
    </member>
    <member name="P:EnvDTE.UIHierarchy.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.UIHierarchy.GetItem(System.String)">
      <summary>Gets the item designated by given path.</summary>
      <returns>A <see cref="T:EnvDTE.UIHierarchyItem" /> object.</returns>
      <param name="Names">Required. The names in order from the root leading to subsequent subnodes. The last name in the array is the node returned as a <see cref="T:EnvDTE.UIHierarchyItem" /> object.</param>
    </member>
    <member name="P:EnvDTE.UIHierarchy.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.UIHierarchy" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="M:EnvDTE.UIHierarchy.SelectDown(EnvDTE.vsUISelectionType,System.Int32)">
      <summary>Selects the node immediately below the currently selected node with respect to the tree's current expansion state.</summary>
      <param name="How">Required. A <see cref="T:EnvDTE.vsUISelectionType" /> constant indicating how the selection is made.</param>
      <param name="Count">Required. The number of nodes to select down from the current node. <paramref name="Count" /> is also used for coalescing commands while recording. That is, if you type SHIFT + DOWN ARROW four times, rather than four lines of code emitted, you instead get one line with a <paramref name="Count" /> value of 4.</param>
    </member>
    <member name="P:EnvDTE.UIHierarchy.SelectedItems">
      <summary>Gets a collection of all of the currently selected items.</summary>
      <returns>An object containing a collection of all of the currently selected items.</returns>
    </member>
    <member name="M:EnvDTE.UIHierarchy.SelectUp(EnvDTE.vsUISelectionType,System.Int32)">
      <summary>Selects the node immediately above the currently selected node with respect to the tree's current expansion state.</summary>
      <param name="How">Required. A <see cref="T:EnvDTE.vsUISelectionType" /> constant indicating how the selection is made.</param>
      <param name="Count">Required. The number of nodes to select up from the current node. <paramref name="Count" /> is also used for coalescing commands while recording. That is, if you type SHIFT + UP ARROW four times, rather than four lines of code emitted, you instead get one line with a <paramref name="Count" /> value of 4.</param>
    </member>
    <member name="P:EnvDTE.UIHierarchy.UIHierarchyItems">
      <summary>Gets a collection representing children of the item.</summary>
      <returns>A <see cref="T:EnvDTE.UIHierarchyItems" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.UIHierarchyItem">
      <summary>Represents an item that shows hierarchical tree data, such as Solution Explorer, in a standard tool window in the integrated development environment (IDE).</summary>
    </member>
    <member name="P:EnvDTE.UIHierarchyItem.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.UIHierarchyItem" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.UIHierarchyItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.UIHierarchyItem.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.UIHierarchyItem.IsSelected">
      <summary>Gets whether a node is selected.</summary>
      <returns>A Boolean value indicating true if the item is selected, false otherwise.</returns>
    </member>
    <member name="P:EnvDTE.UIHierarchyItem.Name">
      <summary>Gets the name of the object.</summary>
      <returns>A string representing the name of the object.</returns>
    </member>
    <member name="P:EnvDTE.UIHierarchyItem.Object">
      <summary>Gets an object that can be accessed by name at run time.</summary>
      <returns>An object that can be accessed by name at run time.</returns>
    </member>
    <member name="M:EnvDTE.UIHierarchyItem.Select(EnvDTE.vsUISelectionType)">
      <summary>Causes the specified item to become active in the user interface.</summary>
      <param name="How">A <see cref="T:EnvDTE.vsUISelectionType" /> constant indicating how the selection is made.</param>
    </member>
    <member name="P:EnvDTE.UIHierarchyItem.UIHierarchyItems">
      <summary>Gets a collection representing children of the item.</summary>
      <returns>A <see cref="T:EnvDTE.UIHierarchyItems" /> collection.</returns>
    </member>
    <member name="T:EnvDTE.UIHierarchyItems">
      <summary>Represents a given level of the UI hierarchy tree. It also represents a collection of the selected items in the tree.</summary>
    </member>
    <member name="P:EnvDTE.UIHierarchyItems.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.UIHierarchyItems" /> collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.UIHierarchyItems" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.UIHierarchyItems.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.UIHierarchyItems.Expanded">
      <summary>Sets or gets whether a node in the hierarchy is expanded.</summary>
      <returns>A Boolean value indicating true the node is expanded, false if not.</returns>
    </member>
    <member name="M:EnvDTE.UIHierarchyItems.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.UIHierarchyItems.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.UIHierarchyItem" /> object in a <see cref="T:EnvDTE.UIHierarchyItems" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.UIHierarchyItem" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.UIHierarchyItem" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.UIHierarchyItems.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.UIHierarchyItems" /> collection.</summary>
      <returns>A parent object.</returns>
    </member>
    <member name="T:EnvDTE.UndoContext">
      <summary>Represents, as a single transaction, all operations performed on all participating open documents in Visual Studio. If its <see cref="M:EnvDTE.UndoContext.SetAborted" /> method is invoked, all changes made since opening the object are discarded.</summary>
    </member>
    <member name="M:EnvDTE.UndoContext.Close">
      <summary>Ends an undo operation.</summary>
    </member>
    <member name="P:EnvDTE.UndoContext.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.UndoContext.IsAborted">
      <summary>Gets whether the <see cref="T:EnvDTE.UndoContext" /> object operation was terminated by the <see cref="M:EnvDTE.UndoContext.SetAborted" /> method.</summary>
      <returns>A Boolean value indicating true if the operation was aborted, false if not.</returns>
    </member>
    <member name="P:EnvDTE.UndoContext.IsOpen">
      <summary>Gets whether an undo operation is currently in effect or if a solution is open.</summary>
      <returns>A Boolean value indicating true if an undo operation is in effect or if a solution is open, false if not.</returns>
    </member>
    <member name="P:EnvDTE.UndoContext.IsStrict">
      <summary>Gets whether the undo stack linkage is strict.</summary>
      <returns>A Boolean value indicating true if the undo stack linkage is set to strict, false if not.</returns>
    </member>
    <member name="M:EnvDTE.UndoContext.Open(System.String,System.Boolean)">
      <summary>Starts a new undo operation.</summary>
      <param name="Name">Required. Represents the name of the procedure for which to provide an undo context.</param>
      <param name="Strict">Optional. Indicates whether the undo stack linkage is strict. Default value is False.</param>
    </member>
    <member name="P:EnvDTE.UndoContext.Parent">
      <summary>Gets the immediate parent object of an <see cref="T:EnvDTE.UndoContext" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.UndoContext.SetAborted">
      <summary>Discards all changes to participating open documents since opening the <see cref="T:EnvDTE.UndoContext" /> object.</summary>
    </member>
    <member name="T:EnvDTE.VirtualPoint">
      <summary>Allows you to manipulate text beyond the right margin (left margin in bidirectional Windows) of the text document.</summary>
    </member>
    <member name="P:EnvDTE.VirtualPoint.AbsoluteCharOffset">
      <summary>Gets the one-based character offset from the beginning of the document to the object.</summary>
      <returns>An integer value indicating the one-based character offset from the beginning of the document to the object.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.AtEndOfDocument">
      <summary>Returns true if the object is at the end of the document.</summary>
      <returns>A Boolean value indicating true if you are at the end of the document; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.AtEndOfLine">
      <summary>Returns true if the object is at the end of a line.</summary>
      <returns>A Boolean value indicating true if you are at the end of a line; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.AtStartOfDocument">
      <summary>Returns true if the object is at the beginning of the document.</summary>
      <returns>A Boolean value indicating true if you are at the start of a document; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.AtStartOfLine">
      <summary>Returns true if the object is at the beginning of a line.</summary>
      <returns>A Boolean value indicating true if you are at the start of a line; false if otherwise.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.CodeElement(EnvDTE.vsCMElement)">
      <summary>Returns the code element at the <see cref="T:EnvDTE.VirtualPoint" /> location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Scope">Required. A <see cref="T:EnvDTE.vsCMElement" /> constant indicating the code element with the specified kind that contains the editor location.</param>
    </member>
    <member name="M:EnvDTE.VirtualPoint.CreateEditPoint">
      <summary>Creates and returns an <see cref="T:EnvDTE.EditPoint" /> object at the location of the calling object.</summary>
      <returns>An <see cref="T:EnvDTE.EditPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.DisplayColumn">
      <summary>Gets the number of the current displayed column containing the object.</summary>
      <returns>An integer value indicating the number of the current displayed column containing the object.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.VirtualPoint.EqualTo(EnvDTE.TextPoint)">
      <summary>Returns whether the value of the given <see cref="T:EnvDTE.TextPoint" /> object's <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property is equal to that of the calling <see cref="T:EnvDTE.VirtualPoint" /> object.</summary>
      <returns>A Boolean value indicating true if <paramref name="Point" /> has the same <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property value as the calling point object. </returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> object to compare to the calling point object.</param>
    </member>
    <member name="M:EnvDTE.VirtualPoint.GreaterThan(EnvDTE.TextPoint)">
      <summary>Returns whether the value of the calling object's <see cref="P:EnvDTE.VirtualPoint.AbsoluteCharOffset" /> property is greater than that of the given point object.</summary>
      <returns>A Boolean value indicating true if <paramref name="Point" /> has a smaller <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property value compared to the calling point object's <see cref="P:EnvDTE.VirtualPoint.AbsoluteCharOffset" /> property. </returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> to compare to the calling point object.</param>
    </member>
    <member name="M:EnvDTE.VirtualPoint.LessThan(EnvDTE.TextPoint)">
      <summary>Returns whether the value of the called object's <see cref="P:EnvDTE.VirtualPoint.AbsoluteCharOffset" /> property is less than that of the given object.</summary>
      <returns>A Boolean value indicating true if <paramref name="Point" /> has a greater <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset" /> property value compared to the calling point object's <see cref="P:EnvDTE.VirtualPoint.AbsoluteCharOffset" /> property. </returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> to compare to the calling point object.</param>
    </member>
    <member name="P:EnvDTE.VirtualPoint.Line">
      <summary>Gets the line number of the object.</summary>
      <returns>An integer value indicating the line number of the object.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.LineCharOffset">
      <summary>Gets the character offset of the object.</summary>
      <returns>An integer value indicating the character offset of the <see cref="T:EnvDTE.VirtualPoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.LineLength">
      <summary>Gets the number of characters in a line containing the object, excluding the new line character.</summary>
      <returns>An integer value indicating the number of characters in a line containing the <see cref="T:EnvDTE.VirtualPoint" /> object, excluding the new line character.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.VirtualPoint" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.TextDocument" /> object.</returns>
    </member>
    <member name="M:EnvDTE.VirtualPoint.TryToShow(EnvDTE.vsPaneShowHow,System.Object)">
      <summary>Attempts to display the text point's location.</summary>
      <returns>A Boolean value indicating true if the span of text fits within the current code editor, false if not.</returns>
      <param name="How">Optional. A <see cref="T:EnvDTE.vsPaneShowHow" /> constant that determines how the code is displayed.</param>
      <param name="PointOrCount">Optional. The endpoint of the selected range of text to be displayed. It can be either a <see cref="T:EnvDTE.TextPoint" /> or an integer.</param>
    </member>
    <member name="P:EnvDTE.VirtualPoint.VirtualCharOffset">
      <summary>Gets the column index of a virtual point in virtual space.</summary>
      <returns>An integer value indicating the column index of a virtual point in virtual space.</returns>
    </member>
    <member name="P:EnvDTE.VirtualPoint.VirtualDisplayColumn">
      <summary>Gets the display column of the current position.</summary>
      <returns>An integer value indicating the display column of the current position.</returns>
    </member>
    <member name="T:EnvDTE.vs_exec_Result">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.vs_exec_Result.RESULT_Success">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vs_exec_Result.RESULT_Failure">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vs_exec_Result.RESULT_Cancel">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsBrowserViewSource">
      <summary>Indicates which window type is used to view web page source.</summary>
    </member>
    <member name="F:EnvDTE.vsBrowserViewSource.vsBrowserViewSourceSource">
      <summary>View source as HTML.</summary>
    </member>
    <member name="F:EnvDTE.vsBrowserViewSource.vsBrowserViewSourceDesign">
      <summary>View source in the HTML design window.</summary>
    </member>
    <member name="F:EnvDTE.vsBrowserViewSource.vsBrowserViewSourceExternal">
      <summary>View source in an external editor.</summary>
    </member>
    <member name="T:EnvDTE.vsBuildAction">
      <summary>Represents the type of build action that is occurring, such as a build or a deploy action.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildAction.vsBuildActionBuild">
      <summary>A build action is occurring.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildAction.vsBuildActionRebuildAll">
      <summary>A rebuild all action is occurring.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildAction.vsBuildActionClean">
      <summary>A clean action is occurring.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildAction.vsBuildActionDeploy">
      <summary>A deploy action is occurring.</summary>
    </member>
    <member name="T:EnvDTE.vsBuildKind">
      <summary>Indicates the kind of build.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildKind.vsBuildKindSolution">
      <summary>Build is a solution build.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildKind.vsBuildKindProject">
      <summary>Build is a project build.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildKind.vsBuildKindProjectItem">
      <summary>Build is a project item build.</summary>
    </member>
    <member name="T:EnvDTE.vsBuildScope">
      <summary>Represents the scope of the build.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildScope.vsBuildScopeSolution">
      <summary>Build applies to entire solution.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildScope.vsBuildScopeBatch">
      <summary>Build applies to a batch build.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildScope.vsBuildScopeProject">
      <summary>Build applies to a single project.</summary>
    </member>
    <member name="T:EnvDTE.vsBuildState">
      <summary>Represents the status of the build operation.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildState.vsBuildStateNotStarted">
      <summary>Build has not yet been started.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildState.vsBuildStateInProgress">
      <summary>Build is currently in progress.</summary>
    </member>
    <member name="F:EnvDTE.vsBuildState.vsBuildStateDone">
      <summary>Build has been completed.</summary>
    </member>
    <member name="T:EnvDTE.vsCaseOptions">
      <summary>Represents options for changing text to lowercase or uppercase.</summary>
    </member>
    <member name="F:EnvDTE.vsCaseOptions.vsCaseOptionsLowercase">
      <summary>Change selected text to lowercase.</summary>
    </member>
    <member name="F:EnvDTE.vsCaseOptions.vsCaseOptionsUppercase">
      <summary>Change selected text to uppercase.</summary>
    </member>
    <member name="F:EnvDTE.vsCaseOptions.vsCaseOptionsCapitalize">
      <summary>Capitalize the first letter of each word of the selected text.</summary>
    </member>
    <member name="T:EnvDTE.vsCMAccess">
      <summary>Used to determine how a code element may be accessed by other code.</summary>
    </member>
    <member name="F:EnvDTE.vsCMAccess.vsCMAccessPublic">
      <summary>Element has public access.</summary>
    </member>
    <member name="F:EnvDTE.vsCMAccess.vsCMAccessPrivate">
      <summary>Element has private access.</summary>
    </member>
    <member name="F:EnvDTE.vsCMAccess.vsCMAccessProject">
      <summary>Element has project access.</summary>
    </member>
    <member name="F:EnvDTE.vsCMAccess.vsCMAccessProtected">
      <summary>Element has protected access.</summary>
    </member>
    <member name="F:EnvDTE.vsCMAccess.vsCMAccessDefault">
      <summary>Element has default access.</summary>
    </member>
    <member name="F:EnvDTE.vsCMAccess.vsCMAccessAssemblyOrFamily">
      <summary>Element has assembly or family access.</summary>
    </member>
    <member name="F:EnvDTE.vsCMAccess.vsCMAccessWithEvents">
      <summary>Element can be accessed via WithEvents.</summary>
    </member>
    <member name="F:EnvDTE.vsCMAccess.vsCMAccessProjectOrProtected">
      <summary>Element has project or protected access.</summary>
    </member>
    <member name="T:EnvDTE.vsCMElement">
      <summary>Indicates the type of code element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementOther">
      <summary>An element not in the list.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementClass">
      <summary>A class element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementFunction">
      <summary>A function element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementVariable">
      <summary>A variable element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementProperty">
      <summary>A property element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementNamespace">
      <summary>A namespace element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementParameter">
      <summary>A parameter element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementAttribute">
      <summary>An attribute element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementInterface">
      <summary>An interface element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementDelegate">
      <summary>A delegate element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementEnum">
      <summary>An enumerator element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementStruct">
      <summary>A structure element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementUnion">
      <summary>A union element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementLocalDeclStmt">
      <summary>A local declaration statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementFunctionInvokeStmt">
      <summary>A function invoke statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementPropertySetStmt">
      <summary>A property set statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementAssignmentStmt">
      <summary>An assignment statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementInheritsStmt">
      <summary>An inherits statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementImplementsStmt">
      <summary>An implements statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementOptionStmt">
      <summary>An option statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementVBAttributeStmt">
      <summary>A VB attributes statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementVBAttributeGroup">
      <summary>A VB attribute group element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementEventsDeclaration">
      <summary>An events declaration element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementUDTDecl">
      <summary>A user-defined type declaration element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementDeclareDecl">
      <summary>A declare declaration element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementDefineStmt">
      <summary>A define statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementTypeDef">
      <summary>A type definition element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementIncludeStmt">
      <summary>An include statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementUsingStmt">
      <summary>A using statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementMacro">
      <summary>A macro element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementMap">
      <summary>A map element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementIDLImport">
      <summary>An IDL import element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementIDLImportLib">
      <summary>An IDL import library element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementIDLCoClass">
      <summary>An IDL co-class element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementIDLLibrary">
      <summary>An IDL library element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementImportStmt">
      <summary>An import statement element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementMapEntry">
      <summary>A map entry element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementVCBase">
      <summary>A VC base element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementEvent">
      <summary>An event element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMElement.vsCMElementModule">
      <summary>A module element.</summary>
    </member>
    <member name="T:EnvDTE.vsCMFunction">
      <summary>A constant indicating the type of function, such as a property-get or a method.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionOther">
      <summary>A type of function not in this list.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionConstructor">
      <summary>A constructor.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionPropertyGet">
      <summary>A property get.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionPropertyLet">
      <summary>A property let.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionPropertySet">
      <summary>A property set.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionPutRef">
      <summary>A put reference.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionPropertyAssign">
      <summary>A property assignment function.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionSub">
      <summary>A subexpression.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionFunction">
      <summary>A function.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionTopLevel">
      <summary>A top-level function.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionDestructor">
      <summary>A destructor.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionOperator">
      <summary>An operator.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionVirtual">
      <summary>A virtual function.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionPure">
      <summary>A pure function.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionConstant">
      <summary>A constant.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionShared">
      <summary>A shared function.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionInline">
      <summary>An inline function.</summary>
    </member>
    <member name="F:EnvDTE.vsCMFunction.vsCMFunctionComMethod">
      <summary>A COM method.</summary>
    </member>
    <member name="T:EnvDTE.vsCMInfoLocation">
      <summary>A constant indicating the abilities of the given code model object.</summary>
    </member>
    <member name="F:EnvDTE.vsCMInfoLocation.vsCMInfoLocationProject">
      <summary>Indicates if the code model element is located in the same project file. This is important when attempting to navigate to a specific code element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMInfoLocation.vsCMInfoLocationExternal">
      <summary>Information is obtained from external files. Information is available only from metadata, from inspecting a DLL, or from frozen sources (such as shipping MFC sources). You may be able to get a StartPoint and EditPoint, but you cannot edit them, and you cannot set properties or modify the text behind the code element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMInfoLocation.vsCMInfoLocationNone">
      <summary>No additional information is available. All you have is a code model object that has a name. By its context in the source, you might, for example, infer that the name should be a class or interface. Because the code model could not resolve the name to any real information, however, the object is otherwise useless.</summary>
    </member>
    <member name="F:EnvDTE.vsCMInfoLocation.vsCMInfoLocationVirtual">
      <summary>Information is obtained from a virtual project.</summary>
    </member>
    <member name="T:EnvDTE.vsCMPart">
      <summary>Represents the portion of a code construct.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartName">
      <summary>The name of the code construct.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartAttributes">
      <summary>The attributes that apply to the code construct, minus the attribute delimiters.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartHeader">
      <summary>The header of the code construct.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartWhole">
      <summary>The entire code construct.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartBody">
      <summary>The body of the code construct, minus the body delimiters.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartNavigate">
      <summary>The location in the source code to which the insertion point moves when you double-click an element in Class View.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartAttributesWithDelimiter">
      <summary>The applicable attributes and the attribute delimiters.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartBodyWithDelimiter">
      <summary>The body of the code construct and its delimiters.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartHeaderWithAttributes">
      <summary>The code construct's header and its attributes.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPart.vsCMPartWholeWithAttributes">
      <summary>The entire code construct and its attributes.</summary>
    </member>
    <member name="T:EnvDTE.vsCMPrototype">
      <summary>A constant specifying prototype options.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPrototype.vsCMPrototypeFullname">
      <summary>Indicates that the code element's full name should be used if it is applicable. This means that classes and namespaces, for example, would have fully qualified names.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPrototype.vsCMPrototypeNoName">
      <summary>Do not include the name in the prototype string. This flag is incompatible with other flags that request specific name information.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPrototype.vsCMPrototypeClassName">
      <summary>If the code element is a member of a class, then include the element's name qualified with a prefix of the class name and a period (.).</summary>
    </member>
    <member name="F:EnvDTE.vsCMPrototype.vsCMPrototypeParamTypes">
      <summary>Include parameter types in the prototype string.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPrototype.vsCMPrototypeParamNames">
      <summary>Include parameter names in the prototype string.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPrototype.vsCMPrototypeParamDefaultValues">
      <summary>Include parameter default value expressions in the prototype string.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPrototype.vsCMPrototypeUniqueSignature">
      <summary>Returns a unique specifier suitable for indexing or searching for this code element later. This can be used, for example, for inserting text to create an overridden or overloaded code element.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPrototype.vsCMPrototypeType">
      <summary>Prefix the returned string with the function or variable's type.</summary>
    </member>
    <member name="F:EnvDTE.vsCMPrototype.vsCMPrototypeInitExpression">
      <summary>Include the variable's initialization expression in the prototype string.</summary>
    </member>
    <member name="T:EnvDTE.vsCMTypeRef">
      <summary>The data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefOther">
      <summary>Data type not in this list</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefCodeType">
      <summary>CodeType</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefArray">
      <summary>Array</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefVoid">
      <summary>Void</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefPointer">
      <summary>Pointer</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefString">
      <summary>String</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefObject">
      <summary>Object</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefByte">
      <summary>Byte</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefChar">
      <summary>Char</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefShort">
      <summary>Short</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefInt">
      <summary>Int </summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefLong">
      <summary>Long</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefFloat">
      <summary>Float</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefDouble">
      <summary>Double</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefDecimal">
      <summary>Decimal</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefBool">
      <summary>Bool (Boolean)</summary>
    </member>
    <member name="F:EnvDTE.vsCMTypeRef.vsCMTypeRefVariant">
      <summary>Variant</summary>
    </member>
    <member name="T:EnvDTE.vsCommandBarType">
      <summary>Represents the scope of the build.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandBarType.vsCommandBarTypePopup">
      <summary>A toolbar command bar</summary>
    </member>
    <member name="F:EnvDTE.vsCommandBarType.vsCommandBarTypeToolbar">
      <summary>A menu command bar</summary>
    </member>
    <member name="F:EnvDTE.vsCommandBarType.vsCommandBarTypeMenu">
      <summary>A popup command bar</summary>
    </member>
    <member name="T:EnvDTE.vsCommandDisabledFlags">
      <summary>Describes the accessibility of menu items and toolbars.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandDisabledFlags.vsCommandDisabledFlagsEnabled">
      <summary>Item is enabled.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandDisabledFlags.vsCommandDisabledFlagsGrey">
      <summary>Item is disabled.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandDisabledFlags.vsCommandDisabledFlagsHidden">
      <summary>Item is hidden.</summary>
    </member>
    <member name="T:EnvDTE.vsCommandExecOption">
      <summary>A constant specifying the execution options.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandExecOption.vsCommandExecOptionDoDefault">
      <summary>Performs the default behavior, whether prompting the user for input or not.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandExecOption.vsCommandExecOptionPromptUser">
      <summary>Executes the command without prompting the user. For example, clicking Print on the toolbar causes a document to immediately print without user input.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandExecOption.vsCommandExecOptionDoPromptUser">
      <summary>Executes the command after obtaining user input.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandExecOption.vsCommandExecOptionShowHelp">
      <summary>Shows help for the corresponding command, if it exists, but does not execute the command.</summary>
    </member>
    <member name="T:EnvDTE.vsCommandStatus">
      <summary>The current status of the command.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandStatus.vsCommandStatusUnsupported">
      <summary>The command is not supported in this context.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandStatus.vsCommandStatusSupported">
      <summary>The command is supported in this context.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandStatus.vsCommandStatusEnabled">
      <summary>The command is currently enabled.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandStatus.vsCommandStatusLatched">
      <summary>The command is currently latched.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandStatus.vsCommandStatusNinched">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandStatus.vsCommandStatusInvisible">
      <summary>The command is currently hidden.</summary>
    </member>
    <member name="T:EnvDTE.vsCommandStatusTextWanted">
      <summary>A constant specifying if information is returned from the check, and if so, what type of information is returned.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandStatusTextWanted.vsCommandStatusTextWantedNone">
      <summary>No information is returned.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandStatusTextWanted.vsCommandStatusTextWantedName">
      <summary>The name of the command is returned.</summary>
    </member>
    <member name="F:EnvDTE.vsCommandStatusTextWanted.vsCommandStatusTextWantedStatus">
      <summary>The status of the command is returned.</summary>
    </member>
    <member name="T:EnvDTE.vsConfigurationType">
      <summary>Represents the type of build configuration.</summary>
    </member>
    <member name="F:EnvDTE.vsConfigurationType.vsConfigurationTypeProject">
      <summary>A project configuration</summary>
    </member>
    <member name="F:EnvDTE.vsConfigurationType.vsConfigurationTypeProjectItem">
      <summary>A project item configuration</summary>
    </member>
    <member name="T:EnvDTE.vsContextAttributes">
      <summary>Represents context attributes.</summary>
    </member>
    <member name="F:EnvDTE.vsContextAttributes.vsContextAttributesGlobal">
      <summary>Global context attribute</summary>
    </member>
    <member name="F:EnvDTE.vsContextAttributes.vsContextAttributesWindow">
      <summary>Window context attribute</summary>
    </member>
    <member name="F:EnvDTE.vsContextAttributes.vsContextAttributesHighPriority">
      <summary>High-priority context attribute</summary>
    </member>
    <member name="T:EnvDTE.vsContextAttributeType">
      <summary>Specifies the type of new attribute.</summary>
    </member>
    <member name="F:EnvDTE.vsContextAttributeType.vsContextAttributeFilter">
      <summary>A filter attribute.</summary>
    </member>
    <member name="F:EnvDTE.vsContextAttributeType.vsContextAttributeLookup">
      <summary>A search keyword.</summary>
    </member>
    <member name="F:EnvDTE.vsContextAttributeType.vsContextAttributeLookupF1">
      <summary>An F1 keyword. This is a higher priority than a search keyword. Only one F1 keyword is allowed per collection.</summary>
    </member>
    <member name="T:EnvDTE.vsDisplay">
      <summary>Represents the display mode of the integrated development environment (IDE).</summary>
    </member>
    <member name="F:EnvDTE.vsDisplay.vsDisplayMDI">
      <summary>IDE displays in MDI (multiple-document interface, where all windows are contained within the parent environment window) mode.</summary>
    </member>
    <member name="F:EnvDTE.vsDisplay.vsDisplayMDITabs">
      <summary>IDE displays in tabbed MDI mode, where multiple windows display tabbed on top of each other.</summary>
    </member>
    <member name="T:EnvDTE.vsEPReplaceTextOptions">
      <summary>Represents the edit behavior in an <see cref="M:EnvDTE.EditPoint.ReplaceText(System.Object,System.String,System.Int32)" /> action.</summary>
    </member>
    <member name="F:EnvDTE.vsEPReplaceTextOptions.vsEPReplaceTextKeepMarkers">
      <summary>Retains existing markers (for breakpoints, named shortcuts, and so forth) in their current locations.</summary>
    </member>
    <member name="F:EnvDTE.vsEPReplaceTextOptions.vsEPReplaceTextNormalizeNewlines">
      <summary>Uses the text buffer's default newline sequence.</summary>
    </member>
    <member name="F:EnvDTE.vsEPReplaceTextOptions.vsEPReplaceTextTabsSpaces">
      <summary>Keeps the value of Text and process tabs and spaces according to the value of the KeepTabs setting in the TextEditorOptions dialog box.</summary>
    </member>
    <member name="F:EnvDTE.vsEPReplaceTextOptions.vsEPReplaceTextAutoformat">
      <summary>Inserts text and automatically formats it.</summary>
    </member>
    <member name="T:EnvDTE.VSEXECRESULT">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.VSEXECRESULT.RESULT_Success">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.VSEXECRESULT.RESULT_Failure">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.VSEXECRESULT.RESULT_Cancel">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsext_Build">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.vsext_Build.vsext_bld_SAVE_CHANGES">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_Build.vsext_bld_CONFIRM_SAVE">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_Build.vsext_bld_NO_SAVE">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsext_DisplayMode">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.vsext_DisplayMode.vsext_dm_SDI">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_DisplayMode.vsext_dm_MDI">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsext_FontCharSet">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_ANSI">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_DEFAULT">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_SYMBOL">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_SHIFTJIS">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_HANGEUL">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_GB2312">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_CHINESEBIG5">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_OEM">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_JOHAB">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_HEBREW">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_ARABIC">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_GREEK">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_TURKISH">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_VIETNAMESE">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_THAI">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_EASTEUROPE">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_RUSSIAN">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_MAC">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_FontCharSet.vsext_fontcs_BALTIC">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsext_LinkedWindowType">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.vsext_LinkedWindowType.vsext_lwt_Docked">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_LinkedWindowType.vsext_lwt_Tabbed">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsext_StartUp">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.vsext_StartUp.vsext_su_EMPTY_ENVIRONMENT">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_StartUp.vsext_su_NEW_SOLUTION_DIALOG">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_StartUp.vsext_su_LOAD_LAST_SOLUTION">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsext_WindowState">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowState.vsext_ws_Normal">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowState.vsext_ws_Minimize">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowState.vsext_ws_Maximize">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsext_WindowType">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_CodeWindow">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Designer">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Browser">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Watch">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Locals">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Immediate">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_ProjectWindow">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_PropertyWindow">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Find">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_FindReplace">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Toolbox">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_LinkedWindowFrame">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_MainWindow">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Preview">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_ColorPalette">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_ToolWindow">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Document">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_OutPutWindow">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_TaskList">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Autos">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_CallStack">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_Threads">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_DocumentOutline">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsext_WindowType.vsext_wt_RunningDocuments">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsFilterProperties">
      <summary>Determines whether a property displays or not.</summary>
    </member>
    <member name="F:EnvDTE.vsFilterProperties.vsFilterPropertiesNone">
      <summary>The property is not hidden.</summary>
    </member>
    <member name="F:EnvDTE.vsFilterProperties.vsFilterPropertiesAll">
      <summary>The property is hidden.</summary>
    </member>
    <member name="F:EnvDTE.vsFilterProperties.vsFilterPropertiesSet">
      <summary>The property is read-only.</summary>
    </member>
    <member name="T:EnvDTE.vsFindAction">
      <summary>Represents the type of find action to take.</summary>
    </member>
    <member name="F:EnvDTE.vsFindAction.vsFindActionFind">
      <summary>Finds the next matching word in the document.</summary>
    </member>
    <member name="F:EnvDTE.vsFindAction.vsFindActionFindAll">
      <summary>Finds all matching words in the document.</summary>
    </member>
    <member name="F:EnvDTE.vsFindAction.vsFindActionReplace">
      <summary>Replaces the current matching word and finds the next matching word.</summary>
    </member>
    <member name="F:EnvDTE.vsFindAction.vsFindActionReplaceAll">
      <summary>Replaces all matching words in the document.</summary>
    </member>
    <member name="F:EnvDTE.vsFindAction.vsFindActionBookmarkAll">
      <summary>Bookmarks each instance that is found.</summary>
    </member>
    <member name="T:EnvDTE.vsFindOptions">
      <summary>Represents the behavior of the ReplacePattern method, such as how to search, where to begin the search, whether to search forward or backward, and the case sensitivity.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsNone">
      <summary>No matching.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsMatchWholeWord">
      <summary>Matches whole word in search.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsMatchCase">
      <summary>Matches case of word in search.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsRegularExpression">
      <summary>Matches regular expression.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsBackwards">
      <summary>Searches backward from current point.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsFromStart">
      <summary>Begins search at beginning of document.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsMatchInHiddenText">
      <summary>Looks for text matches in hidden text as well as nonhidden text. The <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsMatchInHiddenText" /> constant value does not apply to the FindPattern method, because it searches all text, including hidden text.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsWildcards">
      <summary>Uses wildcards in string search.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsSearchSubfolders">
      <summary>Includes subfolders in word search.</summary>
    </member>
    <member name="F:EnvDTE.vsFindOptions.vsFindOptionsKeepModifiedDocumentsOpen">
      <summary>Does not close documents that have been modified by the search.</summary>
    </member>
    <member name="T:EnvDTE.vsFindPatternSyntax">
      <summary>Represents the type of syntax used for the search pattern.</summary>
    </member>
    <member name="F:EnvDTE.vsFindPatternSyntax.vsFindPatternSyntaxLiteral">
      <summary>Literal expression.</summary>
    </member>
    <member name="F:EnvDTE.vsFindPatternSyntax.vsFindPatternSyntaxRegExpr">
      <summary>Regular expression.</summary>
    </member>
    <member name="F:EnvDTE.vsFindPatternSyntax.vsFindPatternSyntaxWildcards">
      <summary>Wildcard expression.</summary>
    </member>
    <member name="T:EnvDTE.vsFindResult">
      <summary>Represents the results of a search.</summary>
    </member>
    <member name="F:EnvDTE.vsFindResult.vsFindResultNotFound">
      <summary>The search item was not found.</summary>
    </member>
    <member name="F:EnvDTE.vsFindResult.vsFindResultFound">
      <summary>The search item was found.</summary>
    </member>
    <member name="F:EnvDTE.vsFindResult.vsFindResultReplaceAndNotFound">
      <summary>The search item to replace was not found.</summary>
    </member>
    <member name="F:EnvDTE.vsFindResult.vsFindResultReplaceAndFound">
      <summary>The search item to replace was found.</summary>
    </member>
    <member name="F:EnvDTE.vsFindResult.vsFindResultReplaced">
      <summary>The search item was replaced.</summary>
    </member>
    <member name="F:EnvDTE.vsFindResult.vsFindResultPending">
      <summary>The search has not yet completed.</summary>
    </member>
    <member name="F:EnvDTE.vsFindResult.vsFindResultError">
      <summary>The search resulted in an error.</summary>
    </member>
    <member name="T:EnvDTE.vsFindResultsLocation">
      <summary>Determines the location where the Find Results list displays.</summary>
    </member>
    <member name="F:EnvDTE.vsFindResultsLocation.vsFindResultsNone">
      <summary>Results are not displayed.</summary>
    </member>
    <member name="F:EnvDTE.vsFindResultsLocation.vsFindResults1">
      <summary>Find Results list number one. (Default)</summary>
    </member>
    <member name="F:EnvDTE.vsFindResultsLocation.vsFindResults2">
      <summary>Find Results list number two.</summary>
    </member>
    <member name="T:EnvDTE.vsFindTarget">
      <summary>Indicates the target for the search operation, such as the current document or files on disk.</summary>
    </member>
    <member name="F:EnvDTE.vsFindTarget.vsFindTargetCurrentDocument">
      <summary>Searches for a match in the current document. (Default)</summary>
    </member>
    <member name="F:EnvDTE.vsFindTarget.vsFindTargetCurrentDocumentSelection">
      <summary>Searches for a match in the selected text in the document.</summary>
    </member>
    <member name="F:EnvDTE.vsFindTarget.vsFindTargetCurrentDocumentFunction">
      <summary>Searches the current document for a match in a function. You do not need to select the function before searching it.</summary>
    </member>
    <member name="F:EnvDTE.vsFindTarget.vsFindTargetOpenDocuments">
      <summary>Searches for a match in all open documents.</summary>
    </member>
    <member name="F:EnvDTE.vsFindTarget.vsFindTargetCurrentProject">
      <summary>Searches for a match in the current project.</summary>
    </member>
    <member name="F:EnvDTE.vsFindTarget.vsFindTargetSolution">
      <summary>Searches for a match in the open solution.</summary>
    </member>
    <member name="F:EnvDTE.vsFindTarget.vsFindTargetFiles">
      <summary>Searches for a match in the specified file(s).</summary>
    </member>
    <member name="T:EnvDTE.vsFontCharSet">
      <summary>Enumeration describing what character set to use when displaying items in the integrated development environment (IDE).</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetANSI">
      <summary>ANSI</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetDefault">
      <summary>Default</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetSymbol">
      <summary>Symbols</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetShiftJIS">
      <summary>Japanese</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetHangeul">
      <summary>Korean</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetGB2312">
      <summary>Simple Chinese</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetChineseBig5">
      <summary>Traditional Chinese</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetOEM">
      <summary>OEM</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetJohab">
      <summary>Korean (Johab encoding)</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetHebrew">
      <summary>Hebrew</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetArabic">
      <summary>Arabic</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetGreek">
      <summary>Greek</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetTurkish">
      <summary>Turkish</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetVietnamese">
      <summary>Vietnamese</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetThai">
      <summary>Thai</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetEastEurope">
      <summary>East Europe</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetRussian">
      <summary>Russian</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetMac">
      <summary>Macintosh</summary>
    </member>
    <member name="F:EnvDTE.vsFontCharSet.vsFontCharSetBaltic">
      <summary>Baltic</summary>
    </member>
    <member name="T:EnvDTE.vsGoToLineOptions">
      <summary>Determines whether the line navigated to is the first or last line of the document.</summary>
    </member>
    <member name="F:EnvDTE.vsGoToLineOptions.vsGoToLineOptionsLast">
      <summary>Goes to the last line.</summary>
    </member>
    <member name="F:EnvDTE.vsGoToLineOptions.vsGoToLineOptionsFirst">
      <summary>Goes to the first line.</summary>
    </member>
    <member name="T:EnvDTE.vsHTMLTabs">
      <summary>Indicates the active tab of an open HTML document.</summary>
    </member>
    <member name="F:EnvDTE.vsHTMLTabs.vsHTMLTabsSource">
      <summary>The source tab.</summary>
    </member>
    <member name="F:EnvDTE.vsHTMLTabs.vsHTMLTabsDesign">
      <summary>The design tab.</summary>
    </member>
    <member name="T:EnvDTE.vsIDEMode">
      <summary>Represents the mode of the integrated development environment (IDE).</summary>
    </member>
    <member name="F:EnvDTE.vsIDEMode.vsIDEModeDesign">
      <summary>The IDE is in Design mode.</summary>
    </member>
    <member name="F:EnvDTE.vsIDEMode.vsIDEModeDebug">
      <summary>The IDE is in Debug mode.</summary>
    </member>
    <member name="T:EnvDTE.vsIndentStyle">
      <summary>Indicates how indenting is handled in a code editor.</summary>
    </member>
    <member name="F:EnvDTE.vsIndentStyle.vsIndentStyleNone">
      <summary>Indicates no indenting.</summary>
    </member>
    <member name="F:EnvDTE.vsIndentStyle.vsIndentStyleDefault">
      <summary>Indicates block indenting.</summary>
    </member>
    <member name="F:EnvDTE.vsIndentStyle.vsIndentStyleSmart">
      <summary>Indicates language style specific indenting.</summary>
    </member>
    <member name="T:EnvDTE.vsInitializeMode">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:EnvDTE.vsInitializeMode.vsInitializeModeStartup">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsInitializeMode.vsInitializeModeReset">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsInsertFlags">
      <summary>Indicates how to insert text into a document.</summary>
    </member>
    <member name="F:EnvDTE.vsInsertFlags.vsInsertFlagsCollapseToEnd">
      <summary>Default. After the text is inserted, the insertion point is moved to the right side of the selection and the selected text is unselected (or collapsed).</summary>
    </member>
    <member name="F:EnvDTE.vsInsertFlags.vsInsertFlagsCollapseToStart">
      <summary>After the text is inserted, the insertion point is moved to the left side of the selection and the selected text is unselected (or, collapsed).</summary>
    </member>
    <member name="F:EnvDTE.vsInsertFlags.vsInsertFlagsContainNewText">
      <summary>The specified text overwrites the selected text.</summary>
    </member>
    <member name="F:EnvDTE.vsInsertFlags.vsInsertFlagsInsertAtEnd">
      <summary>The specified text is inserted at the end of the document.</summary>
    </member>
    <member name="F:EnvDTE.vsInsertFlags.vsInsertFlagsInsertAtStart">
      <summary>The specified text is inserted at the beginning of the document.</summary>
    </member>
    <member name="T:EnvDTE.vsLinkedWindowType">
      <summary>Represents the state of a given window.</summary>
    </member>
    <member name="F:EnvDTE.vsLinkedWindowType.vsLinkedWindowTypeDocked">
      <summary>The window is docked.</summary>
    </member>
    <member name="F:EnvDTE.vsLinkedWindowType.vsLinkedWindowTypeVertical">
      <summary>The windows are joined at the same level side by side.</summary>
    </member>
    <member name="F:EnvDTE.vsLinkedWindowType.vsLinkedWindowTypeHorizontal">
      <summary>The windows are joined at the same level, one above the other.</summary>
    </member>
    <member name="F:EnvDTE.vsLinkedWindowType.vsLinkedWindowTypeTabbed">
      <summary>The windows are tabbed, that is, they are stacked on top of each other with tabs at the top.</summary>
    </member>
    <member name="T:EnvDTE.vsMovementOptions">
      <summary>Indicates changes to the TextSelection object.</summary>
    </member>
    <member name="F:EnvDTE.vsMovementOptions.vsMovementOptionsMove">
      <summary>Move the TextSelection object.</summary>
    </member>
    <member name="F:EnvDTE.vsMovementOptions.vsMovementOptionsExtend">
      <summary>Extend the TextSelection object.</summary>
    </member>
    <member name="T:EnvDTE.vsMoveToColumnLine">
      <summary>Indicates positional changes to the EndPoint object.</summary>
    </member>
    <member name="F:EnvDTE.vsMoveToColumnLine.vsMoveToColumnLineFirst">
      <summary>Move to the first column of the first line.</summary>
    </member>
    <member name="F:EnvDTE.vsMoveToColumnLine.vsMoveToColumnLineLast">
      <summary>Move to the last column of the last line.</summary>
    </member>
    <member name="T:EnvDTE.vsNavigateBrowser">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:EnvDTE.vsNavigateBrowser.vsNavigateBrowserDefault">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsNavigateBrowser.vsNavigateBrowserHelp">
      <summary> </summary>
    </member>
    <member name="F:EnvDTE.vsNavigateBrowser.vsNavigateBrowserNewWindow">
      <summary> </summary>
    </member>
    <member name="T:EnvDTE.vsNavigateOptions">
      <summary>Determines whether the browsed content displays in the last active Web browser window or in a new Web browser window.</summary>
    </member>
    <member name="F:EnvDTE.vsNavigateOptions.vsNavigateOptionsDefault">
      <summary>The Web page opens in the currently open browser window. (Default)</summary>
    </member>
    <member name="F:EnvDTE.vsNavigateOptions.vsNavigateOptionsNewWindow">
      <summary>The Web page opens in a new browser window.</summary>
    </member>
    <member name="T:EnvDTE.vsPaneShowHow">
      <summary>Determines how to display selected text or code.</summary>
    </member>
    <member name="F:EnvDTE.vsPaneShowHow.vsPaneShowCentered">
      <summary>Centers the text pane around the indicated text.</summary>
    </member>
    <member name="F:EnvDTE.vsPaneShowHow.vsPaneShowTop">
      <summary>Puts the first line at the top of the page.</summary>
    </member>
    <member name="F:EnvDTE.vsPaneShowHow.vsPaneShowAsIs">
      <summary>The displayed lines remain the same unless it is necessary to move the display to show the text.</summary>
    </member>
    <member name="T:EnvDTE.vsPromptResult">
      <summary>Describes the user's action after a dialog box is displayed.</summary>
    </member>
    <member name="F:EnvDTE.vsPromptResult.vsPromptResultYes">
      <summary>User pressed Yes.</summary>
    </member>
    <member name="F:EnvDTE.vsPromptResult.vsPromptResultNo">
      <summary>User pressed No.</summary>
    </member>
    <member name="F:EnvDTE.vsPromptResult.vsPromptResultCancelled">
      <summary>User pressed Cancel.</summary>
    </member>
    <member name="T:EnvDTE.vsSaveChanges">
      <summary>Determines how to save an item or items.</summary>
    </member>
    <member name="F:EnvDTE.vsSaveChanges.vsSaveChangesYes">
      <summary>If changes were made, saves the document.</summary>
    </member>
    <member name="F:EnvDTE.vsSaveChanges.vsSaveChangesNo">
      <summary>If changes were made, does not save the document.</summary>
    </member>
    <member name="F:EnvDTE.vsSaveChanges.vsSaveChangesPrompt">
      <summary>If changes were made, prompts the user to save the document.</summary>
    </member>
    <member name="T:EnvDTE.vsSaveStatus">
      <summary>Indicates whether or not the save was successful.</summary>
    </member>
    <member name="F:EnvDTE.vsSaveStatus.vsSaveCancelled">
      <summary>The document save was canceled.</summary>
    </member>
    <member name="F:EnvDTE.vsSaveStatus.vsSaveSucceeded">
      <summary>The document was saved successfully.</summary>
    </member>
    <member name="T:EnvDTE.vsSelectionMode">
      <summary>Indicates the type of selection that <see cref="T:EnvDTE.TextSelection" /> represents.</summary>
    </member>
    <member name="F:EnvDTE.vsSelectionMode.vsSelectionModeStream">
      <summary>The nonempty selection is a stream mode selection. (Default)</summary>
    </member>
    <member name="F:EnvDTE.vsSelectionMode.vsSelectionModeBox">
      <summary>The nonempty selection is a block mode selection.</summary>
    </member>
    <member name="T:EnvDTE.vsSmartFormatOptions">
      <summary>Determines the type of formatting applied to selected code.</summary>
    </member>
    <member name="F:EnvDTE.vsSmartFormatOptions.vsSmartFormatOptionsNone">
      <summary>No formatting is applied to the code.</summary>
    </member>
    <member name="F:EnvDTE.vsSmartFormatOptions.vsSmartFormatOptionsBlock">
      <summary>Code is block-formatted.</summary>
    </member>
    <member name="F:EnvDTE.vsSmartFormatOptions.vsSmartFormatOptionsSmart">
      <summary>Code is smart-formatted according to the rules of that language.</summary>
    </member>
    <member name="T:EnvDTE.vsStartOfLineOptions">
      <summary>Represents where to move the <see cref="T:EnvDTE.TextSelection" /> object when moving to the beginning of the line.</summary>
    </member>
    <member name="F:EnvDTE.vsStartOfLineOptions.vsStartOfLineOptionsFirstColumn">
      <summary>Goes to the first character in the line, white space or not, which is column zero. (Default)</summary>
    </member>
    <member name="F:EnvDTE.vsStartOfLineOptions.vsStartOfLineOptionsFirstText">
      <summary>Goes to the first nonwhite-space character in the line.</summary>
    </member>
    <member name="T:EnvDTE.vsStartUp">
      <summary>Specifies the startup state of the Visual Studio IDE.</summary>
    </member>
    <member name="F:EnvDTE.vsStartUp.vsStartUpShowHomePage">
      <summary>Show the Visual Studio home page on startup.</summary>
    </member>
    <member name="F:EnvDTE.vsStartUp.vsStartUpLoadLastSolution">
      <summary>Load the last solution on startup</summary>
    </member>
    <member name="F:EnvDTE.vsStartUp.vsStartUpOpenProjectDialog">
      <summary>Start with the Open project dialog.</summary>
    </member>
    <member name="F:EnvDTE.vsStartUp.vsStartUpNewProjectDialog">
      <summary>Start with the New Project dialog.</summary>
    </member>
    <member name="F:EnvDTE.vsStartUp.vsStartUpEmptyEnvironment">
      <summary>Start with an empty environment.</summary>
    </member>
    <member name="T:EnvDTE.vsStatusAnimation">
      <summary>Indicates the icon to display on the Status Bar.</summary>
    </member>
    <member name="F:EnvDTE.vsStatusAnimation.vsStatusAnimationGeneral">
      <summary>Displays a general activity animation.</summary>
    </member>
    <member name="F:EnvDTE.vsStatusAnimation.vsStatusAnimationPrint">
      <summary>Displays a printing animation.</summary>
    </member>
    <member name="F:EnvDTE.vsStatusAnimation.vsStatusAnimationSave">
      <summary>Displays a saving animation.</summary>
    </member>
    <member name="F:EnvDTE.vsStatusAnimation.vsStatusAnimationDeploy">
      <summary>Displays a deploying animation.</summary>
    </member>
    <member name="F:EnvDTE.vsStatusAnimation.vsStatusAnimationSync">
      <summary>Displays a sync animation.</summary>
    </member>
    <member name="F:EnvDTE.vsStatusAnimation.vsStatusAnimationBuild">
      <summary>Displays a building animation.</summary>
    </member>
    <member name="F:EnvDTE.vsStatusAnimation.vsStatusAnimationFind">
      <summary>Displays a finding animation.</summary>
    </member>
    <member name="T:EnvDTE.vsTaskCategories">
      <summary>Represents the type of task in the Task window.</summary>
    </member>
    <member name="F:EnvDTE.vsTaskCategories.vsTaskCategoryBuildCompile">
      <summary>Represents a build or compile error in the Task window.</summary>
    </member>
    <member name="F:EnvDTE.vsTaskCategories.vsTaskCategoryComment">
      <summary>Represents a comment in the Task window.</summary>
    </member>
    <member name="F:EnvDTE.vsTaskCategories.vsTaskCategoryHTML">
      <summary>Represent a comment from HTML in the Task window.</summary>
    </member>
    <member name="F:EnvDTE.vsTaskCategories.vsTaskCategoryMisc">
      <summary>Represents a miscellaneous comment in the Task window.</summary>
    </member>
    <member name="F:EnvDTE.vsTaskCategories.vsTaskCategoryShortcut">
      <summary>Represents a shortcut link in the Task window.</summary>
    </member>
    <member name="F:EnvDTE.vsTaskCategories.vsTaskCategoryUser">
      <summary>Represents a user defined task in the Task window.</summary>
    </member>
    <member name="T:EnvDTE.vsTaskIcon">
      <summary>Represents the category for the new task item.</summary>
    </member>
    <member name="F:EnvDTE.vsTaskIcon.vsTaskIconNone">
      <summary>No icon</summary>
    </member>
    <member name="F:EnvDTE.vsTaskIcon.vsTaskIconCompile">
      <summary>The compile error icon</summary>
    </member>
    <member name="F:EnvDTE.vsTaskIcon.vsTaskIconSquiggle">
      <summary>The smart editor icon</summary>
    </member>
    <member name="F:EnvDTE.vsTaskIcon.vsTaskIconComment">
      <summary>The comment task icon</summary>
    </member>
    <member name="F:EnvDTE.vsTaskIcon.vsTaskIconShortcut">
      <summary>The shortcut icon</summary>
    </member>
    <member name="F:EnvDTE.vsTaskIcon.vsTaskIconUser">
      <summary>The user-defined task icon</summary>
    </member>
    <member name="T:EnvDTE.vsTaskListColumn">
      <summary>Represents the column in the Task List that was modified.</summary>
    </member>
    <member name="F:EnvDTE.vsTaskListColumn.vsTaskListColumnPriority">
      <summary>The Priority column</summary>
    </member>
    <member name="F:EnvDTE.vsTaskListColumn.vsTaskListColumnGlyph">
      <summary>The Icon column</summary>
    </member>
    <member name="F:EnvDTE.vsTaskListColumn.vsTaskListColumnCheck">
      <summary>The Check column</summary>
    </member>
    <member name="F:EnvDTE.vsTaskListColumn.vsTaskListColumnDescription">
      <summary>The Description column</summary>
    </member>
    <member name="F:EnvDTE.vsTaskListColumn.vsTaskListColumnFile">
      <summary>The File column</summary>
    </member>
    <member name="F:EnvDTE.vsTaskListColumn.vsTaskListColumnLine">
      <summary>The Line column</summary>
    </member>
    <member name="T:EnvDTE.vsTaskPriority">
      <summary>Represents the priority for the new task item.</summary>
    </member>
    <member name="F:EnvDTE.vsTaskPriority.vsTaskPriorityLow">
      <summary>Low-priority task</summary>
    </member>
    <member name="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium">
      <summary>Medium-priority task</summary>
    </member>
    <member name="F:EnvDTE.vsTaskPriority.vsTaskPriorityHigh">
      <summary>High-priority task</summary>
    </member>
    <member name="T:EnvDTE.vsTextChanged">
      <summary>Indicates one or more reasons why the event occurred, which might help you understand what happened in the buffer.</summary>
    </member>
    <member name="F:EnvDTE.vsTextChanged.vsTextChangedMultiLine">
      <summary>A change to text occurred that affected more than one line, such as pasting with new lines, deleting across lines, or replacing all.</summary>
    </member>
    <member name="F:EnvDTE.vsTextChanged.vsTextChangedSave">
      <summary>A line was committed by saving the file.</summary>
    </member>
    <member name="F:EnvDTE.vsTextChanged.vsTextChangedCaretMoved">
      <summary>The insertion point was moved.</summary>
    </member>
    <member name="F:EnvDTE.vsTextChanged.vsTextChangedReplaceAll">
      <summary>A replace all operation occurred.</summary>
    </member>
    <member name="F:EnvDTE.vsTextChanged.vsTextChangedNewline">
      <summary>A new line was created.</summary>
    </member>
    <member name="F:EnvDTE.vsTextChanged.vsTextChangedFindStarting">
      <summary>A find operation moved the insertion point.</summary>
    </member>
    <member name="T:EnvDTE.vsToolBoxItemFormat">
      <summary>Indicates the format of the new ToolBox item.</summary>
    </member>
    <member name="F:EnvDTE.vsToolBoxItemFormat.vsToolBoxItemFormatText">
      <summary>Plain text item. Double-clicking the item places it into the active document. (Default)</summary>
    </member>
    <member name="F:EnvDTE.vsToolBoxItemFormat.vsToolBoxItemFormatHTML">
      <summary>HTML item. Text, but might be treated differently by certain active documents.</summary>
    </member>
    <member name="F:EnvDTE.vsToolBoxItemFormat.vsToolBoxItemFormatGUID">
      <summary>GUID. A string that is the class ID of a control.</summary>
    </member>
    <member name="F:EnvDTE.vsToolBoxItemFormat.vsToolBoxItemFormatDotNETComponent">
      <summary>.NET Framework component.</summary>
    </member>
    <member name="T:EnvDTE.vsUISelectionType">
      <summary>Indicates how the selection is moved or extended in a UIHierarchy window.</summary>
    </member>
    <member name="F:EnvDTE.vsUISelectionType.vsUISelectionTypeSelect">
      <summary>The node is selected by itself.</summary>
    </member>
    <member name="F:EnvDTE.vsUISelectionType.vsUISelectionTypeToggle">
      <summary>The selection state is toggled on the new node. That is, if the node was selected, it is no longer. If it was not selected, it now is the only selected node.</summary>
    </member>
    <member name="F:EnvDTE.vsUISelectionType.vsUISelectionTypeExtend">
      <summary>The new node, the currently selected node, and all intervening nodes are selected.</summary>
    </member>
    <member name="F:EnvDTE.vsUISelectionType.vsUISelectionTypeSetCaret">
      <summary>The new node is not selected; only the focus is given to it.</summary>
    </member>
    <member name="T:EnvDTE.vsWhitespaceOptions">
      <summary>Determines how and where to remove white space.</summary>
    </member>
    <member name="F:EnvDTE.vsWhitespaceOptions.vsWhitespaceOptionsHorizontal">
      <summary>Default. Deletes white space only on the current line in the buffer.</summary>
    </member>
    <member name="F:EnvDTE.vsWhitespaceOptions.vsWhitespaceOptionsVertical">
      <summary>Deletes white space above and below the current line in the buffer.</summary>
    </member>
    <member name="T:EnvDTE.vsWindowState">
      <summary>Represents the state of a given window.</summary>
    </member>
    <member name="F:EnvDTE.vsWindowState.vsWindowStateNormal">
      <summary>Window is normal.</summary>
    </member>
    <member name="F:EnvDTE.vsWindowState.vsWindowStateMinimize">
      <summary>Window is minimized.</summary>
    </member>
    <member name="F:EnvDTE.vsWindowState.vsWindowStateMaximize">
      <summary>Window is maximized.</summary>
    </member>
    <member name="T:EnvDTE.vsWindowType">
      <summary>Represents the different types of windows available in the integrated development environment (IDE).</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeCodeWindow">
      <summary>Code Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeDesigner">
      <summary>Designer Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeBrowser">
      <summary>Browser Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeWatch">
      <summary>Watch Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeLocals">
      <summary>Locals Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeImmediate">
      <summary>Immediate Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeSolutionExplorer">
      <summary>Solution Explorer Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeProperties">
      <summary>Properties Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeFind">
      <summary>Find Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeFindReplace">
      <summary>Find and Replace Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeToolbox">
      <summary>Toolbox Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeLinkedWindowFrame">
      <summary>Linked Window Frame Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeMainWindow">
      <summary>Main Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypePreview">
      <summary>Preview Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeColorPalette">
      <summary>Color Palette</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeToolWindow">
      <summary>ToolWindow Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeDocument">
      <summary>Document Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeOutput">
      <summary>Output Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeTaskList">
      <summary>TaskList Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeAutos">
      <summary>Autos Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeCallStack">
      <summary>Call Stack Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeThreads">
      <summary>Threads Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeDocumentOutline">
      <summary>Document Outline Window</summary>
    </member>
    <member name="F:EnvDTE.vsWindowType.vsWindowTypeRunningDocuments">
      <summary>Running Documents Window</summary>
    </member>
    <member name="T:EnvDTE.Window">
      <summary>The <see cref="T:EnvDTE.Window" /> object represents a window in the environment.</summary>
    </member>
    <member name="M:EnvDTE.Window.Activate">
      <summary>Moves the focus to the current item.</summary>
    </member>
    <member name="M:EnvDTE.Window.Attach(System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="lWindowHandle">The window handle.</param>
    </member>
    <member name="P:EnvDTE.Window.AutoHides">
      <summary>Gets or sets whether the tool window is able to be hidden.</summary>
      <returns>true if the tool window can be hidden; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.Window.Caption">
      <summary>Gets or sets the title of the window.</summary>
      <returns>The title of the window.</returns>
    </member>
    <member name="M:EnvDTE.Window.Close(EnvDTE.vsSaveChanges)">
      <summary>Closes the open document and optionally saves it, or closes and destroys the window.</summary>
      <param name="SaveChanges">Optional. A <see cref="T:EnvDTE.vsSaveChanges" /> constant that determines whether to save an item or items.</param>
    </member>
    <member name="P:EnvDTE.Window.Collection">
      <summary>Gets the collection containing the <see cref="T:EnvDTE.Window" /> object supporting this property.</summary>
      <returns>A <see cref="T:EnvDTE.Windows" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Window.ContextAttributes">
      <summary>Gets a <see cref="T:EnvDTE.ContextAttributes" /> collection which allows automation clients to add new attributes to the current selected items in the Dynamic Help window and provide contextual help for the additional attributes.</summary>
      <returns>A <see cref="T:EnvDTE.ContextAttributes" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.Window.Detach">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:EnvDTE.Window.Document">
      <summary>Gets the <see cref="T:EnvDTE.Document" /> object associated with the item, if one exists.</summary>
      <returns>A <see cref="T:EnvDTE.Document" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Window.DocumentData(System.String)">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The document data.</returns>
      <param name="bstrWhichData">The data.</param>
    </member>
    <member name="P:EnvDTE.Window.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Window.Height">
      <summary>Gets or sets a value indicating the dimensions of the window in pixels.</summary>
      <returns>The height dimension of the window in pixels.</returns>
    </member>
    <member name="P:EnvDTE.Window.HWnd">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The window handle.</returns>
    </member>
    <member name="P:EnvDTE.Window.IsFloating">
      <summary>Gets or sets a value indicating whether the tool window is floating over other windows.</summary>
      <returns>true if the window is floating over other windows; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.Window.Kind">
      <summary>Gets a string indicating the type of window.</summary>
      <returns>A string representing the type of window.</returns>
    </member>
    <member name="P:EnvDTE.Window.Left">
      <summary>Gets or sets the distance between the internal left edge of an object and the left edge of its container.</summary>
      <returns>The distance between the internal left edge of an object and the left edge of its container.</returns>
    </member>
    <member name="P:EnvDTE.Window.Linkable">
      <summary>Gets or sets a value indicating whether the tool window can be docked with other tool windows.</summary>
      <returns>true if the window can be docked with other windows; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.Window.LinkedWindowFrame">
      <summary>Gets a <see cref="T:EnvDTE.Window" /> object representing the window frame containing the window.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Window.LinkedWindows">
      <summary>Gets a collection of all linked windows contained in the linked window frame.</summary>
      <returns>A <see cref="T:EnvDTE.LinkedWindows" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.Window.Object">
      <summary>Gets an object that can be accessed by name at run time.</summary>
      <returns>An object.</returns>
    </member>
    <member name="P:EnvDTE.Window.ObjectKind">
      <summary>Gets the type of the <see cref="T:EnvDTE.Window" /> object, which is a GUID string representing the tool contained in the window.</summary>
      <returns>A string containing a GUID representing the tool contained in the window.</returns>
    </member>
    <member name="P:EnvDTE.Window.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the <see cref="T:EnvDTE.Window" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Window.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the <see cref="T:EnvDTE.Window" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:EnvDTE.Window.Selection">
      <summary>Gets an object representing the current selection on the <see cref="T:EnvDTE.Window" /> object.</summary>
      <returns>An object representing the current selection on the <see cref="T:EnvDTE.Window" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Window.SetFocus">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.Window.SetKind(EnvDTE.vsWindowType)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="eKind">The window type.</param>
    </member>
    <member name="M:EnvDTE.Window.SetSelectionContainer(System.Object[]@)">
      <summary>Allows setting objects to be active in the Properties window when this window is active.</summary>
      <param name="Objects">Required. An array of objects for the Properties window.</param>
    </member>
    <member name="M:EnvDTE.Window.SetTabPicture(System.Object)">
      <summary>Sets the picture to display in a tool window.</summary>
      <param name="Picture">The picture to place into the tool window.</param>
    </member>
    <member name="P:EnvDTE.Window.Top">
      <summary>Gets or sets the distance between the internal top edge of an object and the top edge of its container.</summary>
      <returns>The distance between the internal top edge of an object and the top edge of its container.</returns>
    </member>
    <member name="P:EnvDTE.Window.Type">
      <summary>Microsoft Internal Use Only.</summary>
      <returns>The type.</returns>
    </member>
    <member name="P:EnvDTE.Window.Visible">
      <summary>Gets or sets the visibility of a window.</summary>
      <returns>true if the window is visible; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE.Window.Width">
      <summary>Gets or sets the width of the window in character units.</summary>
      <returns>The width of the window in character units.</returns>
    </member>
    <member name="P:EnvDTE.Window.WindowState">
      <summary>Gets or sets the state, such as minimized, normal, and so forth, of the window.</summary>
      <returns>A <see cref="T:EnvDTE.vsWindowState" /> constant.</returns>
    </member>
    <member name="T:EnvDTE.WindowConfiguration">
      <summary>The <see cref="T:EnvDTE.WindowConfiguration" /> object represents the layout and configuration of all windows in the Visual Studio environment. </summary>
    </member>
    <member name="M:EnvDTE.WindowConfiguration.Apply(System.Boolean)">
      <summary>Invokes a previously saved named window configuration.</summary>
      <param name="FromCustomViews">If this is true, the named view in the custom window configuration persistence is the search target. If this is false, then the installed, predefined persistence of window configurations is searched. The default is true.</param>
    </member>
    <member name="P:EnvDTE.WindowConfiguration.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.WindowConfigurations" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.WindowConfiguration.Delete">
      <summary>Removes the window configuration from the collection.</summary>
    </member>
    <member name="P:EnvDTE.WindowConfiguration.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE.WindowConfiguration.Name">
      <summary>Sets or gets the name of the object.</summary>
      <returns>A string representing the name of the object.</returns>
    </member>
    <member name="M:EnvDTE.WindowConfiguration.Update">
      <summary>Updates the collection as if the user opened the Add-in Manager dialog box, or sets the object's window layout to the current window layout.</summary>
    </member>
    <member name="T:EnvDTE.WindowConfigurations">
      <summary>The <see cref="T:EnvDTE.WindowConfigurations" /> collection contains all named window configurations created for the environment.</summary>
    </member>
    <member name="P:EnvDTE.WindowConfigurations.ActiveConfigurationName">
      <summary>Gets the name of the currently active window configuration.</summary>
      <returns>A string representing the name of the currently active window configuration.</returns>
    </member>
    <member name="M:EnvDTE.WindowConfigurations.Add(System.String)">
      <summary>Creates a new named window configuration based on the current arrangement of windows, adds it to the <see cref="T:EnvDTE.WindowConfigurations" /> collection, and retains it for future recall.</summary>
      <returns>A <see cref="T:EnvDTE.WindowConfiguration" /> object.</returns>
      <param name="Name">Required. A string representing the name of the new window configuration.</param>
    </member>
    <member name="P:EnvDTE.WindowConfigurations.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>An integer value indicating the number of objects in the <see cref="T:EnvDTE.WindowConfigurations" /> collection.</returns>
    </member>
    <member name="P:EnvDTE.WindowConfigurations.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.WindowConfigurations.GetEnumerator">
      <summary>Gets an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.WindowConfigurations.Item(System.Object)">
      <summary>Returns an indexed member of a <see cref="T:EnvDTE.WindowConfigurations" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.WindowConfiguration" /> object.</returns>
      <param name="index">Required. The index of the item to return. </param>
    </member>
    <member name="P:EnvDTE.WindowConfigurations.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.WindowConfigurations" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="T:EnvDTE.WindowEvents">
      <summary>Provides events for changes made to Windows in the environment. Use this object for functionality and refer to <see cref="T:EnvDTE.WindowEventsClass" /> for this object’s documentation.</summary>
    </member>
    <member name="T:EnvDTE.WindowEventsClass">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.WindowEventsClass.#ctor">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="M:EnvDTE.WindowEventsClass.add_WindowActivated(EnvDTE._dispWindowEvents_WindowActivatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.WindowEventsClass.add_WindowClosing(EnvDTE._dispWindowEvents_WindowClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.WindowEventsClass.add_WindowCreated(EnvDTE._dispWindowEvents_WindowCreatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.WindowEventsClass.add_WindowMoved(EnvDTE._dispWindowEvents_WindowMovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.WindowEventsClass.remove_WindowActivated(EnvDTE._dispWindowEvents_WindowActivatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.WindowEventsClass.remove_WindowClosing(EnvDTE._dispWindowEvents_WindowClosingEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.WindowEventsClass.remove_WindowCreated(EnvDTE._dispWindowEvents_WindowCreatedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="M:EnvDTE.WindowEventsClass.remove_WindowMoved(EnvDTE._dispWindowEvents_WindowMovedEventHandler)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="A_1">The event handler.</param>
    </member>
    <member name="E:EnvDTE.WindowEventsClass.WindowActivated">
      <summary>Occurs when a window receives the focus.</summary>
    </member>
    <member name="E:EnvDTE.WindowEventsClass.WindowClosing">
      <summary>Occurs just before a window closes.</summary>
    </member>
    <member name="E:EnvDTE.WindowEventsClass.WindowCreated">
      <summary>Occurs when a new window is created.</summary>
    </member>
    <member name="E:EnvDTE.WindowEventsClass.WindowMoved">
      <summary>Occurs after a window is moved or resized.</summary>
    </member>
    <member name="T:EnvDTE.Windows">
      <summary>The <see cref="T:EnvDTE.Windows" /> collection contains all windows in the environment.</summary>
    </member>
    <member name="P:EnvDTE.Windows.Count">
      <summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.Windows" /> collection.</summary>
      <returns>The number of objects in the <see cref="T:EnvDTE.Windows" /> collection.</returns>
    </member>
    <member name="M:EnvDTE.Windows.CreateLinkedWindowFrame(EnvDTE.Window,EnvDTE.Window,EnvDTE.vsLinkedWindowType)">
      <summary>Creates a <see cref="T:EnvDTE.Window" /> object and places two windows in it.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
      <param name="Window1">Required. The first <see cref="T:EnvDTE.Window" /> object to link to the other.</param>
      <param name="Window2">Required. The second <see cref="T:EnvDTE.Window" /> object to link to the other.</param>
      <param name="Link">Required. A <see cref="T:EnvDTE.vsLinkedWindowType" /> constant indicating the way the windows should be joined.</param>
    </member>
    <member name="M:EnvDTE.Windows.CreateToolWindow(EnvDTE.AddIn,System.String,System.String,System.String,System.Object@)">
      <summary>Creates a new tool window containing the specified <see cref="T:EnvDTE.Document" /> object or ActiveX control.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
      <param name="AddInInst">Required. An <see cref="T:EnvDTE.AddIn" /> object whose lifetime determines the lifetime of the tool window.</param>
      <param name="ProgID">Required. The programmatic ID of the <see cref="T:EnvDTE.Document" /> object or ActiveX control.</param>
      <param name="Caption">Required. The caption for the new tool window.</param>
      <param name="GuidPosition">Required. A unique identifier for the new tool window, which can be used as an index to <see cref="M:EnvDTE.Windows.Item(System.Object)" />.</param>
      <param name="DocObj">Required. The <see cref="T:EnvDTE.Document" /> object or control to be hosted in the tool window.</param>
    </member>
    <member name="P:EnvDTE.Windows.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE.Windows.GetEnumerator">
      <summary>Returns an enumeration for items in a collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:EnvDTE.Windows.Item(System.Object)">
      <summary>Returns a <see cref="T:EnvDTE.Window" /> object in a <see cref="T:EnvDTE.Windows" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.Window" /> object.</returns>
      <param name="index">Required. The index of the <see cref="T:EnvDTE.Window" /> object to return. </param>
    </member>
    <member name="P:EnvDTE.Windows.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Windows" /> collection.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="T:EnvDTE.wizardResult">
      <summary>A constant specifying the results of the wizard.</summary>
    </member>
    <member name="F:EnvDTE.wizardResult.wizardResultSuccess">
      <summary>The wizard started successfully.</summary>
    </member>
    <member name="F:EnvDTE.wizardResult.wizardResultFailure">
      <summary>The wizard failed to start.</summary>
    </member>
    <member name="F:EnvDTE.wizardResult.wizardResultCancel">
      <summary>The wizard's startup was canceled.</summary>
    </member>
    <member name="F:EnvDTE.wizardResult.wizardResultBackOut">
      <summary>The user clicked the wizard's Back button, nullifying the changes made.</summary>
    </member>
  </members>
</doc>