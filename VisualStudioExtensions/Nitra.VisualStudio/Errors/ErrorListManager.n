using Nitra.Internal;

using Microsoft.VisualStudio;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;

using Microsoft.VisualStudio.TextManager.Interop;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Adornments;
using Microsoft.VisualStudio.Text.Tagging;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.VisualStudio
{
  [Record]
  public sealed class ErrorListManager : IServiceProvider, IDisposable
  {
    [RecordIgnore] mutable _errorListProvider    : ErrorListProvider;
    [RecordIgnore] mutable _isDisposed           : bool;
    private                _errorProviderFactory : IErrorProviderFactory;
    private                _buffer               : ITextBuffer;

    public GetService(serviceType : Type) : object
    {
      Package.GetGlobalService(serviceType)
    }

    public Dispose() : void
    {
      when (_errorListProvider != null)
      {
        _errorListProvider.Dispose();
        _errorListProvider = null;
      }
      _isDisposed = true;
      GC.SuppressFinalize(this);
    }

    protected override Finalize() : void
    {
      Dispose();
    }

    public ReportParseErrors(parseResult : ParseResult) : void
    {
      when (_isDisposed) return;

      def errorListProvider = InitErrorListProvider();
      errorListProvider.SuspendRefresh();
      try
      {
        def tasks = errorListProvider.Tasks;
        def snapshot = _buffer.CurrentSnapshot;
        def squiggles = _errorProviderFactory.GetErrorTagger(_buffer);
        _ = squiggles.RemoveTagSpans(_ => true);

        foreach (e in parseResult.GetErrors())
        {
          def error = ErrorTask();
          def loc = e.Location;
          error.ErrorCategory = TaskErrorCategory.Message;
          error.Category = TaskCategory.CodeSense;
          error.Text = e.Message;
          error.ErrorCategory = TaskErrorCategory.Error;
          def (line, col) = loc.StartLineColumn;
          error.Line = line - 1;
          error.Column = col - 1;
          assert2(IO.File.Exists(loc.Source.FileName));
          error.Document = loc.Source.FileName;
          error.Navigate += NavigateDocument;
          _ = tasks.Add(error);

          def spanStart  = loc.StartPos;
          def spanLength = if (spanStart < snapshot.Length) Math.Max(loc.Length, 1) else 0;
          def tspan = snapshot.CreateTrackingSpan(Span(spanStart, spanLength), SpanTrackingMode.EdgeInclusive);
          _ = squiggles.CreateTagSpan(tspan, ErrorTag(PredefinedErrorTypeNames.SyntaxError, e.Message));
        }
      }
      finally errorListProvider.ResumeRefresh();
    }

    public ReportParseException(fileName : string, ex : Exception) : void
    {
      when (_isDisposed) return;

      def errorListProvider = InitErrorListProvider();
      def error = ErrorTask();
      error.ErrorCategory = TaskErrorCategory.Error;
      error.Category = TaskCategory.All;
      error.Text = "INE: " + ex.Message + Environment.NewLine + @"Please contact developers.";
      error.ErrorCategory = TaskErrorCategory.Error;
      error.Document = fileName;
      _ = errorListProvider.Tasks.Add(error);
    }

    private InitErrorListProvider() : ErrorListProvider
    {
      assert(!_isDisposed);

      if (_errorListProvider == null)
      {
        _errorListProvider = ErrorListProvider(this);
        _errorListProvider.ProviderName = "ErrorListProvider";
        _errorListProvider.ProviderGuid = Guid.NewGuid();
      }
      else
        _errorListProvider.Tasks.Clear();

      _errorListProvider
    }

    private NavigateDocument(sender : object, _e : EventArgs) : void
    {
      if (sender is Task as task)
      {
        //use the helper class to handle the navigation
        OpenDocumentAndNavigateTo(task.Document, task.Line, task.Column);
      }
      else
        throw ArgumentException("sender");
    }

    private OpenDocumentAndNavigateTo(path : string, line : int, column : int) : void
    {
      def openDoc = GetService(typeof(IVsUIShellOpenDocument)) :> IVsUIShellOpenDocument;

      when (openDoc == null)
          return;

      mutable frame; // IVsWindowFrame
      mutable sp; // Microsoft.VisualStudio.OLE.Interop.IServiceProvider
      mutable hier; // IVsUIHierarchy
      mutable itemid; // uint
      mutable logicalView = VSConstants.LOGVIEWID_Code; // Guid

      when (ErrorHandler.Failed(openDoc.OpenDocumentViaProject(path, ref logicalView, out sp, out hier, out itemid, out frame)) || frame == null)
          return;

      mutable docData;
      _ = frame.GetProperty(__VSFPROPID.VSFPROPID_DocData :> int, out docData);

      // Get the VsTextBuffer
      def buffer =
        match (docData)
        {
          | x is VsTextBuffer => x //VsTextBuffer
          | bufferProvider is IVsTextBufferProvider =>
            mutable lines; // IVsTextLines
            _ = ErrorHandler.ThrowOnFailure(bufferProvider.GetTextBuffer(out lines));
            if ((lines : object) is VsTextBuffer as buffer)
              buffer
            else
            {
              assert2(false, "IVsTextLines does not implement IVsTextBuffer");
              null
            }

          | _ => null
        };

      when (buffer == null)
        return;

      // Finally, perform the navigation.
      def mgr = GetService(typeof(VsTextManagerClass)) :> IVsTextManager;
      when (mgr == null)
          return;

      _ = mgr.NavigateToLineAndColumn(buffer, ref logicalView, line, column, line, column);
    }
  }
}
