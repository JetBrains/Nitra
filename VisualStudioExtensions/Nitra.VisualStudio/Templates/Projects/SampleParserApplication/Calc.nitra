syntax module Calc
{
  using PrettyPrint;
  using Outline;
  using TokenNames;
  using StandardSpanClasses;
  using Whitespaces;
  using Identifiers;
  using CStyleComments;

  [StartRule]
  syntax Start = Expression !Any
  {
    Value() : double = Expression.Value();
  }

  extend token IgnoreToken
  {
    | [SpanClass(Comment)] SingleLineComment = SingleLineComment;
    | [SpanClass(Comment)] MultiLineComment;
  }

  regex Number = ['0'..'9']+ ('.' ['0'..'9']*)?;

  syntax Expression
  {
    Value() : double;
    missing Value = double.NaN;

    | Number
      {
        override Value = double.Parse(GetText(this.Number));
      }
    | Add    = Expression sm '+' sm Expression    precedence 10
      {
        override Value = Expression1.Value() + Expression2.Value();
      }
    | Sub    = Expression sm '-' sm Expression    precedence 10
      {
        override Value = Expression1.Value() - Expression2.Value();
      }
    | Mul    = Expression sm '*' sm Expression    precedence 20
      {
        override Value = Expression1.Value() * Expression2.Value();
      }
    | Div    = Expression sm '/' sm Expression    precedence 20
      {
        override Value = Expression1.Value() / Expression2.Value();
      }
    | Pow    = Expression sm '^' sm Expression    precedence 30 right-associative
      {
        override Value = System.Math.Pow(Expression1.Value(), Expression2.Value());
      }
    | Neg    = '-' Expression    precedence 100
      {
        override Value = -Expression.Value();
      }
    | Plus   = '+' Expression    precedence 100
      {
        override Value = Expression.Value();
      }
    | Rounds = '(' Expression ')'
      {
        override Value = Expression.Value();
      }
  }
}
