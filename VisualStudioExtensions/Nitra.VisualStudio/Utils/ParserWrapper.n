using Nitra;
using Nitra.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

using NLog;

namespace Nitra.VisualStudio
{
  internal class ParserWrapper
  {
    mutable _modules : list[string];
    _ruleDescriptor : RuleDescriptor;
    _parserHost     : ParserHost;
    _logger         : Logger = LogManager.GetLogger(typeof(this).FullName);

    public this(language : Language)
    {
      _modules = language.Modules;

      def assemblyScope = List();
      assemblyScope.Add(typeof(Whitespaces).Assembly); // add Nitra.Core reference

      def startGrammar = language.Grammar;
      def startRule    = language.StartRule;
      foreach (file in _modules)
      {
        def assembly =
          try Assembly.LoadFrom(file)
          catch
          { e =>
            _logger.FatalException($"Failed to load assembly '$file' for language '$language'", e);
            throw;
          }
        assemblyScope.Add(assembly);

        // TODO: FIXME: Могут существовать StaticDescriptor-ы с одинаковым полным именем.
        // В мапе нужно хранить их список, а не конекретные экзепляры.
        when (_ruleDescriptor == null)
          foreach (grammar when grammar.FullName == startGrammar in GrammarDescriptor.GetDescriptors(assembly))
            foreach (rule when rule.Name == startRule in grammar.Rules)
              _ruleDescriptor = rule;
      }
      when (_ruleDescriptor == null)
        _logger.Fatal($"Start rule '$startRule' not found for language '$language'");
      _parserHost = ParserHost(() => assemblyScope);
    }

    public Parse(sourceSnapshot : SourceSnapshot, token : CancellationToken) : ParseResult
    {
      assert(_ruleDescriptor != null);
      if (_ruleDescriptor is StartRuleDescriptor as rd)
        _parserHost.DoParsing(sourceSnapshot, rd, null, token);
      else
        assert(false);
    }
  }
}
