using Nitra.VisualStudio.Parsing;

using Nemerle;
using Nemerle.Late;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.VisualStudio.Solution;
using System;
using System.IO;
using System.Reflection;
using System.ComponentModel.Design;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

using NLog;

using EnvDTE;
using Microsoft.VisualStudio;
using Microsoft.VisualStudio.Data.Core;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Adornments;
using Microsoft.VisualStudio.Text.Editor;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;


namespace Nitra.VisualStudio
{
  [PackageRegistration(UseManagedResourcesOnly = true)]
  [Guid("EE439415-4A80-4181-B0A8-1233B1BBBABC")]
  [ProvideMenuResource(1000s, 1)]
  [ProvideAutoLoad(Constants.vsContextNoSolution)]
  [ProvideToolWindow(typeof(AstToolWindow), Style = Microsoft.VisualStudio.Shell.VsDockStyle.Tabbed, Window = "ADB6400B-FB19-4A2B-801E-D60BDF667494")]
  [InstalledProductRegistration(AssemblyConstants.Product, AssemblyConstants.ProductDetails, "1.0")]
  public class NitraPackage : Package, IVsInstalledProduct
  {
    public static mutable Instance : NitraPackage;

    // Cache the Menu Command Service since we will use it multiple times
    private mutable _menuService : OleMenuCommandService;
    private mutable _statusbar   : IVsStatusbar;
    private         _logger      : Logger = LogManager.GetLogger(typeof(this).FullName);
    private mutable _dteEvents   : DTEEvents;
    private mutable _solutionManager     : SolutionManager;

    public DataHostService : IVsDataHostService { get; private set; }

    protected override Initialize() : void
    {
      base.Initialize();
      _logger.Trace("Initialize");

      Instance = this;
      DataHostService = GetService(typeof(IVsDataHostService)) :> IVsDataHostService;

      if (SubscribeServiceEvents())
        _logger.Trace("SubscribeServiceEvents succeeded from Initialize method");
      else
      {
        _dteEvents = (GetService(typeof(DTE)) :> DTE).Events.DTEEvents;
        _dteEvents.OnStartupComplete += _ =>
        {
          if (SubscribeServiceEvents())
            _logger.Trace("SubscribeServiceEvents succeeded from OnStartupComplete event");
          else
            _logger.Trace("SubscribeServiceEvents failed");
        };
      }
      _menuService = GetService(typeof(IMenuCommandService)) :> OleMenuCommandService;
      when (_menuService != null && !this.Zombied)
      {
        // Each command is uniquely identified by a Guid/integer pair.
        def id = CommandID(GuidsList.GuidNitraToolWindowCmdSet, PkgCmdId.CmdidToolWindow);
        // Add the handler for the persisted window with selection tracking
        _menuService.AddCommand(OleMenuCommand(EventHandler(this.ShowPersistedWindow), id));
        
      }
      
      _solutionManager = SolutionManager(this);
      _solutionManager.Init();
    }

    private SubscribeServiceEvents() : bool
    {
      def config = GetServiceFromServiceModel.[INitraGlobalConfig]();
      when (config != null)
      {
        def isNitraSyntaxDefined = config.Languages.Where(lang => lang.Grammar == "NitraSyntax");
        AppDomain.CurrentDomain.SetData("NitraForVisualStudio", isNitraSyntaxDefined);
      }
      def errorProviderFactory = GetServiceFromServiceModel.[IErrorProviderFactory]();
      def documentFactoryService = GetServiceFromServiceModel.[ITextDocumentFactoryService]();
      if (config != null && errorProviderFactory != null && documentFactoryService != null)
      {
        documentFactoryService.TextDocumentCreated += fun(_, args)
        {
          def document = args.TextDocument;
          def buffer   = document.TextBuffer;
          def ext      = Path.GetExtension(document.FilePath);
          unless (string.IsNullOrEmpty(ext))
          when (config.GetLanguageByExtension(ext) is VSome(language))
          {
            _logger.Trace("Detected language {0} for document {1}", language.Name, document.FilePath);
            unless (buffer.ContentType.Equals(language.ContentType))
              buffer.ChangeContentType(language.ContentType, null);
            buffer.Properties.AddProperty(TextBufferProperties.Language, language);

            def errorListManager = ErrorListManager(errorProviderFactory, buffer);
            buffer.Properties.AddProperty(TextBufferProperties.ErrorListManager, errorListManager);
          }
        };
        documentFactoryService.TextDocumentDisposed += fun (_, args)
        {
          def buffer = args.TextDocument.TextBuffer;
          mutable parseAgent : ParseAgent;
          when (buffer.Properties.TryGetProperty(TextBufferProperties.ParseAgent, out parseAgent))
            parseAgent.Cancel();

          mutable errorListManager : ErrorListManager;
          when (buffer.Properties.TryGetProperty(TextBufferProperties.ErrorListManager, out errorListManager))
            errorListManager.Dispose();
        };
        true
      }
      else false
    }

    private ShowPersistedWindow(_ : object, _ : EventArgs) : void
    {
      // Get the 1 (index 0) and only instance of our tool window (if it does not already exist it will get created)
      def pane = this.FindToolWindow(typeof(AstToolWindow), 0, true);

      when (pane == null)
        throw COMException("Can not find tool window");

      def frame = pane.Frame :> IVsWindowFrame;
      when (frame == null)
        throw COMException("Can not get window frame");

      // Bring the tool window to the front and give it focus
      _ = ErrorHandler.ThrowOnFailure(frame.Show());
    }

    public SetStatusBarText(text : string) : void
    {
      when (_statusbar == null)
        _statusbar = GetService(typeof(SVsStatusbar)) :> IVsStatusbar;

      when (_statusbar != null)
        _ = _statusbar.SetText(text);
    }

    public ShowMessage(message : string, messageType : MessageType) : void
    {
      Utils.ShowMessage(this, message, messageType);
    }

    #region Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct  Members

    public IdBmpSplash(pIdBmp : out uint) : int
    {
      _ = pIdBmp;
      VSConstants.S_FALSE;
    }

    public IdIcoLogoForAboutbox(pIdIco : out uint) : int
    {
      _ = pIdIco;
      VSConstants.S_FALSE;
    }

    public OfficialName(pbstrName : out string) : int
    {
      pbstrName = "Nitra";
      VSConstants.S_OK;
    }

    public ProductDetails(pbstrProductDetails : out string) : int
    {
      pbstrProductDetails = AssemblyConstants.ProductDetails;
      VSConstants.S_OK;
    }

    public ProductID(pbstrPID : out string) : int
    {
      _ = pbstrPID;
      VSConstants.S_FALSE;
    }

    #endregion

    private GetServiceFromServiceModel[T]() : T
    {
      def componentModelServiceKey = Type.GetType("Microsoft.VisualStudio.ComponentModelHost.SComponentModel, Microsoft.VisualStudio.ComponentModelHost", true);
      def componentModel = GetService(componentModelServiceKey);
      def getServiceMethod = componentModel.GetType().GetMethod("GetService", array[]);
      getServiceMethod.MakeGenericMethod(array[typeof(T)]).Invoke(componentModel, array[]) :> T
    }
    
    protected override Dispose(_disposing : bool) : void
    {
      _solutionManager.Dispose();
    }
  }
}
