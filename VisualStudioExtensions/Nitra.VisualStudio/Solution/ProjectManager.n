using Microsoft.VisualStudio.Shell.Interop;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.VisualStudio.Solution
{
  [StructuralEquality]
  class ProjectManager : IDisposable
  {
    [EqualsIgnore] public Parent : SolutionManager { get; }
                   public Hierarchy : IVsHierarchy { get; }
    [EqualsIgnore] private mutable _listener : HierarchyListener;
    [EqualsIgnore] private mutable _filesMap : Hashtable[uint, FileManager];
    
    public this(hierarchy : IVsHierarchy, parent : SolutionManager, _isNew : bool)
    {
      Hierarchy = hierarchy;
      Parent = parent;
      _filesMap = Hashtable();
      def listener = HierarchyListener(hierarchy);
      listener.OnAddItem    += OnAddItem;
      listener.OnDeleteItem += OnDeleteItem;
      listener.StartListening(true);
      _listener = listener;
    }
    
    OnAddItem(_sender : object, args : HierarchyEventArgs) : void
    {
      def file = FileManager(args.ItemID, args.CanonicalName, this);
      _filesMap.Add(args.ItemID, file);
    }
    
    OnDeleteItem(_sender : object, args : HierarchyEventArgs) : void
    {
      def file = _filesMap[args.ItemID];
      assert2(file.CanonicalName == args.CanonicalName);
      file.Dispose();
      _filesMap.Remove(args.ItemID);
    }
    
    #region IDisposable Members

    public Dispose() : void
    {
      when (_filesMap != null)
      {
        foreach (file in _filesMap.Values)
          file.Dispose();

        _filesMap = null;
      }

      when (_listener != null)
      {
        _listener.StopListening();
        _listener = null;
      }
    }

    #endregion
  }
}
