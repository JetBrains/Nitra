using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.Text.Classification;
using Microsoft.VisualStudio.Text.Formatting;
using Microsoft.VisualStudio.Utilities;
using Microsoft.VisualStudio.Language.StandardClassification;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.ComponentModel.Composition;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Linq;
using System.Reflection;
using System.Windows.Media;
using System.Xml.Linq;

using NLog;

using GdiColor = System.Drawing.Color;

namespace Nitra.VisualStudio
{
  public interface INitraGlobalConfig
  {
    Languages : list[Language] { get; }
    Property[name : string] : string { get; }
    GetLanguageByExtension(extension : string) : ValueOption[Language];
    ApplySpanClassStyles(formatMap : IClassificationFormatMap, classificationTypeRegistryService : IClassificationTypeRegistryService, standardClassifications : IStandardClassificationService) : void;
  }

  [Export(typeof(INitraGlobalConfig))]
  public class NitraGlobalConfig : INitraGlobalConfig
  {
    _logger : Logger = LogManager.GetLogger(typeof(this).FullName);

    public Languages : list[Language] { get; }

    static _expandPropertyRegex         : Regex                       = Regex(@"\$(\w(\w|\d)*)", RegexOptions.Compiled);
    _properties                         : Hashtable[string, string]   = Hashtable();
    _languageMap                        : Hashtable[string, Language] = Hashtable();
    _fileExtensionRegistryService       : IFileExtensionRegistryService;
    _contentTypeRegistryService         : IContentTypeRegistryService;
    _spanClassStyleBuilders             : Hashtable[string, TextFormattingRunProperties -> TextFormattingRunProperties] = Hashtable();
    public ConfigPath                   : string { get; }

    [ImportingConstructor]
    public this(
      contentTypeRegistryService        : IContentTypeRegistryService,
      fileExtensionRegistryService      : IFileExtensionRegistryService
      )
    {
      #region read config

      def nitraConfigName = "NitraGlobalConfig.xml";
      def root         = Environment.GetEnvironmentVariable("NitraPath");

      _fileExtensionRegistryService      = fileExtensionRegistryService;
      _contentTypeRegistryService        = contentTypeRegistryService;

      when (root == null)
        Error(@"You must specify path to Nitra root directory in the 'NitraPath' environment variable. For example: NitraPath=d:\ParserGenerator");
      when (!Directory.Exists(root))
        Error(@"Path specified in the 'NitraPath' environment variable not exists. You must specify path to Nitra root directory in the 'NitraPath' environment variable. For example: NitraPath=d:\ParserGenerator");

      _properties["NitraPath"]        = root.TrimEnd('\\');
      _properties["Configuration"] = Constants.Configuration;

      ConfigPath   = Path.Combine(root, nitraConfigName);
      def config   =
        try XElement.Load(ConfigPath)
        catch
        { e =>
          _logger.FatalException($"Failed to read config file '$ConfigPath'", e);
          throw;
        }

      #endregion

      try
      {
        // Init Properties
        foreach (prop in config.Element("Properties")?.Elements() ?? [])
          _properties[prop.Name.LocalName] = prop.Value ?? "";


        #region Init Languages

        foreach (lang in config.Element("Languages")?.Elements("Language") ?? [])
        {
          def name           = lang.Attribute("Name").Value;
          def oldContentType = contentTypeRegistryService.GetContentType(name);
          def fileExtentions = lang.Attribute("FileExtensions")?.Value?.SplitToList(';').RevMap(s => s.Trim().ToLowerInvariant());

          when (oldContentType != null) // remove if exists
          {
            foreach (extension in List(fileExtensionRegistryService.GetExtensionsForContentType(oldContentType)))
              fileExtensionRegistryService.RemoveFileExtension(extension);

            contentTypeRegistryService.RemoveContentType(name);
          }

          def contentType = contentTypeRegistryService.AddContentType(name, ["code"]);

          def language =
            Language(name, contentType, fileExtentions,
              grammar   = lang.Attribute("Grammar").Value,
              startRule = lang.Attribute("StartRule").Value,
              modules   = (lang.Elements("Module") ?? []).Map(e => ExpandProperty(e.Value)));

          foreach (ext in fileExtentions)
          {
            _languageMap[ext] = language;
            try
              fileExtensionRegistryService.AddFileExtension(ext, contentType);
            catch
            { e is InvalidOperationException =>
              assert2(false, e.Message)
            }
          }

          Languages ::= language;
        }

        #endregion

        #region Read SpanClasses

        foreach (spanClass in config.Element("SpanClasses")?.Elements() ?? [])
        {
          def name = spanClass.Name.LocalName;
          def foreground = spanClass.Attribute("Foreground")?.Value;
          def background = spanClass.Attribute("Background")?.Value;
          _spanClassStyleBuilders[name] = fun(mutable properties)
          {
            when (foreground != null)
            {
              def color = GdiColor.FromName(foreground);
              properties = properties.SetForeground(Color.FromRgb(color.R, color.G, color.B));
            }
            when (background != null)
            {
              def color = GdiColor.FromName(background);
              properties = properties.SetBackground(Color.FromRgb(color.R, color.G, color.B));
            }
            properties
          };
        }

        #endregion
      }
      catch
      { e =>
        _logger.FatalException($"Failed to parse config file '$ConfigPath'", e);
        throw;
      }
    }

    public ApplySpanClassStyles(formatMap : IClassificationFormatMap, classificationTypeRegistryService : IClassificationTypeRegistryService, standardClassifications : IStandardClassificationService) : void
    {
      _logger.Trace("ApplySpanClassStyles");
      formatMap.BeginBatchUpdate();
      try
        foreach (kv with (name = kv.Key, builder = kv.Value) in _spanClassStyleBuilders)
        {
          def classificationType = classificationTypeRegistryService.GetClassificationType(name);
          when (classificationType == null)
          {
            def newClassificationType = classificationTypeRegistryService.CreateClassificationType(name, array[standardClassifications.FormalLanguage]);
            _logger.Debug($"Classification type '$name' created");
            def newProperties = builder(formatMap.GetTextProperties(newClassificationType));
            formatMap.SetTextProperties(newClassificationType, newProperties);
          }
        }
      catch
      { e =>
        _logger.TraceException("ApplySpanClassStyles failed", e);
        throw;
      }
      finally formatMap.EndBatchUpdate();
    }

    public GetLanguageByExtension(extension : string) : ValueOption[Language]
    {
      mutable language;

      if (_languageMap.TryGetValue(extension.ToLowerInvariant(), out language))
        VSome(language)
      else
        VNone()
    }

    public Property[name : string] : string { get { ExpandProperty(_properties[name]) } }

    ExpandProperty(value : string) : string
    {
      mutable currentProperty;
      def getPropertyName(m)
      {
        currentProperty = m.Groups[1].Value;
        currentProperty
      }
      try
      {
        if (value.Contains("$"))
          ExpandProperty(_expandPropertyRegex.Replace(value, m => _properties[getPropertyName(m)]));
        else
          value
      }
      catch
      {
        | _ is KeyNotFoundException => Error($"Configuration loading failed.\r\nProperty '$currentProperty' not defined in '$ConfigPath'."); throw;
      }
    }

    Error(msg : string) : void
    {
      NitraPackage.Instance.ShowMessage(msg, MessageType.Error);
      throw ApplicationException(msg);
    }
  }
}
