using Nitra;
using Nitra.Internal;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Diff;
using Nemerle.Text;
using Nemerle.Utility;

using NLog;

using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Classification;

namespace Nitra.VisualStudio.Coloring
{
  internal sealed class ClassificationCache
  {
    private         _logger       : Logger = LogManager.GetLogger(typeof(this).FullName);
    private         _linesToCache : int;
    private mutable _cacheBounds  : NSpan;
    private         _cacheIndex   : array[int * int]; // array of tuple (StartPos, Index in _spanCache)
    private mutable _cache        : array[SpanInfo];
    private mutable _cacheMissDetected : bool;

    public this(linesToCache : int)
      requires linesToCache > 0
    {
      _linesToCache = linesToCache;
      _cacheBounds  = NSpan();
      _cacheIndex   = array(10);
      _cache        = array(0);
    }

    public Predict([NotNull] snapshot : ITextSnapshot, [NotNull] changes : INormalizedTextChangeCollection) : void
    {
      try PredictImpl(snapshot, changes)
      catch
      { e =>
        _logger.ErrorException("Predict failed", e);
        Reset();
      }
    }

    public Update([NotNull] parseResult : ParseResult) : UpdateResult
    {
      try UpdateImpl(parseResult)
      catch
      { e =>
        _logger.ErrorException("Update failed", e);
        Reset();
        ClassificationCache.UpdateResult.All()
      }
    }

    public GetSpans(span : SnapshotSpan, parseResult : ParseResult) : array[SpanInfo]
    {
      try GetSpansImpl(span, parseResult)
      catch
      { e =>
        _logger.ErrorException("GetSpans failed", e);
        Reset();
        array(0)
      }
    }

    private PredictImpl(snapshot : ITextSnapshot, changes : INormalizedTextChangeCollection) : void
    {
      def predictedCache = List(_cache.Length);
      def addSpan(startPos, endPos, origSpan)
      {
        def token = NSpan(startPos, endPos);
        def span = SpanInfo(token, origSpan.SpanClass);
        predictedCache.Add(span)
      }
      def loopOverChanges(changeIndex, spanIndex, currentDelta, spanPos) : void
      {
        if (changeIndex < changes.Count)
        {
          def change = changes[changeIndex];
          if (change.OldEnd <= spanPos)
            loopOverChanges(changeIndex + 1, spanIndex, currentDelta + change.Delta, spanPos);
          else
            loopOverCache(changeIndex, spanIndex, currentDelta, change);
        }
        else
          loopOverCacheTail(spanIndex, currentDelta);
      }
      and loopOverCache(changeIndex, spanIndex, currentDelta, change) : void
      {
        when (spanIndex < _cache.Length)
        {
          def span = _cache[spanIndex];
          def loc = span.Span;
          match (Utils.GetSpanArrangement(change.OldPosition, change.OldEnd, loc.StartPos, loc.EndPos))
          {
            | Equal =>
              when (change.NewLength > 0)
                addSpan(change.NewPosition, change.NewEnd, span);
              loopOverChanges(changeIndex + 1, spanIndex, currentDelta + change.Delta, loc.StartPos);

            | Preced =>
              loopOverChanges(changeIndex + 1, spanIndex, currentDelta + change.Delta, loc.StartPos);

            | Succed =>
              addSpan(loc.StartPos + currentDelta, loc.EndPos + currentDelta, span);
              loopOverCache(changeIndex, spanIndex + 1, currentDelta, change);

            | Wrap =>
              when (change.NewLength > change.OldLength)
                addSpan(loc.StartPos + currentDelta, loc.EndPos + currentDelta, span);
              loopOverCache(changeIndex, spanIndex + 1, currentDelta, change);

            | Include =>
              //TODO: support multiple changes in single span
              addSpan(loc.StartPos + currentDelta, loc.EndPos + currentDelta + change.Delta, span);
              loopOverChanges(changeIndex + 1, spanIndex + 1, currentDelta + change.Delta, loc.StartPos);

            | LeftOverlap =>
              addSpan(change.NewEnd, loc.EndPos + currentDelta + change.Delta, span);
              loopOverCache(changeIndex, spanIndex + 1, currentDelta, change);

            | RightOverlap =>
              addSpan(loc.StartPos + currentDelta, change.NewPosition, span);
              loopOverCache(changeIndex, spanIndex + 1, currentDelta, change);
          }
        }
      }
      and loopOverCacheTail(spanIndex, currentDelta)
      {
        when (spanIndex < _cache.Length)
        {
          def span = _cache[spanIndex];
          def loc = span.Span;
          addSpan(loc.StartPos + currentDelta, loc.EndPos + currentDelta, span);
          loopOverCacheTail(spanIndex + 1, currentDelta);
        }
      }
      when (_cache.Length > 0)
        loopOverChanges(0, 0, 0, _cache[0].Span.StartPos);
      _cache = predictedCache.ToArray();

      def loopCacheStart(startPos, index, currentDelta) : int
      {
        if (index < changes.Count)
        {
          def change = changes[index];
          if (change.OldEnd <= startPos)
            loopCacheStart(startPos, index + 1, currentDelta + change.Delta)
          else if (change.OldPosition < startPos && startPos < change.OldEnd)
            if (change.Delta < 0)
              change.NewPosition
            else
              startPos + currentDelta
          else
            startPos + currentDelta
        }
        else
          startPos + currentDelta
      }
      _cacheBounds = GetCacheBounds(snapshot, loopCacheStart(_cacheBounds.StartPos, 0, 0));

      UpdateCacheIndex();
    }

    internal variant UpdateResult
    {
      | Nothing
      | All
      | Ranges { ranges : array[NSpan] }
    }

    private UpdateImpl(parseResult : ParseResult) : UpdateResult
    {
      when (_cacheMissDetected)
      {
        _cacheMissDetected = false;
        _cacheBounds = NSpan();
        return UpdateResult.All()
      }

      def newCache = LoadCache(parseResult);
      def diffItems = _cache.Diff(newCache, (a, b) => a.Span == b.Span && a.SpanClass == b.SpanClass : object);

      // no changes
      when (diffItems.Length == 0)
        return UpdateResult.Nothing();

      // changes on the edge of cache
      when (diffItems[0].Index == 0 || diffItems[diffItems.Length - 1].Index == _cache.Length - 1)
      {
        _cacheBounds = NSpan();
        return UpdateResult.All()
      }

      // other changes
      def spansToUpdate = List();
      foreach (diffItem in diffItems)
      {
        mutable startPos;
        mutable endPos;

        def initBounds(spanInfo)
        {
          startPos = spanInfo.Span.StartPos;
          endPos   = spanInfo.Span.EndPos;
        }

        def updateBounds(spanInfo)
        {
          startPos = Math.Min(startPos, spanInfo.Span.StartPos);
          endPos   = Math.Max(endPos,   spanInfo.Span.EndPos);
        }

        if (diffItem.Deleted == 0)
        {
          initBounds(diffItem.Inserted[0]);
          for(mutable i = 1; i < diffItem.Inserted.Length; ++i)
            updateBounds(diffItem.Inserted[i]);
        }
        else
        {
          initBounds(_cache[diffItem.Index]);
          for(mutable i = 0; i < diffItem.Deleted; ++i)
            updateBounds(_cache[diffItem.Index + i]);
          foreach (x in diffItem.Inserted)
            updateBounds(x);
        }
        spansToUpdate.Add(NSpan(startPos, endPos));
      }
      _cache = newCache;
      UpdateCacheIndex();
      UpdateResult.Ranges(spansToUpdate.ToArray())
    }

    private GetSpansImpl(span : SnapshotSpan, parseResult : ParseResult) : array[SpanInfo]
    {
      def startPos = span.Start.Position;
      def endPos   = span.End.Position;

      if (_cacheBounds.StartPos <= startPos && endPos <= _cacheBounds.EndPos)
        SearchCache(startPos, endPos)
      else if (parseResult != null)
      {
        _cacheBounds = GetCacheBounds(span.Snapshot, span.Start);
        _cache = LoadCache(parseResult);
        UpdateCacheIndex();
        SearchCache(startPos, endPos)
      }
      else
      {
        _cacheMissDetected = true;
        array(0)
      }
    }

    private SearchCache(startPos : int, endPos : int) : array[SpanInfo]
    {
      mutable index = FindCacheIndex(startPos);
      while (index < _cache.Length && _cache[index].Span.EndPos < startPos)
        ++index;
      def startIndex = index;
      while (index < _cache.Length && _cache[index].Span.StartPos < endPos)
        ++index;

      def count = index - startIndex;
      def result = array(count);
      when (count > 0)
        Array.Copy(_cache, startIndex, result, 0, count);
      result
    }

    private FindCacheIndex(pos : int) : int
    {
      mutable index = _cacheIndex[0][1];
      for(mutable i = 1; i < _cacheIndex.Length; ++i)
      {
        def (startPos, nextIndex) = _cacheIndex[i];
        when (pos <= startPos)
          return index;
        index = nextIndex;
      }
      _cacheIndex.Length
    }

    private LoadCache(parseResult : ParseResult) : array[SpanInfo]
    {
      def newCache = List(_cache.Length);
      parseResult.GetSpans(_cacheBounds.StartPos, _cacheBounds.EndPos, newCache);
      newCache.Sort(
        fun (a : SpanInfo, b : SpanInfo)
        {
          def startPos1 = a.Span.StartPos;
          def startPos2 = b.Span.StartPos;
          if (startPos1 < startPos2) -1
          else if (startPos1 > startPos2) +1
          else
          {
            def endPos1 = a.Span.EndPos;
            def endPos2 = b.Span.EndPos;
            if (endPos1 < endPos2) -1
            else if (endPos1 > endPos2) +1
            else 0
          }
        });
      newCache.ToArray()
    }

    private UpdateCacheIndex() : void
    {
      if(_cache.Length > 0)
        for(mutable i = 0; i < _cacheIndex.Length; ++i)
        {
          def index = _cache.Length * i / _cacheIndex.Length;
          _cacheIndex[i] = (_cache[index].Span.StartPos, index);
        }
      else
        _cacheIndex[0] = (0, 0);
    }

    private GetCacheBounds(snapshot : ITextSnapshot, position : int) : NSpan
    {
      def (startLineNumber, _) = snapshot.GetLineAndColumn(position);
      def endLineNumber        = Math.Min(startLineNumber + _linesToCache, snapshot.LineCount) - 1;
      def startLine            = snapshot.GetLineFromLineNumber(startLineNumber);
      def endLine              = snapshot.GetLineFromLineNumber(endLineNumber);
      NSpan(startLine.Start.Position, endLine.End.Position)
    }

    private Reset() : void
    {
      _cacheBounds  = NSpan();
      _cache        = array(0);
    }
  }
}
