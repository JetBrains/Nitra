using Nitra.VisualStudio.Parsing;

using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel.Composition;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Adornments;
using Microsoft.VisualStudio.Text.Editor;
using Microsoft.VisualStudio.Text.Tagging;
using Microsoft.VisualStudio.Utilities;

namespace Nitra.VisualStudio
{
  [Export(typeof(IViewTaggerProvider) )]
  [ContentType("text")]
  [TagType(typeof(TextMarkerTag))]
  internal sealed class BraceMatchingTaggerProvider : IViewTaggerProvider
  {
    public CreateTagger[T](textView : ITextView, buffer : ITextBuffer) : ITagger[T] where T : ITag
    {
      mutable parseAgent;
      mutable tagger;
      if (textView == null || textView.TextBuffer != buffer : object)
        null
      else if (buffer.Properties.TryGetProperty(TextBufferProperties.BraceMatchingTagger, out tagger))
        tagger
      else if (Utils.TryGetOrCreateParseAgent(buffer, out parseAgent))
      {
        tagger = BraceMatchingTagger(parseAgent.Language, textView, buffer) :> ITagger[T];
        buffer.Properties.AddProperty(TextBufferProperties.BraceMatchingTagger, tagger);
        tagger
      }
      else null
    }
  }
}
