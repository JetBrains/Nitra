using Nitra.VisualStudio.Parsing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Adornments;
using Microsoft.VisualStudio.Text.Editor;
using Microsoft.VisualStudio.Text.Tagging;
using Microsoft.VisualStudio.Utilities;

namespace Nitra.VisualStudio.Outlining
{
  [Export(typeof(ITaggerProvider))]
  [ContentType("text")]
  [TagType(typeof(IOutliningRegionTag))]
  internal sealed class OutliningTaggerProvider : ITaggerProvider
  {
    public CreateTagger[T](buffer : ITextBuffer) : ITagger[T]
      where T : ITag
    {
      mutable parseAgent;
      mutable tagger;
      if (buffer.Properties.TryGetProperty(TextBufferProperties.OutliningTagger, out tagger))
        tagger
      else if (Utils.TryGetOrCreateParseAgent(buffer, out parseAgent))
      {
        tagger = OutliningTagger(parseAgent, buffer) :> ITagger[T];
        buffer.Properties.AddProperty(TextBufferProperties.OutliningTagger, tagger);
        tagger
      }
      else null
    }
  }
}
