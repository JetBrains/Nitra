using CSharp.TopDeclarationsParseTree;
using CSharp.StatementsParseTree;
using CSharp.ExpressionsParseTree;

using Microsoft.VisualBasic.FileIO;

using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.LanguageCompiler.Utils;
using Nitra.ProjectSystem;

using System;
using System.Console;
using System.Diagnostics;
using System.Windows.Media;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Nitra.LanguageCompiler
{
  module Program
  {
    public VsPackageTemplatePath : string = TemplatePath(@"Templates\XXLanguageXXVsPackage");

    Main() : void
    {
      Threading.Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
      Start();
      //_ = ReadLine();
    }

    Start() : void
    {
      def config = CommandPromptReader();

      unless (config.Success)
        return;

      //assert2(false);

      def vars = GetVars(config);

      foreach ((var, value) in vars)
        WriteLine($"$var = $value");

      CopyStandardExternalDependencies(config);
      CopyBinaries(config);
      CopyGrammars(config);
      GenerateFileAndContentTypeDefinitions(config);
      GenerateSpanClasses(config);
      GenerateProject(config, vars);

      WriteLine("Output Path: " + config.OutputPath);
    }

    MakeXXFilesXXVar(config : CommandPromptReader) : string * string
    {
      def binPath = GetExternalDependenciesOutputPath(config);
      def files = List();

      foreach (file in Enumerable.Concat(config.AssemblyReferences, config.Binaries))
      {
        def path = Path.Combine(binPath, Path.GetFileName(file));
        def pathWithWildcards = Path.ChangeExtension(path, ".???");
        files.Add($<#    <file src="$(pathWithWildcards)" target="lib\net45\" />#>);
      }
      
      def filesContent  = $<#..$(files; "\r\n")#>;
      ("XXFilesXX", filesContent)
    }
    
    GetFilesRecursively(dir: string): Seq[string]
    {
        foreach (file in Directory.GetFiles(dir))
            yield file;

        foreach (file in Directory.GetDirectories(dir).SelectMany(GetFilesRecursively))
            yield file;
    }
    
    CopyStandardExternalDependencies(config: CommandPromptReader) : void
    {
            
      def copyDir(source, destination)
      {
        
        _ = Directory.CreateDirectory(destination);

        foreach (sourcePath in GetFilesRecursively(source))
        {
          def destPath = sourcePath.Replace(source, destination);
          def destDir = Path.GetDirectoryName(destPath);
          _ = Directory.CreateDirectory(destDir);
          File.Copy(sourcePath, destPath, true);
          WriteLine($"$sourcePath => $destPath done.")
        }
      }
      
      def rootPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
      WriteLine($"Target ext deps = $(GetExternalDependenciesOutputPath(config)), source root = $rootPath");
      copyDir(Path.Combine(rootPath, @"ExternalDependencies"), GetExternalDependenciesOutputPath(config));
      copyDir(Path.Combine(rootPath, @"ExternalTools"), Path.Combine(config.OutputPath, config.ProjectName, "ExternalTools"));
    }
    
    CopyBinaries(config : CommandPromptReader) : void
    {
      ExternalDependencies(config, config.Binaries);
    }

    CopyGrammars(config : CommandPromptReader) : void
    {
      ExternalDependencies(config, config.AssemblyReferences);
    }

    GetExternalDependenciesOutputPath(config : CommandPromptReader) : string
    {
      def dir = Path.Combine(config.OutputPath, config.ProjectName, "ExternalDependencies");
      _ = Directory.CreateDirectory(dir);
      dir
    }
    
    ExternalDependencies(config : CommandPromptReader, paths : list[string]) : void
    {
      def binPath = GetExternalDependenciesOutputPath(config);
      
      unless (Directory.Exists(binPath))
        _ = Directory.CreateDirectory(binPath);
        
      foreach (path1 in paths)
      {
        def path = Path.GetFullPath(path1);
        if (Directory.Exists(path))
          FileSystem.CopyDirectory(path, binPath, UIOption.OnlyErrorDialogs);
        else if (File.Exists(path))
        {
          def fileName = Path.GetFileName(path);
          def outPath = Path.Combine(binPath, fileName);
          File.Copy(path, outPath, overwrite=true);
          def pdbPath = Path.ChangeExtension(path, ".pdb");
          when (File.Exists(pdbPath))
          {
            def pdbFileName = Path.GetFileName(pdbPath);
            def pdbOutPath = Path.Combine(binPath, pdbFileName);
            File.Copy(pdbPath, pdbOutPath, overwrite=true);
          }
        }
        else 
          config.CompilerMessages.Error(Location.Default, "File or directory '" + path + "' does not exist.");
      }
    }

    GenerateFileAndContentTypeDefinitions(config : CommandPromptReader) : void
    {
      def prjName        = config.ProjectName;
      def vars           = DefaultVars(config);
      def fileExtensions = List();

      foreach (ext in config.Language.FileExtensions)
      {
        def extName = ExtensionToName(ext);
        ExpandTemplate(@"Templates\FileAndContentTypeDefinitions\FileExtensionToContentTypeDefinition.cs",  $@"$prjName\FileAndContentTypeDefinitions\$(extName)FileExtensionToContentTypeDefinition.Generated.cs", 
          ("XXFileExtensionNameXX", extName) ::
          ("XXFileExtensionXX",     ext) ::
          vars,
          config);

        fileExtensions.Add(ext);
      }

      def fileExtensionsReplacement = (<#"XXFileExtensionsXX"#>, $<#..$(fileExtensions; ", "; e => "\"" + e + "\"")#>);

      ExpandTemplate(@"Templates\FileAndContentTypeDefinitions\NitraContentTypeDefinition.cs",  $@"$prjName\FileAndContentTypeDefinitions\NitraContentTypeDefinition.Generated.cs", 
        fileExtensionsReplacement :: vars,
        config);
    }

    public DefaultVars(config : CommandPromptReader) : list[string * string]
    {
      def lang = config.Language;

      [
        ("XXNamespaceXX",                config.DefaultNamespace),
        ("XXLanguageXX",                 lang.Name),
        ("XXCompanyXX",                  lang.Company),
        ("XXCompanyIdXX",                lang.Company.Replace("   ", "").Replace("  ", "").Replace(" ", "")),
        ("XXDescriptionXX",              lang.Description),
        ("XXAuthorsXX",                  lang.Authors),
        ("XXCopyrightXX",                lang.Copyright),
        ("XXLicenseUrlXX",               lang.LicenseUrl?.ToString()),
        ("XXRequireLicenseAcceptanceXX", lang.RequireLicenseAcceptance.ToString().ToLower()),
        ("XXLanguageInstanceXX",         "global::" + lang.GetType().FullName + ".Instance"),
        MakeXXFilesXXVar(config),
      ]
    }

    public GetVars(config : CommandPromptReader) : list[string * string]
    {
      def vars              = DefaultVars(config);
      def guidsFileName     = "Guids.cs";
      def templateGuidsPath = Path.Combine(VsPackageTemplatePath, guidsFileName);
      def prjName           = config.ProjectName;
      def guidsPath         = Path.Combine(config.OutputPath, prjName, guidsFileName);
      def templateGuids     = ReadGuids(templateGuidsPath);
      def guids             = if (config.NewGuids || !File.Exists(guidsPath)) Hashtable() else ReadGuids(guidsPath);
      mutable replaces = vars;
      //def newVersion         = typeof(NSpan).Assembly.GetName().Version.ToString();
      
      //assert2(false);
      
      // 
      //def prjPath       = Path.Combine(VsPackageTemplatePath, "XXLanguageXXVsPackage.csproj");
      //def prjContent    = File.ReadAllText(prjPath);
      //def versionRegex1 = Text.RegularExpressions.Regex(<#\\Nitra.VisualStudio\.(\d+\.\d+\.\d+\.\d+)\\#>);
      //def result1       = versionRegex1.Match(prjContent);
      
      //if (result1.Success)
      //{
      //  def oldVersion         = result1.Groups[1].Value;
      //  replaces ::= (oldVersion, newVersion);
      //}
      //else
      //{
      //  def configSnapshot = SourceSnapshot("", prjPath);
      //  def loc = Location(configSnapshot, 0);
      //  config.CompilerMessages.Error(loc, <#Version for Nitra.VisualStudio in 'XXLanguageXXVsPackage.csproj' not found.#>);
      //}

      //def pkgConfigPath2 = Path.Combine(VsPackageTemplatePath, "packages.config");
      //def pkgConfig2     = File.ReadAllText(pkgConfigPath2);
      //def versionRegex2  = Text.RegularExpressions.Regex(<#.+id="Nitra.Runtime"\s+version="([^"]+)"#>);
      //def result2        = versionRegex2.Match(pkgConfig2);
      
      //if (result2.Success)
      //{
      //  def oldVersion         = result2.Groups[1].Value;
      //  def newVersion         = typeof(NSpan).Assembly.GetName().Version.ToString();
      //  replaces ::= (oldVersion, newVersion);
      //}
      //else
      //{
      //  def configSnapshot = SourceSnapshot("", pkgConfigPath2);
      //  def loc = Location(configSnapshot, 0);
      //  config.CompilerMessages.Error(loc, <#Version for Nitra.Runtime in 'packages.config' not found.#>);
      //}

      //def versionRegex3  = Text.RegularExpressions.Regex(<#.+id="Nemerle"\s+version="([^"]+)"#>);
      //def result3        = versionRegex3.Match(pkgConfig2);

      //if (result3.Success)
      //{
      //  def oldVersion         = result3.Groups[1].Value;
      //  def nemerleVersion     = typeof(option[_]).Assembly.GetName().Version;
      //  def newVersion         = Version(nemerleVersion.Major, nemerleVersion.Minor, nemerleVersion.Revision, 0).ToString();
      //  replaces ::= (oldVersion, newVersion);
      //}
      //else
      //{
      //  def configSnapshot = SourceSnapshot("", pkgConfigPath2);
      //  def loc = Location(configSnapshot, 0);
      //  config.CompilerMessages.Error(loc, <#Version for Nemerle in 'packages.config' not found.#>);
      //}

      foreach ((templateConstName, templateGuid) in templateGuids.KeyValuePairs)
      {
        def constName = ExpandTemplateText(templateConstName, vars);
        mutable guid;
        if (guids.TryGetValue(constName, out guid))
          unless (string.Equals(templateGuid, guid, StringComparison.InvariantCulture))
            replaces ::= (templateGuid, guid);
        else
          replaces ::= (templateGuid, Guid.NewGuid().ToString("D").ToUpperInvariant());
      }

      replaces
    }

    internal sealed class CSharpCollectConstVisitor : ParseTreeVisitor
    {
      public Result : Hashtable[string, string] = Hashtable();
      //private mutable _inStringGuidConst : bool;
      //private mutable _name : string;

      public override Visit(ast : ParseTree) : ParseTree
      {
        //| <# TypeMemberDeclaration: $Attributes(_) $Modifiers(_)
        //  const string $Name(name) = $ConstantExpression(str is Expression.RegularStringLiteral); #> =>
        when (ast is TypeMemberDeclaration.Constant as constant)
        when (constant.AnyType.ToString() == "string")
        when (constant.ConstantDeclaratorsData is ([declarator], _))
        when (declarator.ConstantExpression is Expression.RegularStringLiteral as str)
        {
          def text = str.RegularStringLiteral.RegularStringLiteralParts.GetText();
          Result[declarator.Name.ToString()] = text;
        }
        ast.Apply(this);
      }
    }

    public ReadGuids(sourcePath : string) : Hashtable[string, string]
    {
      def text         = File.ReadAllText(sourcePath);
      def source       = SourceSnapshot(text, sourcePath);
      def parseResult  = CSharp.Main.CompilationUnit.Parse(source);
      def parseTree    = CSharp.MainParseTree.CompilationUnit.CreateParseTree(parseResult);
      def visitor      = CSharpCollectConstVisitor();

      _ = parseTree.Apply(visitor);

      visitor.Result
    }

    GenerateProject(config : CommandPromptReader, vars : Seq[string * string]) : void
    {
      def prjName = config.ProjectName;
      ExpandTemplates(VsPackageTemplatePath,  Path.Combine(config.OutputPath, prjName), vars, config);

      def snkPath = Path.Combine(config.OutputPath, prjName, "Key.snk");
      unless (File.Exists(snkPath))
        CreateSnk(snkPath);
    }

    GenerateSpanClasses(config : CommandPromptReader) : void
    {
      def prjName = config.ProjectName;
      foreach (spanClass in config.Language.GetSpanClasses())
      {
        def color = ColorFromArgb(spanClass.Style.ForegroundColor);
        ExpandTemplate(@"Templates\Highlighting\ClassificationDefinition.cs",  $@"$prjName\Highlighting\$(spanClass.Name)ClassificationDefinition.Generated.cs", 
          [("XXNamespaceXX",     config.DefaultNamespace),
           ("XXDisplay nameXX",  SpanClass.GetDisplayNameForIde(config.Language, spanClass)),
           ("XXSpanClassNameXX", SpanClass.GetNameForIde(config.Language, spanClass)),
           ("Colors.Red",        ColorToString(color, "Colors.")),
           ("RedColor",          ColorToString(color)),
           ],
          config);
      }
    }
 
    ExpandTemplates(templateRootPath : string, outputPath : string, vars : Seq[string * string], config : CommandPromptReader) : void
    {
      unless (Directory.Exists(outputPath))
      {
        _ = Directory.CreateDirectory(outputPath);
        assert(true);
      }

      foreach (file in Directory.EnumerateFiles(templateRootPath))
      {
        def fileName = Path.GetFileName(file);
        def outFile = Path.Combine(outputPath, ExpandTemplateText(fileName, vars));
        ExpandTemplate(file, outFile, vars, config);
      }

      foreach (dir in Directory.EnumerateDirectories(templateRootPath))
      {
        def dirName = Path.GetFileName(dir);
        when (dirName == "packages")
          continue;
        def outDir = Path.Combine(outputPath, ExpandTemplateText(dirName, vars));
        ExpandTemplates(Path.Combine(templateRootPath, dirName), outDir, vars, config);
      }
    }

    ExpandTemplateText(templateText : string, vars : Seq[string * string]) : string
    {
      def templateBuilder = StringBuilder(templateText, templateText.Length + templateText.Length / 10);

      foreach ((name, value) in vars)
        _ = templateBuilder.Replace(name, value);

      def result = templateBuilder.ToString();
      result
    }

    ExpandTemplate(templatePath : string, outputPath : string, vars : Seq[string * string], config : CommandPromptReader) : void
    {
      def templatePath = TemplatePath(templatePath);
      def outputPath2  = Path.GetFullPath(Path.Combine(config.OutputPath, outputPath));
      def outputDir    = Path.GetDirectoryName(outputPath2);

      unless (Directory.Exists(outputDir))
        _ = Directory.CreateDirectory(outputDir);

      when (IsBinary(templatePath))
      {
        File.Copy(templatePath, outputPath2, overwrite=true);
        return;
      }

      def encoding = if (IsUtf8File(templatePath)) Encoding.UTF8 else Encoding.ASCII;
      def templateText    = File.ReadAllText(templatePath, encoding);
      def result          = ExpandTemplateText(templateText, vars);

      File.WriteAllText(outputPath2, result, encoding);

      def index = result.IndexOf("XX");
      when (index >= 0)
      {
        def loc = Location(SourceSnapshot(File.ReadAllText(templatePath), templatePath), index, index + 2);
        config.CompilerMessages.Error(loc, "The template contains unreplaced placeholders.");
      }
    }
  }
}
